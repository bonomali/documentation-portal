{"version":3,"file":"ngn.min.js","sources":["../../../src/exception.js","../../../src/core.js","../../../src/emitter/core.js","../../../src/emitter/BrowserEmitter.js","../../../src/utility/Lexer.js","../../../src/utility/Tokenizer.js","../../../src/utility/Set.js","../../../src/net/utility.js","../../../src/net/Request.js","../../../src/net/Network.js","../../../src/net/core.js","../../../src/net/Resource.js","../../../src/data/DiffEngine.js","../../../src/data/Utility.js","../../../src/data/index/BTree.js","../../../src/data/rule/Rule.js","../../../src/data/field/Field.js","../../../src/data/Store.js","../../../src/data/core.js","../../../src/data/TransactionLog.js","../../../src/data/rule/RangeRule.js","../../../src/data/field/VirtualField.js","../../../src/data/field/Relationship.js","../../../src/data/field/FieldMap.js","../../../src/data/Model.js","../../../src/data/index/Index.js","../../../src/data/schema/JSON.js","../../../src/main.js","../../../src/queue/task.js","../../../src/queue/queue.js"],"sourcesContent":["export default class CustomException extends Error { // eslint-disable-line\r\n  constructor (config) {\r\n    super()\r\n\r\n    Object.defineProperty(this, 'frameFilter', NGN.privateconst((frame) => {\r\n      return NGN.nodelike\r\n        ? frame.getFileName() !== __filename && frame.getFileName()\r\n        : frame.getFileName()\r\n    }))\r\n\r\n    config = config || {}\r\n    config = typeof config === 'string' ? { message: config } : config\r\n    config.custom = config.custom || {}\r\n\r\n    let me = this\r\n\r\n    this.name = config.name || 'NgnError'\r\n    this.type = config.type || 'TypeError'\r\n    this.severity = config.severity || 'minor'\r\n    this.message = config.message || 'Unknown Error'\r\n    this.category = config.category || 'operational' // Alternative is \"programmer\"\r\n\r\n    // Cleanup name\r\n    this.name = this.name.replace(/[^a-zA-Z0-9_]/gi, '')\r\n\r\n    // Add any custom properties\r\n    for (let attr in config.custom) {\r\n      if (config.custom.hasOwnProperty(attr)) {\r\n        this[attr] = config.custom[attr]\r\n      }\r\n    }\r\n\r\n    this.hasOwnProperty('custom') && delete this.custom\r\n\r\n    if (NGN.nodelike || Error.prepareStackTrace) {\r\n      // Capture the stack trace on a new error so the detail can be saved as a structured trace.\r\n      Error.prepareStackTrace = function (_, stack) { return stack }\r\n\r\n      let _err = new Error()\r\n\r\n      Error.captureStackTrace(_err, this)\r\n\r\n      this.rawstack = _err.stack\r\n\r\n      Error.prepareStackTrace = function (err, stack) { // eslint-disable-line handle-callback-err\r\n        me.cause && console.warn(me.cause)\r\n        me.help && console.info(me.help)\r\n\r\n        return `${me.name}: ${me.message}\\n` + stack.filter(me.frameFilter).map((el) => {\r\n          return `    at ${el}`\r\n        }).join('\\n')\r\n      }\r\n\r\n      // Enable stack trace\r\n      Error.captureStackTrace(this)\r\n    }\r\n  }\r\n\r\n  /*\r\n   * @property {Array} trace\r\n   * The structured data of the stacktrace. Each array element is a JSON object corresponding to\r\n   * the full stack trace:\r\n   *\r\n   * ```js\r\n   * {\r\n   *   filename: String,\r\n   *   line: Number,\r\n   *   column: Number,\r\n   *   functionname: String,\r\n   *   native: Boolean,\r\n   *   eval: Boolean,\r\n   *   type: String\r\n   * }\r\n   * ```\r\n   * @readonly\r\n   */\r\n  get trace () {\r\n    return this.rawstack.filter(this.frameFilter).map((frame) => {\r\n      return {\r\n        filename: frame.getFileName(),\r\n        line: frame.getLineNumber(),\r\n        column: frame.getColumnNumber(),\r\n        functionname: frame.getFunctionName(),\r\n        native: frame.isNative(),\r\n        eval: frame.isEval(),\r\n        type: frame.getTypeName()\r\n      }\r\n    })\r\n  }\r\n}\r\n","import CustomException from './exception'\r\n\r\n/**\r\n * @namespace NGN\r\n */\r\nlet NGN = Object.defineProperties({\r\n  // Establish a globally recognized namespace for browser or node-like environment.\r\n  get global () {\r\n    try { return window } catch (e) { return global }\r\n  }\r\n}, {\r\n  /**\r\n  * @method define\r\n  * Create an object definition for a property.\r\n  * For example:\r\n  *\r\n  * ```\r\n  * Object.defineProperty('attr', NGN.define(true, false, true, 'value'))\r\n  *\r\n  * // The snippet above is the same as:\r\n  * Object.defineProperty(this, 'attr', {\r\n  *  enumberable: true,\r\n  *  writable: false,\r\n  *  configurable: true,\r\n  *  value: 'value'\r\n  * })\r\n  * ```\r\n  * @param  {boolean} enumerable\r\n  * Determines if the attribute is considered an accessible part of the object.\r\n  * Making an attribute enumerable will make it show up as a key in an object,\r\n  * which can be iterated over (ex: `Object.keys()`). A non-enumerable asset is\r\n  * treated as a private attribute.\r\n  * @param  {boolean} writable\r\n  * Determines whether the value can be changed.\r\n  * @param  {boolean} configurable\r\n  * Determines whether the attribute can be removed from the object.\r\n  * @param  {any} value\r\n  * The actual value of the attribute.\r\n  * @private\r\n  */\r\n  define: {\r\n    enumerable: false,\r\n    writable: false,\r\n    configurable: false,\r\n    value: function (enumerable, writable, configurable, value) {\r\n      return {\r\n        enumerable,\r\n        writable,\r\n        configurable,\r\n        value\r\n      }\r\n    }\r\n  }\r\n})\r\n\r\nObject.defineProperties(NGN, {\r\n  /**\r\n   * @method public\r\n   * Create a `public` property definition for an object.\r\n   * Example:\r\n   *\r\n   * ```\r\n   * Object.defineProperty(this, 'attr', NGN.public('somevalue'))\r\n   *\r\n   * // Longhand equivalent\r\n   * Object.defineProperty(this, 'attr', {\r\n   *  enumerable: true,\r\n   *  writable: true,\r\n   *  configurable: false,\r\n   *  value: 'somevalue'\r\n   * })\r\n   * ```\r\n   * @param  {any} value\r\n   * Any valid JavaScript value (function, boolean, number, string, etc)\r\n   * used as the value for the object attribute.\r\n   * @private\r\n   */\r\n  public: NGN.define(false, false, false, function (value) {\r\n    return NGN.define(true, typeof value !== 'function', false, value)\r\n  }),\r\n\r\n  /**\r\n   * @method private\r\n   * Create a `private` property definition for an object.\r\n   * Example:\r\n   *\r\n   * ```\r\n   * Object.defineProperty(this, 'attr', NGN.private('somevalue'))\r\n   *\r\n   * // Longhand equivalent\r\n   * Object.defineProperty(this, 'attr', {\r\n   *  enumerable: false,\r\n   *  writable: true,\r\n   *  configurable: false,\r\n   *  value: 'somevalue'\r\n   * })\r\n   * ```\r\n   * @param  {any} value\r\n   * Any valid JavaScript value (function, boolean, number, string, etc)\r\n   * used as the value for the object attribute.\r\n   * @private\r\n   */\r\n  private: NGN.define(false, false, false, function (value) {\r\n    return NGN.define(false, typeof value !== 'function', false, value)\r\n  }),\r\n\r\n  /**\r\n   * @method const\r\n   * Create a `public` constant property definition for an object.\r\n   * Example:\r\n   *\r\n   * ```\r\n   * Object.defineProperty(this, 'attr', NGN.const('somevalue'))\r\n   *\r\n   * // Longhand equivalent\r\n   * Object.defineProperty(this, 'attr', {\r\n   *  enumerable: true,\r\n   *  writable: false,\r\n   *  configurable: false,\r\n   *  value: 'somevalue'\r\n   * })\r\n   * ```\r\n   * @param  {any} value\r\n   * Any valid JavaScript value (function, boolean, number, string, etc)\r\n   * used as the value for the object attribute.\r\n   * @private\r\n   */\r\n  const: NGN.define(false, false, false, function (value) {\r\n    return NGN.define(true, false, false, value)\r\n  }),\r\n\r\n  /**\r\n   * @method privateconst\r\n   * Create a `private` constant property definition for an object.\r\n   * Example:\r\n   *\r\n   * ```\r\n   * Object.defineProperty(this, 'attr', NGN.privateconst('somevalue'))\r\n   *\r\n   * // Longhand equivalent\r\n   * Object.defineProperty(this, 'attr', {\r\n   *  enumerable: false,\r\n   *  writable: false,\r\n   *  configurable: false,\r\n   *  value: 'somevalue'\r\n   * })\r\n   * ```\r\n   * @param  {any} value\r\n   * Any valid JavaScript value (function, boolean, number, string, etc)\r\n   * used as the value for the object attribute.\r\n   * @private\r\n   */\r\n  privateconst: NGN.define(false, false, false, function (value) {\r\n    return NGN.define(false, false, false, value)\r\n  }),\r\n\r\n  /**\r\n   * @method get\r\n   * Create a private `getter` property definition for an object.\r\n   * Public getters are part of the ES2015 class spec.\r\n   *\r\n   * Example:\r\n   *\r\n   * ```\r\n   * let myFunction = function () {\r\n   *  return 'somevalue'\r\n   * }\r\n   *\r\n   * // Longhand equivalent\r\n   * Object.defineProperty(this, 'attr', {\r\n   *  enumerable: false,\r\n   *  get: function () {\r\n   *    return 'somevalue'\r\n   *  }\r\n   * })\r\n   * ```\r\n   * @param  {function} fn\r\n   * Any valid async JavaScript function with a `return` value.\r\n   * @private\r\n   */\r\n  get: NGN.define(false, false, false, function (fn) {\r\n    return {\r\n      enumerable: false,\r\n      get: fn\r\n    }\r\n  }),\r\n\r\n  /**\r\n   * @method set\r\n   * Create a private `setter` property definition for an object.\r\n   * Public setters are part of the ES2015 class spec.\r\n   *\r\n   * Example:\r\n   *\r\n   * ```\r\n   * let myFunction = function () {\r\n   *  return 'somevalue'\r\n   * }\r\n   *\r\n   * // Longhand equivalent\r\n   * Object.defineProperty(this, 'attr', {\r\n   *  enumerable: false,\r\n   *  set: function (value) {\r\n   *    somethingElse = value\r\n   *  }\r\n   * })\r\n   * ```\r\n   * @param  {function} fn\r\n   * Any valid JavaScript function that accepts a single argument (value).\r\n   * @private\r\n   */\r\n  set: NGN.define(false, false, false, function (fn) {\r\n    return {\r\n      enumerable: false,\r\n      set: fn\r\n    }\r\n  }),\r\n\r\n  /**\r\n   * @method getset\r\n   * Create a private property defintion containing both a `getter` and `setter`\r\n   * for the specified attribute.\r\n   * @param  {function} getFn\r\n   * Any valid async JavaScript function with a `return` value.\r\n   * @param  {function} setFn\r\n   * Any valid JavaScript function that accepts a single argument (value).\r\n   * @private\r\n   */\r\n  getset: NGN.define(false, false, false, (getterFn, setterFn) => {\r\n    return {\r\n      enumerable: false,\r\n      get: getterFn,\r\n      set: setterFn\r\n    }\r\n  }),\r\n\r\n  LEDGER_EVENT: NGN.define(false, false, false, (EVENT) => {\r\n    return function () {\r\n      NGN.BUS.emit(EVENT, ...arguments)\r\n    }\r\n  })\r\n})\r\n\r\nObject.defineProperties(NGN, {\r\n  /**\r\n   * @method extend\r\n   * Extend the NGN core object. Extending NGN is the equivalent of:\r\n   *\r\n   * Example:\r\n   * ```\r\n   * NGN.extend('greet', NGN.public(function (recipient) {\r\n   *  return 'Hello, ' + recipient + '!'\r\n   * }))\r\n   *\r\n   * // Equivalent of:\r\n   *\r\n   * Object.defineProperty(NGN, 'greet', {\r\n   *  enumerable: true,\r\n   *  writable: false,\r\n   *  configurable: false,\r\n   *  value: function (recipient) {\r\n   *    return 'Hello, ' + recipient + '!'\r\n   *  }\r\n   * })\r\n   * ```\r\n   * The example above produces a public function available from NGN:\r\n   *\r\n   * ```\r\n   * console.log(NGN.greet('world')) // outputs Hello, world!\r\n   * @param  {string} attribute\r\n   * Name of the attribute to add to the object.\r\n   * @param  {Object} descriptor\r\n   * The object descriptor, i.e.\r\n   * ```\r\n   * {\r\n   *  enumerable: true/false,\r\n   *  writable: true/false,\r\n   *  configurable: true/false,\r\n   *  value: {any}\r\n   * }\r\n   *\r\n   * // OR\r\n   *\r\n   * {\r\n   *  enumerable: true/false,\r\n   *  get: function () { return ... },\r\n   *  set: function (value) { some = value ... }\r\n   * }\r\n   * ```\r\n   * @private\r\n   */\r\n  extend: NGN.privateconst(function (attribute, descriptor) {\r\n    // If no descriptor is provided, multiple properties are being defined.\r\n    if (typeof attribute === 'object') {\r\n      Object.defineProperties(this, attribute)\r\n    } else {\r\n      Object.defineProperty(this, attribute, descriptor)\r\n    }\r\n  }),\r\n\r\n  /**\r\n   * @method inherit\r\n   * Inherit the properties of another object/class.\r\n   * @param  {object|function} source\r\n   * The source object (i.e. what gets copied)\r\n   * @param  {object|function} destination\r\n   * The object properties get copied to.\r\n   */\r\n  inherit: NGN.const(function (source = null, dest = null) {\r\n    if (source && dest) {\r\n      source = typeof source === 'function' ? source.prototype : source\r\n      dest = typeof dest === 'function' ? dest.prototype : dest\r\n\r\n      Object.getOwnPropertyNames(source).forEach(function (attr) {\r\n        const definition = Object.getOwnPropertyDescriptor(source, attr)\r\n        Object.defineProperty(dest, attr, definition)\r\n      })\r\n\r\n      const prototype = Object.getOwnPropertyNames(Object.getPrototypeOf(source)).filter((attr) => {\r\n        return attr.trim().toLowerCase() !== 'constructor' && !dest.hasOwnProperty(attr)\r\n      })\r\n\r\n      prototype.forEach((attr) => {\r\n        const cfg = Object.getOwnPropertyDescriptor(source, attr)\r\n\r\n        if (cfg === undefined && typeof source[attr] === 'function') {\r\n          Object.defineProperty(dest, attr, NGN.public(function () {\r\n            return source[attr].apply(this, arguments)\r\n          }))\r\n        }\r\n      })\r\n    }\r\n  }),\r\n\r\n  /**\r\n   * @method slice\r\n   * Converts an array-like object to an array.\r\n   *\r\n   * Example:\r\n   * ```\r\n   * function () {\r\n   *  return NGN.slice(arguments)\r\n   * }\r\n   * ```\r\n   * @param  {Object} obj\r\n   * The object to slice into an array.\r\n   * @return {array}\r\n   * @private\r\n   */\r\n  slice: NGN.private(function (obj) {\r\n    return Array.prototype.slice.call(obj)\r\n  }),\r\n\r\n  /**\r\n   * @method splice\r\n   * Converts an array-like object to a spliced array.\r\n   *\r\n   * Example:\r\n   * ```\r\n   * function () {\r\n   *  return NGN.splice(arguments)\r\n   * }\r\n   * ```\r\n   * @param  {Object} obj\r\n   * The object to splice into an array.\r\n   * @return {array}\r\n   * @private\r\n   */\r\n  splice: NGN.private(function (obj) {\r\n    return Array.prototype.splice.call(obj)\r\n  }),\r\n\r\n  /**\r\n   * @method nullIf\r\n   * Returns a null value if the two specified expressions are equal.\r\n   * ```js\r\n   * if (NGN.nullIf(myvar, 'value') === null) {\r\n   *   console.log('Variable had a value of \"value\", which is considered null')\r\n   * }\r\n   *\r\n   * // or\r\n   *\r\n   * if (NGN.nullIf(myvar) === null) {\r\n   *   console.log('Empty variable whose trimmed length is 0')\r\n   * }\r\n   * ```\r\n   * @param {any} sourceExpression\r\n   * The variable or value to check.\r\n   * @param {any} [comparisonExpression = '']\r\n   * The variable or value to compare the source expression against.\r\n   * @return {any}\r\n   * If the source expression matches the comparison expression, `null` will\r\n   * be returned. If they do not match, the source expression will be returned.\r\n   */\r\n  nullIf: NGN.public(function (sourceExpression, comparisonExpression = '') {\r\n    try {\r\n      // If the values aren't equal, make sure it's not due to blank values\r\n      // or hidden characters.\r\n      if (sourceExpression !== comparisonExpression) {\r\n        // Different data types indicate different values.\r\n        if (typeof sourceExpression !== typeof comparisonExpression) {\r\n          return sourceExpression\r\n        }\r\n\r\n        if (typeof sourceExpression === 'string') {\r\n          if (sourceExpression.trim() !== comparisonExpression.trim()) {\r\n            return sourceExpression\r\n          }\r\n        }\r\n      }\r\n\r\n      return null\r\n    } catch (e) {\r\n      return null\r\n    }\r\n  }),\r\n\r\n  // Private alias for nullIf\r\n  nullif: NGN.public(function () {\r\n    return this.nullIf(...arguments)\r\n  }),\r\n\r\n  /**\r\n   * @method converge\r\n   * Provides a basic coalesce. Expects the first parameter to be a boolean\r\n   * value. `true` will wrap arguments in a nullIf operator. `false` will not.\r\n   * @private\r\n   */\r\n  converge: NGN.private(function () {\r\n    if (arguments.length < 2) {\r\n      return null\r\n    } else if (arguments.length === 2) {\r\n      if (arguments[1] === undefined) {\r\n        return null\r\n      } else if (arguments[0]) {\r\n        return NGN.nullIf(arguments[1])\r\n      } else {\r\n        return arguments[1]\r\n      }\r\n    }\r\n\r\n    for (let arg = 1; arg < arguments.length; arg++) {\r\n      // try {\r\n      if (arguments[arg] !== undefined &&\r\n        (\r\n          arguments[0] ? NGN.nullIf(arguments[arg]) : arguments[arg]\r\n        ) !== null\r\n      ) {\r\n        if (arguments[arg] !== undefined) {\r\n          return arguments[arg]\r\n        }\r\n      }\r\n      // } catch (e) {}\r\n    }\r\n\r\n    return null\r\n  }),\r\n\r\n  /**\r\n   * @method coalesce\r\n   * Finds the first non-null/defined value in a list of arguments.\r\n   * This can be used with {@link Boolean Boolean} values, since `true`/`false` is a\r\n   * non-null/defined value.\r\n   * @param {Mixed} args\r\n   * Any number of arguments can be passed to this method.\r\n   * @return {Any}\r\n   * Returns the first non-null/defined value. If non exist, `null` is retutned.\r\n   */\r\n  coalesce: NGN.public(function () {\r\n    return NGN.converge(false, ...arguments)\r\n  }),\r\n\r\n  /**\r\n   * @method coalesceb\r\n   * Provides the same functionality as #coalesce, except **b**lank/empty arguments\r\n   * are treated as `null` values.\r\n   * @param {Mixed} args\r\n   * Any number of arguments can be passed to this method.\r\n   */\r\n  coalesceb: NGN.public(function () {\r\n    return NGN.converge(true, ...arguments)\r\n  }),\r\n\r\n  /**\r\n   * @property {boolean} nodelike\r\n   * Indicates NGN is running in a node-like environment supporting\r\n   * the `require` statement. This will detect node, io.js, Electron,\r\n   * NW.js, and other environments presumably supporting Node.js.\r\n   * @private\r\n   */\r\n  nodelike: NGN.const(NGN.global.process !== undefined),\r\n\r\n  /**\r\n   * @method dedupe\r\n   * Deduplicate a simple array.\r\n   * @param {array} array\r\n   * The array to deduplicate.\r\n   * @return {array}\r\n   * The array with unique records.\r\n   * @private\r\n   */\r\n  dedupe: NGN.const((array) => {\r\n    let matches = []\r\n\r\n    // This is more performant than array.filter in most cases.\r\n    for (let i = 0; i < array.length; i++) {\r\n      if (array.indexOf(array[i]) === i) {\r\n        matches.push(array[i])\r\n      }\r\n    }\r\n\r\n    array = null\r\n\r\n    return matches\r\n  }),\r\n\r\n  /**\r\n   * @method typeof\r\n   * A more specific typeof method.\r\n   * @param  {any} element\r\n   * The element to determine the type of.\r\n   * @return {string}\r\n   * Returns the type (all lower case).\r\n   */\r\n  typeof: NGN.const((el) => {\r\n    if (el === undefined) {\r\n      return 'undefined'\r\n    } else if (el === null) {\r\n      return 'null'\r\n    }\r\n\r\n    let value = Object.prototype.toString.call(el).split(' ')[1].replace(/[^A-Za-z]/gi, '').toLowerCase()\r\n\r\n    if (value === 'function') {\r\n      if (!el.name) {\r\n        return NGN.coalesceb(el.toString().replace(/\\n/gi, '').replace(/^function\\s|\\(.*$/mgi, '').toLowerCase(), 'function')\r\n      } else {\r\n        value = NGN.coalesceb(el.name, 'function')\r\n      }\r\n    }\r\n\r\n    return value.toLowerCase()\r\n  }),\r\n\r\n  /**\r\n   * @method forceArray\r\n   * Forces a value to become an array if it is not already one. For example:\r\n   *\r\n   * ```js\r\n   * let x = 'value'\r\n   *\r\n   * x = NGN.forceArray(x)\r\n   *\r\n   * console.log(x) // Outputs ['value']\r\n   * ```\r\n   * @param {any} expression\r\n   * The value being forced to be an array.\r\n   * @private\r\n   */\r\n  forceArray: NGN.const((value) => {\r\n    if (value === null) {\r\n      return []\r\n    }\r\n\r\n    return NGN.typeof(value) === 'array' ? value : [value]\r\n  }),\r\n\r\n  /**\r\n   * @method forceBoolean\r\n   * Forces a value to become a boolean if it is not already one. For example:\r\n   *\r\n   * ```js\r\n   * let x = NGN.forceBoolean('false') // String ==> Boolean\r\n   * console.log(x) // Outputs false\r\n   *\r\n   * let y = NGN.forceBoolean('text') // String ==> Boolean\r\n   * console.log(y) // Outputs true (any non-blank text results in true, except the word \"false\")\r\n   *\r\n   * let z = NGN.forceBoolean(0) // Number ==> Boolean (0 = false, 1 = true)\r\n   * console.log(z) // Outputs false\r\n   * ```\r\n   *\r\n   * All other types will yield a `true` value, except for `null`. A `null`\r\n   * value is treated as `false`.\r\n   * @param {any} expression\r\n   * The value being forced to be a boolean.\r\n   * @private\r\n   */\r\n  forceBoolean: NGN.const((value) => {\r\n    switch (NGN.typeof(value)) {\r\n      case 'boolean':\r\n        return value\r\n\r\n      case 'number':\r\n        return value === 0 ? false : true // eslint-disable-line no-unneeded-ternary\r\n\r\n      case 'string':\r\n        value = value.trim().toLowerCase()\r\n\r\n        if (value === 'false') {\r\n          return false\r\n        }\r\n\r\n        return true\r\n\r\n      default:\r\n        return NGN.coalesceb(value) !== null\r\n    }\r\n  }),\r\n\r\n  /**\r\n   * @method forceNumber\r\n   * Forces a value to become a number if it is not already one. For example:\r\n   *\r\n   * ```js\r\n   * let x = NGN.forceNumber('10') // String ==> Number\r\n   * console.log(x === 10) // Outputs true\r\n   *\r\n   * let y = NGN.forceNumber(true) // Boolean ==> Number\r\n   * console.log(y) // Output 1\r\n   *\r\n   * let z = NGN.forceNumber(false) // Boolean ==> Number\r\n   * console.log(y) // Output 0\r\n   * ```\r\n   *\r\n   * All other types will yield a `NaN` value. This has no effect on\r\n   * @param {any} expression\r\n   * The value being forced to be a number. If the expression is a date,\r\n   * the result will be the number of milliseconds passed since the epoch.\r\n   * See [Date.getTime()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)\r\n   * for details.\r\n   * @param {number} [radix]\r\n   * An integer between 2 and 36 that represents the radix (the base in\r\n   * mathematical numeral systems) of the expression.\r\n   * Specify 10 for the decimal numeral system commonly used by humans.\r\n   * Always specify this parameter to eliminate reader confusion and to\r\n   * guarantee predictable behavior. Different implementations produce\r\n   * different results when a radix is not specified, usually defaulting the\r\n   * value to 10.\r\n   *\r\n   * **If no radix is supplied**, the `parseFloat` will be used to identify\r\n   * the numeric value. When a radix is supplied, `parseInt` is used.\r\n   * @private\r\n   */\r\n  forceNumber: NGN.const((value, radix = null) => {\r\n    try {\r\n      switch (NGN.typeof(value)) {\r\n        case 'boolean':\r\n          return value ? 1 : 0\r\n\r\n        case 'number':\r\n          return value\r\n\r\n        case 'date':\r\n          return value.getTime()\r\n\r\n        case 'string':\r\n          return radix !== null ? parseInt(value, radix) : parseFloat(value)\r\n\r\n        default:\r\n          return NaN\r\n      }\r\n    } catch (e) {\r\n      NGN.ERROR(e)\r\n      return NaN\r\n    }\r\n  }),\r\n\r\n  /**\r\n   * @method stack\r\n   * Retrieve the stack trace from a specific code location without throwing\r\n   * an exception. Files are always listed from the root. This is the default\r\n   * order in browsers, but the reverse of the normal stack order in node-like\r\n   * environments.\r\n   *\r\n   * For example, the following stack on node shows `_test.js` as the last item\r\n   * in the array. In node-like environments, the `_test.js` would normally be\r\n   * the first item in the stacktrace.\r\n   *\r\n   * ```js\r\n   * [\r\n   *   { path: 'node.js:348:7', file: 'node.js', line: 348, column: 7 },\r\n   *   { path: 'module.js:575:10',\r\n   *     file: 'module.js',\r\n   *     line: 575,\r\n   *     column: 10 },\r\n   *   { path: 'module.js:550:10',\r\n   *     file: 'module.js',\r\n   *     line: 550,\r\n   *     column: 10 },\r\n   *   { path: 'module.js:541:32',\r\n   *     file: 'module.js',\r\n   *     line: 541,\r\n   *     column: 32 },\r\n   *   { path: '/_test.js:8:14', file: '/_test.js', line: 8, column: 14 }\r\n   * ]\r\n   * ```\r\n   *\r\n   * By standardizing the order of the stack trace, it is easier to programmatically\r\n   * identify sources of problems. This method does not prevent developers from\r\n   * accessing a normal stacktrace.\r\n   * @private\r\n   * @returns {array}\r\n   * Returns an array of objects. Each object contains the file, line, column,\r\n   * and path within the stack. For example:\r\n   *\r\n   * ```\r\n   * {\r\n   *   path: 'path/to/file.js:127:14'\r\n   *   file: 'path/to/file.js',\r\n   *   line: 127,\r\n   *   column: 14\r\n   * }\r\n   * ```\r\n   *\r\n   * If a stacktrace is unavailable for any reason, the array will contain a\r\n   * single element like:\r\n   *\r\n   * ```js\r\n   * {\r\n   *   path: 'unknown',\r\n   *   file: 'unknown',\r\n   *   line: 0,\r\n   *   column: 0\r\n   * }\r\n   * ```\r\n   */\r\n  processStackItem: NGN.privateconst(function (item, uri) {\r\n    return item.replace(/at.*\\(|\\)/gi, '')\r\n      .replace(uri, './')\r\n      .replace(/\\/{2,100}/gi, '/')\r\n      .trim().split(':')\r\n  }),\r\n\r\n  stack: NGN.get(function () {\r\n    const originalStack = (new Error).stack.split('\\n') // eslint-disable-line\r\n    let stack = (new Error()).stack.split('\\n') || []\r\n    let fnRegex = /at.*\\(/gi\r\n\r\n    stack = stack.filter((item) => {\r\n      return item.split(':').length > 1\r\n    }).map((item) => {\r\n      let operation = fnRegex.exec(item)\r\n\r\n      if (operation) {\r\n        operation = operation[0].replace(/^at\\s{1,100}|\\s{1,100}\\($/gi, '').replace('<anonymous>', 'console')\r\n      }\r\n\r\n      if (this.nodelike) {\r\n        item = this.processStackItem(item.toString(), process.cwd())\r\n\r\n        return {\r\n          path: item.join(':').replace('./', process.cwd() + '/'),\r\n          // path: item[0].substr(0, item[0].length) + ':' + item[1] + ':' + item[2],\r\n          file: item[0].substr(0, item[0].length),\r\n          line: parseInt(item[1], 10),\r\n          column: parseInt(item[2], 10),\r\n          operation: operation\r\n        }\r\n      } else {\r\n        item = this.processStackItem(item.toString(), window.location.origin)\r\n\r\n        return {\r\n          path: item[0].substr(1, item[0].length - 1) + ':' + item[1] + ':' + item[2],\r\n          file: item[0].substr(1, item[0].length - 1),\r\n          line: parseInt(item[1], 10),\r\n          column: parseInt(item[2], 10),\r\n          operation: operation\r\n        }\r\n      }\r\n    })\r\n\r\n    return stack.length !== 0\r\n      ? (this.nodelike ? stack.reverse() : stack)\r\n      : [{\r\n        path: 'unknown',\r\n        file: 'unknown',\r\n        line: 0,\r\n        column: 0\r\n      }]\r\n  }),\r\n\r\n  /**\r\n   * @method isFn\r\n   * A shortcut method for determining if a variable is a function.\r\n   * This is useful for identifying the existance of callback methods.\r\n   * @param {any} variable\r\n   * The variable to identify as a function.\r\n   * @returns {boolean}\r\n   * @private\r\n   */\r\n  isFn: NGN.privateconst((v) => {\r\n    return typeof v === 'function'\r\n  }),\r\n\r\n  /**\r\n   * @method wrap\r\n   * Executes a **synchronous** method before invoking a standard function.\r\n   * This is primarily designed for displaying warnings, but can also be\r\n   * used for other operations like migration layers.\r\n   * @param {function} preMethod\r\n   * The **synchronous** function to invoke before the class is instantiated. This\r\n   * method receives the same arguments passed to the class.\r\n   * @param {function} method\r\n   * The function to wrap.\r\n   * @return {function}\r\n   * @private\r\n   */\r\n  wrap: NGN.privateconst(function (preFn, fn) {\r\n    return function () {\r\n      preFn(...arguments)\r\n      fn(...arguments)\r\n    }\r\n  }),\r\n\r\n  /**\r\n   * @method wrapClass\r\n   * Executes a **synchronous** method before returning an instantiated class.\r\n   * It runs a function first, then returns the equivalent of\r\n   * `new MyClass(...)`. This is primarily designed for displaying warnings,\r\n   * but can also be used for other operations like migration layers.\r\n   * @param {function} preMethod\r\n   * The **synchronous** method to invoke before the class is instantiated. This\r\n   * method receives the same arguments passed to the class.\r\n   * @param {function} class\r\n   * The class to wrap.\r\n   * @return {Class}\r\n   * @private\r\n   */\r\n  wrapClass: NGN.privateconst(function (preFn, ClassFn) {\r\n    return function () {\r\n      preFn(...arguments)\r\n      return new ClassFn(...arguments)\r\n    }\r\n  }),\r\n\r\n  /**\r\n   * @method deprecate\r\n   * Fires an event (if NGN.BUS is available) or logs a warning indicating the\r\n   * method is deprecated.\r\n   * @param {function} method\r\n   * The method to return/execute.\r\n   * @param {string} [message='The method has been deprecated.']\r\n   * The warning displayed to the user.\r\n   * @return {function}\r\n   * @fires DEPRECATED.METHOD\r\n   * Fires `DEPRECATED.METHOD` on the NGN.BUS. The message is delivered to\r\n   * the event handler.\r\n   */\r\n  deprecate: NGN.privateconst(function (fn, message = 'The method has been deprecated.') {\r\n    return this.wrap(() => NGN.WARN('DEPRECATED.METHOD', message), fn)\r\n  }),\r\n\r\n  /**\r\n   * @method deprecateClass\r\n   * Logs a warning indicating the class is deprecated. This differs from\r\n   * #deprecate by extending & preserving the original class (the resulting\r\n   * class can be used with the `new` operator).\r\n   * @param {function} class\r\n   * The class to return/execute.\r\n   * @param {string} [message='The class has been deprecated.']\r\n   * The warning displayed to the user.\r\n   * @fires DEPRECATED.CLASS\r\n   * Fires `DEPRECATED.CLASS` on the NGN.BUS. The message is delivered to\r\n   * the event handler.\r\n   * @return {Class}\r\n   */\r\n  deprecateClass: NGN.privateconst(function (classFn, message = 'The class has been deprecated.') {\r\n    return this.wrapClass(() => NGN.WARN('DEPRECATED.CLASS', message), classFn)\r\n  }),\r\n\r\n  /**\r\n   * @method needs\r\n   * A method to check for the existance of required attributes in an object.\r\n   * This is designed to check for namespace existance.\r\n   *\r\n   * ```js\r\n   * NGN.needs('DOM','BUS', 'NET', 'JUNK') // Throws an error because \"JUNK\" doesn't exist.\r\n   * ```\r\n   * @param {Object} namespace\r\n   * The object to check.\r\n   * @param {String[]} attributes\r\n   * A list of attributes to check for.\r\n   * @throws {MissingNgnDependencyError}\r\n   * Throws an error if the namespace is missing an attribute dependency.\r\n   * @private\r\n   */\r\n  needs: NGN.private(function () {\r\n    let missing = NGN.getObjectMissingPropertyNames(NGN, ...arguments)\r\n\r\n    if (missing.length === 0) {\r\n      return\r\n    }\r\n\r\n    // Throw an error if there are any missing attributes.\r\n    if (missing.length > 0) {\r\n      throw new MissingNgnDependencyError(`Missing NGN dependencies: ${missing.join(', ')}`.replace(/\\s{2,100}/gi, ' '))\r\n    }\r\n  }),\r\n\r\n  /**\r\n   * @method getObjectMissingPropertyNames\r\n   * Given a list, returns which list items are not present in an\r\n   * object's enumerable properties.\r\n   *\r\n   * ```js\r\n   * let obj = { a: 1, b: 2 }\r\n   * let missing = NGN.getObjectMissingPropertyNames(obj, 'a', 'b', 'c')\r\n   *\r\n   * console.log(missing) // Outputs ['c']\r\n   * ```\r\n   * @param {Object} object\r\n   * The object to check.\r\n   * @return {String[]}\r\n   * @private\r\n   */\r\n  getObjectMissingPropertyNames: NGN.private(function () {\r\n    let missing = []\r\n    let properties = Object.keys(arguments[0])\r\n\r\n    for (let i = 1; i < arguments.length; i++) {\r\n      if (properties.indexOf(arguments[i]) < 0) {\r\n        missing.push(arguments[i])\r\n      }\r\n    }\r\n\r\n    return missing\r\n  }),\r\n\r\n  /**\r\n   * @method getObjectExtraneousPropertyNames\r\n   * Given a list, returns which enumerable object properties\r\n   * are not in the list.\r\n   *\r\n   * ```js\r\n   * let obj = { a: 1, b: 2, d: 4 }\r\n   * let extra = NGN.getObjectExtraneousPropertyNames(obj, 'a', 'b', 'c')\r\n   *\r\n   * console.log(extra) // Outputs ['d']\r\n   * ```\r\n   * @param {Object} object\r\n   * The object to check.\r\n   * @return {String[]}\r\n   * @private\r\n   */\r\n  getObjectExtraneousPropertyNames: NGN.private(function () {\r\n    let properties = Object.keys(arguments[0])\r\n\r\n    for (let i = 1; i < arguments.length; i++) {\r\n      let index = properties.indexOf(arguments[i])\r\n\r\n      if (index >= 0) {\r\n        properties.splice(index, 1)\r\n      }\r\n    }\r\n\r\n    return properties\r\n  }),\r\n\r\n  /**\r\n   * @method objectHasAll\r\n   * Determines whether the specified object has _all_ of the provided properties.\r\n   * This only accounts for enumerable properties. It also decorates the Boolean\r\n   * result with a property called `properties`, which contains any missing property\r\n   * names.\r\n   *\r\n   * **Example**\r\n   * ```js\r\n   * let check = NGN.objectHasAll(NGN, 'BUS', 'NET')\r\n   *\r\n   * console.log(check) // Outputs: true\r\n   * ```\r\n   *\r\n   * ```js\r\n   * let check = NGN.objectHasAll(NGN, 'BUS', 'NET', 'JUNK')\r\n   *\r\n   * console.log(check) // Outputs: false\r\n   * console.log(check.properties) // Outputs ['JUNK']\r\n   * ```js\r\n   * @param {Object} object\r\n   * The object to check.\r\n   * @return {Boolean}\r\n   */\r\n  objectHasAll: NGN.const(function () {\r\n    let properties = Object.keys(arguments[0])\r\n\r\n    for (let i = 1; i < arguments.length; i++) {\r\n      if (properties.indexOf(arguments[i]) < 0) {\r\n        return false\r\n      }\r\n    }\r\n\r\n    return true\r\n  }),\r\n\r\n  /**\r\n   * @method objectHasAny\r\n   * Determines whether the specified object has _any_ of the requested properties.\r\n   * This only accounts for enumerable properties.\r\n   *\r\n   * **Example**\r\n   * ```js\r\n   * let check = NGN.objectHasAny(NGN, 'BUS', 'NET', 'MORE')\r\n   *\r\n   * console.log(check) // Outputs: true\r\n   * ```\r\n   *\r\n   * ```js\r\n   * let check = NGN.objectHasAny(NGN, 'JUNK1', 'JUNK2', 'JUNK3')\r\n   *\r\n   * console.log(check) // Outputs: false\r\n   * ```js\r\n   * @param {Object} object\r\n   * The object to check.\r\n   * @return {Boolean}\r\n   */\r\n  objectHasAny: NGN.const(function () {\r\n    let properties = Object.keys(arguments[0])\r\n\r\n    for (let i = 1; i < arguments.length; i++) {\r\n      if (properties.indexOf(arguments[i]) >= 0) {\r\n        return true\r\n      }\r\n    }\r\n\r\n    return false\r\n  }),\r\n\r\n  /**\r\n   * @method objectHasExactly\r\n   * Determines whether the specified object has _only_ the requested properties.\r\n   * This only accounts for enumerable properties.\r\n   *\r\n   * **Example**\r\n   * ```js\r\n   * let obj = { a: 1, b: 2 }\r\n   * let check = NGN.objectHasExactly(obj, 'a', 'b')\r\n   *\r\n   * console.log(check) // Outputs: true\r\n   * ```\r\n   *\r\n   * ```js\r\n   * let obj = { a: 1, b: 2, d: 4 }\r\n   * let check = NGN.objectHasExactly(obj, 'a', 'b', 'c')\r\n   *\r\n   * console.log(check) // Outputs: false\r\n   * ```js\r\n   * @param {Object} object\r\n   * The object to check.\r\n   * @return {Boolean}\r\n   */\r\n  objectHasExactly: NGN.const(function () {\r\n    // If there are missing properties, it's not an exact match.\r\n    if (this.getObjectMissingPropertyNames(arguments[0]).length !== 0) {\r\n      return false\r\n    }\r\n\r\n    let properties = Object.keys(arguments[0])\r\n    let args = NGN.slice(arguments)\r\n\r\n    args.shift()\r\n\r\n    // Check for extra properties on the object\r\n    for (let i = 0; i < properties.length; i++) {\r\n      if (args.indexOf(properties[i]) < 0) {\r\n        return false\r\n      }\r\n    }\r\n\r\n    // Make sure there are enough properties.\r\n    for (let i = 0; i < args.length; i++) {\r\n      if (properties.indexOf(args[i]) < 0) {\r\n        return false\r\n      }\r\n    }\r\n\r\n    return true\r\n  }),\r\n\r\n  /**\r\n   * @method objectRequires\r\n   * This is the same as #objectHasAll, but will throw an\r\n   * error if the object is missing any properties.\r\n   * @throws Error\r\n   */\r\n  objectRequires: NGN.const(function () {\r\n    let check = this.objectHasAll(...arguments)\r\n\r\n    if (!check) {\r\n      throw new Error(`${arguments[0].constructor.name} is missing the following attributes: ${check.missing.join(', ')}`)\r\n    }\r\n  }),\r\n\r\n  /**\r\n   * @method createAlias\r\n   * A helper method to alias a value on an object. This is the equivalent of:\r\n   * ```js\r\n   * Object.defineProperty(namespace, name, NGN.get(() => {\r\n   *   return value\r\n   * }))\r\n   * ```\r\n   * @param  {Object} namespace\r\n   * The object to apply the alias property to.\r\n   * @param  {String} name\r\n   * The alias name.\r\n   * @param  {Any} value\r\n   * The value to return.\r\n   * @private\r\n   */\r\n  createAlias: NGN.private(function (namespace, name, value) {\r\n    Object.defineProperty(namespace, name, NGN.get(() => {\r\n      return value\r\n    }))\r\n  }),\r\n\r\n  /**\r\n   * @method WARN\r\n   * This method is used to emit special info events.\r\n   * The NGN.BUS can listen for all events using the NGN.WARN global symbol.\r\n   *\r\n   * ```js\r\n   * NGN.BUS.on(NGN.WARNING_EVENT, function () => {\r\n   *   console.warn(...arguments)\r\n   * })\r\n   * ```\r\n   *\r\n   * See NGN.EventEmitter#emit for detailed parameter usage.\r\n   * @private\r\n   */\r\n  WARNING_EVENT: NGN.privateconst(Symbol('NGN.WARN')),\r\n  WARN: NGN.privateconst(msg => NGN.LEDGER_EVENT(NGN.WARNING_EVENT)(msg)),\r\n\r\n  /**\r\n   * @method INFO\r\n   * This method is used to emit special warning events.\r\n   * The NGN.BUS can listen for all events using the NGN.INFO global symbol.\r\n   *\r\n   * ```js\r\n   * NGN.BUS.on(NGN.INFO_EVENT, function () => {\r\n   *   console.info(...arguments)\r\n   * })\r\n   * ```\r\n   *\r\n   * See NGN.EventEmitter#emit for detailed parameter usage.\r\n   * @private\r\n   */\r\n  INFO_EVENT: NGN.privateconst(Symbol.for('NGN.INFO')),\r\n  INFO: NGN.privateconst(msg => NGN.LEDGER_EVENT(NGN.INFO_EVENT)(msg)),\r\n\r\n  /**\r\n   * @method ERROR\r\n   * This method is used to emit special soft error events. A soft error\r\n   * is one that does not throw, but does get logged (typically non-critical).\r\n   * The NGN.BUS can listen for all events using the NGN.ERROR global symbol.\r\n   *\r\n   * ```js\r\n   * NGN.BUS.on(NGN.ERROR_EVENT, function () => {\r\n   *   console.info(...arguments)\r\n   * })\r\n   * ```\r\n   *\r\n   * See NGN.EventEmitter#emit for detailed parameter usage.\r\n   * @private\r\n   */\r\n  ERROR_EVENT: NGN.privateconst(Symbol.for('NGN.ERROR')),\r\n  ERROR: NGN.privateconst(msg => NGN.LEDGER_EVENT(NGN.ERROR_EVENT)(msg)),\r\n\r\n  /**\r\n   * @method createException\r\n   * Create a custom global exception (custom error).\r\n   * @param {Object} config\r\n   * The configuration of the new error.\r\n   * @param {String} [config.name=NgnError]\r\n   * The pretty name of the exception. Alphanumeric characters only (underscore is acceptable).\r\n   * @param {String} [config.type=TypeError]\r\n   * The type of error. This is commonly `TypeError` or `ReferenceError`, but\r\n   * it can be any custom value.\r\n   * @param {String} [config.severity=minor]\r\n   * A descriptive \"level\" indicating how critical the error is.\r\n   * @param {String} [config.message=Unknown Error]\r\n   * The default message to output when none is specified.\r\n   * @param {Object} [config.custom]\r\n   * Provide a key/value object of custom attributes for the error.\r\n   * There are two \"special\" custom attributes: `help` and `cause`.\r\n   * When provided, these will be written to stdout whenever the error's\r\n   * stack is viewed.\r\n   *\r\n   * For example:\r\n   *\r\n   * ```js\r\n   * NGN.createException({\r\n   *   name: 'Test Problem',\r\n   *   message: 'An example error.',\r\n   *   custom: {\r\n   *     help: 'Remove the throw statement.',\r\n   *     cause: 'Testing the error output.'\r\n   *   }\r\n   * });\r\n   *\r\n   * throw TestProblem()\r\n   * ```\r\n   * The code above generates the following console output:\r\n   *\r\n   * ```sh\r\n   * Testing the error output.\r\n   * Remove the throw statement.\r\n   * /path/to/test.js:12\r\n   *    throw TestProblem();\r\n   *    ^\r\n   *\r\n   * TestProblem: An example error.\r\n   *    at null._onTimeout (/path/to/test.js:12:11)\r\n   *    at Timer.listOnTimeout (timers.js:92:15)\r\n   * ```\r\n   */\r\n  createException: NGN.const(function (config) {\r\n    config = config || {}\r\n    config = typeof config === 'string' ? { message: config } : config\r\n    config.name = config.name || 'NgnError'\r\n\r\n    // Create the error as a function\r\n    NGN.global[config.name] = function () {\r\n      if (arguments.length > 0) {\r\n        config.message = arguments[0]\r\n      }\r\n\r\n      return new CustomException(config)\r\n    }\r\n  }),\r\n\r\n  /**\r\n   * @method getType\r\n   * Returns the primitive object/function of the specified type.\r\n   * For example:\r\n   *\r\n   * ```js\r\n   * let type = NGN.getType('number') // Returns Number\r\n   * let type = NGN.getType('string') // Returns String\r\n   * ```\r\n   */\r\n  getType: NGN.const(function (type, defaultType) {\r\n    switch (type.trim().toLowerCase()) {\r\n      case 'number':\r\n        return Number\r\n\r\n      case 'regex':\r\n        NGN.WARN('regex is not a valid JavaScript type. Using regexp instead.')\r\n\r\n      case 'regexp': // eslint-disable-line no-fallthrough\r\n        return RegExp\r\n\r\n      case 'boolean':\r\n        return Boolean\r\n\r\n      case 'symbol':\r\n        return Symbol\r\n\r\n      case 'date':\r\n        return Date\r\n\r\n      case 'array':\r\n        return Array\r\n\r\n      case 'object':\r\n        return Object\r\n\r\n      case 'function':\r\n        return Function\r\n\r\n      case 'string':\r\n        return String\r\n\r\n      default:\r\n        if (defaultType) {\r\n          return defaultType\r\n        }\r\n\r\n        return undefined\r\n    }\r\n  })\r\n})\r\n\r\n// Standard NGN Exceptions\r\nNGN.createException({\r\n  name: 'MissingNgnDependencyError',\r\n  type: 'MissingNgnDependencyError',\r\n  severity: 'critical',\r\n  message: 'An NGN dependency is missing or could not be found.',\r\n  category: 'programmer',\r\n  custom: {\r\n    help: 'Include the missing library.',\r\n    cause: 'A required dependency was not included, or it was not included in the correct sequence.'\r\n  }\r\n})\r\n\r\nNGN.createException({\r\n  name: 'ReservedWordError',\r\n  type: 'ReservedWordError',\r\n  severity: 'critical',\r\n  message: 'An attempt to use a reserved word failed.',\r\n  category: 'programmer',\r\n  custom: {\r\n    help: 'Use an alternative word.',\r\n    cause: 'A word was used to define an attribute, method, field, or other element that already exists.'\r\n  }\r\n})\r\n\r\nNGN.createException({\r\n  name: 'InvalidConfigurationError',\r\n  type: 'InvalidConfigurationError',\r\n  severity: 'critical',\r\n  message: 'Invalid configuration.',\r\n  category: 'programmer',\r\n  custom: {\r\n    help: 'See the documentation for the proper configuration.',\r\n    cause: 'The configuration specified was marked as invalid or caused an error during instantiation.'\r\n  }\r\n})\r\n\r\n// Self reference to make NGN global in any environment.\r\nNGN.global.NGN = NGN\r\n\r\nexport { NGN as default }\r\n","// This chunk of awful is courtesy the StandardJS library!\r\n// We love the lib, except for its failure to allow disabling\r\n// a parsing error's OUTPUT.\r\n/* browser-only */\r\nimport EE from './BrowserEmitter'\r\n/* end-browser-only */\r\nlet EEmitter\r\n/* node-only */\r\nEEmitter = require('events').EventEmitter\r\n/* end-node-only */\r\n/* browser-only */\r\nEEmitter = EE\r\n/* end-browser-only */\r\n\r\n/**\r\n * @class NGN.EventEmitter\r\n * The EventEmitter is an extandable event driver non-DOM objects, such as\r\n * data models, objects, and other common elements of JavaScript programming.\r\n *\r\n * The NGN.EventEmitter is based on and compatible with the [Node.js EventEmitter](https://nodejs.org/dist/latest/docs/api/events.html#events_class_eventemitter).\r\n * It contains additional event management capabilities, which are available\r\n * in browser _and_ Node.js environments.\r\n */\r\nexport default class EventEmitter extends EEmitter {\r\n  constructor () {\r\n    super()\r\n\r\n    // const INSTANCE = Symbol('instance')\r\n\r\n    Object.defineProperties(this, {\r\n      // META: NGN.get(() => this[INSTANCE]),\r\n\r\n      META: NGN.private({\r\n        queued: {},\r\n        collectionQueue: {},\r\n        thresholdQueue: {},\r\n        defaultTTL: -1,\r\n        wildcardEvents: new Set()\r\n      }),\r\n\r\n      /**\r\n       * @method setTTL\r\n       * Set a default time-to-live for event handlers (in milliseconds).\r\n       * After the TTL period elapses, event handlers are removed.\r\n       * By default, there is no TTL (`-1`).\r\n       * @param {number} ttl\r\n       * The number of milliseconds before an event handler is automatically\r\n       * removed. This value may be `-1` (no TTL/never expires) or a value\r\n       * greater than `0`.\r\n       */\r\n      setTTL: NGN.const((ttl = -1) => {\r\n        if (ttl === 0) {\r\n          NGN.WARN('NGN.EventEmitter#TTL cannot be 0.')\r\n          return\r\n        }\r\n\r\n        this.META.defaultTTL = ttl\r\n      }),\r\n\r\n      /**\r\n       * @alias off\r\n       * Remove an event handler. If no handler is specified, all handlers for\r\n       * the specified event will be removed.\r\n       * This is a shortcut for #removeListener.\r\n       * @param {string} eventName\r\n       * Name of the event to remove.\r\n       * @param {function} [handlerFn]\r\n       * The handler function to remove from the event handlers.\r\n       */\r\n      off: NGN.public((eventName, handlerFn) => {\r\n        if (NGN.typeof(eventName) === 'array') {\r\n          for (let i = 0; i < eventName.length; i++) {\r\n            this.off(eventName[i], handlerFn)\r\n          }\r\n\r\n          return\r\n        }\r\n\r\n        let l = this.listeners(eventName)\r\n\r\n        if (!NGN.isFn(handlerFn)) {\r\n          return this.clear(eventName)\r\n        }\r\n\r\n        let wrappedHandlerFn = this.wrapEventHandlerWithScope(eventName, handlerFn)\r\n\r\n        if (l.indexOf(wrappedHandlerFn) < 0) {\r\n          for (let i = 0; i < l.length; i++) {\r\n            if (l[i].toString() === wrappedHandlerFn.toString()) {\r\n              this.META.wildcardEvents.delete(eventName)\r\n              // this.removeListener(eventName, handlerFn)\r\n              this.removeListener(eventName, l[i], false)\r\n              break\r\n            }\r\n          }\r\n        } else {\r\n          this.META.wildcardEvents.delete(eventName)\r\n          this.removeListener(eventName, handlerFn)\r\n        }\r\n      }),\r\n\r\n      /**\r\n       * @method deprecate\r\n       * Provides a deprecation notice for the specified event.\r\n       * Automatically emits the appropriate \"replacement\" event\r\n       * if a replacement event is configured. If no replacement\r\n       * event is configured, the deprecation notice will be written\r\n       * to the console but no replacement event will be triggered.\r\n       * @param {string} deprecatedEventName\r\n       * The name of the deprecated event.\r\n       * @param {string} [replacementEventName]\r\n       * The name of the new event.\r\n       */\r\n      deprecate: NGN.const((deprecatedEventName, replacementEventName) => {\r\n        const me = this\r\n\r\n        this.on(deprecatedEventName, function () {\r\n          NGN.WARN(`${deprecatedEventName} is deprecated. ` + (!replacementEventName ? '' : `Use ${replacementEventName} instead.`))\r\n\r\n          if (replacementEventName) {\r\n            let args = NGN.slice(arguments)\r\n\r\n            args.shift()\r\n            args.unshift(replacementEventName)\r\n\r\n            me.emit.apply(me, args)\r\n          }\r\n        })\r\n      }),\r\n\r\n      /**\r\n       * @method pool\r\n       * A helper command to create multiple related subscribers\r\n       * all at once. This is a convenience function.\r\n       * @property {string} [prefix]\r\n       * Supply a prefix to be added to every event. For example,\r\n       * `myScope.` would turn `someEvent` into `myScope.someEvent`.\r\n       * @property {Object} subscriberObject\r\n       * A key:value object where the key is the name of the\r\n       * unprefixed event and the key is the handler function.\r\n       * A value can be an object, allowing for nesting events. For example:\r\n       *\r\n       * ```js\r\n       * NGN.BUS.pool('prefix.', {\r\n       *   deep: {\r\n       *     nested: {\r\n       *       eventName: function () {\r\n       *         console.log('event triggered')\r\n       *       }\r\n       *     }\r\n       *   }\r\n       * })\r\n       *\r\n       * NGN.BUS.emit('prefix.deep.nested.eventName') // <-- Outputs \"event triggered\"\r\n       * ```\r\n       * @private\r\n       */\r\n      pool: NGN.privateconst(function (prefix, group) {\r\n        if (typeof prefix !== 'string') {\r\n          group = prefix\r\n          prefix = ''\r\n        }\r\n\r\n        let pool = {}\r\n\r\n        for (let eventName in group) {\r\n          let topic = `${NGN.coalesce(prefix, '')}${eventName}`\r\n\r\n          if (NGN.isFn(group[eventName])) {\r\n            this.increaseMaxListeners()\r\n\r\n            pool[eventName] = this.on(topic, group[eventName])\r\n          } else if (typeof group[eventName] === 'object') {\r\n            this.pool(`${topic}.`, group[eventName])\r\n          } else {\r\n            NGN.WARN(`${topic} could not be pooled in the event emitter because it's value is not a function.`)\r\n          }\r\n        }\r\n      }),\r\n\r\n      /**\r\n       * @method attach\r\n       * Attach a function to a topic. This can be used\r\n       * to forward events in response to asynchronous functions.\r\n       *\r\n       * For example:\r\n       *\r\n       * ```js\r\n       * myAsyncDataFetch(NGN.BUS.attach('topicName'))\r\n       * ```\r\n       *\r\n       * This is the same as:\r\n       *\r\n       * ```js\r\n       * myAsyncCall(function(data){\r\n       *  NGN.BUS.emit('topicName', data)\r\n       * })\r\n       * ```\r\n       * @param {string} eventName\r\n       * The name of the event to attach a handler method to.\r\n       * @param {boolean} [preventDefaultAction=false]\r\n       * Setting this to `true` will execute a `event.preventDefault()` before\r\n       * attaching the handler.\r\n       * @returns {function}\r\n       * Returns a function that will automatically be associated with an event.\r\n       */\r\n      attach: NGN.const(function (eventName, preventDefaultAction) {\r\n        preventDefaultAction = NGN.coalesce(preventDefaultAction, false)\r\n\r\n        return (e) => {\r\n          if (preventDefaultAction && !NGN.nodelike) {\r\n            e.preventDefault()\r\n          }\r\n\r\n          this.emit(eventName, ...arguments)\r\n        }\r\n      }),\r\n\r\n      /**\r\n       * @method increaseMaxListeners\r\n       * Increase the number of maximum listeners.\r\n       * @param {Number} [value = 1]\r\n       * The number of events the max listener account will be increased by.\r\n       * @private\r\n       */\r\n      increaseMaxListeners: NGN.private((count = 1) => {\r\n        this.setMaxListeners(this.getMaxListeners() + count)\r\n      }),\r\n\r\n      /**\r\n       * @method decreaseMaxListeners\r\n       * Decrease the number of maximum listeners.\r\n       * @param {Number} [value = 1]\r\n       * The number of events the max listener account will be decreased by.\r\n       * @private\r\n       */\r\n      decreaseMaxListeners: NGN.private((count = 1) => {\r\n        this.setMaxListeners(this.getMaxListeners() - count)\r\n      }),\r\n\r\n      /**\r\n       * @method forward\r\n       * A special subscriber that fires one or more event in response to\r\n       * to an event. This is used to bubble events up/down an event chain.\r\n       *\r\n       * For example:\r\n       *\r\n       * ```js\r\n       * NGN.BUS.forward('sourceEvent', ['someEvent','anotherEvent'], {payload:true})\r\n       * ```\r\n       * When `sourceEvent` is published, the bind method triggers `someEvent` and\r\n       * `anotherEvent`, passing the payload object to `someEvent` and\r\n       * `anotherEvent` subscribers simultaneously.\r\n       *\r\n       * To forward an event to another EventEmitter, see #relay.\r\n       * @param {String} sourceEvent\r\n       * The event to subscribe to.\r\n       * @param {String|Array} triggeredEvent\r\n       * An event or array of events to fire in response to the sourceEvent.\r\n       * @param {any} data\r\n       * Optional data to pass to each bound event handler.\r\n       * @returns {Object}\r\n       * Returns an object with a single `remove()` method.\r\n       */\r\n      forward: NGN.const(function (eventName, triggers, payload) {\r\n        triggers = NGN.forceArray(triggers)\r\n\r\n        let me = this\r\n        let listener = function () {\r\n          let args = NGN.slice(arguments)\r\n\r\n          if (payload) {\r\n            args.push(payload)\r\n          }\r\n\r\n          me.emit(triggers, ...args)\r\n        }\r\n\r\n        this.increaseMaxListeners()\r\n        this.on(eventName, listener)\r\n\r\n        // Provide handle back for removal of topic\r\n        return {\r\n          remove: () => {\r\n            this.decreaseMaxListeners()\r\n            this.off(eventName, listener)\r\n          }\r\n        }\r\n      }),\r\n\r\n      /**\r\n       * This relays an entire event to a different event emitter.\r\n       * For example:\r\n       *\r\n       * ```js\r\n       * let emitterA = new NGN.EventEmitter()\r\n       * let emitterB = new NGN.EventEmitter()\r\n       *\r\n       * emitterA.relay('my.event', emitterB)\r\n       *\r\n       * emitterB.on('my.event', () => { console.log('Emitter B heard the event!') })\r\n       *\r\n       * emitterA.emit('my.event') // Outputs \"Emitter B heard the event!\"\r\n       * ```\r\n       * @param  {string} eventName\r\n       * The name of the event to listen for.\r\n       * @param  {NGN.EventEmitter} targetEmitter\r\n       * The emitter to relay the event to.\r\n       * @param {string} [prefix]\r\n       * An optional prefix to prepend to the eventName.\r\n       * @param {string} [postfix]\r\n       * An optional postfix to append to the eventName.\r\n       */\r\n      relay: NGN.const(function (eventName, targetEmitter, prefix = null, postfix = null) {\r\n        let eventNameList = NGN.forceArray(eventName)\r\n\r\n        for (let i = 0; i < eventNameList.length; i++) {\r\n          let eventName = eventNameList[i]\r\n\r\n          this.on(eventName, function () {\r\n            if (NGN.typeof(this.event) === 'symbol') {\r\n              if (prefix !== null || postfix !== null) {\r\n                NGN.INFO('Cannot relay a symbol-based event with a prefix/postfix.')\r\n              }\r\n\r\n              targetEmitter.emit(...arguments)\r\n            } else {\r\n              targetEmitter.emit(`${NGN.coalesce(prefix, '')}${this.event}${NGN.coalesce(postfix, '')}`, ...arguments)\r\n            }\r\n          })\r\n        }\r\n      }),\r\n\r\n      /**\r\n       * This relays an entire event to a different event emitter. This is\r\n       * the same as #relay, but the event handler is removed after the\r\n       * first invocation of the event.\r\n       *\r\n       * For example:\r\n       *\r\n       * ```js\r\n       * let emitterA = new NGN.EventEmitter()\r\n       * let emitterB = new NGN.EventEmitter()\r\n       *\r\n       * emitterA.relayOnce('my.event', emitterB)\r\n       *\r\n       * emitterB.on('my.event', () => { console.log('Emitter B heard the event!') })\r\n       *\r\n       * emitterA.emit('my.event') // Outputs \"Emitter B heard the event!\"\r\n       * emitterA.emit('my.event') // Does nothing\r\n       * ```\r\n       * @param  {string} eventName\r\n       * The name of the event to listen for.\r\n       * @param  {NGN.EventEmitter} targetEmitter\r\n       * The emitter to relay the event to.\r\n       * @param {string} [prefix]\r\n       * An optional prefix to prepend to the eventName.\r\n       * @param {string} [postfix]\r\n       * An optional postfix to append to the eventName.\r\n       */\r\n      relayOnce: NGN.const(function (eventName, targetEmitter, prefix = null, postfix = null) {\r\n        let eventNameList = NGN.forceArray(eventName)\r\n\r\n        for (let i = 0; i < eventNameList.length; i++) {\r\n          let eventName = eventNameList[i]\r\n\r\n          this.once(eventName, function () {\r\n            if (NGN.typeof(this.event) === 'symbol') {\r\n              if (prefix !== null || postfix !== null) {\r\n                NGN.INFO('Cannot relay a symbol-based event with a prefix/postfix.')\r\n              }\r\n\r\n              targetEmitter.emit(...arguments)\r\n            } else {\r\n              targetEmitter.emit(`${NGN.coalesce(prefix, '')}${this.event}${NGN.coalesce(postfix, '')}`, ...arguments)\r\n            }\r\n          })\r\n        }\r\n      }),\r\n\r\n      /**\r\n       * @method delayEmit\r\n       * This method waits for the specified duration, then publishes an\r\n       * event once. This will publish the event only once at the end of the\r\n       * wait period, even if the event is triggered multiple times. This can\r\n       * be useful when working with many events triggered in rapid succession.\r\n       *\r\n       * For example, an NGN.DATA.Model representing a person may be used to\r\n       * track a user profile. The NGN.DATA.Model fires an event called `field.update`\r\n       * every time a data field is modified. In many cases, a user may update\r\n       * multiple fields of their profile using a form with a \"Save\" button.\r\n       * Instead of generating a new \"save\" (to disk, to memory, to an API, etc)\r\n       * operation for each field, the publishOnce event can wait until all\r\n       * changes are made before running the save operation.\r\n       *\r\n       * ```js\r\n       * // Create a data model representing a person.\r\n       * var Person = new NGN.DATA.Model({....})\r\n       *\r\n       * // Create a new person record for a user.\r\n       * var user = new Person()\r\n       *\r\n       * // When the user is modified, save the data.\r\n       * user.on('field.update', function () {\r\n       *   // Wait 300 milliseconds to trigger the save event\r\n       *   NGN.BUS.delayEmit('user.save', 300)\r\n       * })\r\n       *\r\n       * // Save the user using an API\r\n       * NGN.BUS.on('user.save', function () {\r\n       *   NGN.NET.put({\r\n       *     url: 'https://my.api.com/user',\r\n       *     json: user.data\r\n       *   })\r\n       * })\r\n       *\r\n       * // Modify the record attributes (which are blank by default)\r\n       * user.firstname = 'John'\r\n       * user.lastname = 'Doe'\r\n       * user.age = 42\r\n       *\r\n       * // Make another update 1 second later\r\n       * setTimeout(function () {\r\n       *   user.age = 32\r\n       * }, 1000)\r\n       * ```\r\n       *\r\n       * The code above sets up a model and record. Then it listens to the record\r\n       * for field updates. Each time it recognizes an update, it queues the \"save\"\r\n       * event. When the queue matures, it fires the `user.save` event.\r\n       *\r\n       * The first `field.update` is triggered when `user.firstname = 'John'` runs.\r\n       * This initiates a queue for `user.save`, set to mature in 300 millisenconds.\r\n       * Next, a `field.update` is triggered when `user.lastname = 'Doe'` runs.\r\n       * This time, since the queue for `user.save` is already initiated, notthing\r\n       * new happens. Finally, a `field.update` is triggered when `user.age = 42`\r\n       * runs. Just like the last one, nothing happens since the `user.save` queue\r\n       * is already active.\r\n       *\r\n       * The `user.save` queue \"matures\" after 300 milliseconds. This means after\r\n       * 300 milliseconds have elapsed, the `user.save` event is triggered. In this\r\n       * example, it means the `NGN.NET.put()` code will be executed. As a result,\r\n       * all 3 change (firstname, lastname, and age) will be complete before the\r\n       * API request is executed. The queue is cleared immediately.\r\n       *\r\n       * The final update occurs 1 second later (700 milliseconds after the queue\r\n       * matures). This triggers a `field.update`, but since the queue is no\r\n       * longer active, it is re-initiated. 300 milliseconds later, the `user.save`\r\n       * event is fired again, thus executing the API request again (1.3 seconds\r\n       * in total).\r\n       * @param {string} eventName\r\n       * The event/topic to publish/emit.\r\n       * @param {Number} [delay=300]\r\n       * The number of milliseconds to wait before firing the event.\r\n       * @param {Any} [payload]\r\n       * An optional payload, such as data to be passed to an event handler.\r\n       */\r\n      delayEmit: NGN.const(function (eventName, delay) {\r\n        if (!this.META.queued.hasOwnProperty(eventName)) {\r\n          let args = NGN.slice(arguments)\r\n          args.splice(1, 1)\r\n\r\n          this.META.queued[eventName] = setTimeout(() => {\r\n            delete this.META.queued[eventName]\r\n            this.emit(...args)\r\n          }, delay)\r\n        }\r\n      }),\r\n\r\n      /**\r\n       * @method getInternalCollectionId\r\n       * Returns a unique ID for special collections.\r\n       * @param {object} collection\r\n       * The collection to generate an ID for.\r\n       * @private\r\n       */\r\n      getInternalCollectionId: NGN.privateconst(function (collection) {\r\n        return Symbol(collection)\r\n        // let time = (new Date()).getTime().toString()\r\n        // let rand = Math.random().toString()\r\n        // let key = Object.keys(collection).length + 1\r\n        //\r\n        // while (collection.hasOwnProperty(`${key.toString()}${time}${rand}`)) {\r\n        //   key++\r\n        // }\r\n        //\r\n        // return `${key.toString()}${time}${rand}`\r\n      }),\r\n\r\n      /**\r\n       * @method handleCollectionTrigger\r\n       * A method to manage #chain event handlers.\r\n       * @private\r\n       */\r\n      handleCollectionTrigger: NGN.privateconst(function (eventName, key) {\r\n        let me = this\r\n\r\n        return function () {\r\n          // Use setTimeout to simulate nextTick\r\n          setTimeout(() => {\r\n            let cq = me.META.collectionQueue\r\n\r\n            if (cq[key]) {\r\n              cq[key].remainingqueue.delete(eventName)\r\n\r\n              if (cq[key].remainingqueue.size === 0) {\r\n                cq[key].remainingqueue = cq[key].masterqueue\r\n\r\n                if (NGN.isFn(cq[key].eventName)) {\r\n                  cq[key].eventName(cq[key].payload)\r\n                } else {\r\n                  me.emit(cq[key].eventName, cq[key].payload)\r\n                }\r\n              }\r\n            }\r\n          }, 0)\r\n        }\r\n      }),\r\n\r\n      /**\r\n       * @method funnel\r\n       * Emit an event after a collection of unique events have all fired.\r\n       * This can be useful in situations where multiple asynchronous actions\r\n       * must complete before another begins. For example, blending 3\r\n       * remote data sources from different API's into a single resultset\r\n       * can be achieved with this.\r\n       *\r\n       * **Example**\r\n       * ```js\r\n       * let collection = NGN.BUS.funnel(['download1done', 'download2done', 'download3done'], 'make.results')\r\n       *\r\n       * let allData = []\r\n       *\r\n       * // When all of the downloads are done, log them.\r\n       * NGN.BUS.on('make.results', () => {\r\n       *   console.log(allData)\r\n       * })\r\n       *\r\n       * // Download the first set of data asynchronously\r\n       * NGN.NET.json('http:/download1.com/data.json', (data) => {\r\n       *   allData.push(data)\r\n       *   NGN.BUS.emit('download1done')\r\n       * })\r\n       *\r\n       * // Download the second set of data asynchronously\r\n       * NGN.NET.json('http:/download2.com/data.json', (data) => {\r\n       *   allData.push(data)\r\n       *   NGN.BUS.emit('download2done')\r\n       * })\r\n       *\r\n       * // Download the third set of data asynchronously\r\n       * NGN.NET.json('http:/download3.com/data.json', (data) => {\r\n       *   allData.push(data)\r\n       *   NGN.BUS.emit('download3done')\r\n       * })\r\n       *\r\n       * // The handler can be removed with the special method:\r\n       * collection.remove()\r\n       * ```\r\n       * @param {array} eventCollection\r\n       * An array of events. Once _all_ of these events have fired,\r\n       * the triggerEventName will be fired.\r\n       * @param {string|function} triggerEventName\r\n       * The name of the event triggered after the collection has completed.\r\n       * This can also be a callback function. If a callback function is provided,\r\n       * it will receive the payload as the only argument when it is triggered.\r\n       * @param {any} [payload]\r\n       * An optional payload delivered to the #triggerEventName.\r\n       * @returns {object} collection\r\n       * Provides the key/value configuration of the collection.\r\n       * ```js\r\n       * {\r\n       *   masterqueue: ['event1', 'event2', 'etc'], // The original event array (non-editable)\r\n       *   remainingqueue: [...], // The events the BUS is still waiting for before firing the trigger event.\r\n       *   eventName: 'triggeredEventName', // Name of the event triggered after the remaining elements are flushed.\r\n       *   payload: 'anything', // OPTIONAL\r\n       *   remove: [Function]\r\n       * }\r\n       * ```\r\n       */\r\n      funnel: NGN.const((eventCollection, triggerEventName, payload = null) => {\r\n        if (NGN.typeof(eventCollection) !== 'array') {\r\n          throw new Error(`NGN.BUS.funnel expected an array of events, but received a(n) ${NGN.typeof(eventCollection)}`)\r\n        }\r\n\r\n        let collection = new Set(eventCollection)\r\n        let key = this.getInternalCollectionId(this.META.collectionQueue)\r\n\r\n        this.META.collectionQueue[key] = {}\r\n\r\n        Object.defineProperties(this.META.collectionQueue[key], {\r\n          masterqueue: NGN.const(new Set(eventCollection)),\r\n          remainingqueue: NGN.private(collection),\r\n          eventName: NGN.const(triggerEventName),\r\n          remove: NGN.const(() => {\r\n            this.META.collectionQueue[key].masterqueue.forEach(event => {\r\n              this.off(event, this.handleCollectionTrigger(event, key))\r\n            })\r\n\r\n            this.decreaseMaxListeners(this.META.collectionQueue[key].masterqueue.size)\r\n\r\n            delete this.META.collectionQueue[key]\r\n          }),\r\n          payload: NGN.const(payload)\r\n        })\r\n\r\n        this.increaseMaxListeners(collection.size)\r\n\r\n        collection.forEach(event => {\r\n          this.on(event, this.handleCollectionTrigger(event, key))\r\n        })\r\n\r\n        return this.META.collectionQueue[key]\r\n      }),\r\n\r\n      /**\r\n       * @method funnelOnce\r\n       * This provides the same functionality as #funnel, but\r\n       * removes the listener after the resultant event has fired.\r\n       * See #funnel for detailed usage.\r\n       * @param {array} eventCollection\r\n       * An array of events. Once _all_ of these events have fired,\r\n       * the triggerEventName will be fired.\r\n       * @param {string} triggerEventName\r\n       * The name of the event triggered after the collection has completed.\r\n       * @param {any} [payload]\r\n       * An optional payload delivered to the #triggerEventName.\r\n       * @returns {object} collection\r\n       * Provides the key/value configuration of the collection.\r\n       */\r\n      funnelOnce: NGN.const((eventCollection, triggerEventName, payload = null) => {\r\n        let funnelClosureEvent = `::NGNFUNNEL::${(new Date()).getTime()}::${triggerEventName}`\r\n        // let funnelClosureEvent = Symbol(triggerEventName)\r\n        let collection = this.funnel(eventCollection, funnelClosureEvent, payload)\r\n\r\n        this.increaseMaxListeners()\r\n        this.once(funnelClosureEvent, () => {\r\n          collection.remove()\r\n          collection = null\r\n          this.emit(triggerEventName, payload)\r\n        })\r\n      }),\r\n\r\n      /**\r\n       * @method threshold\r\n       * After an event is fired a predetermined number of times (the threshold),\r\n       * trigger another event or function.\r\n       *\r\n       * For example:\r\n       *\r\n       * ```js\r\n       * NGN.BUS.threshold('push.my.button', 3, 'annoyed')\r\n       *\r\n       * NGN.BUS.on('annoyed', function () {\r\n       *   console.log('We apologize for the slow response, but excessive clicking will not speed up the process.')\r\n       * })\r\n       *\r\n       * document.getElementById('#myButton').addEventListener('click', NGN.BUS.attach('push.my.button'))\r\n       * ```\r\n       *\r\n       * Once the threshold is exceeded, the final event will be triggered and\r\n       * the threshold will be reset. Using the example above, this means\r\n       * clicking 3 times on `#myButton` would trigger the `annoyed` event ONCE,\r\n       * 6 times triggers `annoyed` TWICE, 9 times triggers `annoyed` THREE times, etc.\r\n       * @param {string} thresholdEventName\r\n       * The name of the event to count.\r\n       * @param {number} limit\r\n       * The number of occurrances allowed until the final event is triggered.\r\n       * The event will be triggered at the threshold. For example, if the limit\r\n       * is `3`, the finalEvent will be triggered the 3rd time thresholdEventName is\r\n       * fired.\r\n       * @param {string|function} finalEventName\r\n       * This can be an event or callback function triggered when the threshold is crossed.\r\n       * If a callback function is specified, the payload is passed as the only argument.\r\n       * @param {any} [payload]\r\n       * An optional payload to send to the finalEvent handler(s).\r\n       * @returns {object}\r\n       * Returns an object that can be used to remove the threshold.\r\n       *\r\n       */\r\n      threshold: NGN.const(function (thresholdEventName, limit, finalEventName, payload = null) {\r\n        if (typeof thresholdEventName !== 'string') {\r\n          throw new Error('The threshold event name must be a string (received ' + (typeof thresholdEventName) + ')')\r\n        }\r\n\r\n        // let key = `${this.getInternalCollectionId(this.META.thresholdQueue)}${limit.toString()}`\r\n        let key = this.getInternalCollectionId(this.META.thresholdQueue)\r\n\r\n        this.META.thresholdQueue[key] = {}\r\n\r\n        Object.defineProperties(this.META.thresholdQueue[key], {\r\n          key: NGN.const(key),\r\n          eventName: NGN.const(thresholdEventName),\r\n          limit: NGN.const(limit),\r\n          count: NGN.private(0),\r\n          finalEventName: NGN.const(finalEventName),\r\n          remove: NGN.const(() => {\r\n            let event = this.META.thresholdQueue[key].eventName\r\n\r\n            delete this.META.thresholdQueue[key]\r\n\r\n            this.decreaseMaxListeners()\r\n            this.off(event, this.handleThresholdTrigger(key))\r\n          }),\r\n          payload: NGN.const(payload)\r\n        })\r\n\r\n        this.increaseMaxListeners()\r\n        this.on(thresholdEventName, this.handleThresholdTrigger(key))\r\n\r\n        return this.META.thresholdQueue[key]\r\n      }),\r\n\r\n      thresholdOnce: NGN.const(function (thresholdEventName, limit, finalEventName, payload = null) {\r\n        let thresholdClosureEvent = `::NGNTHRESHOLD::${(new Date()).getTime()}::${finalEventName}`\r\n        let threshold = this.threshold(thresholdEventName, limit, thresholdClosureEvent, payload)\r\n\r\n        this.once(thresholdClosureEvent, () => {\r\n          threshold.remove()\r\n          threshold = null\r\n          this.emit(finalEventName, payload)\r\n        })\r\n      }),\r\n\r\n      /**\r\n       * @method handleThresholdTrigger\r\n       * A method to manage #threshold event handlers.\r\n       * @private\r\n       */\r\n      handleThresholdTrigger: NGN.const(function (key) {\r\n        let me = this\r\n        return function () {\r\n          // Use setTimeout to simulate nextTick\r\n          setTimeout(() => {\r\n            if (me.META.thresholdQueue.hasOwnProperty(key)) {\r\n              me.META.thresholdQueue[key].count++\r\n              if (me.META.thresholdQueue[key].count === me.META.thresholdQueue[key].limit) {\r\n                if (NGN.isFn(me.META.thresholdQueue[key].finalEventName)) {\r\n                  me.META.thresholdQueue[key].finalEventName(me.META.thresholdQueue[key].payload)\r\n                } else {\r\n                  me.emit(me.META.thresholdQueue[key].finalEventName, me.META.thresholdQueue[key].payload)\r\n                }\r\n\r\n                // This if statement is required in case the event is removed\r\n                // during the reset process.\r\n                if (me.META.thresholdQueue.hasOwnProperty(key)) {\r\n                  me.META.thresholdQueue[key].count = 0\r\n                }\r\n              }\r\n            }\r\n          }, 0)\r\n        }\r\n      }),\r\n\r\n      /**\r\n       * An internal method to wrap node-based event handlers\r\n       * with the proper scope.\r\n       * @param {string} eventName\r\n       * The name of the event being handled.\r\n       * @param {function} handlerFn\r\n       * The handler function.\r\n       */\r\n      wrapEventHandlerWithScope: NGN.privateconst((name, fn) => {\r\n        if (!NGN.nodelike) {\r\n          return fn\r\n        }\r\n\r\n        const handlerFn = fn\r\n\r\n        return function () {\r\n          let args = arguments\r\n\r\n          if (typeof args[args.length - 1] === 'symbol') {\r\n            name = args[args.length - 1].toString().replace(/Symbol\\(|\\)/gi, '')\r\n            args = NGN.slice(args)\r\n            args.pop()\r\n          }\r\n\r\n          handlerFn.apply({ event: name }, args)\r\n        }\r\n      }),\r\n\r\n      /**\r\n       * An internal method to apply scope based on whether the handler\r\n       * is a Node-like \"once\" emitter or not.\r\n       * @param {string} eventName\r\n       * The name of the event being scoped.\r\n       * @param {function} handlerFn\r\n       * The handler function.\r\n       */\r\n      applyScope: NGN.privateconst((args) => {\r\n        if (NGN.nodelike && args.length > 1) {\r\n          if (args[args.length - 1].listener) {\r\n            args[args.length - 1].listener = this.wrapEventHandlerWithScope(\r\n              args[0],\r\n              args[args.length - 1].listener\r\n            )\r\n          } else {\r\n            args[args.length - 1] = this.wrapEventHandlerWithScope(\r\n              args[0],\r\n              args[args.length - 1]\r\n            )\r\n          }\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Remove all event handlers from the EventEmitter (both regular and adhoc).\r\n   * This is a shortcut for #removeAllListeners.\r\n   */\r\n  clear () {\r\n    let events = NGN.slice(arguments)\r\n\r\n    if (events.length === 0) {\r\n      this.META.wildcardEvents.clear()\r\n\r\n      let symbolEvents = []\r\n\r\n      if (NGN.nodelike) {\r\n        symbolEvents = Object.getOwnPropertySymbols(this._events)\r\n      } else {\r\n        symbolEvents = Object.getOwnPropertySymbols(this.adhoc)\r\n        symbolEvents = symbolEvents.concat(Object.getOwnPropertySymbols(this.handlers))\r\n      }\r\n\r\n      for (let i = 0; i < symbolEvents.length; i++) {\r\n        this.removeAllListeners(symbolEvents[i])\r\n      }\r\n\r\n      return this.removeAllListeners()\r\n    }\r\n\r\n    for (let i = 0; i < events.length; i++) {\r\n      this.META.wildcardEvents.delete(events[i])\r\n      this.removeAllListeners(events[i])\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Internal method used to handle TTL and wildcard management.\r\n   * @private\r\n   */\r\n  eventHandler (eventName, callback, ttl, prepend = false) {\r\n    if (NGN.typeof(ttl) === 'boolean') {\r\n      prepend = ttl\r\n      ttl = this.META.defaultTTL\r\n    }\r\n\r\n    if (ttl === undefined) {\r\n      ttl = this.META.defaultTTL\r\n    }\r\n\r\n    if (ttl > 0) {\r\n      setTimeout(() => this.off(eventName, callback), ttl)\r\n    }\r\n\r\n    if (typeof eventName === 'string' && eventName.indexOf('*') >= 0) {\r\n      this.META.wildcardEvents.add(eventName)\r\n    }\r\n\r\n    return prepend\r\n  }\r\n\r\n  /**\r\n   * @method on\r\n   * Create a new event handler for the specified event.\r\n   * @param {string|string[]|object} eventName\r\n   * Name of the event to listen for.\r\n   * If an object is passed, this method will automatically setup a #pool.\r\n   * @param {function} handler\r\n   * The method responsible for responding to the event.\r\n   * This is ignored if eventName is an object.\r\n   * @param {number} [TTL]\r\n   * Time-To-Live is the number of milliseconds before the event handler\r\n   * is automatically removed. This is useful for automatically cleaning\r\n   * up limited-life event handlers.\r\n   * @param {boolean} [prepend=false]\r\n   * When set to `true`, the event is added to the beginning of\r\n   * the processing list instead of the end.\r\n   * This is ignored if eventName is an object.\r\n   */\r\n  on (eventName, callback, ttl, prepend = false) {\r\n    if (NGN.typeof(eventName) === 'array') {\r\n      for (let i = 0; i < eventName.length; i++) {\r\n        this.on(eventName[i], callback, ttl, prepend)\r\n      }\r\n\r\n      return\r\n    }\r\n\r\n    if (this.eventHandler(...arguments)) {\r\n      this.prependListener(eventName, callback)\r\n    } else {\r\n      this.addListener(eventName, callback)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method once\r\n   * Create a new event handler for the specified event. The\r\n   * handler will be removed immediately after it is executed. This\r\n   * effectively listens for an event to happen once and only once\r\n   * before the handler is destroyed.\r\n   * @param  {string} eventName\r\n   * Name of the event to listen for.\r\n   * @param  {Function} handler\r\n   * The method responsible for responding to the event.\r\n   * @param {boolean} [prepend=false]\r\n   * When set to `true`, the event is added to the beginning of\r\n   * the processing list instead of the end.\r\n   */\r\n  once (eventName, callback, ttl, prepend = false) {\r\n    if (NGN.typeof(eventName) === 'array') {\r\n      for (let i = 0; i < eventName.length; i++) {\r\n        this.once(eventName[i], callback, ttl, prepend)\r\n      }\r\n\r\n      return\r\n    }\r\n\r\n    if (this.eventHandler(...arguments)) {\r\n      this.prependOnceListener(eventName, callback)\r\n    } else {\r\n      super.once(eventName, this.wrapEventHandlerWithScope(eventName, callback))\r\n    }\r\n  }\r\n\r\n  // The following methods override the Node event emitter only when necessary.\r\n  prependListener () {\r\n    this.applyScope(arguments)\r\n    super.prependListener(...arguments)\r\n  }\r\n\r\n  prependOnceListener () {\r\n    this.applyScope(arguments)\r\n    super.prependOnceListener(...arguments)\r\n  }\r\n\r\n  addListener () {\r\n    this.applyScope(arguments)\r\n    super.addListener(...arguments)\r\n  }\r\n\r\n  removeListener () {\r\n    if (arguments[arguments.length - 1] !== true) {\r\n      this.applyScope(arguments)\r\n    }\r\n\r\n    super.removeListener(...arguments)\r\n  }\r\n\r\n  /**\r\n   * @method emit\r\n   * Emits an event.\r\n   * @param {string[]} eventName\r\n   * The event name can be a string or an array of strings. If an array\r\n   * of strings is specified, an event will be fired for each event name\r\n   * within the array.\r\n   * @param {any} [payload]\r\n   * An optional payload. This can be any number of additional arguments.\r\n   */\r\n  emit () {\r\n    if (NGN.typeof(arguments[0]) === 'array') {\r\n      let args = NGN.slice(arguments)\r\n      let eventNames = args.shift()\r\n\r\n      for (let i = 0; i < eventNames.length; i++) {\r\n        this.emit(eventNames[i], ...args)\r\n      }\r\n\r\n      return\r\n    }\r\n\r\n    // This catches non-string event names. NGN internally uses Symbols\r\n    // for the NGN.WARN/INFO/ERROR event names to prevent name collisions.\r\n    // This check provides support for these special events. These types\r\n    // of events will never have wildcards.\r\n    if (!NGN.nodelike || !arguments[0] || this.META.wildcardEvents.size === 0) {\r\n      super.emit(...arguments)\r\n      return\r\n    }\r\n\r\n    if (NGN.nodelike && typeof arguments[0] === 'symbol') {\r\n      super.emit(...arguments)\r\n      return\r\n    }\r\n\r\n    /**\r\n     * The NGN browser-based event emitter supports wildcards natively, but\r\n     * Node.js does not. This adds simple wildcard support for Node. The\r\n     * only wildcard character supported at this time is `*`. This feature\r\n     * will check the event name for the existance of a wildcard. If a\r\n     * wilcard character is present, the internally-maintained list of\r\n     * wildcard events is checked to see if it's a known event. If none\r\n     * of these checks pass, the standard event emitter is used, otherwise\r\n     * special wildcard handling is used.\r\n     */\r\n    let iterator = this.META.wildcardEvents.values()\r\n    let currentEvent = null\r\n    let args = NGN.slice(arguments)\r\n\r\n    args.shift()\r\n\r\n    while (currentEvent === null || !currentEvent.done) {\r\n      if (currentEvent !== null && currentEvent.value !== arguments[0]) {\r\n        let pattern = new RegExp(currentEvent.value.replace(/\\./g, '\\\\.').replace(/\\*/g, '.*'), 'g')\r\n\r\n        if (pattern.test(arguments[0])) {\r\n          super.emit(currentEvent.value, ...args, typeof arguments[0] !== 'symbol' ? Symbol(arguments[0]) : arguments[0])\r\n          break\r\n        }\r\n      }\r\n\r\n      currentEvent = iterator.next()\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @class EventEmitterBase\r\n * This is an extendable generic class used to apply event management\r\n * to non-DOM objects, such as data models, logging, and other common\r\n * elements of JavaScript programming.\r\n * @protected\r\n */\r\nexport default class BrowserEmitter { // eslint-disable-line no-unused-vars\r\n  /**\r\n   * @constructor\r\n   * ```\r\n   * let EE = new EventEmitter()\r\n   * ```\r\n   * This is a protected class. It is most commonly instantiated through\r\n   * the NGN namespace (i.e. `new NGN.EventEmitter()`). However; it is\r\n   * designed for use within the NGN library, not directly as an event emitter.\r\n   * Use with caution.\r\n   */\r\n  constructor (cfg) {\r\n    cfg = cfg || {}\r\n\r\n    Object.defineProperties(this, {\r\n      handlers: NGN.private({}),\r\n      adhoc: NGN.private({}),\r\n      maxlisteners: NGN.private(cfg.defaultMaxListeners || 25)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @property {object} subscribers\r\n   * An array of all subscribers which currently have a registered event handler.\r\n   * @warning This is a UI-only method.\r\n   */\r\n  get subscribers () {\r\n    let subscriberList = {}\r\n\r\n    for (let eventName in this.handlers) {\r\n      subscriberList[eventName] = {\r\n        handler: this.handlers[eventName].length,\r\n        adhoc: 0\r\n      }\r\n    }\r\n\r\n    for (let eventName in this.adhoc) {\r\n      subscriberList[eventName] = subscriberList[eventName] || {\r\n        handler: 0\r\n      }\r\n\r\n      subscriberList[eventName].adhoc = this.adhoc[eventName].length\r\n    }\r\n\r\n    return subscriberList\r\n  }\r\n\r\n  /**\r\n   * @property defaultMaxListeners\r\n   * The maximum number of listeners for a single event.\r\n   */\r\n  get defaultMaxListeners () {\r\n    return this.maxlisteners\r\n  }\r\n\r\n  set defaultMaxListeners (value) {\r\n    this.maxlisteners = value\r\n  }\r\n\r\n  /**\r\n   * @method {number} listenerCount\r\n   * The number of listeners for a specific event.\r\n   * @param {string} eventName\r\n   * The name of the event to count listeners for.\r\n   */\r\n  listenerCount (eventName) {\r\n    return (this.handlers[eventName] || []).length +\r\n      (this.adhoc[eventName] || []).length\r\n  }\r\n\r\n  /**\r\n   * @method getMaxListeners\r\n   * A node-like reference to the #defaultMaxListeners value.\r\n   * @return {number}\r\n   */\r\n  getMaxListeners () {\r\n    return this.defaultMaxListeners\r\n  }\r\n\r\n  /**\r\n   * @method setMaxListeners\r\n   * A node-like reference to the #defaultMaxListeners value (setter).\r\n   */\r\n  setMaxListeners (value) {\r\n    this.defaultMaxListeners = value\r\n  }\r\n\r\n  /**\r\n   * @method eventNames\r\n   * A node-like reference providing an array of recognized event names.\r\n   * @return {array}\r\n   */\r\n  eventNames () {\r\n    let handlers = Object.keys(this.handlers)\r\n    let adhoc = Object.keys(this.adhoc)\r\n    return NGN.dedupe(handlers.concat(adhoc))\r\n  }\r\n\r\n  /**\r\n   * @method listeners\r\n   * Returns the raw listener methods for the event.\r\n   * @param {string} eventName\r\n   * Name of the event to retrieve listeners for.\r\n   * @return {array}\r\n   */\r\n  listeners (eventName) {\r\n    let handlers = this.handlers[eventName] || []\r\n    let adhoc = this.adhoc[eventName] || []\r\n    return handlers.concat(adhoc)\r\n  }\r\n\r\n  /**\r\n   * @method addListener\r\n   * Create a new event handler for the specified event.\r\n   * @param  {string|object} eventName\r\n   * Name of the event to listen for.\r\n   * If an object is passed, this method will automatically setup a #pool.\r\n   * @param  {Function} handler\r\n   * The method responsible for responding to the event.\r\n   * This is ignored if eventName is an object.\r\n   */\r\n  addListener (eventName, callback) {\r\n    if (typeof eventName === 'object') {\r\n      return this.pool(eventName)\r\n    }\r\n\r\n    this.handlers[eventName] = this.handlers[eventName] || []\r\n    this.handlers[eventName].unshift(callback)\r\n    this.emit('newListener', eventName, callback)\r\n\r\n    if (this.listenerCount(eventName) > this.maxlisteners) {\r\n      throw new Error('Maximum event listeners exceeded. Use setMaxListeners() to adjust the level.')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method prependListener\r\n   * This is the same as #addListener, except the event handler is added to the end of the queue.\r\n   * @param  {string|object} eventName\r\n   * Name of the event to listen for.\r\n   * If an object is passed, this method will automatically setup a #pool.\r\n   * @param  {Function} handler\r\n   * The method responsible for responding to the event.\r\n   * This is ignored if eventName is an object.\r\n   */\r\n  prependListener (eventName, callback) {\r\n    if (typeof eventName === 'object') {\r\n      return this.pool(eventName)\r\n    }\r\n\r\n    this.handlers[eventName] = this.handlers[eventName] || []\r\n    this.handlers[eventName].push(callback)\r\n    this.emit('newListener', eventName, callback)\r\n\r\n    if (this.listenerCount(eventName) > this.maxlisteners) {\r\n      throw new Error('Maximum event listeners exceeded. Use setMaxListeners() to adjust the level.')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method onceListener\r\n   * Create a new event handler for the specified event. The\r\n   * handler will be removed immediately after it is executed. This\r\n   * effectively listens for an event to happen once and only once\r\n   * before the handler is destroyed.\r\n   * @param  {string} eventName\r\n   * Name of the event to listen for.\r\n   * @param  {Function} handler\r\n   * The method responsible for responding to the event.\r\n   */\r\n  once (eventName, callback) {\r\n    this.adhoc[eventName] = this.adhoc[eventName] || []\r\n    this.adhoc[eventName].push(callback)\r\n    this.emit('newListener', eventName, callback)\r\n\r\n    if (this.listenerCount(eventName) > this.maxlisteners) {\r\n      throw new Error('Maximum event listeners exceeded. Use setMaxListeners() to adjust the level.')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method prependOnceListener\r\n   * A node-like reference to the #once method, adding events to the\r\n   * beginning of the event list (processed before others) instead of the end.\r\n   * @param  {string} eventName\r\n   * Name of the event to listen for.\r\n   * @param  {Function} handler\r\n   * The method responsible for responding to the event.\r\n   */\r\n  prependOnceListener (eventName, callback) {\r\n    this.adhoc[eventName] = this.adhoc[eventName] || []\r\n    this.adhoc[eventName].unshift(callback)\r\n    this.emit('newListener', eventName, callback)\r\n\r\n    if (this.listenerCount(eventName) > this.maxlisteners) {\r\n      throw new Error('Maximum event listeners exceeded. Use setMaxListeners() to adjust the level.')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method removeListener\r\n   * Remove an event handler. If no handler is specified, all handlers for\r\n   * the specified event will be removed.\r\n   * @param {string} eventName\r\n   * Name of the event to remove.\r\n   * @param {function} [handlerFn]\r\n   * The handler function to remove from the event handlers.\r\n   */\r\n  removeListener (eventName, handlerFn) {\r\n    this.deleteEventHandler('handlers', eventName, handlerFn)\r\n    this.deleteEventHandler('adhoc', eventName, handlerFn)\r\n  }\r\n\r\n  /**\r\n   * @method deleteEventHandler\r\n   * Remove a specific event handler.\r\n   * @param {string} type\r\n   * Either `handler` (multi-use events) or `adhoc` (one-time events)\r\n   * @param {string} eventName\r\n   * Name of the event to remove.\r\n   * @param {function} handlerFn\r\n   * The handler function to remove from the event handlers.\r\n   * @private\r\n   */\r\n  deleteEventHandler (type, eventName, handlerFn) {\r\n    let scope = this[type]\r\n\r\n    if (scope[eventName]) {\r\n      if (!handlerFn) {\r\n        delete scope[eventName]\r\n        return\r\n      }\r\n\r\n      let result = []\r\n      scope[eventName].forEach((handler) => {\r\n        if (handler.toString() !== handlerFn.toString()) {\r\n          result.push(handler)\r\n        }\r\n      })\r\n\r\n      if (result.length === 0) {\r\n        delete scope[eventName]\r\n        return\r\n      }\r\n\r\n      scope[eventName] = result\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method removeAllListeners\r\n   * Remove all event handlers from the EventEmitter (both regular and adhoc).\r\n   */\r\n  removeAllListeners (eventName = null) {\r\n    if (eventName !== null) {\r\n      delete this.handlers[eventName]\r\n      delete this.adhoc[eventName]\r\n    } else {\r\n      this.handlers = {}\r\n      this.adhoc = {}\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method emit\r\n   * Fires an event. This method accepts one or more arguments. The\r\n   * first argument is always the event name, followed by any number\r\n   * of payload arguments.\r\n   *\r\n   * Example:\r\n   * ```\r\n   * const EE = new NGN.EventEmitter()\r\n   *\r\n   * EE.emit('someevent', {payload: 1}, {payload: 2})\r\n   * ```\r\n   * The example above triggers an event called `someevent` and applies\r\n   * the remaining two arguments to any event handlers.\r\n   * @param {string} eventName\r\n   * The name of the event to trigger.\r\n   */\r\n  emit () {\r\n    let args = NGN.slice(arguments)\r\n    const eventName = args.shift()\r\n    const events = this.getAllEvents(eventName)\r\n\r\n    if (typeof eventName === 'symbol') {\r\n      events.push(eventName)\r\n    }\r\n\r\n    let scope = {\r\n      event: eventName\r\n    }\r\n\r\n    for (let name = 0; name < events.length; name++) {\r\n      let adhocEvent = this.adhoc[events[name]]\r\n\r\n      // Adhoc event handling\r\n      if (adhocEvent) {\r\n        delete this.adhoc[events[name]]\r\n\r\n        while (adhocEvent.length > 0) {\r\n          let fn = adhocEvent.pop()\r\n\r\n          scope.handler = fn\r\n\r\n          fn.apply(scope, args)\r\n        }\r\n      }\r\n\r\n      // Regular event handling\r\n      let handler = this.handlers[events[name]]\r\n\r\n      if (handler) {\r\n        for (let fn = 0; fn < handler.length; fn++) {\r\n          scope.handler = handler[fn]\r\n          handler[fn].apply(scope, args)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method getAllEvents\r\n   * Returns all of the events that match an event name. The event name\r\n   * may contain wildcards (i.e. `*`) or it can be a regular expression.\r\n   * @param  {string|regexp} eventName\r\n   * A string or regular expression defining which event names to identify.\r\n   * A string value containing an asterisk (*) will be converted to a regular\r\n   * expression for simplistic wildcard event handling purposes.\r\n   * @return {array}\r\n   * An array of unique event names with handlers or adhoc handlers.\r\n   * @private\r\n   */\r\n  getAllEvents (eventName) {\r\n    const regularEvents = Object.keys(this.handlers)\r\n    const adhocEvents = Object.keys(this.adhoc)\r\n    let allEvents = NGN.dedupe(regularEvents.concat(adhocEvents))\r\n\r\n    allEvents = allEvents.filter(function (event) {\r\n      // If the event is an exact match, don't filter it out.\r\n      if (event === eventName) {\r\n        return true\r\n      }\r\n\r\n      // If the event is a regexp/wildcard, further processing is necessary.\r\n      if (NGN.typeof(event) === 'regexp' || event.indexOf('*') >= 0) {\r\n        // Convert wildcard events to a regular expression.\r\n        if (NGN.typeof(event) !== 'regexp') {\r\n          event = new RegExp(event.replace(/\\./g, '\\\\.').replace(/\\*/g, '.*'), 'g')\r\n        }\r\n        // If the event name matches the event, keep it.\r\n        return event.test(eventName)\r\n      }\r\n\r\n      // None of the criteria were met. Ignore the event.\r\n      return false\r\n    })\r\n\r\n    return allEvents\r\n  }\r\n}\r\n","/**\r\n * @class NGN.UTILITY.Lexer\r\n * This class performs scans static text for tokens, based on a grammar.\r\n * It is designed to work with NGN.UTILITY.Tokenizer to convert text into\r\n * a sequence of tokens (strings with an identified \"meaning\").\r\n *\r\n * This class was inspired by https://github.com/aaditmshah/lexer (MIT).\r\n *\r\n * ```js\r\n * let lexer = new NGN.UTILITY.Lexer('hello\\nworld\\nand moon')\r\n *\r\n * lexer.addRule(/hello/i, function (str) {\r\n *   return 'hi' // \"hi\" is the name of the token\r\n * })\r\n *\r\n * lexer.addRule(/world/i, function (str) {\r\n *   return 'planet'\r\n * })\r\n *\r\n * // Create an error if a rule passes. In this case, prevent the word \"moon\".\r\n * lexer.addRule(/moon/i, function (str) {\r\n *   this.error()\r\n * })\r\n *\r\n * console.log(lexer.next())\r\n *\r\n * // OUTPUT\r\n * // {\r\n * //   line: 1,\r\n * //   column: 1,\r\n * //   index: 0,\r\n * //   token: 'hi',\r\n * //   length: 5,\r\n * //   input: 'hello'\r\n * // }\r\n *\r\n * lexer.next() // Returns the next token\r\n * ```\r\n *\r\n * The lexer contains two built-in rules to determine the beginning of\r\n * file/content (token `BOF`) and the end of file content (token `EOF`).\r\n */\r\nexport default class NGNLexer { // eslint-disable-line no-unused-vars\r\n  /**\r\n   * Create a new lexer instance.\r\n   * @param  {String} [input='']\r\n   * Initialize with text input.\r\n   */\r\n  constructor (statement = '') {\r\n    Object.defineProperties(this, {\r\n      tokens: NGN.private([]),\r\n      rules: NGN.private([]),\r\n      remove: NGN.private(0),\r\n      state: NGN.private(0),\r\n      index: NGN.private(0),\r\n      statement: NGN.private(statement),\r\n      reject: NGN.private(false),\r\n      lastLineIndex: NGN.private(0),\r\n      currentLength: NGN.private(0),\r\n      currentMatch: NGN.private(null),\r\n      row: NGN.private(1),\r\n      unrecognizedCharacters: NGN.private(false)\r\n    })\r\n\r\n    // Identify beginning of file/statement\r\n    this.addRule(/^/, function () {\r\n      return 'BOF'\r\n    })\r\n\r\n    // Identify end of file/statement\r\n    this.addRule(/$/, function () {\r\n      return 'EOF'\r\n    })\r\n\r\n    if (statement && statement.length > 0) {\r\n      this.input = statement\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @property {String} value\r\n   * The input text to analyze. Changing this automatically resets the lexer.\r\n   */\r\n  set input (value) {\r\n    this.remove = 0\r\n    this.state = 0\r\n    this.index = 0\r\n    this.currentMatch = null\r\n    this.tokens = []\r\n    this.row = 1\r\n    this.statement = value\r\n  }\r\n\r\n  get input () {\r\n    return this.statement\r\n  }\r\n\r\n  /**\r\n   * @property {number} lines\r\n   * The number of lines in the input text.\r\n   */\r\n  get lines () {\r\n    return this.statement.split('\\n').length\r\n  }\r\n\r\n  /**\r\n   * @property {boolean} unrecognized\r\n   * Set this to `true` within a rule if a value is unrecognized.\r\n   * The more common approach is to use the #error method, which\r\n   * sets this to `true` when a rule should produce an error.\r\n   */\r\n  get unrecognized () {\r\n    return this.unrecognizedCharacters\r\n  }\r\n\r\n  set unrecognized (value) {\r\n    // TODO: NGN.forceBoolean\r\n    this.reject = true\r\n    this.unrecognizedCharacters = NGN.forceBoolean(value)\r\n  }\r\n\r\n  /**\r\n   * @property {number} currentLine\r\n   * Retrieves the current line wherever the lexer left off (i.e. last\r\n   * recognized token).\r\n   */\r\n  get currentLine () {\r\n    return this.row\r\n  }\r\n\r\n  /**\r\n   * @property {number} currentColumn\r\n   * Retrieves the current column wherever the lexer left off (i.e. last\r\n   * recognized token).\r\n   */\r\n  get currentColumn () {\r\n    let col = (this.index - this.lastLineIndex) - this.currentLength\r\n\r\n    return col === 0 ? 1 : col\r\n  }\r\n\r\n  /**\r\n   * Called within a rule to force an error. This is most commonly used\r\n   * when a block of text contains a value it shouldn't.\r\n   * @param  {String} [message]\r\n   * An optional message prefixed to the error message.\r\n   */\r\n  error (message) {\r\n    if (message) {\r\n      let col = (this.index - this.lastLineIndex) - 1\r\n\r\n      throw new Error(`${message} at line ${this.currentLine}, column ${col < 1 ? 1 : col}.`)\r\n    }\r\n\r\n    this.unrecognized = true\r\n  }\r\n\r\n  /**\r\n   * Add a rule for detecting a token.\r\n   * @param {RegExp} pattern\r\n   * The pattern is applied to the text to determine whether the action should\r\n   * be triggered or not.\r\n   * @param {Function|String} action\r\n   * The action method is executed when a pattern match is detected. If the\r\n   * action is a function, it must return the name of the token. Functions\r\n   * receive a single argument, which is the text that matched the rule.\r\n   *\r\n   * If a string is provided as the action, that string will be returned as\r\n   * the token value whenever a pattern match occurs. This is a convenient\r\n   * way to avoid repetitively writing the following type of token handler:\r\n   *\r\n   * ```js\r\n   * function () {\r\n   *   return 'token'\r\n   * }\r\n   * ```\r\n   * @param {Array} [start=[0]]\r\n   * An optional array of unsigned integers acting as\r\n   * [start conditions](http://flex.sourceforge.net/manual/Start-Conditions.html).\r\n   * By default all rules are active in the initial state (i.e. `0`).\r\n   */\r\n  addRule (pattern, action, start = [0]) {\r\n    if (!pattern.global) {\r\n      let flags = 'g'\r\n\r\n      if (pattern.multiline) {\r\n        flags += 'm'\r\n      }\r\n\r\n      if (pattern.ignoreCase) {\r\n        flags += 'i'\r\n      }\r\n\r\n      pattern = new RegExp(pattern.source, flags)\r\n    }\r\n\r\n    let actionFn\r\n    if (typeof action === 'string') {\r\n      actionFn = function () {\r\n        return action\r\n      }\r\n    } else {\r\n      actionFn = action\r\n    }\r\n\r\n    if (!NGN.isFn(actionFn)) {\r\n      throw new Error(`INVALID LEXER ATTRIBUTES: ${pattern.toString()} rule is missing a valid handler function (action) or token name.`)\r\n    }\r\n\r\n    let actionString = actionFn.toString()\r\n\r\n    if (actionString.indexOf('this.error(') >= 0 && /^\\(.*\\)\\s{0,10}=>\\s{0,10}\\{/.test(actionString)) {\r\n      throw new Error('Cannot use a non-lexical expression (arrow function) as a lexer rule.')\r\n    }\r\n\r\n    this.rules.push({\r\n      pattern,\r\n      global: pattern.global,\r\n      action: actionFn,\r\n      start\r\n    })\r\n  }\r\n\r\n  /**\r\n   * An iterator method.\r\n   * @return {Object}\r\n   * Returns the next recognized token as a detailed object:\r\n   *\r\n   * ```js\r\n   * {\r\n   *   line: 1,\r\n   *   column: 1,\r\n   *   index: 0,\r\n   *   token: 'token name',\r\n   *   length: 5,\r\n   *   input: 'original input string'\r\n   * }\r\n   */\r\n  next () {\r\n    if (this.tokens.length) {\r\n      return this.tokens.shift()\r\n    }\r\n\r\n    this.reject = true\r\n\r\n    while (this.index <= this.statement.length) {\r\n      // Count any new line & reset column\r\n      if (/\\n/i.test(this.statement.charAt(this.index))) {\r\n        this.row++\r\n        this.lastLineIndex = this.index\r\n      }\r\n\r\n      let matches = this.scan().splice(this.remove)\r\n      let index = this.index\r\n\r\n      while (matches.length) {\r\n        if (this.reject) {\r\n          let match = matches.shift()\r\n          let result = match.result\r\n          let length = match.length\r\n\r\n          this.index += length\r\n          this.currentLength = length\r\n          this.reject = false\r\n          this.remove++\r\n          let token = match.action.apply(this, result)\r\n\r\n          if (this.reject) {\r\n            this.index = result.index\r\n          } else if (token !== undefined) {\r\n            switch (NGN.typeof(token)) {\r\n              case 'array':\r\n                this.tokens = token.slice(1)\r\n                token = token[0]\r\n\r\n              default: // eslint-disable-line no-fallthrough\r\n                if (length) {\r\n                  this.remove = 0\r\n                }\r\n\r\n                return token\r\n            }\r\n          }\r\n        } else {\r\n          break\r\n        }\r\n      }\r\n\r\n      let input = this.statement\r\n\r\n      if (index < input.length) {\r\n        if (this.reject) {\r\n          this.remove = 0\r\n\r\n          let token = this.unexpected(input.substr(this.index++, this.index + input.length))\r\n\r\n          if (token !== undefined) {\r\n            if (NGN.typeof(token) === 'array') {\r\n              this.tokens = token.slice(1)\r\n              return token[0]\r\n            } else {\r\n              return token\r\n            }\r\n          }\r\n        } else {\r\n          if (this.index !== index) {\r\n            this.remove = 0\r\n          }\r\n\r\n          this.reject = true\r\n        }\r\n      } else if (matches.length) {\r\n        this.reject = true\r\n      } else {\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Scan the text and apply rules.\r\n   * @private\r\n   */\r\n  scan () {\r\n    let matches = []\r\n    let index = 0\r\n    let state = this.state\r\n    let lastIndex = this.index\r\n    let input = this.statement\r\n\r\n    for (let i = 0, length = this.rules.length; i < length; i++) {\r\n      let rule = this.rules[i]\r\n      let start = rule.start\r\n      let states = start.length\r\n\r\n      if (\r\n        (!states || start.indexOf(state) >= 0) ||\r\n          (state % 2 && states === 1 && !start[0])\r\n      ) {\r\n        let pattern = rule.pattern\r\n        pattern.lastIndex = lastIndex\r\n        let result = pattern.exec(input)\r\n\r\n        if (result && result.index === lastIndex) {\r\n          let j = matches.push({\r\n            result,\r\n            action: rule.action,\r\n            length: result[0].length\r\n          })\r\n\r\n          if (rule.global) {\r\n            index = j\r\n          }\r\n\r\n          while (--j > index) {\r\n            let k = j - 1\r\n\r\n            if (matches[j].length > matches[k].length) {\r\n              let temple = matches[j]\r\n              matches[j] = matches[k]\r\n              matches[k] = temple\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return matches\r\n  }\r\n\r\n  /**\r\n   * Handles unexpected character sequences.\r\n   * This may throw an error if the characters are unrecognized.\r\n   * @param  {String} characters\r\n   * The characters which triggered the unexpected flag.\r\n   * @private\r\n   */\r\n  unexpected (str) {\r\n    if (this.unrecognizedCharacters) {\r\n      let col = (this.index - this.lastLineIndex) - 1\r\n\r\n      throw new Error(`Unexpected syntax at line ${this.currentLine}, column ${col < 1 ? 1 : col}\\nat ${str}\\n   ^`)\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @class NGN.UTILITY.Tokenizer\r\n * Given a grammar, a tokenizer will perform lexical analysis of text.\r\n * In simple terms, it will extract tokens from text. This is accomplished\r\n * by applying rules with a NGN.UTILITY.Lexer and capturing responses.\r\n *\r\n * The NGN.DATA.JQL class is an implementation of a tokenizer. It extracts\r\n * tokens from JQL queries, splitting them into tokens that can be used in\r\n * programs.\r\n */\r\nexport default class NGNTokenizer { // eslint-disable-line no-unused-vars\r\n  /**\r\n   * Create a new tokenizer. This will return an instance of itself,\r\n   * allowing for methods to be chained like `(new Tokenizker([...])).parse('...')`.\r\n   * @param  {Array}  [grammar=[]]\r\n   * A grammar is a collection of rules that are passed to\r\n   * NGN.UTILITY.Lexer#addRule.\r\n   *\r\n   * The following example provides a subset of the NGN.DATA.JQL grammar.\r\n   *\r\n   * ```js\r\n   * new Tokenizer([\r\n   *   // Disallow irrelevant keywords (SQL)\r\n   *   [\r\n   *     /FROM/i,\r\n   *     function () {\r\n   *       this.error('FROM is not a valid JQL query descriptor. Found')\r\n   *     }\r\n   *   ],\r\n   *\r\n   *   // Skip whitespace\r\n   *   [/\\s+/, function () {}],\r\n   *\r\n   *   // Common tokens\r\n   *   [/SELECT\\s{1,1000}/i, 'SELECT'],\r\n   *   [/DISTINCT\\s{1,1000}/i, 'DISTINCT'],\r\n   *   [/WHERE\\s{1,1000}/i, 'WHERE'],\r\n   *   [/ORDER BY\\s{1,1000}/i, 'ORDERBY']\r\n   * ])\r\n   * ```\r\n   */\r\n  constructor (grammar = []) {\r\n    if (grammar.length === 0) {\r\n      throw new Error('No grammaer rules specified.')\r\n    }\r\n\r\n    Object.defineProperties(this, {\r\n      statement: NGN.private(null),\r\n      rules: NGN.privateconst(grammar),\r\n\r\n      PROTECTED: NGN.privateconst({\r\n        lexer: new NGN.UTILITY.Lexer(),\r\n        activeText: null,\r\n        orderedList: new Set()\r\n      })\r\n    })\r\n\r\n    // Add rules\r\n    for (let i = 0; i < this.rules.length; i++) {\r\n      this.PROTECTED.lexer.addRule(this.rules[i][0], this.rules[i][1])\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * @property {string} text\r\n   * The text being \"tokenized\".\r\n   */\r\n  get text () {\r\n    return this.PROTECTED.activeText\r\n  }\r\n\r\n  /**\r\n   * @property {Array} orderedTokenList\r\n   * An ordered list of tokens as they appear within the text.\r\n   *\r\n   * **Example Result:**\r\n   *\r\n   * ```js\r\n   * [{\r\n   *   column: 1,\r\n   *   index: 0,\r\n   *   input: 'original string',\r\n   *   length: 15,\r\n   *   line: 4,\r\n   *   token: 'mytoken'\r\n   * }, {\r\n   *   ...\r\n   * }]\r\n   * ```\r\n   */\r\n  get orderedTokenList () {\r\n    return Array.from(this.PROTECTED.orderedList).map(item => item.detail)\r\n  }\r\n\r\n  /**\r\n   * Parses text to generate a token list.\r\n   * @param  {string} text\r\n   * The text to parse.\r\n   * @param  {Boolean} [suppressXOF=true]\r\n   * By default, `BOF` (Beginning of File) and `EOF` (End of File) tokens are\r\n   * suppressed. Set this to `false` to enable them.\r\n   * @return {Array}\r\n   * Returns an array of tokens.\r\n   *\r\n   * **Example Result:**\r\n   *\r\n   * ```js\r\n   * [{\r\n   *   column: 1,\r\n   *   index: 0,\r\n   *   input: 'original string',\r\n   *   length: 15,\r\n   *   line: 4,\r\n   *   token: 'mytoken'\r\n   * }, {\r\n   *   ...\r\n   * }]\r\n   * ```\r\n   */\r\n  parse (text, ignoreXOF = true) {\r\n    if (!NGN.coalesce(text) || typeof text !== 'string') {\r\n      throw new Error('Cannot parse empty string or non-string.')\r\n    }\r\n\r\n    this.PROTECTED.activeText = text\r\n\r\n    let tokens = {}\r\n    let token\r\n\r\n    this.PROTECTED.lexer.input = text\r\n    this.PROTECTED.orderedList.clear()\r\n\r\n    while (token = this.PROTECTED.lexer.next()) { // eslint-disable-line no-cond-assign\r\n      if (!ignoreXOF || (token !== 'BOF' && token !== 'EOF')) {\r\n        tokens[token] = NGN.coalesce(tokens[token], [])\r\n\r\n        tokens[token].push({\r\n          line: this.PROTECTED.lexer.currentLine,\r\n          column: this.PROTECTED.lexer.currentColumn,\r\n          length: this.PROTECTED.lexer.currentLength,\r\n          index: this.PROTECTED.lexer.index - this.PROTECTED.lexer.currentLength,\r\n          input: this.PROTECTED.lexer.statement.substr(this.PROTECTED.lexer.index - this.PROTECTED.lexer.currentLength, this.PROTECTED.lexer.currentLength)\r\n        })\r\n\r\n        const index = tokens[token].length - 1\r\n\r\n        this.PROTECTED.orderedList.add({\r\n          index: index,\r\n          token: token,\r\n          get detail () {\r\n            return Object.assign(tokens[this.token][this.index], {token: this.token})\r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n    return tokens\r\n  }\r\n}\r\n","/**\r\n * @class NGN.UTILITY.Set\r\n * Provides advanced features for [Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set)\r\n * objects.\r\n */\r\nexport default class NGNSet { // eslint-disable-line\r\n  /**\r\n   * Indicates the subset is wholly contained within the main set.\r\n   * @param  {Set}  mainset\r\n   * @param  {Set}  subset\r\n   * @return {Boolean}\r\n   */\r\n  static isSuperSet (mainset, subset) {\r\n    if (subset.size > mainset.size || subset.size === 0) {\r\n      return false\r\n    }\r\n\r\n    let elements = mainset.values()\r\n    let element = elements.next()\r\n\r\n    while (!element.done) {\r\n      if (!mainset.has(element.value)) {\r\n        return false\r\n      }\r\n\r\n      element = elements.next()\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * Join any number of sets together into a single aggregate set.\r\n   * Only unique values will be added.\r\n   * Accepts any number of Set arguments.\r\n   * @return {Set}\r\n   */\r\n  static concat () {\r\n    let aggregate = new Set(arguments[0])\r\n\r\n    for (let i = 1; i < arguments.length; i++) {\r\n      let elements = arguments[i].values()\r\n      let element = elements.next()\r\n\r\n      while (!element.done) {\r\n        aggregate.add(element.value)\r\n        element = elements.next()\r\n      }\r\n    }\r\n\r\n    return aggregate\r\n  }\r\n\r\n  /**\r\n   * Identify the intersection/overlap between two sets.\r\n   * @param  {Set} setA\r\n   * @param  {Set} setB\r\n   * @return {Set}\r\n   * Returns a Set containing the common elements of setA and setB.\r\n   */\r\n  static intersection (setA, setB) {\r\n    let intersection = new Set()\r\n    let a = setA.size < setB.size ? setA : setB\r\n    let b = setA.size < setB.size ? setB : setA\r\n    let elements = a.values()\r\n    let element = elements.next()\r\n\r\n    while (!element.done) {\r\n      if (b.has(element.value)) {\r\n        intersection.add(element.value)\r\n      }\r\n\r\n      element = elements.next()\r\n    }\r\n\r\n    return intersection\r\n  }\r\n\r\n  /**\r\n   * Identify the elements that are NOT part of both sets.\r\n   * @param  {Set} setA\r\n   * @param  {Set} setB\r\n   * @return {Set}\r\n   * Returns a set containing elements that are NOT common between setA and setB.\r\n   */\r\n  static difference (setA, setB) {\r\n    let diff = new Set(setA)\r\n    let elements = setB.values()\r\n    let element = elements.next()\r\n\r\n    while (!element.done) {\r\n      diff.delete(element.value)\r\n      element = elements.next()\r\n    }\r\n\r\n    return diff\r\n  }\r\n\r\n  /**\r\n   * Determines whether two sets contain the same values.\r\n   * @param  {Set} setA\r\n   * @param  {Set} setB\r\n   * @return {Boolean}\r\n   */\r\n  static equal (setA, setB) {\r\n    return NGN.UTILITY.Set.difference(setA, setB).size === 0\r\n  }\r\n\r\n  static equals () {\r\n    NGN.WARN('NGN.UTILITY.Set.equals() should be equal() (no s at the end).')\r\n    NGN.UTILITY.Set.equal(...arguments)\r\n  }\r\n\r\n  /**\r\n   * A convenience method for appending the Set prototype with all\r\n   * of the methods in this utility, where the first argument of\r\n   * each method automatically refers to the Set.\r\n   * @private\r\n   */\r\n  static applyAll () {\r\n    Set.prototype.isSuperSet = function (subset) { // eslint-disable-line no-extend-native\r\n      return NGN.UTILITY.Set.isSuperSet(this, subset)\r\n    }\r\n\r\n    Set.prototype.concat = function () { // eslint-disable-line no-extend-native\r\n      return NGN.UTILITY.Set.concat(this, ...arguments)\r\n    }\r\n\r\n    Set.prototype.intersection = function () { // eslint-disable-line no-extend-native\r\n      return NGN.UTILITY.Set.intersection(this, ...arguments)\r\n    }\r\n\r\n    Set.prototype.difference = function () { // eslint-disable-line no-extend-native\r\n      return NGN.UTILITY.Set.difference(this, ...arguments)\r\n    }\r\n\r\n    Set.prototype.equals = function () { // eslint-disable-line no-extend-native\r\n      return NGN.UTILITY.Set.equal(this, ...arguments)\r\n    }\r\n  }\r\n}\r\n","let hostname\r\n/* node-only */\r\nhostname = require('os').hostname() // eslint-disable-line comma-style\r\n/* end-node-only */\r\n/* browser-only */\r\nhostname = window.location.host // eslint-disable-line comma-style\r\n/* end-browser-only */\r\n\r\n// CONSTANTS USED INTERNALLY\r\n// Normalize URL syntax\r\nconst normalizeUrl = function (url) { // eslint-disable-line no-unused-vars\r\n  let uri = []\r\n\r\n  let protocol = /^(.*)\\:\\/.*/.exec(url)\r\n\r\n  protocol = protocol.length > 0 ? protocol[1] : null\r\n\r\n  if (protocol) {\r\n    url = url.replace(new RegExp(`${protocol}\\\\:\\\\/+`, 'i'), '')\r\n  }\r\n\r\n  url = url.split('/')\r\n\r\n  for (let i = 0; i < url.length; i++) {\r\n    if (url[i] === '..') {\r\n      uri.pop()\r\n    } else if (url[i] !== '.' && url[i].trim().length > 0) {\r\n      uri.push(url[i])\r\n    }\r\n  }\r\n\r\n  uri = uri.join('/').replace(/:\\/{3,50}/gi, '://')\r\n\r\n  // Handle query parameter normalization\r\n  let match = /(.*:\\/\\/.*)[?](.*)/.exec(uri)\r\n  let path = match === null ? uri : match[1]\r\n  let queryString = match !== null ? match[2] : ''\r\n\r\n  uri = path\r\n\r\n  if (queryString.trim().length > 0) {\r\n    let params = {}\r\n\r\n    queryString.split('&').forEach(attr => {\r\n      let keypair = attr.split('=')\r\n      params[keypair[0]] = keypair.length > 1 ? keypair[1] : null\r\n    })\r\n\r\n    queryString = []\r\n    Object.keys(params).forEach((param, i) => {\r\n      queryString.push(`${param}${params[param] !== null ? '=' + encodeURIComponent(params[param]) : ''}`)\r\n    })\r\n\r\n    uri = `${uri}?${queryString.join('&')}`\r\n  }\r\n\r\n  return protocol ? `${protocol}://${uri}` : uri\r\n}\r\n\r\nlet networkInterfaces = [\r\n  '127.0.0.1'\r\n  , 'localhost' // eslint-disable-line comma-style\r\n  /* node-only */\r\n  , require('os').hostname() // eslint-disable-line comma-style\r\n  /* end-node-only */\r\n  /* browser-only */\r\n  , window.location.host // eslint-disable-line comma-style\r\n  /* end-browser-only */\r\n]\r\n\r\n/* node-only */\r\n// Retreive local IP's and hostnames\r\nlet data = require('os').networkInterfaces()\r\nlet interfaces = Object.keys(data)\r\n\r\nfor (let i = 0; i < interfaces.length; i++) {\r\n  let iface = data[interfaces[i]]\r\n\r\n  for (let x = 0; x < iface.length; x++) {\r\n    if (iface[x].family === 'IPv4') {\r\n      networkInterfaces.push(iface[x].address)\r\n    }\r\n  }\r\n}\r\n/* end-node-only */\r\n\r\nnetworkInterfaces = NGN.dedupe(networkInterfaces)\r\n\r\nconst HttpMethods = [ // eslint-disable-line no-unused-vars\r\n  'OPTIONS',\r\n  'HEAD',\r\n  'GET',\r\n  'POST',\r\n  'PUT',\r\n  'DELETE',\r\n  'TRACE',\r\n  'CONNECT'\r\n]\r\n\r\nexport { hostname, normalizeUrl, networkInterfaces, HttpMethods }\r\n","import { hostname, normalizeUrl, HttpMethods, networkInterfaces } from './utility'\r\n\r\n/**\r\n * @class NGN.NET.Request\r\n * Represents a network request. This class can be used\r\n * to create and manipulate HTTP requests, but it does not\r\n * actually transmit them. To send the request, use NGN.NET#request\r\n * or one of the many common helper methods.\r\n * @private\r\n */\r\nexport default class Request { // eslint-disable-line no-unused-vars\r\n  constructor (cfg) {\r\n    cfg = cfg || {}\r\n\r\n    // Require URL and HTTP method\r\n    NGN.objectRequires(cfg, 'url')\r\n\r\n    if (NGN.objectHasAny(cfg, 'form', 'json')) {\r\n      NGN.WARN('NET.Request', '\"form\" and \"json\" configuration properties are not valid. Use \"body\" instead.')\r\n    }\r\n\r\n    Object.defineProperties(this, {\r\n      UrlPattern: NGN.privateconst(new RegExp('^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?')),\r\n\r\n      /**\r\n       * @cfgproperty {string} url (required)\r\n       * The complete URL for the request, including query parameters.\r\n       */\r\n      uri: NGN.private(null),\r\n\r\n      /**\r\n       * @cfg {string} [method=GET]\r\n       * The HTTP method to invoke when the request is sent. The standard\r\n       * RFC 2616 HTTP methods include:\r\n       *\r\n       * - OPTIONS\r\n       * - HEAD\r\n       * - GET\r\n       * - POST\r\n       * - PUT\r\n       * - DELETE\r\n       * - TRACE\r\n       * - CONNECT\r\n       *\r\n       * There are many additional non-standard methods some remote hosts\r\n       * will accept, including `PATCH`, `COPY`, `LINK`, `UNLINK`, `PURGE`,\r\n       * `LOCK`, `UNLOCK`, `VIEW`, and many others. If the remote host\r\n       * supports these methods, they may be used in an NGN.NET.Request.\r\n       * Non-standard methods will not be prevented, but NGN will trigger\r\n       * a warning event if a non-standard request is created.\r\n       */\r\n      httpmethod: NGN.private(null),\r\n\r\n      /**\r\n       * @cfg {boolean} [enforceMethodSafety=true]\r\n       * According to [RFC 2616](https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html),\r\n       * some HTTP methods are considered idempotent (safe). These methods\r\n       * should have no significance to data (i.e. read-only). For example,\r\n       * `OPTIONS`, `HEAD`, and `GET` are all idempotent. By default, NGN.NET\r\n       * loosely enforces idempotence by ignoring the #body when making a\r\n       * request. While it is not advised, nor officially supported, NGN.NET can\r\n       * technically ignore method safety, allowing a request body to be\r\n       * sent to a remote server. Set this configuration to `false` to\r\n       * prevent NGN.NET from enforcing idempotence/safety.\r\n       */\r\n      enforceMethodSafety: NGN.private(NGN.coalesce(cfg.enforceMethodSafety, cfg.enforcemethodsafety, true)),\r\n\r\n      /**\r\n       * @cfg {object} [headers]\r\n       * Optionally supply custom headers for the request. Most standard\r\n       * headers will be applied automatically (when appropriate), such\r\n       * as `Content-Type`, `Content-Length`, and `Authorization`.\r\n       * In Node-like environments, a `User-Agent` will be applied containing\r\n       * the `hostname` of the system making the request. Any custom headers\r\n       * supplied will override headers managed by NGN.NET.\r\n       */\r\n      headers: NGN.public(NGN.coalesceb(cfg.headers)),\r\n\r\n      /**\r\n       * @cfg {object|string|binary} [body]\r\n       * The body configuration supports text, an object, or a data URL or\r\n       * binary content. **For multi-part form data (file uploads), use\r\n       * the #files configuration _instead_ of this attribute.**\r\n       *\r\n       * It is also possible to construct a simple form submission\r\n       * (x-www-form-urlencoded) from a specially formatted key/value object\r\n       * conforming to the following syntax:\r\n       *\r\n       * ```json\r\n       * {\r\n       *   form: {\r\n       *     form_field_1: \"value\",\r\n       *     form_field_2: \"value\",\r\n       *     form_field_3: \"value\",\r\n       *   }\r\n       * }\r\n       * ```\r\n       * The object above will be automatically converted & url-encoded as:\r\n       *\r\n       * ```js\r\n       * form_field_1=value&form_field_2=value&form_field_3=value\r\n       * ```\r\n       *\r\n       * The appropriate request headers are automatically applied.\r\n       */\r\n      requestbody: NGN.public(NGN.coalesce(cfg.body)),\r\n\r\n      /**\r\n       * @cfgproperty {string} username\r\n       * A username to authenticate the request with (basic auth).\r\n       */\r\n      user: NGN.private(NGN.coalesceb(cfg.username)),\r\n\r\n      /**\r\n       * @cfgproperty {string} password\r\n       * A password to authenticate the request with (basic auth).\r\n       * @readonly\r\n       */\r\n      secret: NGN.private(NGN.coalesceb(cfg.password)),\r\n\r\n      /**\r\n       * @cfgproperty {string} accessToken\r\n       * An access token to authenticate the request with (Bearer auth).\r\n       * If this is configured, it will override any basic auth settings.\r\n       */\r\n      bearerAccessToken: NGN.private(NGN.coalesceb(cfg.accessToken)),\r\n\r\n      /**\r\n       * @cfgproperty {boolean} [withCredentials=false]\r\n       * Indicates whether or not cross-site `Access-Control` requests should\r\n       * be made using credentials such as cookies, authorization headers or\r\n       * TLS client certificates. Setting `withCredentials` has no effect on\r\n       * same-site requests.\r\n       *\r\n       * In addition, this flag is also used to indicate when cookies are to\r\n       * be ignored in the response. The default is `false`. XMLHttpRequest\r\n       * from a different domain cannot set cookie values for their own\r\n       * domain unless `withCredentials` is set to true before making the\r\n       * request. The third-party cookies obtained by setting `withCredentials`\r\n       * to true will still honor same-origin policy and hence can not be\r\n       * accessed by the requesting script through\r\n       * [document.cookie](https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\r\n       * or from response headers.\r\n       */\r\n      withCredentials: NGN.private(NGN.coalesce(cfg.withCredentials, false)),\r\n\r\n      /**\r\n       * @cfgproperty {Number} [timeout=30000]\r\n       * The number of milliseconds to wait before considering the request to\r\n       * have timed out. Defaults to `30000` (30 seconds).\r\n       */\r\n      timeout: NGN.public(NGN.coalesce(cfg.timeout, 30000)),\r\n\r\n      /**\r\n       * @method timer\r\n       * A placeholder for a timeout monitor.\r\n       * @private\r\n       */\r\n      timer: NGN.private(null),\r\n\r\n      /**\r\n       * @method isCrossOrigin\r\n       * Determine if accessing a URL is considered a cross origin request.\r\n       * @param {string} url\r\n       * The URL to identify as a COR.\r\n       * @returns {boolean}\r\n       * @private\r\n       */\r\n      isCrossOrigin: NGN.privateconst(function (url) {\r\n        /* node-only */\r\n        if (networkInterfaces.indexOf(this.host) < 0) {\r\n          return true\r\n        }\r\n        /* end-node-only */\r\n\r\n        return this.host !== hostname // eslint-disable-line no-undef\r\n      }),\r\n\r\n      /**\r\n       * @method applyAuthorizationHeader\r\n       * Generates and applies the authorization header for the request,\r\n       * based on the presence of #username, #password, or #accessToken.\r\n       * @private\r\n       */\r\n      applyAuthorizationHeader: NGN.privateconst(() => {\r\n        if (NGN.coalesceb(this.bearerAccessToken) !== null) {\r\n          this.setHeader('Authorization', `Bearer ${this.bearerAccessToken}`, true)\r\n        } else if (NGN.coalesceb(this.user) && NGN.coalesceb(this.secret)) {\r\n          this.setHeader('Authorization', this.basicAuthToken(this.user, this.secret), true)\r\n        }\r\n      }),\r\n\r\n      /**\r\n       * @method basicAuthToken\r\n       * Generates a basic authentication token from a username and password.\r\n       * @return {[type]} [description]\r\n       * @private\r\n       */\r\n      basicAuthToken: NGN.privateconst((user, secret) => {\r\n        // Binary to base64-ascii conversions\r\n        /* node-only */\r\n        return 'Basic ' + Buffer.from(`${user}:${secret}`, 'binary').toString('base64')\r\n        /* end-node-only */\r\n        /* browser-only */\r\n        return 'Basic ' + NGN.global.btoa(`${user}:${secret}`) // eslint-disable-line no-unreachable\r\n        /* end-browser-only */\r\n      }),\r\n\r\n      /**\r\n       * @method parseUri\r\n       * Parses the URI into composable parts.\r\n       * @param {string} URL\r\n       * The URI/URL to parse.\r\n       * @return {Object}\r\n       * Returns a key/value object:\r\n       *\r\n       * ```js\r\n       * {\r\n       *   protocol: 'http',\r\n       *   hostname: 'domain.com',\r\n       *   path: '/path/to/file.html',\r\n       *   query: 'a=1&b=2',\r\n       *   hash: null\r\n       * }\r\n       * ```\r\n       * @private\r\n       */\r\n      parseUri: NGN.privateconst(uri => {\r\n        let part = uri.match(this.UrlPattern)\r\n        let protocol\r\n        /* node-only */\r\n        protocol = 'http'\r\n        /* end-node-only */\r\n        /* browser-only */\r\n        protocol = window.location.protocol.replace(':', '').toLowerCase()\r\n        /* end-browser-only */\r\n        let url = {\r\n          protocol: NGN.coalesce(part[2], protocol),\r\n          hostname: NGN.coalesce(part[4], hostname),\r\n          path: NGN.coalesceb(part[5], '/'),\r\n          query: NGN.coalesceb(part[7]),\r\n          hash: NGN.coalesceb(part[9])\r\n        }\r\n\r\n        // URL contains a username/password.\r\n        if (url.hostname.indexOf('@') > 0) {\r\n          let credentials = uri.match(/^.*\\/{1,2}(.*):(.*)@/i)\r\n\r\n          url.hostname = url.hostname.split('@').pop()\r\n\r\n          this.user = credentials[1]\r\n          this.secret = credentials[2]\r\n          this.applyAuthorizationHeader()\r\n        }\r\n\r\n        url.port = NGN.coalesce(url.hostname.match(/:([0-9]{1,6})/), url.protocol === 'https' ? 443 : 80)\r\n\r\n        if (url.hostname.indexOf(':') > 0) {\r\n          url.hostname = url.hostname.split(':')[0]\r\n        }\r\n\r\n        if (url.path.charAt(0) !== '/') {\r\n          url.path = `/${url.path}`\r\n        }\r\n\r\n        return url\r\n      }),\r\n\r\n      uriParts: NGN.private(null),\r\n\r\n      /**\r\n       * @cfgproperty {Number} [maxRedirects=10]\r\n       * Set the maximum number of redirects. There is a hard-cap of 25\r\n       * redirects to prevent cyclic requests (endless loop).\r\n       */\r\n      maximumRedirects: NGN.private(10),\r\n      redirectAttempts: NGN.private(0),\r\n\r\n      prepareBody: NGN.private(() => {\r\n        // Request body management\r\n        if (this.requestbody !== null) {\r\n          if (this.headers === null) {\r\n            this.headers = {}\r\n          }\r\n\r\n          let contentType = NGN.coalesceb(this.headers['Content-Type'], this.headers['content-type'], this.headers['Content-type'])\r\n\r\n          if (typeof this.requestbody === 'object') {\r\n            if (NGN.objectHasExactly(this.requestbody, 'form')) {\r\n              let form = this.requestbody.form\r\n              let keys = Object.keys(form)\r\n              let dataString = []\r\n\r\n              for (let i = 0; i < keys.length; i++) {\r\n                if (NGN.isFn(form[keys[i]])) {\r\n                  throw new Error('Invalid form data. Form data cannot be a complex data format such as an object or function.')\r\n                } else if (typeof form[keys[i]] === 'object') {\r\n                  dataString.push(`${keys[i]}=${encodeURIComponent(JSON.stringify(form[keys[i]]))}`)\r\n                } else {\r\n                  dataString.push(`${keys[i]}:${encodeURIComponent(form[keys[i]])}`)\r\n                }\r\n              }\r\n\r\n              this.requestbody = dataString.join('&')\r\n            } else {\r\n              this.requestbody = JSON.stringify(this.requestbody).trim()\r\n              this.setHeader('Content-Length', this.requestbody.length, false)\r\n              this.setHeader('Content-Type', NGN.coalesceb(contentType, 'application/json'), false)\r\n            }\r\n          }\r\n\r\n          if (typeof this.requestbody === 'string') {\r\n            if (contentType !== null) {\r\n              // Check for form data\r\n              let match = /([^=]+)=([^&]+)/.exec(this.requestbody)\r\n\r\n              if (match !== null && this.requestbody.trim().substr(0, 5).toLowerCase() !== 'data:' && this.requestbody.trim().substr(0, 1).toLowerCase() !== '<') {\r\n                this.setHeader('Content-Type', 'application/x-www-form-urlencoded', false)\r\n              } else {\r\n                this.setHeader('Content-Type', 'text/plain')\r\n\r\n                if (this.requestbody.trim().substr(0, 5).toLowerCase() === 'data:') {\r\n                  // Crude Data URL mimetype detection\r\n                  match = /^data:(.*);/gi.exec(this.requestbody.trim())\r\n\r\n                  if (match !== null) {\r\n                    this.setHeader('Content-Type', match[1])\r\n                  }\r\n                } else if (/^<\\?xml.*/gi.test(this.requestbody.trim())) {\r\n                  // Crude XML Detection\r\n                  this.setHeader('Content-Type', 'application/xml')\r\n                } else if (/^<html.*/gi.test(this.requestbody.trim())) {\r\n                  // Crude HTML Detection\r\n                  this.setHeader('Content-Type', 'text/html')\r\n                }\r\n              }\r\n            }\r\n\r\n            this.setHeader('Content-Type', this.requestbody.length, false)\r\n          } else {\r\n            NGN.WARN('NET.Request.body', `The request body must cannot be ${typeof this.requestbody}. Please provide a string, object, or binary value for the body.`)\r\n          }\r\n        }\r\n      })\r\n    })\r\n\r\n    if (cfg.maxRedirects) {\r\n      this.maxRedirects = cfg.maxRedirects\r\n    }\r\n\r\n    this.url = cfg.url\r\n    this.method = NGN.coalesceb(cfg.method, 'GET')\r\n\r\n    this.prepareBody()\r\n\r\n    // Apply authorization if applicable\r\n    if (NGN.coalesce(this.user, this.secret, this.bearerAccessToken) !== null) {\r\n      this.applyAuthorizationHeader()\r\n    }\r\n  }\r\n\r\n  get maxRedirects () {\r\n    return this.maximumRedirects\r\n  }\r\n\r\n  set maxRedirects (value) {\r\n    if (value > 25) {\r\n      value = 25\r\n    }\r\n\r\n    if (value < 0) {\r\n      value = 0\r\n    }\r\n\r\n    this.maximumRedirects = value\r\n  }\r\n\r\n  /**\r\n   * @property {string} protocol\r\n   * The protocol used to make the request.\r\n   * @readonly\r\n   */\r\n  get protocol () {\r\n    return NGN.coalesce(this.uriParts.protocol, 'http')\r\n  }\r\n\r\n  /**\r\n   * @property {string} host\r\n   * The hostname/domain of the request.\r\n   */\r\n  get host () {\r\n    return NGN.coalesce(this.uriParts.hostname)\r\n  }\r\n\r\n  get hostname () {\r\n    return this.host\r\n  }\r\n\r\n  /**\r\n   * @property {number} port\r\n   * The port of the remote host.\r\n   */\r\n  get port () {\r\n    return this.uriParts.port\r\n  }\r\n\r\n  /**\r\n   * @property {string} path\r\n   * The pathname of the URL.\r\n   */\r\n  get path () {\r\n    return NGN.coalesce(this.uriParts.path, '/')\r\n  }\r\n\r\n  /**\r\n   * @property {string} query\r\n   * The raw query string of the URI. To retrieve a key/value list,\r\n   * use #queryParameters instead.\r\n   */\r\n  get query () {\r\n    return NGN.coalesce(this.uriParts.query, '')\r\n  }\r\n\r\n  /**\r\n   * @property {object} queryParameters\r\n   * Returns a key/value object containing the URL query parameters of the\r\n   * request, as defined in the #url. The paramter values (represented as keys\r\n   * in this object) may be modified, but not removed (use removeQueryParameter\r\n   * to delete a query parameter). No new query parameters can be added (use\r\n   * setQueryParameter instead).\r\n   * @readonly\r\n   */\r\n  get queryParameters () {\r\n    let params = this.query.split('&')\r\n    let resultSet = {}\r\n\r\n    for (let i = 0; i < params.length; i++) {\r\n      let keypair = params[i].split('=')\r\n      let attr = `__qp__${keypair[0]}__qp__`\r\n\r\n      Object.defineProperty(resultSet, attr, {\r\n        enumerable: false,\r\n        configurable: false,\r\n        writable: true,\r\n        value: NGN.coalesceb(keypair[1])\r\n      })\r\n\r\n      Object.defineProperty(resultSet, keypair[0], {\r\n        enumerable: true,\r\n        configurable: false,\r\n        get: () => { return resultSet[attr] },\r\n        set: (value) => {\r\n          resultSet[attr] = value\r\n          this.setQueryParameter(keypair[0], value, true)\r\n        }\r\n      })\r\n    }\r\n\r\n    return resultSet\r\n  }\r\n\r\n  /**\r\n   * @property hash\r\n   * The hash part of the URL (i.e. everything after the trailing `#`).\r\n   */\r\n  get hash () {\r\n    return NGN.coalesce(this.uriParts.hash, '')\r\n  }\r\n\r\n  /**\r\n   * @property {string} url\r\n   * The URL where the request will be sent.\r\n   */\r\n  get url () {\r\n    return this.uri\r\n  }\r\n\r\n  set url (value) {\r\n    if (NGN.coalesceb(value) === null) {\r\n      NGN.WARN('NET.Request.url', 'A blank URL was identified for a request.')\r\n    }\r\n\r\n    // If a relative URL is provided in a browser context, prepend\r\n    // the current browser location to the URI.\r\n    if (/^.*\\:\\/{2}/i.exec(value) === null && /^\\.{1,2}\\/.*/.exec(value) !== null && NGN.global.hasOwnProperty('location')) {\r\n      let loc = NGN.global.location\r\n      let href = `${loc.host}${loc.pathname}`\r\n\r\n      href = href.split('/')\r\n\r\n      if (href[href.length - 1].indexOf('.') >= 0) {\r\n        href.pop()\r\n      }\r\n\r\n      href = href.join('/')\r\n      href = href.substring(0, href.lastIndexOf('/') + 1)\r\n\r\n      value = `${NGN.global.location.protocol}//${href}/${value}`.replace(/\\/{2,1000000}/i, '/')\r\n    }\r\n\r\n    this.uri = normalizeUrl(value.trim())\r\n    this.uriParts = this.parseUri(this.uri)\r\n  }\r\n\r\n  get method () {\r\n    return this.httpmethod\r\n  }\r\n\r\n  set method (value) {\r\n    if (this.httpmethod === value) {\r\n      return\r\n    }\r\n\r\n    if (NGN.coalesceb(value) === null) {\r\n      NGN.WARN('NET.Request.method', 'No HTTP method specified.')\r\n    }\r\n\r\n    value = value.trim().toUpperCase()\r\n\r\n    if (HttpMethods.indexOf(value) < 0) {\r\n      NGN.WARN('NET.Request.method', `A non-standard HTTP method was recognized in a request: ${value}.`)\r\n    }\r\n\r\n    this.httpmethod = value\r\n  }\r\n\r\n  get body () {\r\n    return this.requestbody\r\n  }\r\n\r\n  set body (value) {\r\n    this.requestbody = value\r\n    this.prepareBody()\r\n  }\r\n\r\n  /**\r\n   * @property {boolean} crossOriginRequest\r\n   * Indicates the request will be made to a domain outside of the\r\n   * one hosting the request.\r\n   */\r\n  get crossOriginRequest () {\r\n    return this.isCrossOrigin(this.uri)\r\n  }\r\n\r\n  /**\r\n   * @property {string} username\r\n   * The username that will be used in any basic authentication operations.\r\n   */\r\n  get username () {\r\n    return NGN.coalesce(this.user)\r\n  }\r\n\r\n  set username (user) {\r\n    user = NGN.coalesceb(user)\r\n\r\n    if (this.user !== user) {\r\n      this.user = user\r\n\r\n      if (NGN.coalesceb(this.secret) !== null) {\r\n        this.applyAuthorizationHeader()\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @property {string} password\r\n   * It is possible to set a password for any basic authentication operations,\r\n   * but it is not possible to read a password.\r\n   * @writeonly\r\n   */\r\n  set password (secret) {\r\n    secret = NGN.coalesceb(secret)\r\n\r\n    if (this.secret !== secret) {\r\n      this.secret = secret\r\n\r\n      if (NGN.coalesceb(this.user) !== null) {\r\n        this.applyAuthorizationHeader()\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @property {string} accessToken\r\n   * Supply a bearer access token for basic authenticaiton operations.\r\n   * @writeonly\r\n   */\r\n  set accessToken (token) {\r\n    token = NGN.coalesceb(token)\r\n\r\n    if (this.bearerAccessToken !== token) {\r\n      this.bearerAccessToken = token\r\n      this.applyAuthorizationHeader()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method setHeader\r\n   * Add a header to the request.\r\n   * @param {string} header\r\n   * The name of the header.\r\n   * @param {string} value\r\n   * Value of the header.\r\n   * @param {Boolean} [overwriteExisting=true]\r\n   * If the header already exists, setting this to `false` will prevent\r\n   * the original header from being overwritten.\r\n   */\r\n  setHeader (key, value, overwriteExisting = true) {\r\n    key = key.replace(/'|\"/gi, '').toLowerCase()\r\n\r\n    if (this.headers === null || this.headers[key] === undefined || overwriteExisting) {\r\n      if (this.headers === null) {\r\n        this.headers = {}\r\n      }\r\n\r\n      this.headers[key] = value\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method getHeader\r\n   * @param  {string} header\r\n   * The name of the header to retrieve.\r\n   * @return {string}\r\n   * Returns the current value of the specified header.\r\n   */\r\n  getHeader (key) {\r\n    if (this.headers === null) {\r\n      return undefined\r\n    }\r\n\r\n    if (!this.headers.hasOwnProperty(key.toLowerCase())) {\r\n      return undefined\r\n    }\r\n\r\n    return this.headers[key.toLowerCase()]\r\n  }\r\n\r\n  /**\r\n   * @method removeHeader\r\n   * Removes a header from the request. Nothing happens if the header does\r\n   * not exist.\r\n   * @param  {string} header\r\n   * The header to remove.\r\n   */\r\n  removeHeader (key) {\r\n    if (this.headers !== null) {\r\n      delete this.headers[key.toLowerCase()]\r\n      delete this.headers[key]\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method setQueryParameter\r\n   * Add a query parameter to the request.\r\n   * @param {string} parameter\r\n   * The name of the parameter.\r\n   * @param {string} value\r\n   * Value of the parameter. The value is automatically URL encoded. If the\r\n   * value is null, only the key will be added to the URL (ex: `http://domain.com/page.html?key`)\r\n   * @param {Boolean} [overwriteExisting=true]\r\n   * If the parameter already exists, setting this to `false` will prevent\r\n   * the original parameter from being overwritten.\r\n   */\r\n  setQueryParameter (key, value, overwriteExisting = true) {\r\n    let re = new RegExp(\"^.*(\\\\?|&)(\" + key + \".*)(&.*)$|^.*(\\\\?|&)(\" + key + \".*)$\", 'i') // eslint-disable-line quotes\r\n    let exists = (re.exec(this.uri) !== null)\r\n    let match\r\n\r\n    if (exists) {\r\n      if (!overwriteExisting) {\r\n        return\r\n      }\r\n\r\n      match = re.exec(this.uri)\r\n\r\n      if (match !== null) {\r\n        this.url = this.uri.replace(`${NGN.coalesceb(match[5], match[2])}`, `${key}${value !== null ? '=' + encodeURIComponent(value) : ''}`)\r\n      }\r\n    } else {\r\n      this.url = `${this.uri}${this.query.length === 0 ? '?' : '&'}${key}${value !== null ? '=' + encodeURIComponent(value) : ''}`\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method removeQueryParameter\r\n   * Remove a query parameter from the request URI.\r\n   * @param {string} key\r\n   */\r\n  removeQueryParameter (key) {\r\n    this.url = this.uri.replace(new RegExp(`${key}=(.[^&]+)|\\\\?${key}|&${key}`, 'gi'), '')\r\n  }\r\n\r\n  startMonitor () {\r\n    if (this.timer === null) {\r\n      this.timer = setTimeout(() => {\r\n        throw new Error('Timed out retrieving ' + this.url)\r\n      }, this.timeout)\r\n    }\r\n  }\r\n\r\n  stopMonitor () {\r\n    clearTimeout(this.timer)\r\n    this.timer = null\r\n  }\r\n\r\n  /**\r\n   * @method send\r\n   * Send the request.\r\n   * @param {Function} callback\r\n   * The callback is executed when the request is complete.\r\n   * @param {Object} callback.response\r\n   * The response object returned by the server.\r\n   */\r\n  send (callback) {\r\n    let body = this.body\r\n\r\n    // Disable body when safe methods are enforced.\r\n    if (NGN.coalesce(body)) {\r\n      if (this.enforceMethodSafety && 'OPTIONS|HEAD|GET'.indexOf(this.method) >= 0) {\r\n        body = null\r\n      }\r\n    }\r\n\r\n    /* node-only */\r\n    // Run request in Node-like environments\r\n    // Support local file system retrieval in node-like environments.\r\n    // This short-circuits the request and reads the file system instead.\r\n    if (this.protocol === 'file') {\r\n      if (!NGN.isFn(callback)) {\r\n        throw new Error('A callback is required when retrieving system files in a node-like environment.')\r\n      }\r\n\r\n      let response = {\r\n        status: require('fs').existsSync(this.uri.replace('file://', '')) ? 200 : 400\r\n      }\r\n\r\n      response.responseText = response.status === 200 ? require('fs').readFileSync(this.uri.replace('file://', '')).toString() : 'File does not exist or could not be found.'\r\n\r\n      return callback(response)\r\n    }\r\n\r\n    const http = this.protocol === 'https' ? require('https') : require('http')\r\n\r\n    let params = NGN.coalesceb(this.query)\r\n    let reqOptions = {\r\n      hostname: this.hostname,\r\n      port: this.port,\r\n      method: this.method,\r\n      headers: this.headers,\r\n      path: this.path\r\n    }\r\n\r\n    if (params !== null) {\r\n      reqOptions.path = `${this.path}?${params}`\r\n    }\r\n\r\n    const req = http.request(reqOptions, (response) => {\r\n      response.setEncoding('utf8')\r\n\r\n      let body = ''\r\n      response.on('data', (chunk) => {\r\n        body += chunk\r\n      })\r\n\r\n      response.on('end', () => {\r\n        switch (response.statusCode) {\r\n          case 301:\r\n          case 302:\r\n          case 307:\r\n          case 308:\r\n            if (this.redirectAttempts > this.maxRedirects) {\r\n              this.redirectAttempts = 0\r\n\r\n              this.stopMonitor()\r\n\r\n              return callback({ // eslint-disable-line standard/no-callback-literal\r\n                status: 500,\r\n                statusText: 'Too many redirects',\r\n                responseText: 'Too many redirects',\r\n                responseXML: 'Too many redirects',\r\n                readyState: 4\r\n              })\r\n            }\r\n\r\n            if (response.headers.location === undefined) {\r\n              this.stopMonitor()\r\n\r\n              return callback({ // eslint-disable-line standard/no-callback-literal\r\n                status: 502,\r\n                statusText: 'Bad Gateway',\r\n                responseText: 'Bad Gateway',\r\n                responseXML: 'Bad Gateway',\r\n                readyState: 4\r\n              })\r\n            }\r\n\r\n            this.redirectAttempts++\r\n            this.url = response.headers.location\r\n\r\n            return this.send(callback)\r\n\r\n          default:\r\n            this.stopMonitor()\r\n\r\n            return callback({ // eslint-disable-line standard/no-callback-literal\r\n              status: response.statusCode,\r\n              statusText: NGN.coalesce(response.statusText),\r\n              responseText: body,\r\n              responseXML: body,\r\n              readyState: 4\r\n            })\r\n        }\r\n      })\r\n    })\r\n\r\n    req.on('error', (err) => {\r\n      this.stopMonitor()\r\n\r\n      if (NGN.isFn(callback)) {\r\n        callback({ // eslint-disable-line standard/no-callback-literal\r\n          status: 400,\r\n          statusText: err.message,\r\n          responseText: err.message,\r\n          responseXML: err.message,\r\n          readyState: 0\r\n        })\r\n      } else {\r\n        throw err\r\n      }\r\n    })\r\n\r\n    this.startMonitor()\r\n\r\n    if (this.body) {\r\n      req.write(this.body)\r\n    }\r\n\r\n    req.end()\r\n    /* end-node-only */\r\n    /* browser-only */\r\n    let xhr = new XMLHttpRequest()\r\n    let responded = false\r\n    let me = this\r\n\r\n    // Apply readystate change handler\r\n    xhr.onreadystatechange = function () {\r\n      if (responded) {\r\n        return\r\n      }\r\n\r\n      if (xhr.readyState === XMLHttpRequest.DONE) {\r\n        responded = true\r\n\r\n        if (xhr.status === 0) {\r\n          NGN.WARN(`Request Error: ${me.method} ${me.url} (likely a CORS issue).`)\r\n        }\r\n\r\n        if (NGN.isFn(callback)) {\r\n          callback(xhr)\r\n        }\r\n      }\r\n    }\r\n\r\n    // Apply error handler\r\n    xhr.onerror = function (e) {\r\n      NGN.WARN('NET.error', e)\r\n\r\n      if (!responded && NGN.isFn(callback)) {\r\n        callback(xhr)\r\n      }\r\n\r\n      responded = true\r\n    }\r\n\r\n    xhr.ontimeout = function (e) {\r\n      responded = true\r\n      callback(xhr)\r\n    }\r\n\r\n    xhr.timeout = this.timeout\r\n\r\n    // Open the request\r\n    xhr.open(this.method, this.url, true)\r\n\r\n    // Apply withCredentials\r\n    xhr.withCredentials = this.withCredentials\r\n\r\n    // Apply Request Headers\r\n    if (this.headers !== null) {\r\n      let headers = Object.keys(this.headers)\r\n      for (let i = 0; i < headers.length; i++) {\r\n        xhr.setRequestHeader(headers[i], this.headers[headers[i]])\r\n      }\r\n    }\r\n\r\n    // Write the body (which may be null) & send the request\r\n    xhr.send(body)\r\n    /* end-browser-only */\r\n  }\r\n}\r\n","import { hostname } from './utility'\r\nimport Request from './Request'\r\n\r\nexport default class Network { // eslint-disable-line\r\n  constructor () {\r\n    Object.defineProperties(this, {\r\n      /**\r\n       * @method parseRequestConfiguration\r\n       * Prepare common configuration attributes for a request.\r\n       * @return {NGN.NET.Request}\r\n       * @private\r\n       */\r\n      parseRequestConfiguration: NGN.private((cfg, method = 'GET') => {\r\n        if (typeof cfg === 'string') {\r\n          cfg = {\r\n            url: cfg\r\n          }\r\n        }\r\n\r\n        cfg = cfg || {}\r\n        cfg.method = method\r\n        cfg.url = NGN.coalesceb(cfg.url, hostname) // eslint-disable-line no-undef\r\n\r\n        return new NGN.NET.Request(cfg)\r\n      }),\r\n\r\n      // Returns a scoped method for sending the request, after preparing it.\r\n      makeRequest: NGN.private((method) => {\r\n        const me = this\r\n\r\n        return function () {\r\n          let args = NGN.slice(arguments)\r\n          let callback\r\n\r\n          if (NGN.isFn(args[args.length - 1])) {\r\n            callback = args.pop()\r\n          }\r\n\r\n          args.push(method)\r\n\r\n          let request = me.parseRequestConfiguration(...args)\r\n\r\n          // Send the request\r\n          me.send(request, callback)\r\n        }\r\n      }),\r\n\r\n      // Helper aliases (undocumented)\r\n      OPTIONS: NGN.privateconst(this.options.bind(this)),\r\n      HEAD: NGN.privateconst(this.head.bind(this)),\r\n      GET: NGN.privateconst(this.get.bind(this)),\r\n      POST: NGN.privateconst(this.post.bind(this)),\r\n      PUT: NGN.privateconst(this.put.bind(this)),\r\n      DELETE: NGN.privateconst(this.delete.bind(this)),\r\n      TRACE: NGN.privateconst(this.trace.bind(this)),\r\n      JSON: NGN.privateconst(this.json.bind(this)),\r\n      JSONP: NGN.privateconst(this.jsonp.bind(this))\r\n    })\r\n  }\r\n\r\n  get Request () {\r\n    return Request\r\n  }\r\n\r\n  /**\r\n   * @method request\r\n   * Send a request. In most cases, it is easier to use one of the built-in\r\n   * request functions (#get, #post, #put, #delete, #json, etc). This method\r\n   * is available for creating custom requests.\r\n   * @param  {Object} configuration\r\n   * Provide a #NGN.NET.Request configuration.\r\n   * @param  {Function} callback\r\n   * The callback to execute when the request is complete.\r\n   */\r\n  request (cfg, callback) {\r\n    cfg = cfg || {}\r\n    cfg.method = NGN.coalesceb(cfg.method, 'GET')\r\n\r\n    if (NGN.isFn(this[cfg.method])) {\r\n      this.makeRequest(cfg.method)(...arguments)\r\n    } else {\r\n      this.send(new NGN.NET.Request(cfg), callback)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method options\r\n   * Issue a `OPTIONS` request.\r\n   * @param {string|object} url\r\n   * The URL to issue the request to, or a configuration object.\r\n   * The configuration object accepts all of the #NGN.NET.Request\r\n   * configuration options (except method, which is defined automatically).\r\n   * @param {Function} callback\r\n   * A callback method to run when the request is complete.\r\n   * This receives the response object as the only argument.\r\n   */\r\n  options () {\r\n    this.makeRequest('OPTIONS').apply(this, arguments)\r\n  }\r\n\r\n  /**\r\n   * @method head\r\n   * Issue a `HEAD` request.\r\n   * @param {string|object} url\r\n   * The URL to issue the request to, or a configuration object.\r\n   * The configuration object accepts all of the #NGN.NET.Request\r\n   * configuration options (except method, which is defined automatically).\r\n   * @param {Function} callback\r\n   * A callback method to run when the request is complete.\r\n   * This receives the response object as the only argument.\r\n   */\r\n  head () {\r\n    this.makeRequest('HEAD').apply(this, arguments)\r\n  }\r\n\r\n  /**\r\n   * @method get\r\n   * Issue a `GET` request.\r\n   * @param {string|object} url\r\n   * The URL to issue the request to.\r\n   * The configuration object accepts all of the #NGN.NET.Request\r\n   * configuration options (except method, which is defined automatically).\r\n   * @param {Function} callback\r\n   * A callback method to run when the request is complete.\r\n   * This receives the response object as the only argument.\r\n   */\r\n  get () {\r\n    this.makeRequest('GET').apply(this, arguments)\r\n  }\r\n\r\n  /**\r\n   * @method post\r\n   * Issue a `POST` request.\r\n   * @param {string|object} url\r\n   * The URL to issue the request to.\r\n   * The configuration object accepts all of the #NGN.NET.Request\r\n   * configuration options (except method, which is defined automatically).\r\n   * @param {Function} callback\r\n   * A callback method to run when the request is complete.\r\n   * This receives the response object as the only argument.\r\n   */\r\n  post () {\r\n    this.makeRequest('POST').apply(this, arguments)\r\n  }\r\n\r\n  /**\r\n   * @method put\r\n   * Issue a `PUT` request.\r\n   * @param {string|object} url\r\n   * The URL to issue the request to.\r\n   * The configuration object accepts all of the #NGN.NET.Request\r\n   * configuration options (except method, which is defined automatically).\r\n   * @param {Function} callback\r\n   * A callback method to run when the request is complete.\r\n   * This receives the response object as the only argument.\r\n   */\r\n  put () {\r\n    this.makeRequest('PUT').apply(this, arguments)\r\n  }\r\n\r\n  /**\r\n   * @method delete\r\n   * Issue a `DELETE` request.\r\n   * @param {string|object} url\r\n   * The URL to issue the request to.\r\n   * The configuration object accepts all of the #NGN.NET.Request\r\n   * configuration options (except method, which is defined automatically).\r\n   * @param {Function} callback\r\n   * A callback method to run when the request is complete.\r\n   * This receives the response object as the only argument.\r\n   */\r\n  delete () {\r\n    this.makeRequest('DELETE').apply(this, arguments)\r\n  }\r\n\r\n  /**\r\n   * @method trace\r\n   * Issue a `TRACE` request. This is a debugging method, which\r\n   * echoes input back to the user. It is a standard HTTP method,\r\n   * but considered a security risk by many practioners and may\r\n   * not be supported by remote hosts.\r\n   * @param {string|object} url\r\n   * The URL to issue the request to.\r\n   * The configuration object accepts all of the #NGN.NET.Request\r\n   * configuration options (except method, which is defined automatically).\r\n   * @param {Function} callback\r\n   * A callback method to run when the request is complete.\r\n   * This receives the response object as the only argument.\r\n   */\r\n  trace () {\r\n    NGN.WARN('NGN.NET.Request.method', 'An HTTP TRACE request was made.')\r\n    this.makeRequest('TRACE').apply(this, arguments)\r\n  }\r\n\r\n  /**\r\n   * @method json\r\n   * This is a shortcut method for creating a `GET` request and\r\n   * auto-processing the response body into a JSON object.\r\n   * @param  {string} url\r\n   * The URL to issue the request to.\r\n   * @param  {Function} callback\r\n   * This receives a JSON response object from the server.\r\n   * @param {Error} callback.error\r\n   * If the request cannot be completed for any reason, this argument will be\r\n   * populated with the error. If the request is successful, this will be `null`.\r\n   * @param {Object} callback.data\r\n   * The JSON response from the remote URL.\r\n   */\r\n  json (url, callback) {\r\n    if (!NGN.isFn(callback)) {\r\n      throw new Error('NGN.NET.json requires a callback method.')\r\n    }\r\n\r\n    // Request method is \"GET\"\r\n    let request = this.parseRequestConfiguration({url})\r\n\r\n    this.preflight(request)\r\n\r\n    request.send((response) => {\r\n      try {\r\n        let responseData = JSON.parse(response.responseText)\r\n        callback(null, responseData)\r\n      } catch (e) {\r\n        e.response = NGN.coalesce(response.responseText)\r\n        callback(e, null)\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @method jsonp\r\n   * Execute a request via JSONP. JSONP is only available in browser\r\n   * environments, since it's operation is dependent on the existance of\r\n   * the DOM. However; this may work with some headless browsers.\r\n   * @param {string} url\r\n   * The URL of the JSONP endpoint.\r\n   * @param {function} callback\r\n   * Handles the response.\r\n   * @param {Error} callback.error\r\n   * If an error occurred, this will be populated. If no error occurred, this will\r\n   * be null.\r\n   * @param {object|array} callback.response\r\n   * The response.\r\n   * @environment browser\r\n   */\r\n  jsonp (url, callback) {\r\n    /* node-only */\r\n    NGN.WARN('NET.Request', 'An unsupported JSONP request was made.')\r\n    callback(new Error('JSONP unsupported in Node-like environments.'))\r\n    /* end-node-only */\r\n    /* browser-only */\r\n    const fn = 'jsonp_callback_' + Math.round(100000 * Math.random())\r\n\r\n    window[fn] = (data) => {\r\n      delete window[fn]\r\n\r\n      document.body.removeChild(script)\r\n\r\n      return callback(null, data)\r\n    }\r\n\r\n    let script = document.createElement('script')\r\n\r\n    script.src = url + (url.indexOf('?') >= 0 ? '&' : '?') + 'callback=' + fn\r\n\r\n    script.addEventListener('error', (e) => {\r\n      delete window[fn]\r\n\r\n      return callback(new Error('The JSONP request was blocked. This may be the result of an invalid URL, cross origin restrictions, or the remote server may not be online.'))\r\n    })\r\n\r\n    document.body.appendChild(script)\r\n    /* end-browser-only */\r\n  }\r\n\r\n  // Apply a preflight request option to the network request.\r\n  send (request, callback) {\r\n    this.preflight(request)\r\n    request.send(callback)\r\n  }\r\n\r\n  /**\r\n   * @method preflight\r\n   * This is a no-op method that runs before a request is sent.\r\n   * This exists specicially to be overridden by class extensions.\r\n   */\r\n  preflight (request) {}\r\n}\r\n","import Request from './Request'\r\nimport Network from './Network'\r\nimport Resource from './Resource'\r\nimport * as Utility from './utility'\r\n\r\n/**\r\n * @namespace NGN.NET\r\n * A library to issue HTTP/S requests.\r\n * This acts as an AJAX library.\r\n * @author Corey Butler\r\n * @singleton\r\n */\r\n\r\nNetwork.prototype.Resource = Resource\r\n\r\nconst normalizeUrl = Utility.normalizeUrl\r\nconst networkInterfaces = Utility.networkInterfaces\r\nconst Library = new Network()\r\n\r\nexport { Library, normalizeUrl, networkInterfaces, Request, Resource }\r\n","import Network from './Network'\r\nimport { hostname, normalizeUrl } from './utility'\r\n\r\n/**\r\n * @class NGN.NET.Resource\r\n * Represents a remote web resource, such as a backend web server or\r\n * an API server. This class inherits everything from NGN.NET, extending\r\n * it with customizable options for working with specific remote resources.\r\n *\r\n * This class was designed for use in applications where multiple requests\r\n * are made to multiple backends. For example, a common single page application\r\n * may make multiple requests for resources (media, templates, CSS, etc)\r\n * as well as multiple requests to an API server.\r\n *\r\n * For example:\r\n *\r\n * ```js\r\n * let server = new NGN.NET.Resource({\r\n *   credentials: {\r\n *     username: 'username',\r\n *     password: 'password'\r\n *   },\r\n *   headers: {\r\n *     'x-source': 'mydomain.com'\r\n *   }\r\n * })\r\n *\r\n * let API = new NGN.NET.Resource({\r\n *   credentials: {\r\n *     token: 'secret_token'\r\n *   },\r\n *   headers: {\r\n *     'user-agent': 'mobile'\r\n *   },\r\n *   baseUrl: 'https://api.mydomain.com'\r\n * })\r\n *\r\n * server.get('./templates/home.html', (response) => { ... })\r\n * API.json('/user', (data) => { ... })\r\n * ```\r\n *\r\n * Both `server` and `API` in the example above are instances of\r\n * NGN.NET. They each use different credentials to access the\r\n * remote endpoint, using different global headers and\r\n * a different base URL.\r\n *\r\n * This can be incredibly useful anytime a migration is required,\r\n * such as running code in dev ==> staging ==> production or\r\n * switching servers. It is also useful for creating connections\r\n * to different remote services, creating custom API clients,\r\n * and generally organizing/standardizing how an application connects\r\n * to remote resources.\r\n * @extends NGN.NET\r\n */\r\nexport default class NetworkResource extends Network {\r\n  constructor (cfg) {\r\n    super()\r\n\r\n    cfg = cfg || {}\r\n\r\n    Object.defineProperties(this, {\r\n      /**\r\n       * @cfg {object} headers\r\n       * Contains headers (key/value) that are applied to all requests.\r\n       */\r\n      globalHeaders: NGN.private(NGN.coalesceb(cfg.headers, {})),\r\n\r\n      /**\r\n       * @cfg {object} credentials\r\n       * Contains credentials that are applied to all requests.\r\n       * @private\r\n       */\r\n      globalCredentials: NGN.private(NGN.coalesceb(cfg.credentials, {})),\r\n\r\n      /**\r\n       * @cfg {string} username\r\n       * Use this to set a username (instead of using #credentials).\r\n       */\r\n      user: NGN.private(NGN.coalesceb(cfg.username)),\r\n\r\n      /**\r\n       * @cfg {string} password\r\n       * Use this to set a password (instead of using #credentials).\r\n       */\r\n      secret: NGN.private(NGN.coalesceb(cfg.password)),\r\n\r\n      /**\r\n       * @cfg {string} accessToken\r\n       * Use this to set an access token (instead of using #credentials).\r\n       */\r\n      accesstoken: NGN.private(NGN.coalesceb(cfg.token, cfg.accessToken)),\r\n\r\n      /**\r\n       * @cfg {object} query\r\n       * Contains query parameters to be applied to all requests. All values\r\n       * are automatically url-encoded.\r\n       */\r\n      globalQuery: NGN.private(NGN.coalesceb(cfg.query, {})),\r\n\r\n      /**\r\n       * @cfg {string} [baseUrl=window.loction.origin]\r\n       * The root domain/base URL to apply to all requests to relative URL's.\r\n       * This was designed for uses where a backend API may be served on\r\n       * another domain (such as api.mydomain.com instead of www.mydomain.com).\r\n       * The root will only be applied to relative paths that do not begin\r\n       * with a protocol. For example, `./path/to/endpoint` **will** have\r\n       * the root applied (`{root}/path/to/endpoint`) whereas `https://domain.com/endpoint`\r\n       * will **not** have the root applied.\r\n       */\r\n      baseUrl: NGN.private(NGN.coalesce(cfg.baseUrl, cfg.baseurl, `http://${hostname}/`)),\r\n\r\n      /**\r\n       * @cfg {boolean} [nocache=false]\r\n       * Set this to `true` to add a unique cache-busting URL parameter to all requests.\r\n       */\r\n      nocache: NGN.private(NGN.coalesce(cfg.nocache, false)),\r\n\r\n      /**\r\n       * @cfg {boolean} [sslonly=false]\r\n       * Set this to true to rewrite all URL's to use HTTPS.\r\n       */\r\n      sslonly: NGN.public(NGN.coalesce(cfg.sslonly, false))\r\n    })\r\n\r\n    if (this.baseUrl.indexOf('://') < 0 || this.baseUrl.indexOf('://') > 10) {\r\n      this.baseUrl = `http${this.sslonly ? 's' : ''}://${this.baseUrl}`\r\n    } else if (this.sslonly) {\r\n      this.baseUrl = this.baseUrl.replace('http://', 'https://')\r\n    }\r\n\r\n    if (this.accesstoken !== null) {\r\n      this.credentials = {\r\n        accessToken: this.accesstoken\r\n      }\r\n    } else if (this.user !== null && this.ssecret !== null) {\r\n      this.credentials = {\r\n        username: this.user,\r\n        password: this.secret\r\n      }\r\n    }\r\n  }\r\n\r\n  get username () {\r\n    return this.user\r\n  }\r\n\r\n  set username (value) {\r\n    if (this.user !== value) {\r\n      this.user = value\r\n\r\n      if (this.secret !== null) {\r\n        this.credentials = {\r\n          username: this.user,\r\n          password: this.secret\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  set password (value) {\r\n    if (this.secret !== value) {\r\n      this.secret = value\r\n\r\n      if (this.user !== null) {\r\n        this.credentials = {\r\n          username: this.user,\r\n          password: this.secret\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @property {object} headers\r\n   * Represents the current global headers.\r\n   *\r\n   * This is commonly used when a remote resource requires a specific\r\n   * header on every call.\r\n   *\r\n   * **Example**\r\n   *\r\n   * ```js\r\n   * let resource = new NGN.NET.Resource(...)\r\n   *\r\n   * resource.headers = {\r\n   *   'user-agent': 'my custom agent name'\r\n   * }\r\n   * ```\r\n   */\r\n  get headers () {\r\n    return this.globalHeaders\r\n  }\r\n\r\n  set headers (value) {\r\n    this.globalHeaders = value\r\n  }\r\n\r\n  /**\r\n   * @property credentials\r\n   * Configure credentials that are applied to every request.\r\n   * This is commonly used when communicating with a RESTful API.\r\n   * This can accept a username and password or an access token.\r\n   *\r\n   * **Examples**\r\n   *\r\n   * ```js\r\n   *  let resource = new NGN.NET.Resource(...)\r\n   *\r\n   *  resource.credentials = {\r\n   *    username: 'user',\r\n   *    password: 'pass'\r\n   *  }\r\n   * ```\r\n   *\r\n   * ```js\r\n   * resource.credentials = {\r\n   *   accessToken: 'token'\r\n   * }\r\n   * ```\r\n   */\r\n  set credentials (credentials) {\r\n    if (credentials.hasOwnProperty('accesstoken') || credentials.hasOwnProperty('accessToken') || credentials.hasOwnProperty('token')) {\r\n      credentials.accessToken = NGN.coalesce(credentials.accessToken, credentials.accesstoken, credentials.token)\r\n\r\n      if (credentials.hasOwnProperty('username')) {\r\n        delete credentials.username\r\n      }\r\n\r\n      if (credentials.hasOwnProperty('password')) {\r\n        delete credentials.password\r\n      }\r\n    } else if (!(credentials.hasOwnProperty('username') && credentials.hasOwnProperty('password')) && !credentials.hasOwnProperty('accessToken')) {\r\n      throw new Error('Invalid credentials. Must contain an access token OR the combination of a username AND password.')\r\n    }\r\n\r\n    this.globalCredentials = credentials\r\n\r\n    if (credentials.username) {\r\n      this.username = credentials.username\r\n    }\r\n\r\n    if (credentials.password) {\r\n      this.password = credentials.password\r\n    }\r\n  }\r\n\r\n  // Explicitly deny credential reading.\r\n  get credentials () {\r\n    NGN.WARN('Credentials are write-only. An attempt to read credentials was denied.')\r\n    return {\r\n      username: null,\r\n      secret: null,\r\n      password: null,\r\n      accessToken: null\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @property {object} query\r\n   * Represents the current global query paramaters.\r\n   *\r\n   * This is commonly used when a remote resource requires a specific\r\n   * query paramater on every call.\r\n   *\r\n   * **Example**\r\n   *\r\n   * ```js\r\n   * let resource = new NGN.NET.Resource(...)\r\n   *\r\n   * resource.query = {\r\n   *   'user_id': '12345'\r\n   * }\r\n   * ```\r\n   *\r\n   * All parameter values are automatically URL-encoded.\r\n   */\r\n  get query () {\r\n    return this.globalQuery\r\n  }\r\n\r\n  set query (value) {\r\n    this.globalQuery = value\r\n  }\r\n\r\n  /**\r\n   * @method prepareUrl\r\n   * Prepare a URL by applying the base URL (only when appropriate).\r\n   * @param  {string} uri\r\n   * The universal resource indicator (URI/URL) to prepare.\r\n   * @return {string}\r\n   * Returns a fully qualified URL.\r\n   * @private\r\n   */\r\n  prepareUrl (uri) {\r\n    if (uri.indexOf('://') < 0) {\r\n      uri = normalizeUrl(`${this.baseUrl}/${uri}`)\r\n    }\r\n\r\n    return uri.replace(/\\/{2,5}/gi, '/').replace(/:\\/{1}/i, '://')\r\n  }\r\n\r\n  /**\r\n   * @method preflight\r\n   * Prepares a request before it is sent.\r\n   * @param {NGN.NET.Request} request\r\n   * The request object.\r\n   * @private\r\n   */\r\n  preflight (request) {\r\n    // Apply the base URL\r\n    request.url = this.prepareUrl(request.url)\r\n\r\n    // If global query parameters have been defined, apply them.\r\n    let qp = Object.keys(this.globalQuery)\r\n    if (qp.length > 0) {\r\n      let queryString = []\r\n      for (let i = 0; i < qp.length; i++) {\r\n        queryString.push(`${qp[i]}=${encodeURIComponent(this.globalQuery[qp[i]])}`)\r\n      }\r\n\r\n      if (request.query === '') {\r\n        request.url = `${request.url}?${queryString.join('&')}`\r\n      } else {\r\n        request.url = `${request.url}&${queryString.join('&')}`\r\n      }\r\n    }\r\n\r\n    // If global credentials are available, apply them.\r\n    let gHeaders = Object.keys(this.globalHeaders)\r\n    for (let i = 0; i < gHeaders.length; i++) {\r\n      request.setHeader(gHeaders[i], this.globalHeaders[gHeaders[i]])\r\n    }\r\n\r\n    // If global headers/credentials are available, apply them.\r\n    if (this.globalCredentials.accessToken) {\r\n      request.accessToken = this.globalCredentials.accessToken\r\n    } else if (this.globalCredentials.username) {\r\n      request.username = this.globalCredentials.username\r\n      request.password = this.globalCredentials.password\r\n    }\r\n\r\n    // Add a cache buster\r\n    if (this.nocache) {\r\n      request.setQueryParameter('nocache' + (new Date()).getTime().toString() + Math.random().toString().replace('.', ''), null)\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @ignore\r\n * Addition: ['+', path, value]\r\n * Deletion: ['-', path, oldValue]\r\n * Modified: ['m', path, oldValue, newValue]\r\n */\r\nexport default class ObjectDiff {\r\n  static compare (lhs, rhs, path = []) {\r\n    let differences = []\r\n    let ltype = NGN.typeof(lhs)\r\n    let rtype = NGN.typeof(rhs)\r\n\r\n    // If the comparators aren't the same type, then\r\n    // it is a replacement. This is identified as\r\n    // removal of one object and creation of the other.\r\n    if (ltype !== rtype) {\r\n      return [\r\n        ['m', path, lhs, rhs]\r\n      ]\r\n    }\r\nconsole.log('Diffing:', ltype, lhs, rhs, 'PATH', path.join('.'))\r\n    switch (ltype) {\r\n      // case 'function':\r\n      //   if (lhs.toString() !== rhs.toString()) {\r\n      //     return ['m', path, lhs, rhs]\r\n      //   }\r\n      //\r\n      //   return []\r\n\r\n      case 'object':\r\n        let keys = Object.keys(lhs)\r\n        // let relativePath\r\n\r\n        // Compare left to right for modifications and removals\r\n        for (let i = 0; i < keys.length; i++) {\r\n          // Reset the relative path\r\n          let relativePath = Object.assign([], path)\r\n\r\n          relativePath.push(keys[i])\r\n\r\n          if (!rhs.hasOwnProperty(keys[i])) {\r\n            // If no right hand argument exists, it was removed.\r\n            differences.push(['-', relativePath, lhs[keys[i]]])\r\n          } else if (NGN.typeof(lhs[keys[i]]) === 'object') {\r\n            // Recursively compare objects\r\n            differences = differences.concat(this.compare(lhs[keys[i]], rhs[keys[i]], relativePath))\r\n          } else if (lhs[keys[i]] !== rhs[keys[i]]) {\r\n            if (NGN.typeof(lhs[keys[i]]) === 'array' && NGN.typeof(rhs[keys[i]]) === 'array') {\r\n              // If the keys contain arrays, re-run the comparison.\r\n              differences = differences.concat(this.compare(lhs[keys[i]], rhs[keys[i]], relativePath))\r\n            } else {\r\n              // If the comparators exist but are different, a\r\n              // modification ocurred.\r\n              differences.push(['m', relativePath, lhs[keys[i]], rhs[keys[i]]])\r\n            }\r\n          }\r\n        }\r\n\r\n        // Compare right to left for additions\r\n        keys = Object.keys(lhs)\r\n        keys.unshift(rhs)\r\n        keys = NGN.getObjectExtraneousPropertyNames.apply(this, keys)\r\n\r\n        for (let i = 0; i < keys.length; i++) {\r\n          // Reset the relative path\r\n          let relativePath = Object.assign([], path)\r\n          relativePath.push(keys[i])\r\n\r\n          differences.push(['+', relativePath, rhs[keys[i]]])\r\n        }\r\n\r\n        break\r\n\r\n      case 'array':\r\n        differences = this.compareArray(lhs, rhs)\r\n\r\n        break\r\n\r\n      case 'string':\r\n        console.log('TO DO: Add String Diff') // eslint-disable-line no-fallthrough\r\n\r\n      default:\r\n        if (lhs !== rhs) {\r\n          if (NGN.typeof(lhs) !== 'undefined' && NGN.typeof(rhs) === 'undefined') {\r\n            differences.push(['-', path, lhs])\r\n          } else if (NGN.typeof(lhs) === 'undefined' && NGN.typeof(rhs) !== 'undefined') {\r\n            differences.push(['+', path, rhs])\r\n          } else {\r\n            differences.push(['m', path, lhs, rhs])\r\n          }\r\n        }\r\n    }\r\n\r\n    return differences\r\n  }\r\n\r\n  compareArray (lhs, rhs) {\r\n    // if (lhs === rhs) {\r\n      return []\r\n    // }\r\n    //\r\n    // for (let i = 0; i < lhs.length; i++) {\r\n    //   if (false) {}\r\n    // }\r\n  }\r\n\r\n  static arraysHaveMatchByRef (array1, array2, len1, len2) {\r\n    for (let index1 = 0; index1 < len1; index1++) {\r\n      let val1 = array1[index1]\r\n\r\n      for (let index2 = 0; index2 < len2; index2++) {\r\n        let val2 = array2[index2]\r\n\r\n        if (index1 !== index2 && val1 === val2) {\r\n          return true\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  static matchItems (array1, array2, index1, index2, context) {\r\n    let value1 = array1[index1]\r\n    let value2 = array2[index2]\r\n\r\n    if (value1 === value2) {\r\n      return true\r\n    }\r\n\r\n    if (typeof value1 !== 'object' || typeof value2 !== 'object') {\r\n      return false\r\n    }\r\n\r\n    let objectHash = context.objectHash\r\n\r\n    if (!objectHash) {\r\n      // no way to match objects was provided, try match by position\r\n      return context.matchByPosition && index1 === index2\r\n    }\r\n\r\n    let hash1\r\n    let hash2\r\n\r\n    if (typeof index1 === 'number') {\r\n      context.hashCache1 = NGN.forceArray(context.hashCache1)\r\n      hash1 = context.hashCache1[index1]\r\n\r\n      if (typeof hash1 === 'undefined') {\r\n        context.hashCache1[index1] = hash1 = objectHash(value1, index1)\r\n      }\r\n    } else {\r\n      hash1 = objectHash(value1)\r\n    }\r\n\r\n    if (typeof hash1 === 'undefined') {\r\n      return false\r\n    }\r\n\r\n    if (typeof index2 === 'number') {\r\n      context.hashCache2 = NGN.forceArray(context.hashCache2)\r\n      hash2 = context.hashCache2[index2]\r\n\r\n      if (typeof hash2 === 'undefined') {\r\n        context.hashCache2[index2] = hash2 = objectHash(value2, index2)\r\n      }\r\n    } else {\r\n      hash2 = objectHash(value2)\r\n    }\r\n\r\n    if (typeof hash2 === 'undefined') {\r\n      return false\r\n    }\r\n\r\n    return hash1 === hash2\r\n  }\r\n\r\n  /*\r\n   * LCS implementation that supports arrays or strings\r\n   * reference: http://en.wikipedia.org/wiki/Longest_common_subsequence_problem\r\n   * This code abstracted from Benjamín Eidelman's JSONDiffPatch (MIT).\r\n   */\r\n  static lcsDefaultMatch (array1, array2, index1, index2) {\r\n    return array1[index1] === array2[index2]\r\n  }\r\n\r\n  static lcsLengthMatrix (array1, array2, match, context) {\r\n    let len1 = array1.length\r\n    let len2 = array2.length\r\n    let x\r\n    let y\r\n\r\n    // initialize empty matrix of len1+1 x len2+1\r\n    let matrix = [len1 + 1]\r\n\r\n    for (x = 0; x < len1 + 1; x++) {\r\n      matrix[x] = [len2 + 1]\r\n\r\n      for (y = 0; y < len2 + 1; y++) {\r\n        matrix[x][y] = 0\r\n      }\r\n    }\r\n\r\n    matrix.match = match\r\n\r\n    // save sequence lengths for each coordinate\r\n    for (x = 1; x < len1 + 1; x++) {\r\n      for (y = 1; y < len2 + 1; y++) {\r\n        if (match(array1, array2, x - 1, y - 1, context)) {\r\n          matrix[x][y] = matrix[x - 1][y - 1] + 1\r\n        } else {\r\n          matrix[x][y] = Math.max(matrix[x - 1][y], matrix[x][y - 1])\r\n        }\r\n      }\r\n    }\r\n\r\n    return matrix\r\n  };\r\n\r\n  static lcsBacktrack (matrix, array1, array2, index1, index2, context) {\r\n    if (index1 === 0 || index2 === 0) {\r\n      return {\r\n        sequence: [],\r\n        indices1: [],\r\n        indices2: []\r\n      }\r\n    }\r\n\r\n    if (matrix.match(array1, array2, index1 - 1, index2 - 1, context)) {\r\n      let subsequence = backtrack(matrix, array1, array2, index1 - 1, index2 - 1, context)\r\n\r\n      subsequence.sequence.push(array1[index1 - 1])\r\n      subsequence.indices1.push(index1 - 1)\r\n      subsequence.indices2.push(index2 - 1)\r\n\r\n      return subsequence\r\n    }\r\n\r\n    if (matrix[index1][index2 - 1] > matrix[index1 - 1][index2]) {\r\n      return backtrack(matrix, array1, array2, index1, index2 - 1, context)\r\n    } else {\r\n      return backtrack(matrix, array1, array2, index1 - 1, index2, context)\r\n    }\r\n  };\r\n\r\n  static lcsGet (array1, array2, match, context) {\r\n    context = context || {}\r\n\r\n    let matrix = lengthMatrix(array1, array2, match || defaultMatch, context)\r\n    let result = backtrack(matrix, array1, array2, array1.length, array2.length, context)\r\n\r\n    if (typeof array1 === 'string' && typeof array2 === 'string') {\r\n      result.sequence = result.sequence.join('')\r\n    }\r\n\r\n    return result\r\n  }\r\n}\r\n\r\n\r\n// class LCS {\r\n//\r\n// }\r\n","// Difference Utilities\r\nimport ObjectDiff from './DiffEngine'\r\n\r\n// CRC table for checksum (cached)\r\nlet crcTable = null\r\n\r\n/**\r\n * Generate the CRC table for checksums. This is a fairly complex\r\n * operation that should only be executed once and cached for\r\n * repeat use.\r\n */\r\nconst makeCRCTable = function () {\r\n  let c\r\n  let crcTable = []\r\n\r\n  for (let n = 0; n < 256; n++) {\r\n    c = n\r\n\r\n    for (let k = 0; k < 8; k++) {\r\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1))\r\n    }\r\n\r\n    crcTable[n] = c\r\n  }\r\n\r\n  return crcTable\r\n}\r\n\r\n/**\r\n * @class NGN.DATA.UTILITY\r\n * A utility library of functions relevant to data management.\r\n */\r\nexport default class Utility { // eslint-disable-line\r\n  static diff () {\r\n    return ObjectDiff.compare(...arguments) // eslint-disable-line no-undef\r\n  }\r\n\r\n  /**\r\n   * @method checksum\r\n   * Create the checksum of the specified string.\r\n   * @param  {string} content\r\n   * The content to generate a checksum for.\r\n   * @return {string}\r\n   * Generates a checksum value.\r\n   */\r\n  static checksum (str) {\r\n    if (typeof str === 'object') {\r\n      str = JSON.stringify(this.serialize(str))\r\n    }\r\n\r\n    if (!crcTable) {\r\n      crcTable = makeCRCTable()\r\n    }\r\n\r\n    let crc = 0 ^ (-1)\r\n\r\n    for (let i = 0; i < str.length; i++) {\r\n      crc = (crc >>> 8) ^ crcTable[(crc ^ str.charCodeAt(i)) & 0xFF]\r\n    }\r\n\r\n    return (crc ^ (-1)) >>> 0\r\n  }\r\n\r\n  /**\r\n   * @method UUID\r\n   * Generate a universally unique identifier (v4).\r\n   *\r\n   * This is a \"fast\" UUID generator, designed to work in the browser.\r\n   * This will generate a UUID in less than 20ms on Chrome, as of Nov 6, 2017.\r\n   * Code courtesy of @broofa on StackOverflow.\r\n   *\r\n   * While this method cannot absolutely guarantee there will be no collisions\r\n   * (duplicates), the chances are 1:5.3x10^^36 (1 in over 100 quadrillion).\r\n   * You are over 30 _octillion_ times more likely to win the Powerball than to\r\n   * generate two identical \"random\" UUIDs using the version 4 scheme.\r\n   * @return {string}\r\n   * Returns a [V4 GUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_.28random.29).\r\n   */\r\n  static UUID () {\r\n    /* node-only */\r\n    return this.GUID()\r\n    /* end-node-only */\r\n    /* browser-only */\r\n    return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c => // eslint-disable-line\r\n      (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16) // eslint-disable-line\r\n    )\r\n    /* end-browser-only */\r\n  }\r\n\r\n  /**\r\n   * @method GUID\r\n   * Generate a globally unique identifier. A GUID is the Microsoft\r\n   * implementation of a UUIDv4.\r\n   *\r\n   * The likelihood of an ID collision, according to the original author (Jeff\r\n   * Ward) is 1:3.26x10^15 (1 in 3.26 quadrillion). Results are generated between\r\n   * approximately 105ms (Desktop) and 726ms (Android) as of May 2016.\r\n   * @return {string} [description]\r\n   */\r\n  static GUID () {\r\n    let lut = []\r\n\r\n    for (let i = 0; i < 256; i++) {\r\n      lut[i] = (i < 16 ? '0' : '') + (i).toString(16)\r\n    }\r\n\r\n    const d0 = Math.random() * 0xffffffff | 0\r\n    const d1 = Math.random() * 0xffffffff | 0\r\n    const d2 = Math.random() * 0xffffffff | 0\r\n    const d3 = Math.random() * 0xffffffff | 0\r\n\r\n    return lut[d0 & 0xff] + lut[d0 >> 8 & 0xff] + lut[d0 >> 16 & 0xff] + lut[d0 >> 24 & 0xff] +\r\n      '-' + lut[d1 & 0xff] + lut[d1 >> 8 & 0xff] + '-' + lut[d1 >> 16 & 0x0f | 0x40] +\r\n      lut[d1 >> 24 & 0xff] + '-' + lut[d2 & 0x3f | 0x80] + lut[d2 >> 8 & 0xff] + '-' +\r\n      lut[d2 >> 16 & 0xff] + lut[d2 >> 24 & 0xff] + lut[d3 & 0xff] + lut[d3 >> 8 & 0xff] +\r\n      lut[d3 >> 16 & 0xff] + lut[d3 >> 24 & 0xff]\r\n  }\r\n\r\n  /**\r\n   * @method serialize\r\n   * Creates a JSON data object with no functions. Only uses enumerable\r\n   * attributes of the object.\r\n   *\r\n   * Functions & Setters are always ignored. Getters are evaluated recursively\r\n   * until a simple object type is found or there are no further nested\r\n   * attributes.\r\n   * @param {object|array} object\r\n   * Supports an object or array.\r\n   */\r\n  static serialize (data) {\r\n    if (typeof data !== 'object') {\r\n      throw new Error(`Cannot serialize ${NGN.typeof(data)} value. Must be an object.`)\r\n    }\r\n\r\n    // Force an object for parsing\r\n    let SERIALIZED_ARRAY_DATA = Symbol('array.data')\r\n\r\n    if (NGN.typeof(data) === 'array') {\r\n      data = {\r\n        [SERIALIZED_ARRAY_DATA]: data\r\n      }\r\n    }\r\n\r\n    let result = {}\r\n    let attribute = Object.keys(data)\r\n\r\n    for (let i = 0; i < attribute.length; i++) {\r\n      if (data[attribute[i]] !== undefined) {\r\n        switch (NGN.typeof(data[attribute[i]])) {\r\n          case 'object':\r\n            Object.defineProperty(\r\n              result,\r\n              attribute[i],\r\n              NGN.public(NGN.DATA.UTIL.serialize(data[attribute[i]]))\r\n            )\r\n\r\n            break\r\n\r\n          case 'array':\r\n            result[attribute[i]] = []\r\n\r\n            for (let a = 0; a < data[attribute[i]].length; a++) {\r\n              result[attribute[i]].push(NGN.DATA.UTIL.serialize(data[attribute[i]]))\r\n            }\r\n\r\n            break\r\n\r\n          case 'date':\r\n            Object.defineProperty(result, attribute[i], NGN.public(data[attribute[i]].toISOString()))\r\n\r\n            break\r\n\r\n          case 'symbol':\r\n            if (SERIALIZED_ARRAY_DATA !== attribute[i]) {\r\n              result[attribute[i]] = data[attribute[i]].toString()\r\n            }\r\n\r\n            break\r\n\r\n          case 'regexp':\r\n            Object.defineProperty(result, attribute[i], NGN.public(data[attribute[i]].toString()))\r\n\r\n            break\r\n\r\n          case 'weakmap':\r\n          case 'map':\r\n            let mapResult = {}\r\n\r\n            data[attribute[i]].forEach((value, key) => {\r\n              mapResult[key.toString()] = this.serialize(value)\r\n            })\r\n\r\n            result[attribute[i]] = mapResult\r\n\r\n            break\r\n\r\n          case 'weakset':\r\n          case 'set':\r\n            if (data[attribute[i]].size === 0) {\r\n              result[attribute[i]] = []\r\n              break\r\n            }\r\n\r\n            result[attribute[i]] = this.serialize(Array.from(data[attribute[i]].values()))\r\n\r\n            break\r\n\r\n          case 'function':\r\n            break\r\n\r\n          default:\r\n            result[attribute[i]] = data[attribute[i]]\r\n        }\r\n      }\r\n    }\r\n\r\n    return result[SERIALIZED_ARRAY_DATA] !== undefined ? result[SERIALIZED_ARRAY_DATA] : result\r\n  }\r\n\r\n  /**\r\n   * @method isModel\r\n   * Determines whether an object is an instance of NGN.DATA.Model.\r\n   * @param {function} PossibleModel\r\n   * The class or function to be checked.\r\n   * @returns {boolean}\r\n   */\r\n   static isDataModel (Model) {\r\n     if (Model instanceof NGN.DATA.Model || NGN.typeof(Model) === 'model') {\r\n       return true\r\n     }\r\n\r\n     if (Model.hasOwnProperty('prototype') && Model.prototype !== null) {\r\n       let currentElement = Model;\r\n       let count = 0;\r\n\r\n       while (currentElement.prototype !== null && count < 30) {\r\n         count++;\r\n\r\n         currentElement = currentElement.prototype;\r\n\r\n         if (currentElement instanceof NGN.DATA.Model || NGN.typeof(currentElement) === 'model') {\r\n           return true\r\n         }\r\n       }\r\n     }\r\n\r\n     return Model instanceof NGN.DATA.Entity\r\n   }\r\n\r\n  // /**\r\n  //  * @method objectByteSize\r\n  //  * Calculates the _estimated_ size (in bytes) of primitive key/value objects,\r\n  //  * meaning those that do not contain functions, accessors (getters/setters),\r\n  //  * or other attributes other than `String`, `Number`, or `Boolean` values.\r\n  //  * NGN treats dates as `String` values.\r\n  //  *\r\n  //  * JavaScript engines differ in how they manage memory, but most do not\r\n  //  * calculate the size of functions. If a value of type `function` is found in\r\n  //  * the object, NGN will calculate the size of it's `String` representation.\r\n  //  * This is a weak measure of function size since most JavaScript engines\r\n  //  * do not expose enough realtime heap data to know calculate with accuracy at\r\n  //  * any given point in time.\r\n  //  *\r\n  //  * This method attempts to implement similar principles to C's `sizeOf` method.\r\n  //  *\r\n  //  * Consider this method to provide a **best guess based on the available data**.\r\n  //  *\r\n  //  * @param {Object} object\r\n  //  * The primitive key/value object upon which the bytesize estimation will be made.\r\n  //  * @param {Boolean} [ignoreFunctionEstimate=false]\r\n  //  * By default, NGN will calculate the `String` representation of any functions\r\n  //  * it encounters in the key/value object. Setting this to `true` will prevent\r\n  //  * this behavior, effectively using a `0` to calculate function size.\r\n  //  */\r\n  // static objectByteSize (obj, ignore=false) {\r\n  //   switch (typeof obj) {\r\n  //     case null:\r\n  //       return 4\r\n  //\r\n  //     case 'string':\r\n  //       return obj.length * 2\r\n  //\r\n  //     case 'boolean':\r\n  //       return 4\r\n  //\r\n  //     case 'number':\r\n  //       return 8\r\n  //\r\n  //     case 'function':\r\n  //       if (!ignore) {\r\n  //         return obj.toString().length * 2\r\n  //       }\r\n  //\r\n  //       return 0\r\n  //   }\r\n  //\r\n  //   let list = []\r\n  //   let stack = [obj]\r\n  //   let bytes = 0\r\n  //\r\n  //   while (stack.length) {\r\n  //     let value = stack.pop()\r\n  //\r\n  //     if (typeof value === 'object') {\r\n  //       if (list.indexOf(value) < 0) {\r\n  //         list.push(value)\r\n  //\r\n  //         // If the object is not an array, add key sizes\r\n  //         const isArray = !Array.isArray(value)\r\n  //\r\n  //         for (let key in value) {\r\n  //           if (!isArray) {\r\n  //             bytes += (2 * key.length) + NGN.DATA.util(value[key])\r\n  //             stack.push(value[key])\r\n  //           } else {\r\n  //\r\n  //           }\r\n  //         }\r\n  //       }\r\n  //     } else {\r\n  //       bytes += NGN.DATA.UTILITY.objectByteSize(value)\r\n  //     }\r\n  //   }\r\n  //\r\n  //   return bytes\r\n  // }\r\n}\r\n\r\nexport { makeCRCTable }\r\n","import EventEmitter from '../../emitter/core'\r\n\r\n/**\r\n * Inspired by btree.js (c) 2013 Daniel Wirtz <dcode@dcode.io>\r\n * Released under the Apache License, Version 2.0\r\n * see: http://github.com/dcodeIO/btree.js for details.\r\n *\r\n * Converted to ECMASCript 2016 class syntax & modified to use\r\n * NGN conventions. Separated code into multiple classes.\r\n * Copyright (c) 2018, Ecor Ventures LLC.\r\n * @hidden\r\n */\r\nclass TreeNode {\r\n  constructor (parent = null, leafs = [], nodes = [null]) {\r\n    Object.defineProperties(this, {\r\n      parent: NGN.private(parent),\r\n      leafs: NGN.private(leafs),\r\n      nodes: NGN.private(nodes),\r\n\r\n      METADATA: NGN.private({\r\n        order: null,\r\n        minOrder: null,\r\n\r\n        /**\r\n        * Compare two numbers\r\n        * @param  {number} firstNumber\r\n        * @param  {number} secondNumber\r\n        * @return {number}\r\n        * - Returns `-1` if first number is less than second.\r\n        * - Returns `0` if numbers are equal.\r\n        * - Returns `1` if first number is greater than second.\r\n        */\r\n        compare: (firstNumber, secondNumber) => {\r\n          return firstNumber < secondNumber ? -1 : (firstNumber > secondNumber ? 1 : 0)\r\n        }\r\n      })\r\n    })\r\n\r\n    // Associate leafs with parent\r\n    for (let i = 0; i < this.leafs.length; i++) {\r\n      this.leafs[i].parent = this\r\n      // Object.defineProperty(this.leafs[i], 'parent', NGN.get(() => this))\r\n    }\r\n\r\n    // Associate nodes with parent\r\n    for (let i = 0; i < this.nodes.length; i++) {\r\n      if (this.nodes[i] !== null) {\r\n        this.nodes[i].parent = this\r\n        // Object.defineProperty(this.nodes[i], 'parent', NGN.get(() => this))\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Search for the node that contains the specified key\r\n  * @param  {any} key\r\n  * @return {TreeLeaf|TreeNode}\r\n  */\r\n  search (key) {\r\n    if (this.leafs.length > 0) {\r\n      let a = this.leafs[0]\r\n\r\n      if (this.METADATA.compare(a.key, key) === 0) {\r\n        return {\r\n          leaf: a,\r\n          index: 0\r\n        }\r\n      }\r\n\r\n      if (this.METADATA.compare(key, a.key) < 0) {\r\n        if (this.nodes[0] !== null) {\r\n          return this.nodes[0].search(key) // Left\r\n        }\r\n\r\n        return { node: this, index: 0 }\r\n      }\r\n\r\n      let i\r\n      for (i = 1; i < this.leafs.length; i++) {\r\n        let b = this.leafs[i]\r\n\r\n        if (this.METADATA.compare(b.key, key) === 0) {\r\n          return {\r\n            leaf: b,\r\n            index: i\r\n          }\r\n        }\r\n\r\n        if (this.METADATA.compare(key, b.key) < 0) {\r\n          if (this.nodes[i] !== null) {\r\n            return this.nodes[i].search(key) // Inner\r\n          }\r\n\r\n          return { node: this, index: i }\r\n        }\r\n\r\n        a = b\r\n      }\r\n\r\n      if (this.nodes[i] !== null) {\r\n        return this.nodes[i].search(key) // Right\r\n      }\r\n\r\n      return { node: this, index: i }\r\n    }\r\n\r\n    return { node: this, index: 0 }\r\n  }\r\n\r\n  /**\r\n  * Retrieve the value of a key.\r\n  * @param {number} key\r\n  * @returns {NGNTreeLeaf}\r\n  * Returns `undefined` if no leaf is found.\r\n  */\r\n  get (key) {\r\n    let result = this.search(key)\r\n    return result.leaf ? result.leaf.value : undefined\r\n  }\r\n\r\n  /**\r\n  * Insert a key/value pair into the node.\r\n  * @param {number} key\r\n  * @param {any} value\r\n  * @param {boolean} [overwrite=true]\r\n  * Overwrite existing values.\r\n  */\r\n  put (key, value, overwrite = true) {\r\n    let result = this.search(key)\r\n\r\n    // Key already exists\r\n    if (result.leaf) {\r\n      if (!overwrite) {\r\n        return\r\n      }\r\n\r\n      result.leaf.value = value\r\n      return\r\n    }\r\n\r\n    let node = result.node\r\n    let index = result.index\r\n\r\n    node.leafs.splice(index, 0, new TreeLeaf(node, key, value))\r\n    node.nodes.splice(index + 1, 0, null)\r\n\r\n    if (node.leafs.length > this.METADATA.order) {\r\n      node.split()\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Delete key.\r\n  * @param {number} key\r\n  */\r\n  delete (key) {\r\n    var result = this.search(key)\r\n\r\n    if (!result.leaf) {\r\n      return\r\n    }\r\n\r\n    let leaf = result.leaf\r\n    let node = leaf.parent\r\n    let index = result.index\r\n    let left = node.nodes[index]\r\n\r\n    if (left === null) {\r\n      node.leafs.splice(index, 1)\r\n      node.nodes.splice(index, 1)\r\n      node.balance()\r\n    } else {\r\n      let max = left.leafs[left.leafs.length - 1]\r\n\r\n      left.delete(max.key)\r\n\r\n      max.parent = node\r\n\r\n      node.leafs.splice(index, 1, max)\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  /**\r\n  * Balance the tree.\r\n  * @private\r\n  */\r\n  balance () {\r\n    if (this.parent instanceof Tree) {\r\n      // Root has a single child and no leafs\r\n      if (this.leafs.length === 0 && this.nodes[0] !== null) {\r\n        this.parent.root = this.nodes[0]\r\n        this.parent.root.parent = this.parent\r\n      }\r\n\r\n      return\r\n    }\r\n\r\n    if (this.leafs.length >= this.METADATA.minOrder) {\r\n      return\r\n    }\r\n\r\n    let index = this.parent.nodes.indexOf(this)\r\n    let left = index > 0 ? this.parent.nodes[index - 1] : null\r\n    let right = this.parent.nodes.length > index + 1 ? this.parent.nodes[index + 1] : null\r\n    let sep\r\n    let leaf\r\n    let rest\r\n\r\n    if (right !== null && right.leafs.length > this.METADATA.minOrder) {\r\n      // Append the parent separator\r\n      sep = this.parent.leafs[index]\r\n      sep.parent = this\r\n\r\n      this.leafs.push(sep)\r\n\r\n      // Replace blank with the first right leaf\r\n      leaf = right.leafs.shift()\r\n      leaf.parent = this.parent\r\n\r\n      this.parent.leafs[index] = leaf\r\n\r\n      // Append the right rest\r\n      rest = right.nodes.shift()\r\n\r\n      if (rest !== null) {\r\n        rest.parent = this\r\n      }\r\n\r\n      this.nodes.push(rest)\r\n    } else if (left !== null && left.leafs.length > this.METADATA.minOrder) {\r\n      // Prepend the parent seperator\r\n      sep = this.parent.leafs[index - 1]\r\n      sep.parent = this\r\n\r\n      this.leafs.unshift(sep)\r\n\r\n      // Replace the blank with the last left leaf\r\n      leaf = left.leafs.pop()\r\n      leaf.parent = this.parent\r\n\r\n      this.parent.leafs[index - 1] = leaf\r\n\r\n      // Prepend the left rest to this\r\n      rest = left.nodes.pop()\r\n\r\n      if (rest !== null) {\r\n        rest.parent = this\r\n      }\r\n\r\n      this.nodes.unshift(rest)\r\n    } else {\r\n      let subst\r\n\r\n      if (right !== null) {\r\n        // Combine this + seperator from the parent + right\r\n        sep = this.parent.leafs[index]\r\n        subst = new TreeNode(this.parent, this.leafs.concat([sep], right.leafs), this.nodes.concat(right.nodes))\r\n        subst.METADATA.order = this.METADATA.order\r\n        subst.METADATA.minOrder = this.METADATA.minOrder\r\n\r\n        // Remove the seperator from the parent\r\n        this.parent.leafs.splice(index, 1)\r\n\r\n        // And replace the nodes it seperated with subst\r\n        this.parent.nodes.splice(index, 2, subst)\r\n      } else if (left !== null) {\r\n        // Combine left + seperator from parent + this\r\n        sep = this.parent.leafs[index - 1]\r\n        subst = new TreeNode(\r\n          this.parent,\r\n          left.leafs.concat([sep], this.leafs),\r\n          left.nodes.concat(this.nodes)\r\n        )\r\n\r\n        subst.METADATA.minOrder = this.METADATA.minOrder\r\n        subst.METADATA.order = this.METADATA.order\r\n\r\n        // Remove the seperator from the parent\r\n        this.parent.leafs.splice(index - 1, 1)\r\n\r\n        // Replace seperated nodes with subst\r\n        this.parent.nodes.splice(index - 1, 2, subst)\r\n      } else {\r\n        throw new Error(`Internal error: ${this.toString(true)} has neither a left nor a right sibling`)\r\n      }\r\n\r\n      this.parent.balance()\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Split the node.\r\n  */\r\n  split () {\r\n    let index = Math.floor(this.leafs.length / 2)\r\n\r\n    if (this.parent instanceof Tree) {\r\n      this.nodes = [\r\n        new TreeNode(this, this.leafs.slice(0, index), this.nodes.slice(0, index + 1)),\r\n        new TreeNode(this, this.leafs.slice(index + 1), this.nodes.slice(index + 1))\r\n      ]\r\n\r\n      this.leafs = [this.leafs[index]]\r\n    } else {\r\n      let leaf = this.leafs[index]\r\n      let rest = new TreeNode(\r\n        this.parent,\r\n        this.leafs.slice(index + 1),\r\n        this.nodes.slice(index + 1)\r\n      )\r\n\r\n      this.leafs = this.leafs.slice(0, index)\r\n      this.nodes = this.nodes.slice(0, index + 1)\r\n\r\n      this.parent.unsplit(leaf, rest)\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Unsplits a child.\r\n  * @param {NGNTreeLeaf} leaf\r\n  * @param {NGNTreeNode} rest\r\n  * @param {number} [order=52]\r\n  * @private\r\n  */\r\n  unsplit (leaf, rest) {\r\n    leaf.parent = this\r\n    rest.parent = this\r\n\r\n    let a = this.leafs[0]\r\n\r\n    if (this.METADATA.compare(leaf.key, a.key) < 0) {\r\n      this.leafs.unshift(leaf)\r\n      this.nodes.splice(1, 0, rest)\r\n    } else {\r\n      let i\r\n      for (i = 1; i < this.leafs.length; i++) {\r\n        let b = this.leafs[i]\r\n\r\n        if (this.METADATA.compare(leaf.key, b.key) < 0) {\r\n          this.leafs.splice(i, 0, leaf)\r\n          this.nodes.splice(i + 1, 0, rest)\r\n          break\r\n        }\r\n      }\r\n\r\n      if (i === this.leafs.length) {\r\n        this.leafs.push(leaf)\r\n        this.nodes.push(rest)\r\n      }\r\n    }\r\n\r\n    if (this.leafs.length > this.METADATA.order) {\r\n      this.split()\r\n    }\r\n  }\r\n\r\n  /**\r\n  * A string representation of the node.\r\n  * @param {boolean} [includeNodes=false]\r\n  * Include sub-nodes\r\n  * @returns {string}\r\n  * @private\r\n  */\r\n  toString (includeNodes = false) {\r\n    let value = []\r\n    let i\r\n\r\n    for (i = 0; i < this.leafs.length; i++) {\r\n      value.push(this.leafs[i].key)\r\n    }\r\n\r\n    let s = `[${value.toString()}]${(this.parent instanceof Tree ? ':*' : ':')}${this.parent}`\r\n\r\n    if (includeNodes) {\r\n      for (i = 0; i < this.nodes.length; i++) {\r\n        s += ` -> ${this.nodes[i]}`\r\n      }\r\n    }\r\n\r\n    return s\r\n  }\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nclass TreeLeaf {\r\n  /**\r\n   * Constructs a new Leaf containing a value.\r\n   * @param {NGNTreeNode} parent\r\n   * @param {number} key\r\n   * @param {any} value\r\n   */\r\n  constructor (parent, key, value) {\r\n    Object.defineProperties(this, {\r\n      parent: NGN.private(parent),\r\n      key: NGN.private(key),\r\n      value: NGN.private(value)\r\n    })\r\n  }\r\n\r\n  toString () {\r\n    return this.key.toString()\r\n  }\r\n}\r\n\r\n/**\r\n * @class NGN.DATA.BTree\r\n * A O(n) B-tree data type.\r\n * @private\r\n */\r\nexport default class Tree extends EventEmitter {\r\n  constructor (order = 52) {\r\n    super()\r\n\r\n    // Sanitize input\r\n    order = order < 1 ? 1 : order\r\n\r\n    Object.defineProperties(this, {\r\n      root: NGN.private(new TreeNode(this)),\r\n\r\n      BTREE: NGN.private({}),\r\n\r\n      METADATA: NGN.private({\r\n        order: order,\r\n\r\n        minOrder: order > 1 ? Math.floor(order / 2) : 1,\r\n\r\n        compare: (firstNumber, secondNumber) => {\r\n          return firstNumber < secondNumber ? -1 : (firstNumber > secondNumber ? 1 : 0)\r\n        }\r\n      })\r\n    })\r\n\r\n    this.root.METADATA.minOrder = this.METADATA.minOrder\r\n    this.root.METADATA.order = this.METADATA.order\r\n  }\r\n\r\n  /**\r\n   * Validates a node and prints debugging info if something went wrong.\r\n   * @param {!TreeNode|!Tree} node\r\n   * @private\r\n   */\r\n  validate (node) {\r\n    if (node instanceof Tree) {\r\n      return\r\n    }\r\n\r\n    if (node.leafs.length + 1 !== node.nodes.length) {\r\n      NGN.ERROR(`Illegal leaf/node count in ${node}: ${node.leafs.length}/${node.nodes.length}`)\r\n    }\r\n\r\n    let i\r\n\r\n    for (i = 0; i < node.leafs.length; i++) {\r\n      if (!node.leafs[i]) {\r\n        NGN.ERROR(`Illegal leaf in ${node} at ${i}: ${node.leafs[i]}`)\r\n      }\r\n    }\r\n\r\n    for (i = 0; i < node.nodes.length; i++) {\r\n      if (NGN.typeof(node.nodes[i]) === 'undefined') {\r\n        NGN.ERROR(`Illegal node in ${node} at ${i}: undefined`)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Insert a key/value pair into the tree.\r\n   * @param {number} key\r\n   * @param {any} value\r\n   * @param {boolean} [overwrite=true]\r\n   * Overwrite existing values\r\n   */\r\n  put (key, value, overwrite = true) {\r\n    if (NGN.typeof(key) !== 'number') {\r\n      throw new Error(`Illegal key: ${key}`)\r\n    }\r\n\r\n    if (value === undefined) {\r\n      throw new Error(`Illegal value: ${value}`)\r\n    }\r\n\r\n    return this.root.put(key, value, overwrite)\r\n  }\r\n\r\n  /**\r\n   * Retrieve the value for the specified key.\r\n   * @param {number} key\r\n   * @returns {any}\r\n   * If there is no such key, `undefined` is returned.\r\n   */\r\n  get (key) {\r\n    if (NGN.typeof(key) !== 'number') {\r\n      throw new Error(`Illegal key: ${key}`)\r\n    }\r\n\r\n    return this.root.get(key)\r\n  }\r\n\r\n  /**\r\n   * Delete a key from the tree.\r\n   * @param {number} key\r\n   */\r\n  delete (key) {\r\n    if (NGN.typeof(key) !== 'number') {\r\n      throw new Error(`Illegal key: ${key}`)\r\n    }\r\n\r\n    return this.root.delete(key)\r\n  }\r\n\r\n  /**\r\n   * Walk through all keys in ascending order.\r\n   * @param {number} minKey\r\n   * If omitted or NULL, starts at the beginning\r\n   * @param {number} maxKey\r\n   * If omitted or NULL, walks till the end\r\n   * @param {function} callback\r\n   * @param {number} callback.key\r\n   * The key\r\n   * @param {any} callback.value\r\n   * The value.\r\n   */\r\n  walk (minKey, maxKey, callback) {\r\n    if (this.root.leafs.length === 0) {\r\n      return\r\n    }\r\n\r\n    if (NGN.isFn(minKey)) {\r\n      callback = minKey\r\n      minKey = maxKey = null\r\n    } else if (NGN.isFn(maxKey)) {\r\n      callback = maxKey\r\n      maxKey = null\r\n    }\r\n\r\n    minKey = NGN.coalesce(minKey)\r\n    maxKey = NGN.coalesce(maxKey)\r\n\r\n    let ptr\r\n    let index\r\n\r\n    if (minKey === null) {\r\n      // No minimum limit\r\n      ptr = this.root\r\n\r\n      while (ptr.nodes[0] !== null) {\r\n        ptr = ptr.nodes[0]\r\n      }\r\n\r\n      index = 0\r\n    } else {\r\n      // lookup\r\n      let result = this.root.search(minKey)\r\n\r\n      if (result.leaf) {\r\n        // Minimum key itself exists\r\n        ptr = result.leaf.parent\r\n        index = ptr.leafs.indexOf(result.leaf)\r\n      } else {\r\n        // Key does not exist\r\n        ptr = result.node\r\n        index = result.index\r\n\r\n        if (index >= ptr.leafs.length) {\r\n          // begin at parent separator in overrun\r\n          if (ptr.parent instanceof Tree || ptr.parent.nodes.indexOf(ptr) >= ptr.parent.leafs.length) {\r\n            return\r\n          }\r\n\r\n          ptr = ptr.parent\r\n        }\r\n      }\r\n    }\r\n\r\n    // ptr/index points to first result\r\n    while (true) {\r\n      if (maxKey !== null && this.METADATA.compare(ptr.leafs[index].key, maxKey) > 0) {\r\n        break\r\n      }\r\n      if (ptr.leafs.length === 0) {\r\n        break\r\n      }\r\n\r\n      if (callback(ptr.leafs[index].key, ptr.leafs[index].value)) {\r\n        break\r\n      }\r\n\r\n      if (ptr.nodes[index + 1] !== null) {\r\n        // Descend Tree\r\n        ptr = ptr.nodes[index + 1]\r\n        index = 0\r\n\r\n        while (ptr.nodes[0] !== null) {\r\n          ptr = ptr.nodes[0]\r\n        }\r\n      } else if (ptr.leafs.length > index + 1) {\r\n        // Next\r\n        index++\r\n      } else {\r\n        // Ascend Tree\r\n        do {\r\n          if ((ptr.parent instanceof Tree)) {\r\n            return\r\n          }\r\n\r\n          index = ptr.parent.nodes.indexOf(ptr)\r\n          ptr = ptr.parent\r\n        } while (index >= ptr.leafs.length)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Walks through all keys in descending order.\r\n   * @param {number} minKey\r\n   * If omitted or NULL, starts at the beginning\r\n   * @param {number} maxKey\r\n   * If omitted or NULL, walks till the end\r\n   * @param {function} callback\r\n   * @param {number} callback.key\r\n   * The key\r\n   * @param {any} callback.value\r\n   * The value.\r\n   */\r\n  walkDesc (minKey, maxKey, callback) {\r\n    if (NGN.isFn(minKey)) {\r\n      callback = minKey\r\n      minKey = maxKey = null\r\n    } else if (NGN.isFn(maxKey)) {\r\n      callback = maxKey\r\n      maxKey = null\r\n    }\r\n\r\n    minKey = NGN.coalesce(minKey)\r\n    maxKey = NGN.coalesce(maxKey)\r\n\r\n    let ptr\r\n    let index\r\n    if (maxKey === null) {\r\n      // No maximum\r\n      ptr = this.root\r\n\r\n      while (ptr.nodes[ptr.nodes.length - 1] !== null) {\r\n        ptr = ptr.nodes[ptr.nodes.length - 1]\r\n      }\r\n\r\n      index = ptr.leafs.length - 1\r\n    } else {\r\n      // Lookup\r\n      let result = this.root.search(maxKey)\r\n\r\n      if (result.leaf) {\r\n        // Maximum key exists\r\n        ptr = result.leaf.parent\r\n        index = ptr.leafs.indexOf(result.leaf)\r\n      } else {\r\n        // Key does not exist\r\n        ptr = result.node\r\n        index = result.index - 1\r\n\r\n        while (index < 0) {\r\n          // Begin at parent separator on underrun\r\n          if (ptr.parent instanceof Tree) {\r\n            return\r\n          }\r\n\r\n          index = ptr.parent.nodes.indexOf(ptr) - 1\r\n\r\n          if (index < 0) {\r\n            return\r\n          }\r\n\r\n          ptr = ptr.parent\r\n        }\r\n      }\r\n    }\r\n\r\n    // ptr/index points to first result\r\n    while (true) {\r\n      if (minKey !== null && this.METADATA.compare(ptr.leafs[index].key, minKey) < 0) {\r\n        break\r\n      }\r\n\r\n      if (callback(ptr.leafs[index].key, ptr.leafs[index].value)) {\r\n        break\r\n      }\r\n\r\n      if (ptr.nodes[index] !== null) {\r\n        // Descend Tree\r\n        ptr = ptr.nodes[index]\r\n\r\n        while (ptr.nodes[ptr.nodes.length - 1] !== null) {\r\n          ptr = ptr.nodes[ptr.nodes.length - 1]\r\n        }\r\n\r\n        index = ptr.leafs.length - 1\r\n      } else if (index > 0) {\r\n        // Next\r\n        index--\r\n      } else {\r\n        // Ascend Tree\r\n        do {\r\n          if ((ptr.parent instanceof Tree)) {\r\n            return\r\n          }\r\n\r\n          index = ptr.parent.nodes.indexOf(ptr) - 1\r\n\r\n          ptr = ptr.parent\r\n        } while (index < 0)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The number of keys between minKey and maxKey (both inclusive).\r\n   * @param {number} minKey\r\n   * If omitted, counts from the start\r\n   * @param {number} maxKey\r\n   * If omitted, counts till the end\r\n   * @returns {number}\r\n   */\r\n  count (minKey, maxKey) {\r\n    let n = 0\r\n\r\n    this.walk(\r\n      minKey !== undefined ? minKey : null,\r\n      maxKey !== undefined ? maxKey : null,\r\n      (key, value) => { n++ }\r\n    )\r\n\r\n    return n\r\n  };\r\n\r\n  /**\r\n   * A string representation of the tree.\r\n   * @returns {string}\r\n   */\r\n  toString () {\r\n    return `Tree(${this.METADATA.order}) ${this.root.toString()}`\r\n  }\r\n\r\n  get length () {\r\n    return this.count()\r\n  }\r\n}\r\n","/**\r\n  * @class NGN.DATA.Rule\r\n  * A data validation rule.\r\n  * @fires validator.add\r\n  */\r\nexport default class NGNDataValidationRule { // eslint-disable-line\r\n  /**\r\n   * Create a new data rule.\r\n   * @param {Function/String[]/Number[]/Date[]/RegExp/Array} rule\r\n   * * When rule is a _function_, the value is passed to it as an argument.\r\n   * * When rule is a _String_, the value is compared for an exact match (case sensitive)\r\n   * * When rule is a _Number_, the value is compared for equality.\r\n   * * When rule is a _Date_, the value is compared for exact equality.\r\n   * * When rule is a _RegExp_, the value is tested and the results of the RegExp#test are used to validate.\r\n   * * When rule is an _Array_, the value is checked to exist in the array, regardless of data type. This is treated as an `enum`.\r\n   * * When rule is _an array of dates_, the value is compared to each date for equality.\r\n   * @param {string} [name]\r\n   * An optional name for the rule. This can be useful when debugging data issues.\r\n   * @param {object} [scope]\r\n   * Apply a custom scope to the validation functions (applicable to custom methods only).\r\n   */\r\n  constructor (validation, name = null, scope = null) {\r\n    const type = NGN.typeof(validation)\r\n\r\n    Object.defineProperties(this, {\r\n      RULE: NGN.private({\r\n        type: type,\r\n        validator: validation,\r\n        name: NGN.coalesce(name, `Untitled ${type.toUpperCase()} Validation`),\r\n        scope: NGN.coalesce(scope, this)\r\n      })\r\n    })\r\n  }\r\n\r\n  get name () {\r\n    return this.RULE.name\r\n  }\r\n\r\n  get type () {\r\n    return this.RULE.type\r\n  }\r\n\r\n  /**\r\n   * @method test\r\n   * Test a value against the validation rule.\r\n   * @param {any} value\r\n   * The value to test.\r\n   * @returns {boolean}\r\n   * Returns `true` when the value meets the rule expectations and `false` when it does not.\r\n   */\r\n  test (value) {\r\n    if (NGN.isFn(this.RULE.validator)) {\r\n      // Custom enforcement function\r\n      return this.RULE.validator.apply(this.RULE.scope, [value])\r\n    } else {\r\n      switch (this.type) {\r\n        // Enumeration\r\n        case 'array':\r\n          return this.RULE.validator.indexOf(value) !== -1\r\n\r\n        // Pattern Matching\r\n        case 'regexp':\r\n          return this.RULE.validator.test(value)\r\n\r\n        default:\r\n          return this.RULE.validator === value\r\n      }\r\n    }\r\n  }\r\n}\r\n","import EventEmitter from '../../emitter/core'\r\n\r\n/**\r\n * @class NGN.DATA.Field\r\n * Represents a data field to be used in a model/record.\r\n * @fires hidden\r\n * Triggered when the field changes from unhidden to hidden.\r\n * @fires unhidden\r\n * Triggered when the field changes from hidden to unhidden.\r\n * @fires update {object}\r\n * Triggered when the field value is updated. The payload contains\r\n * an object with old and new values:\r\n *\r\n * ```js\r\n * {\r\n *   old: 'old value',\r\n *   new: 'new value'\r\n * }\r\n * ```\r\n * @fires invalid\r\n * Triggered when a previously valid value becomes invalid.\r\n * @fires valid\r\n * Triggered when a previously invalid value becomes valid.\r\n * @fires rule.add {NGN.DATA.Rule}\r\n * Triggered when a new validation rule is added. The rule is emitted\r\n * to event handlers.\r\n * @fires rule.remove {NGN.DATA.Rule}\r\n * Triggered when a validation rule is removed. The rule is emitted\r\n * to event handlers.\r\n * @fires keystatus.changed {boolean}\r\n * Triggered when the key (identifier) status changes. The boolean\r\n * payload indicates whether the field is considered an identifier.\r\n */\r\nexport default class NGNDataField extends EventEmitter { // eslint-disable-line\r\n  /**\r\n   * @param {string|object} configuration\r\n   * Accepts an object with all configuration objects, or a string representing\r\n   * the name of the field.\r\n   */\r\n  constructor (cfg) {\r\n    cfg = cfg || {}\r\n\r\n    if (typeof cfg === 'string') {\r\n      cfg = {\r\n        name: cfg\r\n      }\r\n    }\r\n\r\n    // Validate field configuration values\r\n    if (cfg.hasOwnProperty('pattern') && NGN.typeof(cfg.pattern) !== 'regexp') {\r\n      throw new Error('Invalid data field configuration. Pattern must be a valid JavaScript regular expression (RegExp).')\r\n    }\r\n\r\n    if (cfg.type === undefined) {\r\n      if (cfg.default) {\r\n        cfg.type = NGN.getType(NGN.typeof(cfg.default), String)\r\n      }\r\n    }\r\n\r\n    super(cfg)\r\n\r\n    const EMPTYDATA = Symbol('empty')\r\n\r\n    Object.defineProperties(this, {\r\n      METADATA: NGN.privateconst({\r\n        /**\r\n         * @cfg {boolean} [required=false]\r\n         * Indicates the value is required.\r\n         */\r\n        required: NGN.coalesce(cfg.required, false),\r\n\r\n        /**\r\n         * @cfgproperty {boolean} [hidden=false]\r\n         * Indicates the field is hidden (metadata).\r\n         */\r\n        hidden: NGN.coalesce(cfg.hidden, false),\r\n\r\n        // Identifies the property as a standard data attribute.\r\n        // Alternative options include `data`, `key`, `join`, `virtual`.\r\n        fieldType: NGN.coalesce(cfg.identifier, false) ? 'key' : 'data',\r\n\r\n        isIdentifier: NGN.coalesce(cfg.identifier, false),\r\n\r\n        /**\r\n         * @cfg {boolean} [autocorrectInput=true]\r\n         * Attempt to automatically correct data type values. For example,\r\n         * a numeric field receiving a value of `'10'` will automatically\r\n         * convert the input to `10`. Only arrays, numbers, and booleans are\r\n         * supported. See NGN#forceArray, NGN#forceBoolean, and NGN#forceNumber\r\n         * for details.\r\n         */\r\n        autocorrectInput: NGN.coalesce(cfg.autocorrectInput, false),\r\n\r\n        /**\r\n         * @cfg {RegExp} [pattern]\r\n         * A pattern, as defined by a standard RegExp, that the data must match.\r\n         */\r\n        pattern: NGN.coalesceb(cfg.pattern),\r\n\r\n        /**\r\n         * @cfgproperty {string} name\r\n         * The field name.\r\n         */\r\n        name: NGN.coalesce(cfg.name),\r\n\r\n        /**\r\n         * @cfgproperty {string} description\r\n         * This is a metadata field, primarily used for documentation\r\n         * or schema generation purposes.\r\n         */\r\n        description: NGN.coalesce(cfg.description, `${NGN.typeof(cfg.type)} field`),\r\n\r\n        /**\r\n         * @cfgproperty {string} [sourceName]\r\n         * A source name represents the physical name of an attribute as it\r\n         * would be recognized in a system of record. For example, a field\r\n         * named `firstname` may need to be written to disk/memory as `gn`\r\n         * (commonly used as shorthand for givenName in LDAP environments\r\n         * and relational databases).\r\n         *\r\n         * By specifying `firstname` as the field name and `gn` as the source\r\n         * name, the field will automatically map values from the source\r\n         * to model name and vice versa.\r\n         *\r\n         * For instance, a JSON input may look like:\r\n         *\r\n         * ```js\r\n         * {\r\n         *   \"gn\": \"John\",\r\n         *   \"sn\": \"Doe\"\r\n         * }\r\n         * ```\r\n         *\r\n         * When this data is applied to the field (or loaded in a\r\n         * NGN.DATA.Model), the field #value for `firstname` would be `John`.\r\n         * If the field #value is changed to `Jill` (i.e.\r\n         * `firstname.value = 'Jill'`), the resulting data set would look like:\r\n         *\r\n         * ```js\r\n         * {\r\n         *   \"gn\": \"Jill\",\r\n         *   \"sn\": \"Doe\"\r\n         * }\r\n         * ```\r\n         */\r\n        sourceName: NGN.coalesce(cfg.sourceName),\r\n\r\n        /**\r\n         * @cfg {any} default\r\n         * The default value of the field when no value is specified.\r\n         */\r\n        default: NGN.coalesce(cfg.default),\r\n\r\n        lastValue: Symbol('no.value'),\r\n\r\n        /**\r\n         * @cfg {Primitive} [type=String]\r\n         * The JS primitive representing the type of data represented\r\n         * by the field.\r\n         */\r\n        dataType: NGN.coalesce(cfg.type, String),\r\n\r\n        /**\r\n         * @cfg {function} [rule[]]\r\n         * A function, or an array of functions, which determine whether the\r\n         * field value is valid or not. These functions receive a single argument\r\n         * (the data value) and must return a Boolean value.\r\n         */\r\n        rules: NGN.coalesce(cfg.rule, cfg.rules, cfg.validators, []),\r\n        violatedRule: null,\r\n\r\n        /**\r\n         * @cfg {boolean} [allowInvalid=true]\r\n         * If this is set to `false`, invalid values will throw an error.\r\n         */\r\n        allowInvalid: NGN.coalesce(cfg.allowInvalid, true),\r\n\r\n        /**\r\n         * @cfg {function} transformer\r\n         * A synchronous transformation function will be applied each time\r\n         * the field value is set. This can be used to modify data _before_ it\r\n         * is stored as a field value. The returned value from the function\r\n         * will be the new value of the field.\r\n         *\r\n         * The transformation function will receive the input as it's only\r\n         * aregument. For example:\r\n         *\r\n         * ```js\r\n         * let field = new NGN.DATA.Field({\r\n         *   name: 'testfield',\r\n         *   transformer: function (input) {\r\n         *     return input + '_test'\r\n         *   }\r\n         * })\r\n         *\r\n         * field.value = 'a'\r\n         *\r\n         * console.log(field.value) // Outputs \"a_test\"\r\n         * ```\r\n         *\r\n         * **Transformations can affect performance.** In small data sets,\r\n         * transformations are typically negligible, only adding a few\r\n         * milliseconds to processing time. This may affect large data sets,\r\n         * particularly data stores using defauly bulk recod loading.\r\n         */\r\n        TRANSFORM: NGN.coalesce(cfg.transformer),\r\n\r\n        RAWDATAPLACEHOLDER: EMPTYDATA,\r\n        RAW: EMPTYDATA,\r\n        ENUMERABLE_VALUES: null,\r\n        REVERSE_ENUMERABLE_VALUES: null,\r\n        IS_NEW: true,\r\n\r\n        EVENTS: new Set([\r\n          'hidden',\r\n          'unhidden',\r\n          'update',\r\n          'invalid',\r\n          'valid',\r\n          'rule.add',\r\n          'rule.remove'\r\n        ]),\r\n\r\n        /**\r\n         * @cfg {boolean} [audit=false]\r\n         * Enable auditing to support #undo/#redo operations. This creates and\r\n         * manages a NGN.DATA.TransactionLog.\r\n         */\r\n        AUDITABLE: NGN.coalesce(cfg.audit, false),\r\n\r\n        /**\r\n         * @cfg {Number} [auditMaxEntries=20]\r\n         * The maximum number of historical records to maintain for the field.\r\n         * See NGN.DATA.TransactionLog#constructor for details.\r\n         */\r\n        AUDITLOG: NGN.coalesce(cfg.audit, false)\r\n          ? new NGN.DATA.TransactionLog(NGN.coalesce(cfg.auditMaxEntries, 10))\r\n          : null,\r\n\r\n        /**\r\n         * @cfg {NGN.DATA.Model} [model]\r\n         * Optionally specify the parent model.\r\n         */\r\n        model: null,\r\n\r\n        // Set the value using a configuration.\r\n        setValue: (value, suppressEvents = false, ignoreAudit = false) => {\r\n          // Preprocessing (transform input)\r\n          if (this.METADATA.TRANSFORM !== null && NGN.isFn(this.METADATA.TRANSFORM)) {\r\n            value = this.METADATA.TRANSFORM.call(this, value)\r\n          }\r\n\r\n          // Attempt to auto-correct input when possible.\r\n          if (this.METADATA.autocorrectInput && this.type !== NGN.typeof(value)) {\r\n            value = this.autoCorrectValue(value)\r\n          }\r\n\r\n          // Ignore changes when the value hasn't been modified.\r\n          if (value === this.value) {\r\n            return\r\n          }\r\n\r\n          let change = {\r\n            field: this,\r\n            old: typeof this.METADATA.RAW === 'symbol' ? undefined : this.METADATA.RAW,\r\n            new: value\r\n          }\r\n\r\n          let priorValueIsValid = this.valid\r\n\r\n          this.METADATA.RAW = value\r\n\r\n          // Notify when an invalid value is detected.\r\n          if (!this.valid) {\r\n            // If invalid values are explicitly prohibited, throw an error.\r\n            // The value is rolled back before throwing the error so developers may\r\n            // catch the error and continue processing.\r\n            if (!this.METADATA.allowInvalid) {\r\n              this.METADATA.RAW = change.old\r\n              throw new Error(`\"${value}\" did not pass the ${this.METADATA.violatedRule} rule.`)\r\n            } else {\r\n              change.reason = `\"${value}\" did not pass the ${this.METADATA.violatedRule} rule.`\r\n              NGN.WARN(change.reason)\r\n            }\r\n\r\n            this.emit('invalid', change)\r\n          } else if (!suppressEvents && priorValueIsValid !== null && priorValueIsValid) {\r\n            // If the field BECAME valid (compared to prior value),\r\n            // emit an event.\r\n            this.emit('valid', change)\r\n          }\r\n\r\n          if (typeof this.METADATA.lastValue === 'symbol') {\r\n            this.METADATA.lastValue = value\r\n          }\r\n\r\n          // If auditing is enabled and not explicitly ignored by an internal\r\n          // operation, commit the change.\r\n          if (!ignoreAudit && !this.virtual && this.METADATA.AUDITABLE) {\r\n            change.cursor = this.METADATA.AUDITLOG.commit(this.METADATA.RAW)\r\n          }\r\n\r\n          // Notify when the update is complete.\r\n          if (!suppressEvents) {\r\n            this.emit('update', change)\r\n          }\r\n\r\n          // Mark unnecessary code for garbage collection.\r\n          priorValueIsValid = null\r\n          change = null\r\n        },\r\n\r\n        // Submit the payload to the parent model (if applicable).\r\n        commitPayload: (payload) => {\r\n          if (this.METADATA.model) {\r\n            payload.action = 'update'\r\n            payload.join = true\r\n\r\n            this.increaseMaxListeners(3)\r\n            this.METADATA.model.emit(\r\n              [\r\n                'update',\r\n                `${payload.field}.update`,\r\n                `update.${payload.field}`\r\n              ],\r\n              payload\r\n            )\r\n\r\n            payload = null // Mark for garbage collection\r\n          }\r\n        }\r\n      })\r\n    })\r\n\r\n    // Apply common rules\r\n    if (NGN.typeof(this.METADATA.rules) !== 'array') {\r\n      this.METADATA.rules = NGN.forceArray(this.METADATA.rules)\r\n    }\r\n\r\n    if (this.METADATA.rules.length > 0) {\r\n      for (let i = 0; i < this.METADATA.rules.length; i++) {\r\n        if (NGN.isFn(this.METADATA.rules[i]) && !(this.METADATA.rules[i] instanceof NGN.DATA.Rule)) {\r\n          this.METADATA.rules[i] = new NGN.DATA.Rule(this.METADATA.rules[i], `Custom Rule #${i + 1}`)\r\n        }\r\n      }\r\n    }\r\n\r\n    // Apply pattern validation if specified.\r\n    if (this.METADATA.dataType === String) {\r\n      if (this.METADATA.pattern !== null) {\r\n        this.METADATA.rules.unshift(new NGN.DATA.Rule(cfg.pattern, `Pattern Match (${cfg.pattern.toString()})`))\r\n      }\r\n\r\n      /**\r\n       * @cfg {Boolean} [nonempty]\r\n       * @info This validation attribute applies to #String fields only.\r\n       * Validates a value is not blank, `null`, or `undefined`.\r\n       */\r\n      if (cfg.nonempty) {\r\n        this.METADATA.rules.unshift(new NGN.DATA.Rule(value => {\r\n          return value.trim().length > 0\r\n        }, `No Blanks (${cfg.pattern.toString()})`))\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @cfg {Number} [min]\r\n     * @info This validation attribute applies to #Array, #String, and #Number fields only.\r\n     * Specify a minimum value:\r\n     *\r\n     * - For string values, this is a minimum number of characters.\r\n     * - For numeric values, this is a minimum inclusive value (i.e. value must be greater than\r\n     * or equal to the minimum).\r\n     * - For arrays, this is a minimum number of items that must exist in the array.\r\n     */\r\n    /**\r\n     * @cfg {Number} [max]\r\n     * @info This validation attribute applies to #Array, #String, and #Number fields only.\r\n     * Specify a maximum value:\r\n     *\r\n     * - For string values, this is a maximum number of characters.\r\n     * - For numeric values, this is a maximum inclusive value (i.e. value must be less than\r\n     * or equal to the maximum).\r\n     * - For arrays, this is a maximum number of items that may exist in the array.\r\n     */\r\n\r\n    // Apply number-specific validations.\r\n    if (this.METADATA.dataType === Number || this.METADATA.dataType === Date || this.METADATA.dataType === String) {\r\n      // Support minimum/maximum range\r\n      if (NGN.objectHasAny(cfg, 'min', 'minimum', 'max', 'maximum')) {\r\n        cfg.range = NGN.forceArray(NGN.coalesce(cfg.range))\r\n        cfg.range.push([NGN.coalesce(cfg.min, cfg.minimum), NGN.coalesce(cfg.max, cfg.maximum)])\r\n      }\r\n\r\n      /**\r\n       * @cfg {Number} [range]\r\n       * @info This validation attribute applies to #String and #Number fields only.\r\n       * Specify a range of acceptable values:\r\n       *\r\n       * - For numbers, this implies inclusive ranges. For example, `1-10` means \"between 1 and 10, where both 1 and 10 are valid.\"\r\n       * - For strings, this implies inclusive ranges just like numbers, where the number is the character count.\r\n       */\r\n      if (cfg.hasOwnProperty('range')) {\r\n        this.METADATA.rules.unshift(new NGN.DATA.RangeRule('Numeric Range', cfg.range))\r\n      }\r\n\r\n      if (this.METADATA.dataType === Number) {\r\n        // Support numeric patterns (i.e. support for integers)\r\n        if (NGN.coalesce(cfg.pattern)) {\r\n          this.METADATA.rules.unshift(new NGN.DATA.Rule(value => {\r\n            return cfg.pattern.test(value.toString())\r\n          }, `Numeric Pattern (${cfg.pattern.toString().substr(0, 15) + (cfg.pattern.toString().length > 15 ? '...' : '')})`))\r\n        }\r\n\r\n        /**\r\n         * @cfg {Number} [multipleOf]\r\n         * @info This validation attribute applies to #Number fields only.\r\n         * Insures the field value is a multiple of this number. For example,\r\n         * if the multiple is `10` and the value is `100`, it is valid.\r\n         * If the multiple is `10` and the value is `101`, it is invalid.\r\n         */\r\n        if (NGN.typeof(cfg.multipleOf) === 'number') {\r\n          this.METADATA.rules.unshift(new NGN.DATA.Rule(value => {\r\n            return Math.abs(value % cfg.multipleOf) === 0\r\n          }, `Numeric Multiple of ${cfg.multipleOf}`))\r\n        }\r\n      }\r\n    }\r\n\r\n    // Apply array-specific native validations\r\n    if (this.METADATA.dataType === Array) {\r\n      // Enforce minimum number of array items\r\n      if (NGN.objectHasAny(cfg, 'min', 'minimum')) {\r\n        this.METADATA.rules.push(new NGN.DATA.Rule(value => value.length >= NGN.coalesce(cfg.min, cfg.minimum), `${NGN.coalesce(cfg.min, cfg.minimum)} count minimum`))\r\n      }\r\n\r\n      // Enforce maximum number of array items\r\n      if (NGN.objectHasAny(cfg, 'max', 'maximum')) {\r\n        this.METADATA.rules.push(new NGN.DATA.Rule(value => value.length <= NGN.coalesce(cfg.max, cfg.maximum), `${NGN.coalesce(cfg.max, cfg.maximum)} count maximum`))\r\n      }\r\n\r\n      /**\r\n       * @cfg {Array} [unique]\r\n       * @info This validation attribute applies to #Array fields only.\r\n       * @warning This is a computationally expensive validation when used in NGN Data Stores.\r\n       * Validates that all items are unique.\r\n       */\r\n      if (NGN.coalesce(cfg.unique, false)) {\r\n        this.METADATA.rules.push(new NGN.DATA.Rule(value => NGN.dedupe(value).length === value.length, 'Unique value constraint'))\r\n      }\r\n\r\n      /**\r\n       * @cfg {any} [listType]\r\n       * @info This validation attribute applies to #Array fields only.\r\n       * Require each element of the array to conform to the specified data\r\n       * type. For example, setting `listType: Number` will validate that\r\n       * each element of the array is a number.\r\n       *\r\n       * ```js\r\n       * [1, 2, 3, 4, 5] // Valid\r\n       * [1, 2, 'three', 4, 5] // Invalid\r\n       * ```\r\n       */\r\n      if (cfg.hasOwnProperty('listType')) {\r\n        this.METADATA.rules.push(new NGN.DATA.Rule(value => {\r\n          for (let i = 0; i < value.length; i++) {\r\n            if (NGN.typeof(value[i]) !== NGN.typeof(cfg.listType)) {\r\n              return false\r\n            }\r\n          }\r\n\r\n          return true\r\n        }, `${NGN.typeof(cfg.listType).toUpperCase()} list type constraint`))\r\n      }\r\n\r\n      // Support enumerations in array values\r\n      if (cfg.hasOwnProperty('enum')) {\r\n        this.METADATA.rules.push(new NGN.DATA.Rule(value => {\r\n          return cfg.enum.indexOf(value) >= 0\r\n        }))\r\n      }\r\n\r\n      /**\r\n       * @cfg {Array} [tuples]\r\n       * @info This validation attribute applies to #Array fields only.\r\n       * @warning This is a computationally expensive validation when used in NGN Data Stores.\r\n       * Validate each item of an array according to a unique schema.\r\n       * Each item is a key value object, which supports only the `type` and\r\n       * `enum` validations.\r\n       *\r\n       * For example:\r\n       *\r\n       * ```js\r\n       * {\r\n       *   tuples: [{\r\n       *     type: Number\r\n       *   }, {\r\n       *     type: String,\r\n       *     enum: ['a', 'b', 'c']\r\n       *   }, {\r\n       *     enum: ['d', 1]\r\n       *   }]\r\n       * }\r\n       * ```\r\n       * The configuration above will make sure the first array item is a number,\r\n       * while the second is either `a`, `b`, or `c`, and the third is either\r\n       * the letter `d` or the number `1`. Only the first three items of the\r\n       * array will be checked, but there must be at least 3 items.\r\n       */\r\n      if (cfg.hasOwnProperty('tuples')) {\r\n        this.METADATA.rules.push(new NGN.DATA.Rule(value => {\r\n          if (value.length < cfg.tuples.length) {\r\n            return false\r\n          }\r\n\r\n          for (let i = 0; i < cfg.tuples.length; i++) {\r\n            if (cfg.tuples[i].hasOwnProperty('type')) {\r\n              if (NGN.typeof(value[i]) !== NGN.typeof(cfg.tuples[i].type)) {\r\n                return false\r\n              }\r\n            }\r\n\r\n            if (cfg.tuples[i].hasOwnProperty('enum')) {\r\n              if (cfg.tuples[i].enum.indexOf(value[i]) < 0) {\r\n                return false\r\n              }\r\n            }\r\n          }\r\n\r\n          return true\r\n        }, 'Tuple constraint'))\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @cfg {Array} [enum]\r\n     * An enumeration of available values this field is allowed to have.\r\n     */\r\n    if (NGN.objectHasAny(cfg, 'enum', 'enumeration')) {\r\n      this.METADATA.ENUMERABLE_VALUES = new Set(NGN.forceArray(NGN.coalesce(cfg.enum, cfg.enumeration)))\r\n      this.METADATA.rules.push(new NGN.DATA.Rule((value) => this.METADATA.ENUMERABLE_VALUES.has(value), 'Enumerable Values'))\r\n    }\r\n\r\n    /**\r\n     * @cfg {Array} [not]\r\n     * A \"reverse\" enumeration, i.e. a list of values this field is **not** allowed to be.\r\n     */\r\n    if (NGN.objectHasAny(cfg, 'not', 'notin')) {\r\n      this.METADATA.REVERSE_ENUMERABLE_VALUES = new Set(NGN.forceArray(NGN.coalesce(cfg.not, cfg.notin)))\r\n      this.METADATA.rules.push(new NGN.DATA.Rule((value) => !this.METADATA.REVERSE_ENUMERABLE_VALUES.has(value), 'Rejected Values'))\r\n    }\r\n\r\n    // Check if the field type is an array, which indicates multiple\r\n    // data types are considered valid.\r\n    if (cfg.type instanceof Array) {\r\n      // If the array has no values, assume the user meant to create an \"Array\" data type.\r\n      // Warn them, in case this was not the intention.\r\n      if (cfg.type.length === 0) {\r\n        NGN.WARN(`No data type specified for ${this.name} field. Autoconverted to an array.`)\r\n        cfg.type = Array\r\n      } else if (cfg.type.length === 1) {\r\n        // If there is only one data type, the array is extraneous and standard\r\n        // datatype validation can be used.\r\n        cfg.type = cfg.type[0]\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @cfg {Primitive|Array} [type=String]\r\n     * The type should be a JavaScript primitive, class, or constructor.\r\n     * For example, `String`, `Number`, `Boolean`, `RegExp`, `Array`, or `Date`.\r\n     * This can also be an array of primitive values. For example, `[String, Number]`\r\n     * indicates the field could be a string or a numeric value.\r\n     */\r\n    if (cfg.type instanceof Array) {\r\n      let typeList = cfg.type.map(type => NGN.typeof(type))\r\n\r\n      this.METADATA.rules.unshift(\r\n        new NGN.DATA.Rule(\r\n          (value) => typeList.indexOf(NGN.typeof(value)) >= 0,\r\n          `${this.type.toUpperCase()} Multitype Check`\r\n        )\r\n      )\r\n    } else {\r\n      this.METADATA.rules.unshift(\r\n        new NGN.DATA.Rule(\r\n          (value) => NGN.typeof(value) === NGN.typeof(this.METADATA.dataType),\r\n          `${this.type.toUpperCase()} Type Check`\r\n        )\r\n      )\r\n    }\r\n\r\n    // Associate a model if one is defined.\r\n    if (NGN.coalesce(cfg.model) !== null) {\r\n      this.model = cfg.model\r\n    }\r\n  }\r\n\r\n  get sourceName () {\r\n    return this.METADATA.sourceName\r\n  }\r\n\r\n  get auditable () {\r\n    return this.METADATA.AUDITABLE\r\n  }\r\n\r\n  set auditable (value) {\r\n    value = NGN.forceBoolean(value)\r\n\r\n    if (value !== this.METADATA.AUDITABLE) {\r\n      this.METADATA.AUDITABLE = value\r\n      this.METADATA.AUDITLOG = value ? new NGN.DATA.TransactionLog() : null\r\n      this.METADATA.AUDITLOG.relay('*', this, 'transaction.')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @property {NGN.DATA.Model} model\r\n   * Represents the model/record the field is associated to.\r\n   * The model may be configured once, after which this property\r\n   * becomes read-only. This will also be read-only if #model is set\r\n   * to a valid value.\r\n   */\r\n  get model () {\r\n    return this.METADATA.model\r\n  }\r\n\r\n  set model (value) {\r\n    if (this.METADATA.model === null) {\r\n      if (value instanceof NGN.DATA.Entity) {\r\n        this.METADATA.model = value\r\n\r\n        // let events = Array.from(this.METADATA.EVENTS.values())\r\n        // events.splice(events.indexOf('update'), 1)\r\n        //\r\n        this.on('update', (payload) => this.METADATA.commitPayload(payload))\r\n        //\r\n        // for (let i = 0; i < events.length; i++) {\r\n        //   this.on(events[i], () => this.METADATA.model.emit(`field.${events[i]}`, ...arguments))\r\n        // }\r\n      } else {\r\n        NGN.WARN('Invalid model.')\r\n      }\r\n    } else {\r\n      NGN.WARN('Cannot set model multiple times.')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @property {string} fieldType\r\n   * The type of field.\r\n   */\r\n  get fieldType () {\r\n    return this.METADATA.fieldType\r\n  }\r\n\r\n  /**\r\n   * @property {boolean} required\r\n   * Indicates the field must have a non-null value.\r\n   */\r\n  get required () {\r\n    return this.METADATA.required\r\n  }\r\n\r\n  set required (value) {\r\n    this.METADATA.required = NGN.forceBoolean(value)\r\n  }\r\n\r\n  /**\r\n   * @property {string} type\r\n   * The type of data in string format.\r\n   */\r\n  get type () {\r\n    return NGN.typeof(this.METADATA.dataType)\r\n  }\r\n\r\n  /**\r\n   * @property {boolean} hidden\r\n   * Indicates the field should be considered hidden.\r\n   */\r\n  get hidden () {\r\n    return this.METADATA.hidden\r\n  }\r\n\r\n  set hidden (value) {\r\n    let originallyHidden = this.hidden\r\n    let currentlyHidden = NGN.forceBoolean(value)\r\n\r\n    if (originallyHidden !== currentlyHidden) {\r\n      this.METADATA.hidden = currentlyHidden\r\n      this.emit(originallyHidden ? 'unhidden' : 'hidden')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @property {boolean} virtual\r\n   * Indicates the field should be considered virtual.\r\n   */\r\n  get virtual () {\r\n    return this.METADATA.fieldType === 'virtual'\r\n  }\r\n\r\n  /**\r\n   * @property {boolean} identifier\r\n   * Indicates the field is considered an identifier.\r\n   */\r\n  get identifier () {\r\n    return this.METADATA.isIdentifier\r\n  }\r\n\r\n  set identifier (value) {\r\n    value = NGN.forceBoolean(value)\r\n\r\n    if (value !== this.METADATA.isIdentifier) {\r\n      this.METADATA.isIdentifier = value\r\n      this.emit('keystatus.changed', this)\r\n    }\r\n  }\r\n\r\n  get name () {\r\n    return this.METADATA.name\r\n  }\r\n\r\n  /**\r\n   * @property {Boolean}\r\n   * Indicates the model is new or does not exist according to the persistence store.\r\n   * @private\r\n   * @readonly\r\n   */\r\n  get isNew () {\r\n    return this.METADATA.IS_NEW\r\n  }\r\n\r\n  /**\r\n   * @property {Any} default\r\n   * The default field value.\r\n   */\r\n  get default () {\r\n    if (this.isIdentifier) {\r\n      return NGN.coalesce(this.METADATA.autoid, this.METADATA.default)\r\n    }\r\n\r\n    if (NGN.isFn(this.METADATA.default) && this.type !== 'function') {\r\n      return this.METADATA.default.apply(this)\r\n    }\r\n\r\n    return this.METADATA.default\r\n  }\r\n\r\n  /**\r\n   * @property {Any} value\r\n   * The value of the field.\r\n   */\r\n  get value () {\r\n    if (typeof this.METADATA.RAW !== 'symbol') {\r\n      return this.METADATA.RAW\r\n    }\r\n\r\n    return this.METADATA.default\r\n  }\r\n\r\n  set value (value) {\r\n    this.METADATA.setValue(value)\r\n  }\r\n\r\n  /**\r\n   * @property silentValue\r\n   * A write-only attribute to set the value without triggering an update event.\r\n   * This is designed primarily for use with live update proxies to prevent\r\n   * endless event loops.\r\n   * @param {any} value\r\n   * The new value of the field.\r\n   * @private\r\n   * @writeonly\r\n   */\r\n  set silentValue (value) {\r\n    this.METADATA.setValue(value, true)\r\n  }\r\n\r\n  get modified () {\r\n    if (typeof this.META.lastValue === 'symbol') {\r\n      return false\r\n    }\r\n\r\n    return this.METADATA.lastValue !== this.value\r\n  }\r\n\r\n  /**\r\n   * @property {boolean} valid\r\n   * Indicates the field value is valid.\r\n   */\r\n  get valid () {\r\n    if (this.required && NGN.coalesce(this.METADATA.RAW) === null) {\r\n      this.METADATA.violatedRule = 'Data Required'\r\n      NGN.WARN(`${this.METADATA.name} is a required field.`)\r\n      return false\r\n    }\r\n\r\n    if (this.METADATA.rules.length > 0) {\r\n      for (let rule = 0; rule < this.METADATA.rules.length; rule++) {\r\n        if (!this.METADATA.rules[rule].test(this.METADATA.RAW)) {\r\n          this.METADATA.violatedRule = this.METADATA.rules[rule].name\r\n          return false\r\n        }\r\n      }\r\n    }\r\n\r\n    this.METADATA.violatedRule = null\r\n\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * @property {String}\r\n   * Name of the rule which was violated.\r\n   */\r\n  get violatedRule () {\r\n    return NGN.coalesce(this.METADATA.violatedRule, 'None')\r\n  }\r\n\r\n  /**\r\n   * @property {Array} changelog\r\n   * The changelog returns the underlying NGN.DATA.TransactionLog#log if\r\n   * auditing is available. The array will be empty if auditing is disabled.\r\n   */\r\n  get changelog () {\r\n    if (!this.METADATA.AUDITABLE) {\r\n      NGN.WARN(`The changelog for the ${this.name} field is empty because auditing is disabled.`)\r\n      return []\r\n    }\r\n\r\n    return this.METADATA.AUDITLOG.log\r\n  }\r\n\r\n  /**\r\n   * @method undo\r\n   * A rollback function to undo changes. This operation affects\r\n   * the changelog (transaction log). To \"undo\" an \"undo\", use #redo.\r\n   * @param {number} [OperationCount=1]\r\n   * The number of operations to \"undo\". Defaults to a single operation.\r\n   * @param {boolean} [suppressEvents=false]\r\n   * Set to `true` to quietly update the value (prevents `update` event from\r\n   * firing).\r\n   */\r\n  undo (count = 1, suppressEvents = false) {\r\n    if (!this.METADATA.AUDITABLE) {\r\n      NGN.WARN(`The undo operation failed on the ${this.name} field because auditing is disabled.`)\r\n      return\r\n    }\r\n\r\n    let id = this.METADATA.AUDITLOG.rollback(count)\r\n\r\n    // Silently set the value to an older value.\r\n    this.METADATA.setValue(this.METADATA.AUDITLOG.getCommit(id).value, suppressEvents, true)\r\n  }\r\n\r\n  /**\r\n   * @method redo\r\n   * A function to reapply known changes. This operation affects\r\n   * the changelog (transaction log).\r\n   *\r\n   * The redo operation only works after an undo operation, but before a new\r\n   * value is committed to the transaction log. In other words, `undo -> redo`\r\n   * will work, but `undo -> update -> redo` will not. For details, see how\r\n   * the NGN.DATA.TransactionLog cursor system works.\r\n   * @param {number} [OperationCount=1]\r\n   * The number of operations to \"undo\". Defaults to a single operation.\r\n   * @param {boolean} [suppressEvents=false]\r\n   * Set to `true` to quietly update the value (prevents `update` event from\r\n   * firing).\r\n   */\r\n  redo (count = 1, suppressEvents = false) {\r\n    if (!this.METADATA.AUDITABLE) {\r\n      NGN.WARN(`The redo operation failed on the ${this.name} field because auditing is disabled.`)\r\n      return\r\n    }\r\n\r\n    let id = this.METADATA.AUDITLOG.advance(count)\r\n\r\n    // Silently set the value to a newer value.\r\n    this.METADATA.setValue(this.METADATA.AUDITLOG.getCommit(id).value, suppressEvents, true)\r\n  }\r\n\r\n  /**\r\n   * Hide the field.\r\n   */\r\n  hide () {\r\n    this.hidden = true\r\n  }\r\n\r\n  /**\r\n   * Unhide the field.\r\n   */\r\n  unhide () {\r\n    this.hidden = false\r\n  }\r\n\r\n  /**\r\n   * Do not throw errors whan a value is marked as invalid.\r\n   */\r\n  allowInvalid () {\r\n    this.METADATA.allowInvalid = true\r\n  }\r\n\r\n  /**\r\n   * Throw errors whan a value is marked as invalid.\r\n   */\r\n  disallowInvalid () {\r\n    this.METADATA.allowInvalid = false\r\n  }\r\n\r\n  /**\r\n   * Attempt to automatically correct a value according to the\r\n   * field's data type.\r\n   * @param  {Any} value\r\n   * The value to attempt to autocorrect.\r\n   * @return {Any}\r\n   * Returns the value after attempting to autocorrect the value.\r\n   */\r\n  autoCorrectValue (value) {\r\n    try {\r\n      switch (this.type) {\r\n        case 'number':\r\n          value = NGN.forceNumber(value)\r\n          break\r\n\r\n        case 'boolean':\r\n          value = NGN.forceBoolean(value)\r\n          break\r\n\r\n        case 'array':\r\n          value = NGN.forceArray(value)\r\n          break\r\n\r\n        case 'string':\r\n          value = value.toString()\r\n          break\r\n\r\n        case 'date':\r\n          let valueType = NGN.typeof(value)\r\n\r\n          if (valueType !== 'date') {\r\n            if (valueType === 'number') {\r\n              let dt = new Date()\r\n              dt.setTime(value)\r\n\r\n              value = dt\r\n            } else {\r\n              value = new Date(Date.parse(value))\r\n            }\r\n          }\r\n\r\n          break\r\n      }\r\n    } finally {\r\n      return value // eslint-disable-line no-unsafe-finally\r\n    }\r\n  }\r\n}\r\n","import EventEmitter from '../emitter/core'\r\n\r\nNGN.createException({\r\n  name: 'NGNDuplicateRecordError',\r\n  message: 'A duplicate record exists within the unique data set.'\r\n})\r\n\r\n/**\r\n * @class NGN.DATA.Store\r\n * Represents a collection of data.\r\n * @fires record.create\r\n * Fired when a new record is created. The new\r\n * record is provided as an argument to the event\r\n * handler.\r\n * @fires record.delete\r\n * Fired when a record(s) is removed. The old record\r\n * is provided as an argument to the event handler.\r\n * @fires record.update\r\n * Fired when a record(s) is modified. A change object\r\n * is provided as an argument to event handlers. The object\r\n * contains a reference to the store, the old record, and\r\n * the new record.\r\n *\r\n * ```\r\n * {\r\n *   store: <current data store>,\r\n *   new: <NGN.DATA.Model>,\r\n *   old: <NGN.DATA.Model>\r\n * }\r\n * ```\r\n */\r\nexport default class NGNDataStore extends EventEmitter { // eslint-disable-line\r\n  constructor (cfg = {}) {\r\n    if (NGN.typeof(cfg) === 'model') {\r\n      cfg = { model: cfg }\r\n    } else if (!cfg.model || !NGN.DATA.UTILITY.isDataModel(cfg.model)) {\r\n      throw new InvalidConfigurationError('Missing or invalid \"model\" configuration property.')\r\n    }\r\n\r\n    super()\r\n\r\n    const me = this\r\n\r\n    Object.defineProperties(this, {\r\n      /**\r\n       * @cfgproperty {string} [name]\r\n       * A descriptive name for the store. This is typically used for\r\n       * debugging, logging, and (somtimes) data proxies.\r\n       */\r\n      name: NGN.const(NGN.coalesce(cfg.name, 'Untitled Data Store')),\r\n\r\n      METADATA: NGN.private({\r\n        // Holds the models/records\r\n        records: [],\r\n\r\n        /**\r\n         * @cfgproperty {NGN.DATA.Model} model\r\n         * An NGN Data Model to which data records conform.\r\n         */\r\n        Model: NGN.coalesce(cfg.model),\r\n\r\n        /**\r\n         * @cfg {boolean} [allowDuplicates=true]\r\n         * Set to `false` to prevent duplicate records from being added.\r\n         * If a duplicate record is added, it will be ignored and an\r\n         * error will be thrown.\r\n         *\r\n         * **Identifying duplicates _may_ be slow** on data sets with 200+ records.\r\n         * Uniqueness is determined by a checksum of the current NGN.DATA.Model#data\r\n         * of a record. The amount of time required to generate a checksum can range\r\n         * from 3ms to 150ms per record depending on data complexity.\r\n         *\r\n         * In most scenarios, the performance impact will be negligible/indistinguishable\r\n         * to the naked eye. However; if an application experiences slow data\r\n         * load or processing times, setting this to `false` may help.\r\n         */\r\n        allowDuplicates: NGN.coalesce(cfg.allowDuplicates, true),\r\n\r\n        /**\r\n         * @cfg {boolean} [errorOnDuplicate=false]\r\n         * Set to `true` to throw an error when a duplicate record is detected.\r\n         * If this is not set, it will default to the value of #allowDuplicates.\r\n         * If #allowDuplicates is not defined either, this will be `true`\r\n         */\r\n        errorOnDuplicate: NGN.coalesce(cfg.errorOnDuplicate, cfg.allowDuplicates, false),\r\n\r\n        /**\r\n         * @cfg {boolean} [allowInvalid=true]\r\n         * Allow invalid records to be added to the store.\r\n         */\r\n        allowInvalid: NGN.coalesce(cfg.allowInvalid, true),\r\n\r\n        /**\r\n         * @cfg {boolean} [errorOnInvalid=false]\r\n         * Set to `true` to throw an error when an attempt is made to add an\r\n         * invalid record.\r\n         */\r\n        errorOnInvalid: NGN.coalesce(cfg.errorOnInvalid, cfg.allowInvalid, false),\r\n\r\n        /**\r\n         * @cfgproperty {boolean} [autoRemoveExpiredRecords=true]\r\n         * When set to `true`, the store will automatically delete expired records.\r\n         */\r\n        autoRemoveExpiredRecords: NGN.coalesce(cfg.autoRemoveExpiredRecords, true),\r\n\r\n        /**\r\n         * @cfg {boolean} [softDelete=false]\r\n         * When set to `true`, the store makes a copy of a record before removing\r\n         * it from the store. The store will still emit a `record.delete` event,\r\n         * and it will still behanve as though the record has been completely\r\n         * removed. However; the record copy can be retrieved using the #restore\r\n         * method.\r\n         *\r\n         * Since it is not always desirable to store a copy of every deleted\r\n         * record indefinitely, it is possible to expire and permanently remove\r\n         * records by setting the #softDeleteTtl.\r\n         *\r\n         * ```js\r\n         * var People = new NGN.DATA.Store({\r\n         *   model: Person,\r\n         *   softDelete: true,\r\n         *   softDeleteTtl: 10000\r\n         * })\r\n         *\r\n         * People.add(somePerson)\r\n         *\r\n         * var removedRecordId\r\n         * People.once('record.delete', function (record) {\r\n         *   removedRecordId = record.id\r\n         * })\r\n         *\r\n         * People.remove(somePerson)\r\n         *\r\n         * setTimeout(function () {\r\n         *   People.restore(removedRecordId)\r\n         * }, 5000)\r\n         *\r\n         * ```\r\n         *\r\n         * The code above creates a new store and adds a person to it.\r\n         * Then a placeholder variable (`removedRecordId`) is created.\r\n         * Next, a one-time event listener is added to the store, specifically\r\n         * for handling the removal of a record. Then the record is removed,\r\n         * which triggers the `record.delete` event, which populates\r\n         * `removedRecordId` with the ID of the record that was deleted.\r\n         * Finally, the code waits for 5 seconds, then restores the record. If\r\n         * the #restore method _wasn't_ called, the record would be purged\r\n         * from memory after 10 seconds (because `softDeleteTtl` is set to 10000\r\n         * milliseconds).\r\n         */\r\n        softDelete: NGN.coalesce(cfg.softDelete, false),\r\n\r\n        /**\r\n         * @cfg {number} [softDeleteTtl=-1]\r\n         * This is the number of milliseconds the store waits before purging a\r\n         * soft-deleted record from memory. `-1` = Infinite (no TTL).\r\n         */\r\n        softDeleteTtl: NGN.coalesce(cfg.softDeleteTtl, -1),\r\n\r\n        // ARCHIVE contains soft deleted records\r\n\r\n        /**\r\n         * @cfg {Number} [FIFO=-1]\r\n         * Configures the store to use \"**F**irst **I**n **F**irst **O**ut\"\r\n         * record processing when it reaches a maximum number of records.\r\n         *\r\n         * For example, assume `FIFO=10`. When the 11th record is added, it\r\n         * will replace the oldest record (i.e. the 1st). This guarantees the\r\n         * store will never have more than 10 records at any given time and it\r\n         * will always maintain the latest records.\r\n         *\r\n         * FIFO and LIFO cannot be applied at the same time.\r\n         *\r\n         * **BE CAREFUL** when using this in combination with #insert,\r\n         * #insertBefore, or #insertAfter. FIFO is applied _after_ the record\r\n         * is added to the store but _before_ it is moved to the desired index.\r\n         */\r\n        fifo: NGN.coalesce(cfg.FIFO, -1),\r\n\r\n        /**\r\n         * @cfg {Number} [LIFO=-1]\r\n         * Configures the store to use \"**L**ast **I**n **F**irst **O**ut\"\r\n         * record processing when it reaches a maximum number of records.\r\n         *\r\n         * This methos acts in the opposite manner as #FIFO. However; for\r\n         * all intents and purposes, this merely replaces the last record in\r\n         * the store when a new record is added.\r\n         *\r\n         * For example, assume `FIFO=10`. When the 11th record is added, it\r\n         * will replace the latest record (i.e. the 10th). This guarantees the\r\n         * store will never have more than 10 records at any given time. Every\r\n         * time a new record is added (assuming the store already has the maximum\r\n         * allowable records), it replaces the last record (10th) with the new\r\n         * record.\r\n         *\r\n         * LIFO and FIFO cannot be applied at the same time.\r\n         *\r\n         * **BE CAREFUL** when using this in combination with #insert,\r\n         * #insertBefore, or #insertAfter. LIFO is applied _after_ the record\r\n         * is added to the store but _before_ it is moved to the desired index.\r\n         */\r\n        lifo: NGN.coalesce(cfg.LIFO, -1),\r\n\r\n        /**\r\n         * @cfg {Number} [maxRecords=-1]\r\n         * Setting this will prevent new records from being added past this limit.\r\n         * Attempting to add a record to the store beyond it's maximum will throw\r\n         * an error.\r\n         */\r\n        maxRecords: NGN.coalesce(cfg.maxRecords, -1),\r\n\r\n        /**\r\n         * @cfg {Number} [minRecords=0]\r\n         * Setting this will prevent removal of records if the removal would\r\n         * decrease the count below this limit.\r\n         * Attempting to remove a record below the store's minimum will throw\r\n         * an error.\r\n         */\r\n        minRecords: NGN.coalesce(cfg.minRecords, 0),\r\n\r\n        /**\r\n         * @cfg {Number} [autocompact=50000]\r\n         * Identify the number of deletions that should occur before\r\n         * the store is compacted. See #compact. Set this to any value\r\n         * below `100` (the minimum) to disable autocompact.\r\n         */\r\n        autocompact: NGN.coalesce(cfg.autocompact, 50000),\r\n\r\n        /**\r\n         * @cfgproperty {object} fieldmap\r\n         * An object mapping model attribute names to data storage field names.\r\n         *\r\n         * _Example_\r\n         * ```\r\n         * {\r\n         *   ModelFieldName: 'inputName',\r\n         *   father: 'dad',\r\n         *   email: 'eml',\r\n         *   image: 'img',\r\n         *   displayName: 'dn',\r\n         *   firstName: 'gn',\r\n         *   lastName: 'sn',\r\n         *   middleName: 'mn',\r\n         *   gender: 'sex',\r\n         *   dob: 'bd'\r\n         * }\r\n         * ```\r\n         */\r\n        MAP: NGN.coalesce(cfg.fieldmap),\r\n\r\n        EVENTS: new Set([\r\n          'record.duplicate',\r\n          'record.create',\r\n          'record.update',\r\n          'record.delete',\r\n          'record.restored',\r\n          'record.purged',\r\n          'record.move',\r\n          'record.invalid',\r\n          'record.valid',\r\n          'clear',\r\n          'filter.create',\r\n          'filter.delete',\r\n          'index.create',\r\n          'index.delete',\r\n          'compact.start',\r\n          'compact.complete'\r\n        ]),\r\n\r\n        /**\r\n         * @cfg {boolean} [audit=false]\r\n         * Enable auditing to support #undo/#redo operations. This creates and\r\n         * manages a NGN.DATA.TransactionLog.\r\n         */\r\n        AUDITABLE: NGN.coalesce(cfg.audit, false),\r\n        AUDITLOG: NGN.coalesce(cfg.audit, false) ? new NGN.DATA.TransactionLog() : null,\r\n        AUDIT_HANDLER: (change) => {\r\n          if (change.hasOwnProperty('cursor')) {\r\n            this.METADATA.AUDITLOG.commit(this.METADATA.getAuditMap())\r\n          }\r\n        },\r\n\r\n        // The first and last indexes are maintained to determine which active\r\n        // record is considered first/last. Sometimes data is filtered out,\r\n        // so the first/last active record is not guaranteed to represent the\r\n        // first/last actual record. These indexes are maintained to prevent\r\n        // unnecessary iteration in large data sets.\r\n        FIRSTRECORDINDEX: 0,\r\n        LASTRECORDINDEX: 0,\r\n\r\n        /**\r\n         * @cfg {array} [index]\r\n         * An array of #model fields that will be indexed.\r\n         * See NGN.DATA.Index for details.\r\n         */\r\n        INDEX: null\r\n      }),\r\n\r\n      // Internal attributes that should not be extended.\r\n      PRIVATE: NGN.privateconst({\r\n        STUB: Symbol('record.stub'),\r\n\r\n        // A private indexing method\r\n        INDEX: function (record, delta) {\r\n          if (typeof this.event === 'symbol') {\r\n            switch (this.event) {\r\n              case me.PRIVATE.EVENT.CREATE_RECORD:\r\n                me.METADATA.INDEXFIELDS.forEach(field => me.METADATA.INDEX[field].add(record[field], record.OID))\r\n                break\r\n\r\n              case me.PRIVATE.EVENT.DELETE_RECORD:\r\n                me.METADATA.INDEXFIELDS.forEach(field => me.METADATA.INDEX[field].remove(record.OID, record[field]))\r\n                break\r\n\r\n              case me.PRIVATE.EVENT.LOAD_RECORDS:\r\n                for (let i = 0; i < me.METADATA.records.length; i++) {\r\n                  me.METADATA.INDEXFIELDS.forEach(field => me.METADATA.INDEX[field].add(me.METADATA.records[i][field], me.METADATA.records[i].OID))\r\n                }\r\n\r\n                break\r\n\r\n              case me.PRIVATE.EVENT.DELETE_RECORD_FIELD:\r\n                if (me.METADATA.INDEXFIELDS.has(record.field.name)) {\r\n                  me.METADATA.INDEX[record.field.name].remove(record.record.OID, record.field.value)\r\n                }\r\n\r\n                break\r\n            }\r\n          } else {\r\n            switch (this.event) {\r\n              case 'record.update':\r\n                if (me.METADATA.INDEXFIELDS.has(delta.field.name)) {\r\n                  me.METADATA.INDEX[delta.field.name].update(record.OID, delta.old, delta.new)\r\n                }\r\n                break\r\n\r\n              case 'clear':\r\n                me.METADATA.INDEXFIELDS.forEach(field => me.METADATA.INDEX[field].reset())\r\n                break\r\n            }\r\n          }\r\n        },\r\n\r\n        // Contains a map of all records\r\n        RECORDMAP: new Map(),\r\n\r\n        // A reference to active records\r\n        ACTIVERECORDMAP: null,\r\n\r\n        // A reference to filtered records (non-active/non-deleted)\r\n        FILTEREDRECORDMAP: null,\r\n\r\n        // Internal events\r\n        EVENT: {\r\n          CREATE_RECORD: Symbol('record.create'),\r\n          DELETE_RECORD: Symbol('record.delete'),\r\n          DELETE_RECORD_FIELD: Symbol('records.field.delete'),\r\n          LOAD_RECORDS: Symbol('records.load')\r\n        },\r\n\r\n        // Makes sure the model configuration specifies a valid and indexable field.\r\n        checkModelIndexField: (field) => {\r\n          let metaconfig = this.METADATA.Model.prototype.CONFIGURATION\r\n\r\n          if (metaconfig.fields && metaconfig.fields.hasOwnProperty(field)) {\r\n            if (metaconfig.fields[field] !== null) {\r\n              if (['model', 'store', 'entity', 'function'].indexOf(NGN.typeof(metaconfig.fields[field])) >= 0) {\r\n                throw new Error(`Cannot create index for \"${field}\" field. Only basic NGN.DATA.Field types can be indexed. Relationship and virtual fields cannot be indexed.`)\r\n              } else if (NGN.typeof(metaconfig.fields[field]) === 'object') {\r\n                if (['model', 'store', 'entity', 'function'].indexOf(NGN.typeof(NGN.coalesce(metaconfig.fields[field].type))) >= 0) {\r\n                  throw new Error(`Cannot create index for \"${field}\" field. Only basic NGN.DATA.Field types can be indexed. Relationship and virtual fields cannot be indexed.`)\r\n                }\r\n              }\r\n            }\r\n          } else {\r\n            throw new Error(`Cannot create index for unrecognized field \"${field}\".`)\r\n          }\r\n        },\r\n\r\n        // Get the type of field from the model definition\r\n        getModelFieldType: (field) => {\r\n          let metaconfig = this.METADATA.Model.prototype.CONFIGURATION\r\n\r\n          if (metaconfig.fields[field] === null) {\r\n            return NGN.typeof(metaconfig.fields[field])\r\n          }\r\n\r\n          if (metaconfig.fields[field].type) {\r\n            return NGN.typeof(metaconfig.fields[field].type)\r\n          }\r\n\r\n          if (metaconfig.fields[field].default) {\r\n            return NGN.typeof(metaconfig.fields[field].default)\r\n          }\r\n\r\n          return NGN.typeof(NGN.coalesce(metaconfig.fields[field]))\r\n        },\r\n\r\n        // Add a record\r\n        addRecord: (data, suppressEvents = false) => {\r\n          const record = new me.METADATA.Model(data)\r\n\r\n          if (!(record instanceof NGN.DATA.Entity)) {\r\n            throw new Error(`Only a NGN.DATA.Model or JSON object may be used in NGN.DATA.Store#add. Received a \"${NGN.typeof(data)}\" value.`)\r\n          }\r\n\r\n          // Prevent invalid record addition (if configured)\r\n          if (!me.METADATA.allowInvalid && !record.valid) {\r\n            NGN.WARN(`An attempt to add invalid data to the \"${this.name}\" store was prevented. The following fields are invalid: ${Array.from(record.METADATA.invalidFieldNames.keys()).join(', ')}`)\r\n\r\n            if (!suppressEvents) {\r\n              this.emit('record.invalid', record)\r\n            }\r\n\r\n            if (this.METADATA.errorOnInvalid) {\r\n              throw new Error(`Invalid data cannot be added to the \"${this.name}\" store.`)\r\n            }\r\n          }\r\n\r\n          // If duplicates are prevented, check the new data.\r\n          if (!me.METADATA.allowDuplicates) {\r\n            for (let i = 0; i < this.METADATA.records.length; i++) {\r\n              if (this.METADATA.records[i].checksum === record.checksum) {\r\n                NGN.WARN(`An attempt to add a duplicate record to the \"${this.name}\" store was prevented.`)\r\n\r\n                if (!suppressEvents) {\r\n                  this.emit('record.duplicate', record)\r\n                }\r\n\r\n                if (this.METADATA.errorOnDuplicate) {\r\n                  throw new Error(`Duplicate records are not allowed in the \"${this.name}\" data store.`)\r\n                }\r\n\r\n                break\r\n              }\r\n            }\r\n          }\r\n\r\n          // Handle special record count processing (LIFO/FIFO support)\r\n          if (me.METADATA.lifo > 0 && me.METADATA.records.length + 1 > me.METADATA.lifo) {\r\n            me.remove(me.METADATA.records.length - 1, suppressEvents)\r\n          } else if (this.METADATA.fifo > 0 && me.METADATA.records.length + 1 > me.METADATA.fifo) {\r\n            me.remove(0, suppressEvents)\r\n          }\r\n\r\n          // Relay model events to this store.\r\n          // record.relay('*', this, 'record.')\r\n          record.on('*', function () {\r\n            switch (this.event) {\r\n              // case 'field.update':\r\n              // case 'field.delete':\r\n              //   // TODO: Update indices\r\n              //   return\r\n\r\n              case 'field.invalid':\r\n              case 'field.valid':\r\n                return me.emit(this.event.replace('field.', 'record.'), record)\r\n\r\n              case 'expired':\r\n                // TODO: Handle expiration\r\n            }\r\n          })\r\n\r\n          delete record.METADATA.store\r\n          Object.defineProperty(record.METADATA, 'store', NGN.get(() => me))\r\n\r\n          // Indexing is handled in an internal event handler\r\n          me.METADATA.records.push(record)\r\n\r\n          // Add the record to the map for efficient retrievel by OID\r\n          me.PRIVATE.RECORDMAP.set(record.OID, me.METADATA.records.length - 1)\r\n\r\n          return record\r\n        },\r\n\r\n        convertStubToRecord: (index, record) => {\r\n          if (record.hasOwnProperty(this.PRIVATE.STUB)) {\r\n            let newRecord = this.PRIVATE.addRecord(record.metadata, false)\r\n            newRecord.OID = record.OID\r\n\r\n            this.METADATA.records[index] = newRecord\r\n\r\n            return newRecord\r\n          } else {\r\n            return record\r\n          }\r\n        }\r\n      }),\r\n\r\n      // Create a convenience alias for the remove method.\r\n      delete: NGN.const(NGN.deprecate(this.remove, 'Store.delete is deprecated. Use Store.remove instead.'))\r\n    })\r\n\r\n    // Create a smart reference to record lists\r\n    Object.defineProperties(this.PRIVATE, {\r\n      ACTIVERECORDS: NGN.get(() => {\r\n        if (this.PRIVATE.ACTIVERECORDMAP === null) {\r\n          return this.PRIVATE.RECORDMAP\r\n        }\r\n\r\n        return this.PRIVATE.ACTIVERECORDMAP\r\n      }),\r\n\r\n      FILTEREDRECORDS: NGN.get(() => {\r\n        if (this.PRIVATE.FILTEREDRECORDMAP === null) {\r\n          return this.PRIVATE.RECORDMAP\r\n        }\r\n\r\n        return this.PRIVATE.FILTEREDRECORDMAP\r\n      })\r\n    })\r\n\r\n    // Disallow modification of internal events\r\n    Object.freeze(this.PRIVATE.EVENT)\r\n\r\n    // Support LIFO (Last In First Out) & FIFO(First In First Out)\r\n    if (this.METADATA.lifo > 0 && this.METADATA.fifo > 0) {\r\n      throw new InvalidConfigurationError('NGN.DATA.Store can be configured to use FIFO or LIFO, but not both simultaneously.')\r\n    }\r\n\r\n    // If LIFO/FIFO is used, disable alternative record count limitations.\r\n    if (this.METADATA.lifo > 0 || this.METADATA.fifo > 0) {\r\n      this.METADATA.minRecords = 0\r\n      this.METADATA.maxRecords = -1\r\n    } else {\r\n      this.METADATA.minRecords = this.METADATA.minRecords < 0 ? 0 : this.METADATA.minRecords\r\n    }\r\n\r\n    // Bubble events to the BUS\r\n    // this.relay('*', NGN.BUS, 'store.')\r\n\r\n    // Configure Indices\r\n    if (NGN.coalesce(cfg.index) && NGN.typeof(this.METADATA.Model.prototype.CONFIGURATION.fields) === 'object') {\r\n      this.createIndex(cfg.index)\r\n    }\r\n\r\n    // Setup auto-compact\r\n    if (this.METADATA.autocompact < 100) {\r\n      this.METADATA.DELETECOUNT = 0\r\n      this.on(this.PRIVATE.EVENTS.DELETE_RECORD, () => {\r\n        this.METADATA.DELETECOUNT++\r\n\r\n        if (this.METADATA >= this.METADATA.autocompact) {\r\n          this.METADATA.DELETECOUNT = 0\r\n          this.compact()\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @property {array} snapshots\r\n   * Contains the data snapshot of the entire store.\r\n   * @readonly\r\n   * @private\r\n   */\r\n  get snapshots () {\r\n    return NGN.coalesce(this.snapshotarchive, [])\r\n  }\r\n\r\n  // Deprecation notice\r\n  get history () {\r\n    NGN.WARN('history is deprecated. Use NGN.DATA.Store#changelog instead.')\r\n    return this.changelog\r\n  }\r\n\r\n  // Deprecation notice\r\n  get recordCount () {\r\n    NGN.WARN('recordCount is deprecated. Use NGN.DATA.Store#size instead.')\r\n    return this.size\r\n  }\r\n\r\n  /**\r\n   * @property {number} count\r\n   * The total number of **active** records contained in the store.\r\n   * Active records are any records that aren't filtered out.\r\n   */\r\n  get size () {\r\n    return this.PRIVATE.ACTIVERECORDS.size\r\n  }\r\n\r\n  /**\r\n   * @property {number} length\r\n   * The total number of records contained in the store.\r\n   * This value does not include any soft-deleted/volatile records.\r\n   */\r\n  get length () {\r\n    return this.METADATA.records.length\r\n  }\r\n\r\n  /**\r\n   * @property {NGN.DATA.Model} first\r\n   * Return the first active record in the store. Returns `null`\r\n   * if the store is empty.\r\n   */\r\n  get first () {\r\n    let record = NGN.coalesce(this.METADATA.records[this.METADATA.FIRSTRECORDINDEX])\r\n\r\n    return this.PRIVATE.convertStubToRecord(this.METADATA.FIRSTRECORDINDEX, record)\r\n    // return NGN.coalesce(this.METADATA.records[this.METADATA.FIRSTRECORDINDEX])\r\n  }\r\n\r\n  /**\r\n   * @property {NGN.DATA.Model} last\r\n   * Return the last active record in the store. Returns `null`\r\n   * if the store is empty.\r\n   */\r\n  get last () {\r\n    let record = NGN.coalesce(this.METADATA.records[this.METADATA.LASTRECORDINDEX])\r\n\r\n    return this.PRIVATE.convertStubToRecord(this.METADATA.LASTRECORDINDEX, record)\r\n  }\r\n\r\n  /**\r\n   * @property {object} data\r\n   * A serialized version of the data represented by the store. This\r\n   * only includes non-virtual fields. See #representation to use\r\n   * a representation of data containing virtual fields.\r\n   */\r\n  get data () {\r\n    const recordList = this.PRIVATE.ACTIVERECORDS\r\n\r\n    // If no records exist, skip\r\n    if (recordList.size === 0) {\r\n      return []\r\n    }\r\n\r\n    let rec = this.PRIVATE.convertStubToRecord(this.METADATA.FIRSTRECORDINDEX, this.METADATA.records[this.METADATA.FIRSTRECORDINDEX])\r\n\r\n    if (this.METADATA.MAP === null) {\r\n      this.METADATA.MAP = NGN.coalesce(rec.MAP)\r\n    }\r\n\r\n    let defaults = null\r\n\r\n    if (rec instanceof NGN.DATA.Entity) {\r\n      let fieldDefinitions = rec.fieldDefinitions\r\n      let fields = Object.keys(fieldDefinitions)\r\n\r\n      defaults = {}\r\n\r\n      fields.forEach(field => {\r\n        if (!fieldDefinitions[field].hidden && !fieldDefinitions[field].virtual) {\r\n          defaults[field] = fieldDefinitions[field].default\r\n        }\r\n      })\r\n    }\r\n\r\n    const result = []\r\n    // const fields = defaults !== null ? Object.keys(defaults) : []\r\n\r\n    // Iterate through set\r\n    recordList.forEach(index => {\r\n      if (this.METADATA.records[index] !== null) {\r\n        // If the value is a stub, map it.\r\n        if (this.METADATA.records[index].hasOwnProperty(this.PRIVATE.STUB)) {\r\n          let applicableData = Object.assign({}, defaults)\r\n          let data = Object.assign(applicableData, this.METADATA.records[index].metadata)\r\n\r\n          if (this.METADATA.MAP !== null) {\r\n            result.push(this.METADATA.MAP.applyInverseMap(data))\r\n          } else {\r\n            result.push(data)\r\n          }\r\n        } else {\r\n          result.push(this.METADATA.records[index].data)\r\n        }\r\n      }\r\n    })\r\n\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * @property {array} representation\r\n   * The complete and unfiltered underlying representation dataset\r\n   * (data + virtuals of each model).\r\n   */\r\n  get representation () {\r\n    const result = []\r\n    const recordList = this.PRIVATE.ACTIVERECORDS\r\n\r\n    recordList.forEach(index => {\r\n      if (this.METADATA.records[index] !== null) {\r\n        result.push(this.METADATA.records[index].representation)\r\n      }\r\n    })\r\n\r\n    return result\r\n  }\r\n\r\n  get auditable () {\r\n    return this.METADATA.AUDITABLE\r\n  }\r\n\r\n  set auditable (value) {\r\n    value = NGN.forceBoolean(value)\r\n\r\n    if (value !== this.METADATA.AUDITABLE) {\r\n      this.METADATA.AUDITABLE = value\r\n      this.METADATA.AUDITLOG = value ? new NGN.DATA.TransactionLog() : null\r\n    }\r\n  }\r\n\r\n  get model () {\r\n    return this.METADATA.Model\r\n  }\r\n\r\n  // set model (value) {\r\n  //   if (value !== this.METADATA.Model) {\r\n  //     if (NGN.typeof(value) !== 'model') {\r\n  //       throw new InvalidConfigurationError(`\"${this.name}\" model could not be set because the value is a ${NGN.typeof(value)} type (requires NGN.DATA.Model).`)\r\n  //     }\r\n  //\r\n  //     this.METADATA.Model = value\r\n  //   }\r\n  // }\r\n\r\n  get map () {\r\n    return this.METADATA.MAP\r\n  }\r\n\r\n  /**\r\n   * @property {array} indexedFieldNames\r\n   * An array of the field names for which the store maintains indexes.\r\n   */\r\n  get indexedFieldNames () {\r\n    if (this.METADATA.INDEXFIELDS) {\r\n      return Array.from(this.METADATA.INDEXFIELDS)\r\n    } else {\r\n      return []\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method add\r\n   * Append a data record to the store. This adds the record to the end of the list.\r\n   * @param {NGN.DATA.Model|object} data\r\n   * Accepts an existing NGN Data Model or a JSON object.\r\n   * If a JSON object is supplied, it will be applied to\r\n   * the data model specified in #model.\r\n   * @param {boolean} [suppressEvents=false]\r\n   * Set this to `true` to prevent the `record.create` event\r\n   * from firing.\r\n   * @return {NGN.DATA.Model}\r\n   * Returns the new record.\r\n   */\r\n  add (data, suppressEvents = false) {\r\n    // Support array input\r\n    if (NGN.typeof(data) === 'array') {\r\n      let result = new Array(data.length)\r\n\r\n      for (let i = 0; i < data.length; i++) {\r\n        result[i] = this.add(data[i], suppressEvents)\r\n      }\r\n\r\n      return result\r\n    }\r\n\r\n    // Prevent creation if it will exceed maximum record count.\r\n    if (this.METADATA.maxRecords > 0 && this.METADATA.records.length + 1 > this.METADATA.maxRecords) {\r\n      throw new Error('Maximum record count exceeded.')\r\n    }\r\n\r\n    if (!(data instanceof this.METADATA.Model)) {\r\n      // Force a data model\r\n      if (NGN.typeof(data) === 'string') {\r\n        data = JSON.parse(data)\r\n      }\r\n\r\n      if (typeof data !== 'object') {\r\n        throw new Error(`${NGN.typeof(data)} is an invalid data type (must be an object conforming to the ${this.METADATA.Model.name} field configuration).`)\r\n      }\r\n    } else {\r\n      data = data.data\r\n    }\r\n\r\n    const record = this.PRIVATE.addRecord(data)\r\n\r\n    // TODO: Apply filters to new record before identifying the last record.\r\n    this.METADATA.LASTRECORDINDEX = this.METADATA.records.length - 1\r\n\r\n    this.emit(this.PRIVATE.EVENT.CREATE_RECORD, record)\r\n\r\n    if (!suppressEvents) {\r\n      this.emit('record.create', record)\r\n    }\r\n\r\n    return record\r\n  }\r\n\r\n  /**\r\n   * @method remove\r\n   * Remove a record.\r\n   * @param {NGN.DATA.Model|number|Symbol} record\r\n   * Accepts an existing NGN Data Model or index number.\r\n   * Using a model is slower than using an index number.\r\n   * This may also be the NGN.DATA.Model#OID value (for\r\n   * advanced use cases).\r\n   * @fires record.delete\r\n   * The record delete event sends 2 arguments to handler methods:\r\n   * `record` and `index`. The record refers to the model that was\r\n   * removed. The `index` refers to the position of the record within\r\n   * the store's data list. **NOTICE** the `index` refers to where\r\n   * the record _used to be_.\r\n   * @returns {NGN.DATA.Model}\r\n   * Returns the data model that was just removed. If a model\r\n   * is unavailable (i.e. remove didn't find the specified record),\r\n   * this will return `null`.\r\n   */\r\n  remove (record, suppressEvents = false) {\r\n    // Short-circuit processing if there are no records.\r\n    if (this.METADATA.records.length === 0) {\r\n      NGN.INFO(`\"${this.name}\" store called remove(), but the store contains no records.`)\r\n      return\r\n    }\r\n\r\n    // Support removal of simultaneously removing multiple records\r\n    if (NGN.typeof(record) === 'array') {\r\n      let result = new Array(record.length)\r\n\r\n      for (let i = 0; i < record.length; i++) {\r\n        result[i] = this.remove(record[i])\r\n      }\r\n\r\n      return result\r\n    }\r\n\r\n    // Prevent removal if it will exceed minimum record count.\r\n    if (this.minRecords > 0 && this.METADATA.records.length - 1 < this.minRecords) {\r\n      throw new Error('Removing this record would violate the minimum record count.')\r\n    }\r\n\r\n    // Identify which record will be removed.\r\n    let index\r\n\r\n    switch (NGN.typeof(record)) {\r\n      case 'number':\r\n        if (record < 0 || !this.METADATA.records[record]) {\r\n          NGN.ERROR(`Record removal failed (record not found at index ${(record || 'undefined').toString()}).`)\r\n          return null\r\n        }\r\n\r\n        index = record\r\n\r\n        break\r\n\r\n      // The default case comes before the symbol case specifically\r\n      // so the record can be converted to an OID value (for use with\r\n      // the RECORDMAP lookup).\r\n      default:\r\n        if (!(record instanceof NGN.DATA.Entity)) {\r\n          NGN.ERROR('Invalid record value passed to Store.remove() method.')\r\n          return null\r\n        }\r\n\r\n        record = record.OID\r\n\r\n      case 'symbol': // eslint-disable-line no-fallthrough\r\n        index = this.PRIVATE.ACTIVERECORDS.get(record)\r\n\r\n        if (index < 0) {\r\n          NGN.ERROR(`Record removal failed. Record OID not found (\"${record.toString()}\").`)\r\n          return null\r\n        }\r\n\r\n        break\r\n    }\r\n\r\n    // If nothing has been deleted yet, create an active record map.\r\n    // The active record map contains Model OID values with a reference\r\n    // to the actual record index.\r\n    if (this.PRIVATE.ACTIVERECORDMAP === null) {\r\n      // Copy the record map to initialize the active records\r\n      this.PRIVATE.ACTIVERECORDMAP = new Map(this.PRIVATE.RECORDMAP)\r\n    }\r\n\r\n    // Identify the record to be removed.\r\n    const removedRecord = this.METADATA.records[index]\r\n\r\n    // If the record isn't among the active records, do not remove it.\r\n    if (removedRecord === null) {\r\n      NGN.WARN('Specified record does not exist.')\r\n      return null\r\n    }\r\n\r\n    let activeIndex = this.PRIVATE.ACTIVERECORDS.get(removedRecord.OID)\r\n\r\n    if (isNaN(activeIndex)) {\r\n      NGN.WARN(`Record not found for \"${removedRecord.OID.toString()}\".`)\r\n      return null\r\n    }\r\n\r\n    this.PRIVATE.ACTIVERECORDS.delete(removedRecord.OID)\r\n\r\n    // If the store is configured to soft-delete,\r\n    // don't actually remove it until it expires.\r\n    if (this.METADATA.softDelete) {\r\n      if (this.METADATA.softDeleteTtl >= 0) {\r\n        removedRecord.once('expired', () => {\r\n          this.METADATA.records[this.PRIVATE.RECORDMAP.get(removedRecord.OID)] = null\r\n          this.PRIVATE.RECORDMAP.delete(removedRecord.OID)\r\n\r\n          if (!suppressEvents) {\r\n            this.emit('record.purge', removedRecord)\r\n          }\r\n        })\r\n\r\n        removedRecord.expires = this.METADATA.softDeleteTtl\r\n      }\r\n    } else {\r\n      this.METADATA.records[this.PRIVATE.RECORDMAP.get(removedRecord.OID)] = null\r\n      this.PRIVATE.RECORDMAP.delete(removedRecord.OID)\r\n    }\r\n\r\n    // Update cursor indexes (to quickly reference first and last active records)\r\n    if (this.METADATA.LASTRECORDINDEX === activeIndex) {\r\n      if (this.PRIVATE.ACTIVERECORDS.size <= 1) {\r\n        this.METADATA.LASTRECORDINDEX = this.PRIVATE.ACTIVERECORDS.values().next().value\r\n        this.METADATA.FIRSTRECORDINDEX = this.METADATA.LASTRECORDINDEX\r\n      } else if (activeIndex !== 0) {\r\n        for (let i = (activeIndex - 1); i >= 0; i--) {\r\n          if (i === 0) {\r\n            this.METADATA.LASTRECORDINDEX = 0\r\n            break\r\n          }\r\n\r\n          const examinedRecord = this.METADATA.records[i]\r\n\r\n          if (examinedRecord !== null) {\r\n            if (this.PRIVATE.ACTIVERECORDS.has(examinedRecord.OID)) {\r\n              this.METADATA.LASTRECORDINDEX = this.PRIVATE.ACTIVERECORDS.get(examinedRecord.OID)\r\n              break\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else if (this.METADATA.FIRSTRECORDINDEX === activeIndex) {\r\n      let totalSize = this.PRIVATE.ACTIVERECORDS.size\r\n\r\n      for (let i = (activeIndex + 1); i < totalSize; i++) {\r\n        const examinedRecord = this.METADATA.records[i]\r\n\r\n        if (examinedRecord !== null) {\r\n          if (this.PRIVATE.ACTIVERECORDS.has(examinedRecord.OID)) {\r\n            this.METADATA.FIRSTRECORDINDEX = this.PRIVATE.ACTIVERECORDS.get(examinedRecord.OID)\r\n            break\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.emit(this.PRIVATE.EVENT.DELETE_RECORD, removedRecord)\r\n\r\n    if (!suppressEvents) {\r\n      this.emit('record.delete', removedRecord)\r\n    }\r\n\r\n    return removedRecord\r\n  }\r\n\r\n  /**\r\n   * Create a new index on the store.\r\n   * @param  {string} field\r\n   * The name of the field to index.\r\n   * @fires index.create\r\n   * Triggered when an index is created. The name of field is passed\r\n   * as the only argument.\r\n   */\r\n  createIndex (field) {\r\n    // Support multiple indexes\r\n    if (NGN.typeof(field) === 'array') {\r\n      for (let i = 0; i < field.length; i++) {\r\n        this.createIndex(field[i])\r\n      }\r\n\r\n      return\r\n    }\r\n\r\n    // Make sure index fields are known to the store\r\n    if (!this.METADATA.INDEXFIELDS) {\r\n      this.METADATA.INDEXFIELDS = new Set()\r\n\r\n      // this.on('record.*', this.PRIVATE.INDEX)\r\n      this.on([\r\n        this.PRIVATE.EVENT.CREATE_RECORD,\r\n        this.PRIVATE.EVENT.DELETE_RECORD,\r\n        this.PRIVATE.EVENT.LOAD_RECORDS,\r\n        this.PRIVATE.EVENT.DELETE_RECORD_FIELD,\r\n        'clear'\r\n      ], this.PRIVATE.INDEX)\r\n    }\r\n\r\n    // In an index already exists, ignore it.\r\n    if (this.METADATA.INDEXFIELDS.has(field)) {\r\n      return\r\n    }\r\n\r\n    // Guarantee the existance of the index list\r\n    this.METADATA.INDEX = NGN.coalesce(this.METADATA.INDEX, {})\r\n\r\n    this.PRIVATE.checkModelIndexField(field)\r\n\r\n    this.METADATA.INDEXFIELDS.add(field)\r\n\r\n    // Identify BTree\r\n    let btree = ['number', 'date'].indexOf(this.PRIVATE.getModelFieldType(field)) >= 0\r\n\r\n    this.METADATA.INDEX[field] = new NGN.DATA.Index(btree, `${field.toUpperCase()} ${btree ? 'BTREE ' : ''}INDEX`)\r\n\r\n    // Apply to any existing records\r\n    if (this.METADATA.records.length > 0) {\r\n      this.PRIVATE.INDEX.apply({ event: this.PRIVATE.EVENT.LOAD_RECORDS })\r\n    }\r\n\r\n    this.emit('index.created', field)\r\n  }\r\n\r\n  /**\r\n   * Remove an existing index from the store.\r\n   * @param  {string} [field=null]\r\n   * The name of the indexed field. Set this to `null` (or leave blank) to\r\n   * remove all existing indexes.\r\n   * @fires index.delete\r\n   * Triggered when an index is removed. The name of field is passed\r\n   * as the only argument.\r\n   */\r\n  removeIndex (field = null) {\r\n    if (!this.METADATA.INDEXFIELDS) {\r\n      return\r\n    }\r\n\r\n    if (NGN.coalesce(field) === null) {\r\n      field = this.indexedFieldNames\r\n    }\r\n\r\n    // Support multiple indexes\r\n    if (NGN.typeof(field) === 'array') {\r\n      for (let i = 0; i < field.length; i++) {\r\n        this.removeIndex(field[i])\r\n      }\r\n\r\n      return\r\n    }\r\n\r\n    // Remove the specific index.\r\n    this.METADATA.INDEXFIELDS.delete(field)\r\n    delete this.METADATA.INDEX[field]\r\n    this.emit('index.delete', field)\r\n\r\n    // When there are no more indexes, clear out event\r\n    // listeners and fields.\r\n    if (this.METADATA.INDEXFIELDS.size === 0) {\r\n      this.METADATA.INDEX = null\r\n      delete this.METADATA.INDEXFIELDS\r\n\r\n      this.off([\r\n        this.PRIVATE.EVENT.CREATE_RECORD,\r\n        this.PRIVATE.EVENT.DELETE_RECORD,\r\n        this.PRIVATE.EVENT.LOAD_RECORDS,\r\n        this.PRIVATE.EVENT.DELETE_RECORD_FIELD\r\n      ], this.PRIVATE.INDEX)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieve a record based on it's relative position to another\r\n   * record. This method is used by NGN.DATA.Model#next and NGN.DATA.Model#previous\r\n   * to support \"doubly linked list\" approach to record iteration.\r\n   * @param  {[type]}  currentRecord [description]\r\n   * @param  {Number}  [count=1]     [description]\r\n   * @param  {Boolean} [cycle=false] [description]\r\n   * @return {[type]}                [description]\r\n   */\r\n  getRecordSibling (currentRecord, count = 1, cycle = false) {\r\n    let size = this.size\r\n\r\n    if (size === 0) {\r\n      NGN.WARN('Attempted to execute getRecordSibling with no active records.')\r\n      return null\r\n    }\r\n\r\n    // Make sure the iterator fits within the range\r\n    if (Math.abs(count) > size) {\r\n      count = count % size\r\n    }\r\n\r\n    if (size === 1 || count === 0) {\r\n      return currentRecord\r\n    }\r\n\r\n    let ActiveRecords = Array.from(this.PRIVATE.ACTIVERECORDS)\r\n    let currentIndex = ActiveRecords.findIndex(item => currentRecord.OID === item[0])\r\n\r\n    if (currentIndex < 0) {\r\n      throw new Error('Record not found.')\r\n    }\r\n\r\n    currentIndex += count\r\n\r\n    // Support cycling through records.\r\n    if ((currentIndex >= ActiveRecords.length || currentIndex < 0) && cycle) {\r\n      // Cycle forwards\r\n      if (count > 0) {\r\n        currentIndex = currentIndex % ActiveRecords.length\r\n      } else {\r\n        // Cycle Backwards\r\n        currentIndex = ActiveRecords.length - Math.abs(currentIndex)\r\n      }\r\n    }\r\n\r\n    if (currentIndex < 0 || currentIndex >= ActiveRecords.length) {\r\n      return null\r\n    }\r\n\r\n    return this.METADATA.records[ActiveRecords[currentIndex][1]]\r\n  }\r\n\r\n  /**\r\n   * Returns the index number of the model. If the same\r\n   * model exists more than once (duplicate records), only\r\n   * the first index is returned.\r\n   * @param  {NGN.DATA.Model} model\r\n   * The model/record to retrieve an index number for.\r\n   * @return {number}\r\n   * The zero-based index number of the model.\r\n   */\r\n  indexOf (record) {\r\n    return this.PRIVATE.RECORDMAP.get(record.OID)\r\n  }\r\n\r\n  /**\r\n   * Determine whether the store contains a record.\r\n   * This only checks the active record set (ignores filtered records).\r\n   * @param  {NGN.DATA.Model} record\r\n   * The record to test for inclusion.\r\n   * @return {boolean}\r\n   */\r\n  contains (record) {\r\n    return this.PRIVATE.ACTIVERECORDS.has(record.OID)\r\n  }\r\n\r\n  /**\r\n   * Get the list of records for the given value.\r\n   * @param {string} fieldName\r\n   * The name of the indexed field.\r\n   * @param  {any} fieldValue\r\n   * The value of the index field. This is used to lookup\r\n   * the list of records/models whose field is equal to\r\n   * the specified value.\r\n   * @return {NGN.DATA.Model[]}\r\n   * Returns an array of models/records within the index for\r\n   * the given value.\r\n   */\r\n  getIndexRecords (field, value) {\r\n    if (this.METADATA.INDEX && this.METADATA.INDEX.hasOwnProperty(field)) {\r\n      let oid = this.METADATA.INDEX[field].recordsFor(value)\r\n      let result = new Array(oid.length)\r\n\r\n      for (let i = 0; i < oid.length; i++) {\r\n        result[i] = this.METADATA.records[this.PRIVATE.RECORDMAP.get(oid[i])]\r\n      }\r\n\r\n      return result\r\n    }\r\n\r\n    return []\r\n  }\r\n\r\n  /**\r\n   * Retrieve an active record by index number (0-based, similar to an array).\r\n   * @param  {number} [index=0]\r\n   * The index of the record to retrieve.\r\n   */\r\n  getRecord (index = 0) {\r\n    if (typeof index === 'symbol') {\r\n      index = this.PRIVATE.ACTIVERECORDS.get(index)\r\n    }\r\n\r\n    if (index < 0) {\r\n      NGN.WARN('Cannot retrieve a record for a negative index.')\r\n      return null\r\n    }\r\n\r\n    if (index >= this.PRIVATE.ACTIVERECORDS.size) {\r\n      NGN.WARN('Cannot retrieve a record for an out-of-scope index (index greater than total record count.)')\r\n      return null\r\n    }\r\n\r\n    return this.METADATA.records[Array.from(this.PRIVATE.ACTIVERECORDS)[index][1]]\r\n  }\r\n\r\n  /**\r\n   * @method clear\r\n   * Removes all data. If auditing is enabled, the transaction log is reset.\r\n   * @param {boolean} [purgeSoftDelete=true]\r\n   * Purge soft deleted records from memory.\r\n   * @param {boolean} [suppressEvents=false]\r\n   * Set to `true` to prevent events from triggering when this method is run.\r\n   * @fires clear\r\n   * Fired when all data is removed\r\n   */\r\n  clear (purge = true, suppressEvents = false) {\r\n    if (this.METADATA.ARCHIVE) {\r\n      if (!purge) {\r\n        this.METADATA.ARCHIVE = this.records\r\n      } else {\r\n        delete this.METADATA.ARCHIVE\r\n      }\r\n    }\r\n\r\n    this.METADATA.records = []\r\n    this.PRIVATE.RECORDMAP = new Map()\r\n    this.PRIVATE.ACTIVERECORDMAP = null\r\n    this.PRIVATE.FILTEREDRECORDMAP = null\r\n    this.METADATA.LASTRECORDINDEX = 0\r\n    this.METADATA.FIRSTRECORDINDEX = 0\r\n\r\n    if (this.METADATA.AUDITABLE) {\r\n      this.METADATA.AUDITLOG.reset()\r\n    }\r\n\r\n    // Indexes updated automatically (listening for 'clear' event)\r\n\r\n    if (!suppressEvents) {\r\n      this.emit('clear')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A special method to clear events from the underlying event emitter.\r\n   * This exists because #clear has a special meaning in a data store (removing\r\n   * all data records vs removing all events).\r\n   * @private\r\n   */\r\n  clearEvents () {\r\n    super.clear(...arguments)\r\n  }\r\n\r\n  /**\r\n   * Replace a model.\r\n   * @deprecated 2.0.0\r\n   * @param  {NGN.DATA.Model} newModel\r\n   * The new model.\r\n   */\r\n  replaceModel (newModel) {\r\n    NGN.deprecate(\r\n      () => { this.model = newModel },\r\n      'replaceModel has been deprected. Set the model directly instead.'\r\n    )\r\n  }\r\n\r\n  /**\r\n   * @method snapshot\r\n   * Add a snapshot of the current store to the #snapshot archive.\r\n   * This can potentially be a computationally/memory-expensive operation.\r\n   * The method creates a copy of all data in the store along with checksums\r\n   * of each element and holds the snapshot in RAM. Large stores may consume\r\n   * large amounts of RAM until the snapshots are released/cleared.\r\n   * Snapshots are most commonly used with data proxies to calculate\r\n   * differences in a data set before persisting them to a database.\r\n   * @fires snapshot\r\n   * Triggered when a new snapshot is created. The snapshot dataset is\r\n   * passed as the only argument to event handlers.\r\n   * @returns {object}\r\n   * Returns an object containing the following fields:\r\n   *\r\n   * ```js\r\n   * {\r\n   *   timestamp: 'ex: 2018-01-19T16:43:03.279Z',\r\n   *   checksum: 'snapshotchecksum',\r\n   *   modelChecksums: [\r\n   *     'record1_checksum',\r\n   *     'record2_checksum'\r\n   *   ],\r\n   *   data: { ... } // Actual data at the time of the snapshot\r\n   * }\r\n   * ```\r\n   */\r\n  snapshot () {\r\n    this.METADATA.snapshotarchive = NGN.coalesce(this.METADATA.snapshotarchive, [])\r\n\r\n    let data = this.data\r\n    let dataset = {\r\n      id: NGN.DATA.UTILITY.GUID(),\r\n      timestamp: (new Date()).toISOString(),\r\n      checksum: NGN.DATA.UTILITY.checksum(JSON.stringify(data)).toString(),\r\n      modelChecksums: this.data.map((item) => {\r\n        return NGN.DATA.UTILITY.checksum(JSON.stringify(item)).toString()\r\n      }),\r\n      data: data\r\n    }\r\n\r\n    this.METADATA.snapshotarchive.unshift(dataset)\r\n    this.emit('snapshot', dataset)\r\n\r\n    return dataset\r\n  }\r\n\r\n  /**\r\n   * @method clearSnapshots\r\n   * Remove all archived snapshots.\r\n   */\r\n  clearSnapshots () {\r\n    this.snapshotarchive = null\r\n  }\r\n\r\n  load (data) {\r\n    console.time('load')\r\n    let insertableData\r\n\r\n    // Guarantee unique records amongst only the new records\r\n    if (!this.METADATA.allowDuplicates) {\r\n      let uniqueValues = new Set()\r\n\r\n      insertableData = []\r\n\r\n      for (let i = 0; i < data.length; i++) {\r\n        if (!uniqueValues.has(JSON.stringify(data[i]))) {\r\n          uniqueValues.add(JSON.stringify(data[i]))\r\n          insertableData.push(data[i])\r\n        } else if (this.METADATA.errorOnDuplicate) {\r\n          throw new NGNDuplicateRecordError()\r\n        }\r\n      }\r\n    } else {\r\n      insertableData = data\r\n    }\r\n\r\n    let newRecordCount = insertableData.length + this.METADATA.records.length\r\n\r\n    // Don't exceed the maximum record count if it exists.\r\n    if (this.METADATA.maxRecords > 0 && newRecordCount > this.METADATA.maxRecords) {\r\n      throw new Error('Maximum record count exceeded.')\r\n    }\r\n\r\n    if (newRecordCount > 4000000) {\r\n      throw new Error('Maximum load size exceeded. A store may contain a maximum of 4M records.')\r\n    }\r\n\r\n    for (let i = 0; i < insertableData.length; i++) {\r\n      let oid = Symbol('model.id')\r\n      this.METADATA.records.push({\r\n        [this.PRIVATE.STUB]: true,\r\n        OID: oid,\r\n        metadata: insertableData[i]\r\n      })\r\n\r\n      // Add the record to the map for efficient retrievel by OID\r\n      this.PRIVATE.RECORDMAP.set(oid, this.METADATA.records.length - 1)\r\n    }\r\n\r\n    // TODO: Apply filters to new record before identifying the last record.\r\n    this.METADATA.LASTRECORDINDEX = this.METADATA.records.length - 1\r\n\r\n    // this.emit(this.PRIVATE.EVENT.LOAD_RECORDS)\r\n  }\r\n\r\n  /**\r\n   * This rebuilds the local index of records, removing any dead records.\r\n   * While deleted records are destroyed (in accordance to #softDeleteTtl),\r\n   * the active record table contains a `null` or `undefined` value for each\r\n   * deleted/dead record. This method removes such records, akin in nature to\r\n   * the common JavaScript garbage collection process.\r\n   *\r\n   * This method almost never needs to be run, since stores\r\n   * attempt to manage this process for themselves automatically. However; if\r\n   * large volume deletions occur rapidly (50K+), it's possible (though not assured)\r\n   * performance could be negatively impacted. Compacting the store can\r\n   * improve performance in these cases. However; running this too often or\r\n   * excessively may degrade performance since it is essentially rewriting\r\n   * the store data each time.\r\n   *\r\n   * When in doubt, *don't* use this method.\r\n   * @info This method will not run when fewer than 100 cumulative records have\r\n   * existed in the store, due to the inefficient nature at such low volume.\r\n   * @fires compact.start\r\n   * Triggered when the compact process begins.\r\n   * @fires compact.complete\r\n   * Triggered when the compact process completes.\r\n   */\r\n  compact () {\r\n    this.emit('compact.start')\r\n\r\n    if (this.METADATA.records.length < 100) {\r\n      this.emit('compact.complete')\r\n\r\n      if (this.METADATA.records.length !== 0) {\r\n        NGN.WARN(`compact() called on ${this.name} with fewer than 100 elements.`)\r\n      }\r\n\r\n      return\r\n    }\r\n\r\n    let ranges = []\r\n    let currentRange = []\r\n    let empty = 0\r\n\r\n    // Identify null ranges (dead records)\r\n    for (let i = 0; i < this.METADATA.records.length; i++) {\r\n      if (this.METADATA.records[i] === null) {\r\n        empty++\r\n\r\n        if (currentRange.length === 0) {\r\n          currentRange.push(i)\r\n        }\r\n      } else {\r\n        // Identify new index values for remaining records\r\n        if (empty > 0) {\r\n          this.PRIVATE.RECORDMAP.set(this.METADATA.records[i].OID, i - empty)\r\n\r\n          if (this.METADATA.FIRSTRECORDINDEX === i) {\r\n            this.METADATA.FIRSTRECORDINDEX = i - empty\r\n          }\r\n\r\n          if (this.METADATA.LASTRECORDINDEX === i) {\r\n            this.METADATA.LASTRECORDINDEX = i - empty\r\n          }\r\n        }\r\n\r\n        if (currentRange.length === 1) {\r\n          currentRange.push(i - 1)\r\n          ranges.push(currentRange)\r\n          currentRange = []\r\n        }\r\n      }\r\n    }\r\n\r\n    // Clear null ranges\r\n    empty = 0\r\n    while (ranges.length > 0) {\r\n      this.METADATA.records.splice(ranges[0][0] - empty, ranges[0][1] - ranges[0][0] + 1)\r\n      empty += ranges[0][1] - ranges[0][0] + 1\r\n      ranges.shift()\r\n    }\r\n\r\n    // Reset the active record map\r\n    this.PRIVATE.ACTIVERECORDMAP = null\r\n\r\n    this.emit('compact.complete')\r\n  }\r\n\r\n  /**\r\n   * Performs executes the callback method on each active record\r\n   * within the store. For example:\r\n   *\r\n   * ```js\r\n   * Store.forEach(function (record) {\r\n   *   // Do Something\r\n   * })\r\n   * ```\r\n   * @param  {Function} callback\r\n   * The callback method is applied to each record.\r\n   */\r\n  forEach (fn) {\r\n    if (!NGN.isFn(fn)) {\r\n      throw new Error(`A ${NGN.typeof(fn)} was applied to ${this.name}'s each() method when a function was expected.`)\r\n    }\r\n\r\n    this.PRIVATE.ACTIVERECORDS.forEach((value, key, map) => {\r\n      fn(this.METADATA.records[value])\r\n    })\r\n  }\r\n}\r\n","import UTILITY from './Utility'\r\nimport BTree from './index/BTree'\r\nimport JSONSchema from './schema/JSON'\r\nimport TransactionLog from './TransactionLog'\r\nimport Rule from './rule/Rule'\r\nimport RangeRule from './rule/RangeRule'\r\nimport Field from './field/Field'\r\nimport VirtualField from './field/VirtualField'\r\nimport Relationship from './field/Relationship'\r\nimport FieldMap from './field/FieldMap'\r\nimport Entity from './Model'\r\nimport Index from './index/Index'\r\nimport Store from './Store'\r\n\r\nconst Model = function (cfg) {\r\n  if (NGN.typeof(cfg) !== 'object') {\r\n    throw new Error('Model must be configured.')\r\n  }\r\n\r\n  let Model = function (data, suppressEvents = false) {\r\n    let Entity = new NGN.DATA.Entity(cfg)\r\n\r\n    if (data) {\r\n      Entity.load(data, suppressEvents)\r\n    }\r\n\r\n    return Entity\r\n  }\r\n\r\n  const me = this\r\n\r\n  Object.defineProperty(Model.prototype, 'CONFIGURATION', NGN.const(cfg))\r\n  Object.defineProperty(Model.prototype, 'ENTITY', {\r\n    enumerable: false,\r\n    get () {\r\n      return me\r\n    }\r\n  })\r\n\r\n  return Model\r\n}\r\n\r\nconst util = NGN.deprecate(UTILITY, 'NGN.DATA.util is now NGN.DATA.UTILITY')\r\n\r\nexport {\r\n  UTILITY,\r\n  util,\r\n  TransactionLog,\r\n  Rule,\r\n  RangeRule,\r\n  Field,\r\n  VirtualField,\r\n  Relationship,\r\n  FieldMap,\r\n  Model,\r\n  Entity,\r\n  Index,\r\n  Store,\r\n  BTree,\r\n  JSONSchema\r\n}\r\n","import EventEmitter from '../emitter/core'\r\n\r\n/**\r\n * @class NGN.DATA.TransactionLog\r\n * The transaction log is a history/changelog. It can be used to revert values\r\n * to a prior state or (in limited cases) restore values.\r\n *\r\n * The transaction log is based on a commit log and cursor. The commit log\r\n * is an ordered list of values. The cursor is a position within the log.\r\n *\r\n * **How it Works:**\r\n *\r\n * The most common purpose of a transaction log is to revert changes (undo).\r\n * This is accomplished with the #rollback method.\r\n *\r\n * The #rollback method does not remove records, nor does the #advance.\r\n * The methods repositions the log cursor. Only #commit activities actually\r\n * modify the log.\r\n *\r\n * For example, a log containing 5 committed records will have the cursor set to\r\n * the latest entry by default:\r\n *\r\n * ```\r\n * [1, 2, 3, 4, 5]\r\n *              ^\r\n * ```\r\n *\r\n * Executing rollback(2) moves the cursor \"back\" two positions, from `5` to\r\n * `3`.\r\n *\r\n * ```\r\n * [1, 2, 3, 4, 5]\r\n *        ^\r\n * ```\r\n *\r\n * At this point, no records have been removed. It would still be\r\n * possible to #advance the cursor forward to `4` or `5`. However; once a\r\n * #commit is executed, all logs _after_ the cursor are removed before the new\r\n * transaction is committed to the log.\r\n *\r\n * ```\r\n * [1, 2, 3] // Commit removes [4, 5]\r\n *        ^\r\n *\r\n * [1, 2, 3, 6] // Commit commits new entry and advances cursor.\r\n *           ^\r\n * ```\r\n *\r\n * It is also possible to immediately #flush the log without requiring a new\r\n * #commit. This will immediately remove all log entries after the\r\n * current cursor position.\r\n */\r\nexport default class NGNTransactionLog extends EventEmitter { // eslint-disable-line\r\n  /**\r\n   * Create a new transaction log.\r\n   * @param  {number} [maxEntryCount=10]\r\n   * The maximum number of entries to keep in the log. Set this to `-1` to keep\r\n   * an unlimited number of logs.\r\n   */\r\n  constructor (maxEntryCount) {\r\n    super()\r\n\r\n    Object.defineProperties(this, {\r\n      METADATA: NGN.private({\r\n        transaction: {},\r\n        changeOrder: [],\r\n        cursor: null,\r\n        max: NGN.coalesce(maxEntryCount, 10)\r\n      })\r\n    })\r\n  }\r\n\r\n  get length () {\r\n    return this.METADATA.changeOrder.length\r\n  }\r\n\r\n  /**\r\n   * @property {Symbol} cursor\r\n   * The active cursor of the log.\r\n   */\r\n  get cursor () {\r\n    return this.METADATA.cursor\r\n  }\r\n\r\n  set cursor (value) {\r\n    if (value !== null && !this.METADATA.transaction.hasOwnProperty(value)) {\r\n      throw new Error('Cannot set cursor for transaction log (does not exist).')\r\n    }\r\n\r\n    this.METADATA.cursor = value\r\n  }\r\n\r\n  /**\r\n   * @property {any} currentValue\r\n   * Returns the value at the current cursor position.\r\n   */\r\n  get currentValue () {\r\n    if (this.METADATA.cursor === null) {\r\n      return undefined\r\n    }\r\n\r\n    return this.getCommit(this.METADATA.cursor).value\r\n  }\r\n\r\n  /**\r\n   * @property {Number}\r\n   * The index of the log entry at the current cursor position.\r\n   */\r\n  get cursorIndex () {\r\n    if (this.METADATA.cursor === null) {\r\n      return undefined\r\n    }\r\n\r\n    return this.METADATA.changeOrder.indexOf(this.METADATA.cursor)\r\n  }\r\n\r\n  /**\r\n   * Add a new value to the transaction log.\r\n   * @param {Any} value\r\n   * The value to assign to the log (record).\r\n   * @return {Number}\r\n   * Returns the transaction number\r\n   * @fires log {Symbol}\r\n   * Fires a log event with the transaction ID (symbol) for reference.\r\n   */\r\n  commit (value) {\r\n    let id = typeof value === 'symbol' ? Symbol(String(value)) : Symbol(NGN.coalesce(value, NGN.typeof(value)).toString())\r\n\r\n    this.METADATA.transaction[id] = [\r\n      new Date(),\r\n      value\r\n    ]\r\n\r\n    this.flush()\r\n\r\n    this.METADATA.changeOrder.push(id)\r\n    this.METADATA.cursor = id\r\n\r\n    if (this.METADATA.max > 0 && this.METADATA.changeOrder.length > this.METADATA.max) {\r\n      let removedId = this.METADATA.changeOrder.shift()\r\n      delete this.METADATA.transaction[removedId]\r\n    }\r\n\r\n    this.emit('commit', id, null)\r\n\r\n    return id\r\n  }\r\n\r\n  /**\r\n   * Return the entry for the specified commit ID.\r\n   * @param  {Symbol} id\r\n   * The transaction ID.\r\n   * @return {Object}\r\n   * Returns an object with `timestamp` and `value` keys.\r\n   */\r\n  getCommit (id = null) {\r\n    if (!this.METADATA.transaction.hasOwnProperty(id)) {\r\n      return undefined\r\n    }\r\n\r\n    return {\r\n      timestamp: this.METADATA.transaction[id][0],\r\n      value: this.METADATA.transaction[id][1]\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove all transaction log entries from the current cursor onward.\r\n   */\r\n  flush () {\r\n    if (this.METADATA.cursor === null) {\r\n      return\r\n    }\r\n\r\n    let position = this.METADATA.changeOrder.indexOf(this.METADATA.cursor)\r\n\r\n    // If the whole log is cleared, reset it silently.\r\n    if (position === 0) {\r\n      return\r\n    }\r\n\r\n    let removedEntries = this.METADATA.changeOrder.splice(position + 1)\r\n\r\n    for (let i = 0; i < removedEntries.length; i++) {\r\n      delete this.METADATA.transaction[removedEntries[i]]\r\n    }\r\n\r\n    this.METADATA.cursor = this.METADATA.changeOrder[this.METADATA.changeOrder.length - 1]\r\n  }\r\n\r\n  /**\r\n   * Rollback the log to the specified index/cursor.\r\n   * @param  {Number|Symbol} [index=1]\r\n   * The index may be a number or a commit ID (symbol).\r\n   *\r\n   * **Specifying a number** will rollback the log by the specified number of\r\n   * commits. By default, the index is `1`, which is the equivalent of a simple\r\n   * \"undo\" operation. Specifying `2` would \"undo\" two operations. Values less\r\n   * than or equal to zero are ignored. Values greater than the total number of\r\n   * committed transactions trigger a reset.\r\n   *\r\n   * **Specifying a symbol** will rollback the log to the specified commit log\r\n   * (the symbol is the commit log ID).\r\n   * @fires rollback {Object}\r\n   * This fires a `rollback` event containing the active cursor.\r\n   * @return {Symbol}\r\n   * Returns the active cursor upon completion of rollback.\r\n   */\r\n  rollback (index = 1) {\r\n    // If the log is empty, ignore the rollback\r\n    if (this.METADATA.changeOrder.length === 0) {\r\n      return null\r\n    }\r\n\r\n    if (typeof index === 'symbol') {\r\n      this.cursor = index\r\n      return index\r\n    }\r\n\r\n    if (index >= this.METADATA.changeOrder.length) {\r\n      this.METADATA.cursor = this.METADATA.changeOrder[0]\r\n    } else {\r\n      // Make sure the index is a symbol\r\n      if (typeof index === 'number') {\r\n        if (index <= 0) {\r\n          return this.METADATA.cursor\r\n        }\r\n\r\n        let currentPosition = this.METADATA.changeOrder.indexOf(this.METADATA.cursor)\r\n        currentPosition -= index\r\n\r\n        if (currentPosition <= 0) {\r\n          currentPosition = 0\r\n        }\r\n\r\n        index = this.METADATA.changeOrder[currentPosition]\r\n      }\r\n\r\n      this.METADATA.cursor = index\r\n    }\r\n\r\n    this.emit('rollback', this.METADATA.cursor, null)\r\n\r\n    return this.METADATA.cursor\r\n  }\r\n\r\n  /**\r\n   * Advance the log to the specified index/cursor.\r\n   * @param  {Number|Symbol} [index=1]\r\n   * The index may be a number or a commit ID (symbol).\r\n   *\r\n   * **Specifying a number** will advance the log by the specified number of\r\n   * commits. By default, the index is `1`, which is the equivalent of a simple\r\n   * \"redo\" operation. Specifying `2` would \"redo\" two operations. Values less\r\n   * than or equal to zero are ignored. Values greater than the total number of\r\n   * committed transactions will advance the cursor to the last entry.\r\n   *\r\n   * **Specifying a symbol** will advance the log to the specified commit log\r\n   * record (the symbol is the commit log ID).\r\n   * @fires advance {Object}\r\n   * This fires a `advance` event containing the active cursor.\r\n   * @return {Symbol}\r\n   * Returns the active cursor upon completion of rollback.\r\n   */\r\n  advance (index = 1) {\r\n    // If the log is empty, ignore the rollback\r\n    if (this.METADATA.changeOrder.length === 0) {\r\n      return null\r\n    }\r\n\r\n    // Make sure the index is a symbol\r\n    if (typeof index === 'number') {\r\n      if (index <= 0) {\r\n        return this.METADATA.cursor\r\n      }\r\n\r\n      let currentPosition = this.METADATA.changeOrder.indexOf(this.METADATA.cursor)\r\n      currentPosition += index\r\n\r\n      if (currentPosition >= this.METADATA.changeOrder.length) {\r\n        currentPosition = this.METADATA.changeOrder.length - 1\r\n      }\r\n\r\n      index = this.METADATA.changeOrder[currentPosition]\r\n    }\r\n\r\n    this.METADATA.cursor = index\r\n\r\n    this.emit('advance', this.METADATA.cursor, null)\r\n\r\n    return this.METADATA.cursor\r\n  }\r\n\r\n  /**\r\n   * Clear the transaction log.\r\n   */\r\n  reset (suppressEvents = false) {\r\n    this.METADATA.transaction = {}\r\n    this.METADATA.changeOrder = []\r\n    this.METADATA.cursor = null\r\n\r\n    if (!suppressEvents) {\r\n      this.emit('reset')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @property {Array} log\r\n   * Returns the entire log, in ascending historical order (oldest first).\r\n   * This may be a time-consuming operation if the log is large.\r\n   *\r\n   * **Example:**\r\n   *\r\n   * ```js\r\n   * [{\r\n   *   timestamp: Date,\r\n   *   value: 'some value'\r\n   * },{\r\n   *   timestamp: Date,\r\n   *   value: 'some other value'\r\n   * }]\r\n   */\r\n  get log () {\r\n    return this.METADATA.changeOrder.map(entry => {\r\n      return {\r\n        timestamp: this.METADATA.transaction[entry][0],\r\n        value: this.METADATA.transaction[entry][1],\r\n        activeCursor: this.METADATA.cursor === entry\r\n      }\r\n    })\r\n  }\r\n}\r\n","import Rule from './Rule'\r\n\r\n/**\r\n * @class NGN.DATA.RangeRule\r\n * A special rule to validate values within one or more ranges.\r\n * Supports numeric ranges, date ranges, and simple string-based\r\n * ranges (string length).\r\n */\r\nexport default class NGNDataRangeValidationRule extends Rule { // eslint-disable-line\r\n  /**\r\n   * Create a new range rule.\r\n   * @param {string} [name]\r\n   * An optional name for the rule. This can be useful when debugging data issues.\r\n   * @param {object} [scope=null]\r\n   * Apply a custom scope to the validation functions (applicable to custom methods only).\r\n   * @param {Array} [range]\r\n   * An enumeration of acceptable numeric ranges. For example, if\r\n   * the value must be between 5-10 or from 25-50, the configuration\r\n   * would look like:\r\n   *\r\n   * ```js\r\n   * range: [\r\n   *   [5, 10],\r\n   *   ['25-50']\r\n   * ]\r\n   * ```\r\n   *\r\n   * To accept anything below a certain number or anything over a certain\r\n   * number while also specifying one or more ranges, use a `null` value.\r\n   *\r\n   * For example:\r\n   *\r\n   * ```js\r\n   * range: [\r\n   *   [null, 0],\r\n   *   [5, 10],\r\n   *   ['25-50'],\r\n   *   [100, null]\r\n   * ]\r\n   * ```\r\n   *\r\n   * The aforementioned example would accept a value less than `zero`,\r\n   * between `5` and `10`, between `25` and `50`, or over `100`. Therefore,\r\n   * acceptable values could be `-7`, `7`, `25`, `42`,  `10000`, or anything\r\n   * else within the ranges. However, the values `3`, `19`, and `62` would\r\n   * all fail because they're outside the ranges.\r\n   */\r\n  constructor (name, scope, range = []) {\r\n    if (NGN.typeof(scope) === 'array') {\r\n      range = scope\r\n      scope = null\r\n    }\r\n\r\n    super(null, name, scope)\r\n\r\n    this.RULE.prepareRange = function (value) {\r\n      // If a simple range is specified (single array), format it for the rule processor.\r\n      value = NGN.forceArray(value)\r\n\r\n      if (NGN.typeof(value[0]) !== 'array') {\r\n        value = [value]\r\n      }\r\n\r\n      for (let i = 0; i < value.length; i++) {\r\n        if (value[i].length !== 2) {\r\n          if (NGN.typeof(value[i][0]) !== 'string') {\r\n            throw new Error(`Invalid range: \"${value[i].toString()}\"`)\r\n          }\r\n\r\n          value[i] = value[i][0].replace(/[^0-9->]/gi, '').split(/->{1,100}/)\r\n        }\r\n\r\n        if (NGN.typeof(value[i][0]) !== 'number') {\r\n          value[i][0] = NGN.coalesce(value[i][0], '').replace(/null|none|any/gi, '')\r\n        }\r\n\r\n        if (NGN.typeof(value[i][1]) !== 'number') {\r\n          value[i][1] = NGN.coalesce(value[i][1], '').replace(/null|none|any/gi, '')\r\n        }\r\n      }\r\n\r\n      return value\r\n    }\r\n\r\n    // Initialize the range\r\n    this.RULE.range = new Set()\r\n    this.range = range\r\n\r\n    // Create the validation function.\r\n    this.RULE.validator = (value) => {\r\n      let isString = NGN.typeof(value) === 'string'\r\n      let range = this.range\r\n\r\n      for (let i = 0; i < range.length; i++) {\r\n        let min = NGN.coalesceb(range[i][0], isString ? value.length : value)\r\n        let max = NGN.coalesceb(range[i][1], isString ? value.length : value)\r\n\r\n        if (\r\n          (isString && value.length >= min && value.length <= max) ||\r\n          (!isString && value >= min && value <= max)\r\n        ) {\r\n          return true\r\n        }\r\n      }\r\n\r\n      return false\r\n    }\r\n  }\r\n\r\n  get range () {\r\n    return Array.from(this.RULE.range.values())\r\n  }\r\n\r\n  set range (value) {\r\n    this.RULE.range = new Set()\r\n    this.addRange(value)\r\n  }\r\n\r\n  /**\r\n   * Add a range to the rule.\r\n   * @param {array} value\r\n   * A range can be a single array, such as `[min, max]`. An array of arrays is\r\n   * also acceptable, such as `[[min1, max1], [min2, max2]]`.\r\n   */\r\n  addRange (value) {\r\n    value = this.RULE.prepareRange(value)\r\n\r\n    for (let i = 0; i < value.length; i++) {\r\n      if (NGN.coalesceb(value[i][0]) !== null && NGN.coalesceb(value[i][1]) !== null && value[i][1] < value[i][0]) {\r\n        throw new Error(`Invalid value \"${value[i][0].toString()} -> ${value[i][1].toString()}\". Minimum value cannot exceed maximum.`)\r\n      }\r\n\r\n      this.RULE.range.add(value[i])\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove an existing range from the rule.\r\n   * @param {array} value\r\n   * A range can be a single array, such as `[min, max]`. An array of arrays is\r\n   * also acceptable, such as `[[min1, max1], [min2, max2]]`.\r\n   */\r\n  removeRange (value) {\r\n    let range = this.range\r\n    value = this.RULE.prepareRange(value)\r\n\r\n    for (let i = 0; i < value.length; i++) {\r\n      for (let x = 0; x < range.length; x++) {\r\n        if (value[i].toString() === range[x].toString()) {\r\n          this.RULE.range.delete(range[x])\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import DataField from './Field'\r\n\r\n/**\r\n * @class NGN.DATA.VirtualField\r\n * A virtual field is a read-only ephemeral representation of data,\r\n * generated dynamically.\r\n * In other words, it's a made up data field that isn't part of what gets stored.\r\n * The value can be changed at any time, without warning or events. This is most\r\n * commonly used as an _internal class_ to support virtual fields within data\r\n * models. Consider the following:\r\n *\r\n * **Example:**\r\n *\r\n * ```js\r\n * let Person = new NGN.DATA.Model({\r\n *   fields: {\r\n *     dateOfBirth: Date\r\n *     age: function () {\r\n *       return YearsApart(new Date(), this.dateOfBirth)\r\n *     }\r\n *   }\r\n * })\r\n * ```\r\n *\r\n * The `age` example above (shorthand syntax) compares the `dateOfBirth` field\r\n * to the current date, expecting a numeric response. This particular virtual\r\n * field is useful for calculating a common value on the fly, and it is reusable\r\n * for any number of instances of the model.\r\n *\r\n * This functionality is available by implementing the NGN.DATA.VirtualField.\r\n * For example, the `age` virtual field would be created as:\r\n *\r\n * ```js\r\n * let age = new NGN.DATA.VirtualField(model, function () {\r\n *   return YearsApart(new Date(), this.dateOfBirth)\r\n * })\r\n * ```\r\n * @fires cache.clear {NGN.DATA.VirtualField}\r\n * Fired whenever the cache is cleared. The field is passed as the only argument\r\n * to event handler functions.\r\n */\r\nexport default class NGNVirtualDataField extends DataField { // eslint-disable-line\r\n  constructor (cfg) {\r\n    cfg = cfg || {}\r\n\r\n    if (!(cfg.model instanceof NGN.DATA.Entity)) {\r\n      NGN.WARN('No model specified for the virtual field to reference.')\r\n    }\r\n\r\n    // Remove unnecessary config values\r\n    delete cfg.required\r\n    delete cfg.default\r\n    delete cfg.min\r\n    delete cfg.minimum\r\n    delete cfg.max\r\n    delete cfg.maximum\r\n    delete cfg.range\r\n    delete cfg.rule\r\n    delete cfg.rules\r\n    delete cfg.validators\r\n    delete cfg.pattern\r\n\r\n    super(cfg)\r\n\r\n    this.METADATA.AUDITABLE = false\r\n    this.METADATA.fieldType = 'virtual'\r\n\r\n    /**\r\n     * @cfg {boolean} [cache=true]\r\n     * By default, virtual fields _associated with a model_ will cache results\r\n     * to prevent unnecessary function calls. The cache is cleared whenever a\r\n     * local data field is modified.\r\n     *\r\n     * Caching can substantially reduce processing time in large data sets\r\n     * by calling methods less often. In most use cases, it will provide a\r\n     * substantial performance gain. However; since virtual fields can also\r\n     * leverage variables and methods that are not a part of the data model,\r\n     * caching may prevent the value from updating as expected. While this case\r\n     * may occur less often, it can occur. If you suspect caching is interfering\r\n     * with a virtual field value, it can be disabled by setting this to `false`.\r\n     */\r\n    this.METADATA.caching = NGN.coalesce(cfg.cache, true)\r\n\r\n    /**\r\n     * @cfg {NGN.DATA.Model|NGN.DATA.Store|Object} scope\r\n     * The model, store, or object that will be referenceable within the\r\n     * virtual field #method. The model will be available in the `this` scope.\r\n     */\r\n    this.METADATA.scope = NGN.coalesce(cfg.scope, cfg.model, this)\r\n\r\n    /**\r\n     * @cfg {Function} method\r\n     * The method used to generate a value.\r\n     * This is an asynchronous method the returns a value (of any type).\r\n     */\r\n    const me = this\r\n    const handlerFn = cfg.method\r\n\r\n    this.METADATA.virtualMethod = function () {\r\n      return handlerFn.apply(me.METADATA.scope, ...arguments)\r\n    }\r\n\r\n    // Add smart-cache support\r\n    this.METADATA.CACHEKEY = Symbol('no.cache')\r\n    this.METADATA.cachedValue = this.METADATA.CACHEKEY\r\n\r\n    // Only add caching support if a model is associated\r\n    if (this.METADATA.caching && this.model) {\r\n      // Create a method for identifying which local data fields\r\n      // need to be monitored (for caching)\r\n      const localFieldPattern = /this(\\.(.[^\\W]+)|\\[['\"]{1}(.*)+['\"]{1}\\])/g\r\n\r\n      // Returns a Set of fieldnames used in the virtual function.\r\n      let monitoredFields = new Set()\r\n      let content = handlerFn.toString()\r\n      let iterator = localFieldPattern.exec(content)\r\n\r\n      while (iterator !== null) {\r\n        let field = NGN.coalesce(iterator[2], iterator[3])\r\n\r\n        if (this.model.METADATA.knownFieldNames.has(field)) {\r\n          monitoredFields.add(field)\r\n        }\r\n\r\n        content = content.replace(localFieldPattern, '')\r\n        iterator = localFieldPattern.exec(content)\r\n      }\r\n\r\n      this.METADATA.model.pool('field.', {\r\n        update: (change) => {\r\n          if (change.field && monitoredFields.has(change.field.name)) {\r\n            this.METADATA.cachedValue = this.METADATA.CACHEKEY\r\n            this.emit('cache.clear', this)\r\n          }\r\n        },\r\n\r\n        remove: (field) => {\r\n          if (monitoredFields.has(field.name)) {\r\n            this.METADATA.cachedValue = this.METADATA.CACHEKEY\r\n            this.emit('cache.clear', this)\r\n            NGN.ERROR(`The ${this.name} virtual field uses the ${field.name} field, which was removed. This virtual field may no longer work.`)\r\n          }\r\n        },\r\n\r\n        create: (field) => {\r\n          if (monitoredFields.has(field.name)) {\r\n            this.METADATA.cachedValue = this.METADATA.CACHEKEY\r\n            this.emit('cache.clear', this)\r\n            NGN.INFO(`The ${this.name} virtual field uses the ${field.name} field, which was added.`)\r\n          }\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  get auditable () {\r\n    NGN.WARN('Virtual fields do not support the auditable property.')\r\n    return false\r\n  }\r\n\r\n  set auditable (value) {\r\n    NGN.WARN('Virtual fields do not support the auditable property.')\r\n  }\r\n\r\n  /**\r\n   * @property {any} value\r\n   * This will always return the value of the virtual field, but it may only\r\n   * be _set_ to a synchronous function that returns a value.\r\n   */\r\n  get value () {\r\n    if (this.METADATA.caching) {\r\n      if (this.METADATA.cachedValue !== this.METADATA.CACHEKEY) {\r\n        return this.METADATA.cachedValue\r\n      } else {\r\n        this.METADATA.cachedValue = this.METADATA.virtualMethod()\r\n        return this.METADATA.cachedValue\r\n      }\r\n    }\r\n\r\n    return this.METADATA.virtualMethod()\r\n  }\r\n\r\n  set value (value) {\r\n    NGN.WARN('Cannot set the value of a virtual field (read only).')\r\n  }\r\n\r\n  get required () {\r\n    NGN.WARN('Virtual fields do not support the required property.')\r\n    return false\r\n  }\r\n\r\n  set required (value) {\r\n    NGN.WARN('Virtual fields do not support the required property.')\r\n  }\r\n\r\n  get isNew () {\r\n    NGN.WARN('Virtual fields do not support the isNew property.')\r\n    return false\r\n  }\r\n\r\n  get default () {\r\n    NGN.WARN('Virtual fields do not have default values.')\r\n    return undefined\r\n  }\r\n\r\n  set default (value) {\r\n    NGN.WARN('Virtual fields do not have default values.')\r\n    return undefined\r\n  }\r\n\r\n  get violatedRule () {\r\n    return 'None'\r\n  }\r\n\r\n  get valid () {\r\n    NGN.WARN('Virtual fields are always valid.')\r\n    return true\r\n  }\r\n\r\n  get modified () {\r\n    NGN.WARN('modified attribute does nothing on virtual fields.')\r\n    return false\r\n  }\r\n\r\n  allowInvalid () {\r\n    NGN.WARN('allowInvalid() unavailable for virtual fields.')\r\n  }\r\n\r\n  disallowInvalid () {\r\n    NGN.WARN('disallowInvalid() unavailable for virtual fields.')\r\n  }\r\n\r\n  autocorrectInput () {\r\n    NGN.WARN('autocorrectInput() unavailable for virtual fields.')\r\n  }\r\n}\r\n","import DataField from './Field'\r\n\r\n/**\r\n * @class NGN.DATA.Relationship\r\n * Represents a data field linked to another NGN.DATA.Model or\r\n * NGN.DATA.Store. This is used for nesting models/stores within a field,\r\n * supporting creation of complex data structures that are still easy\r\n * to work with.\r\n *\r\n * While there is no limit to how deeply nested fields can be, it is considered\r\n * a best practice to avoid circular relationships, which can lead to infinite\r\n * loops when serializing data.\r\n *\r\n * Nested models (i.e. records) each have their own data\r\n * NGN.DATA.Model#validators, so relationship fields defer all validation to\r\n * the individual record/model.\r\n *\r\n * Relationships using NGN.DATA.Stores behave a little differently, since they\r\n * represent a collection of data instead of a single record/model. NGN manages\r\n * [referential integrity](https://en.wikipedia.org/wiki/Referential_integrity)\r\n * using simplistic\r\n * [cardinality](https://en.wikipedia.org/wiki/Cardinality_(data_modeling)).\r\n *\r\n * Referential integrity & cardinality rules are data modeling principles\r\n * designed to enforce data quality standards. The nature of JavaScript objects\r\n * naturally enforces rudimentary data linking/nesting. NGN data relationships\r\n * build upon this, using proven data modeling principles.\r\n *\r\n * This is done, very simply, by using the @cfg#min and @cfg#max configuration\r\n * options. However; these options don't always need to be enforced, depending\r\n * on what type of cardniality needs to be achieved.\r\n *\r\n * For more information, see the Data Modeling Guide.\r\n *\r\n * **Note to self, use this next part in the guide:**\r\n *\r\n * There are five (5) common types of cardinality.\r\n *\r\n * - **1 => 1**: One-to-One\r\n * - **0 => 1**: Zero-or-One\r\n * - **0 => N**: Zero-to-Many\r\n * - **1 => N**: One-to-Many\r\n * - **N => N**: Many-to-Many\r\n *\r\n * There are also more granular types of cardinality, which are less common in\r\n * web applications, but often used in data and ETL operations.\r\n *\r\n * - **0,1 => 0,N**: Zero-or-One to Zero-or-More\r\n * - **0,1 => 1,N**: Zero-or-One to One-or-More\r\n * - ... write the rest in the guide...\r\n */\r\nexport default class NGNRelationshipField extends DataField { // eslint-disable-line\r\n  constructor (cfg = {}) {\r\n    let type = NGN.typeof(cfg.join)\r\n\r\n    // Assure valid configuration\r\n    if (!cfg.join) {\r\n      throw new InvalidConfigurationError('Missing \"join\" configuration property.')\r\n    } else if (\r\n      ['model', 'store'].indexOf(type) < 0 &&\r\n      (\r\n        type !== 'array' ||\r\n        NGN.typeof(cfg.join[0]) !== 'model'\r\n      )\r\n    ) {\r\n      throw new InvalidConfigurationError(`The join specified is not a valid NGN.DATA.Model, NGN.DATA.Store, or collection. It is a ${NGN.typeof(cfg.join)}\"`)\r\n    }\r\n\r\n    // Create optional cardinality validations\r\n\r\n    // Initialize\r\n    cfg.identifier = false\r\n    super(cfg)\r\n\r\n    this.METADATA.fieldType = 'join'\r\n    this.METADATA.join = Symbol('relationship')\r\n\r\n    // Apply event monitoring to the #record.\r\n    this.METADATA.applyMonitor = () => {\r\n      if (this.METADATA.manner === 'model') {\r\n        // Model Event Relay\r\n        this.METADATA.join.pool('field.', {\r\n          create: this.METADATA.commonModelEventHandler('field.create'),\r\n          update: this.METADATA.commonModelEventHandler('field.update'),\r\n          remove: this.METADATA.commonModelEventHandler('field.remove'),\r\n          invalid: (data) => {\r\n            this.emit(['invalid', `invalid.${this.METADATA.name}.${data.field}`])\r\n          },\r\n          valid: (data) => {\r\n            this.emit(['valid', `valid.${this.METADATA.name}.${data.field}`])\r\n          }\r\n        })\r\n      //   this.METADATA.join.pool('field.', {\r\n      //     create: this.METADATA.commonModelEventHandler('field.create'),\r\n      //     update: this.METADATA.commonModelEventHandler('field.update'),\r\n      //     remove: this.METADATA.commonModelEventHandler('field.remove'),\r\n      //     invalid: (data) => {\r\n      //       this.emit(['invalid', `invalid.${this.name}.${data.field}`])\r\n      //     },\r\n      //     valid: (data) => {\r\n      //       this.emit(['valid', `valid.${this.name}.${data.field}`])\r\n      //     }\r\n      //   })\r\n      // } else {\r\n      //   // Store Event Relay\r\n      //   this.METADATA.join.pool('record.', {\r\n      //     create: this.METADATA.commonStoreEventHandler('record.create'),\r\n      //     update: this.METADATA.commonStoreEventHandler('record.update'),\r\n      //     remove: this.METADATA.commonStoreEventHandler('record.remove'),\r\n      //     invalid: (data) => {\r\n      //       this.emit('invalid', `invalid.${this.name}.${data.field}`)\r\n      //     },\r\n      //     valid: (data) => {\r\n      //       this.emit('valid', `valid.${this.name}.${data.field}`)\r\n      //     }\r\n      //   })\r\n      }\r\n    }\r\n\r\n    // Event handling for nested models.\r\n    this.METADATA.commonModelEventHandler = (type) => {\r\n      const me = this\r\n\r\n      return function (change) {\r\n        me.METADATA.commitPayload({\r\n          field: `${me.name}.${change.field}`,\r\n          old: NGN.coalesce(change.old),\r\n          new: NGN.coalesce(change.new),\r\n          join: true,\r\n          originalEvent: {\r\n            event: this.event,\r\n            record: me.METADATA.record\r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n    // Event handling for nested stores.\r\n    this.METADATA.commonStoreEventHandler = (type) => {\r\n      const me = this\r\n\r\n      return function (record, change) {\r\n        let old = change ? NGN.coalesce(change.old) : me.data\r\n\r\n        if (this.event === 'record.create') {\r\n          old.pop()\r\n        } else if (this.event === 'record.delete') {\r\n          old.push(record.data)\r\n        }\r\n\r\n        me.METADATA.commitPayload({\r\n          field: me.name + (change ? `.${change.field}` : ''),\r\n          old: change ? NGN.coalesce(change.old) : old,\r\n          new: change ? NGN.coalesce(change.new) : me.data,\r\n          join: true,\r\n          originalEvent: {\r\n            event: this.event,\r\n            record: record\r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n    // const commitPayload = this.METADATA.commitPayload\r\n    //\r\n    // this.METADATA.commitPayload = (payload) => {\r\n    //   console.log('HERE')\r\n    //   commitPayload(...arguments)\r\n    // }\r\n\r\n    /**\r\n     * @cfg join {NGN.DATA.Store|NGN.DATA.Model[]}\r\n     * A relationship to another model/store is defined by a join.\r\n     * The join may be a data store or data model. It is also possible\r\n     * to specify a collection.\r\n     *\r\n     * For example, a join may be defined as:\r\n     *\r\n     * ```js\r\n     * // Use of a model\r\n     * let RelationshipField = new NGN.DATA.Relationship({\r\n     *   record: new NGN.DATA.Model(...)\r\n     * })\r\n     *\r\n     * // Use of a model collection\r\n     * let RelationshipField = new NGN.DATA.Relationship({\r\n     *   record: [new NGN.DATA.Model(...)]\r\n     * })\r\n     *\r\n     * // Use of a store\r\n     * let RelationshipField = new NGN.DATA.Relationship({\r\n     *   record: new NGN.DATA.Store(...)\r\n     * })\r\n     * ```\r\n     *\r\n     * A store and a model collection are both a group of models,\r\n     * Internally, model collections are converted to data stores.\r\n     *\r\n     * By supporting all three formats, it is possible to create complex\r\n     * data models, such as:\r\n     *\r\n     * ```js\r\n     * let Pet = new NGN.DATA.Model(...)\r\n     * let Kid = new NGN.DATA.Model(...)\r\n     * let Kids = new NGN.DATA.Store({\r\n     *   model: Kid\r\n     * })\r\n     *\r\n     * let Person = new NGN.DATA.Model({\r\n     *   fields: {\r\n     *     dateOfBirth: Date,\r\n     *     spouse: Person,  // <== Join a Model\r\n     *     kids: Kids,      // <== Join a Store\r\n     *     pets: [Pet]      // <== Join a Collection\r\n     *   }\r\n     * })\r\n     * ```\r\n     *\r\n     * The `pets` field contains a \"collection\". This shorthand notation is used\r\n     * to help understand real data relationships. In this case, it is easy to\r\n     * infer that a person may have zero or more pets.\r\n     */\r\n    this.value = NGN.coalesce(cfg.join)\r\n    this.METADATA.AUDITABLE = false\r\n    this.auditable = NGN.coalesce(cfg.audit, false)\r\n  }\r\n\r\n  /**\r\n   * @property {string} manner\r\n   * The manner of relationship. This can be one of 3 values: `store`\r\n   * (NGN.DATA.Store), `model` (NGN.DATA.Model), or `collection`. A collection\r\n   * is a special configuration shortcut used to represent a new store of models.\r\n   * ```math\r\n   * E = mc^2\r\n   * ```\r\n   * ```graph\r\n   * graph LR\r\n   * a-->b\r\n   * ```\r\n   * For example, a model may be defined as:\r\n   *\r\n   * ```js\r\n   * let Pet = new NGN.DATA.Model({\r\n   *   fields: {\r\n   *     name: String,\r\n   *     animalType: String\r\n   *   }\r\n   * })\r\n   *\r\n   * let Person = new NGN.DATA.Model({\r\n   *   fields: {\r\n   *     dateOfBirth: Date\r\n   *   },\r\n   *   relationships: {\r\n   *     pets: [Pet]        // <== Collection\r\n   *   }\r\n   * })\r\n   * ```\r\n   */\r\n  get manner () {\r\n    return NGN.coalesce(this.METADATA.manner, 'unknown')\r\n  }\r\n\r\n  get value () {\r\n    return this.METADATA.join\r\n  }\r\n\r\n  // Override the default value setter\r\n  set value (value) {\r\n    // Short-circuit if the value hasn't changed.\r\n    let currentValue = this.METADATA.join\r\n\r\n    if (currentValue === value) {\r\n      return\r\n    }\r\n\r\n    let type = NGN.typeof(value)\r\n\r\n    if (type === 'array') {\r\n      if (value.length !== 1) {\r\n        throw new Error(`${this.METADATA.name} cannot refer to an empty data store/model collection. A record must be provided.`)\r\n      }\r\n\r\n      this.METADATA.manner = 'store'\r\n      value = new NGN.DATA.Store({\r\n        model: value[0]\r\n      })\r\n    } else if (['model', 'store'].indexOf(type) >= 0) {\r\n      this.METADATA.manner = type\r\n    } else {\r\n      NGN.ERROR(`The \"${this.METADATA.name}\" relationship has an invalid record type. Only instances of NGN.DATA.Store, NGN.DATA.Model, or [NGN.DATA.Model] are supported.\" .`)\r\n      throw new InvalidConfigurationError(`Invalid record configuration for \"${this.METADATA.name}\" field.`)\r\n    }\r\n\r\n    if (this.manner === 'unknown') {\r\n      throw new Error('Cannot set a relationship field to anything other than an NGN.DATA.Store, NGN.DATA.Model, or an array of NGN.DATA.Model collections. (Unknown manner of relationship)')\r\n    }\r\n\r\n    this.METADATA.join = type === 'model' ? new value() : value // eslint-disable-line new-cap\r\n    this.auditable = this.METADATA.AUDITABLE\r\n    this.METADATA.applyMonitor()\r\n\r\n    // Notify listeners of change\r\n    if (typeof currentValue !== 'symbol') {\r\n      this.emit('update', {\r\n        old: currentValue,\r\n        new: value\r\n      })\r\n    }\r\n  }\r\n\r\n  set auditable (value) {\r\n    value = NGN.forceBoolean(value)\r\n\r\n    if (value !== this.METADATA.AUDITABLE) {\r\n      this.METADATA.AUDITABLE = value\r\n      this.METADATA.join.auditable = value\r\n    }\r\n  }\r\n\r\n  // Override the default undo\r\n  undo () {\r\n    if (this.METADATA.manner === 'model') {\r\n      this.METADATA.join.undo(...arguments)\r\n    }\r\n  }\r\n\r\n  redo () {\r\n    if (this.METADATA.manner === 'model') {\r\n      this.METADATA.join.redo(...arguments)\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @class NGN.DATA.FieldMap\r\n * A field map is a special data transformer that maps field names (keys)\r\n * to a different format. Consider the following field map:\r\n *\r\n * ```js\r\n * let fieldMap = new NGN.DATA.FieldMap({\r\n *   father: 'pa',\r\n *   mother: 'ma',\r\n *   brother: 'bro',\r\n *   sister: 'sis'\r\n * })\r\n * ```\r\n *\r\n * The map above reads as \"the `father` field is also known as `pa`\",\r\n * \"the `mother` field is also known as `ma`\", etc.\r\n *\r\n * The following transformation is possible:\r\n *\r\n * ```js\r\n * let result = fieldMap.apply({\r\n *   pa: 'John',\r\n *   ma: 'Jill',\r\n *   bro: 'Joe',\r\n *   sis: 'Jane'\r\n * })\r\n *\r\n * console.log(result)\r\n * ```\r\n *\r\n * _yields:_\r\n *\r\n * ```sh\r\n * {\r\n *   father: 'John'\r\n *   mother: 'Jill',\r\n *   brother: 'Joe',\r\n *   sister: 'Jane'\r\n * }\r\n * ```\r\n *\r\n * It is also possible to reverse field names:\r\n *\r\n * ```js\r\n * let result = fieldMap.applyReverse({\r\n *   father: 'John'\r\n *   mother: 'Jill',\r\n *   brother: 'Joe',\r\n *   sister: 'Jane'\r\n * })\r\n *\r\n * console.log(result)\r\n * ```\r\n *\r\n * _yields:_\r\n *\r\n * ```sh\r\n * {\r\n *   pa: 'John',\r\n *   ma: 'Jill',\r\n *   bro: 'Joe',\r\n *   sis: 'Jane'\r\n * }\r\n * ```\r\n *\r\n * This class is designed to assist with reading and writing data\r\n * to NGN.DATA.Model and NGN.DATA.Store instances.\r\n * @private\r\n */\r\nexport default class NGNDataFieldMap { // eslint-disable-line\r\n  constructor (cfg = {}) {\r\n    Object.defineProperties(this, {\r\n      originalSource: NGN.privateconst(cfg),\r\n      sourceMap: NGN.private(null),\r\n      reverseMap: NGN.private(null),\r\n      applyData: NGN.privateconst((map = 'map', data) => {\r\n        if (NGN.typeof(data) !== 'object') {\r\n          return data\r\n        }\r\n\r\n        let keys = Object.keys(data)\r\n        map = map === 'map' ? this.inverse : this.map\r\n\r\n        for (let i = 0; i < keys.length; i++) {\r\n          if (map.hasOwnProperty(keys[i])) {\r\n            data[map[keys[i]]] = data[keys[i]]\r\n            delete data[keys[i]]\r\n          }\r\n        }\r\n\r\n        return data\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @property {object} map\r\n   * A reference to the data mapping object.\r\n   */\r\n  get map () {\r\n    if (this.sourceMap === null) {\r\n      let keys = Object.keys(this.originalSource)\r\n\r\n      this.sourceMap = {}\r\n\r\n      for (let i = 0; i < keys.length; i++) {\r\n        if (NGN.typeof(keys[i]) === 'string' && NGN.typeof(this.originalSource[keys[i]]) === 'string') {\r\n          this.sourceMap[keys[i]] = this.originalSource[keys[i]]\r\n        }\r\n      }\r\n    }\r\n\r\n    return this.sourceMap\r\n  }\r\n\r\n  /**\r\n   * @property {object} inverse\r\n   * A reference to the inversed data map.\r\n   */\r\n  get inverse () {\r\n    if (this.reverseMap === null) {\r\n      let keys = Object.keys(this.originalSource)\r\n\r\n      this.reverseMap = {}\r\n\r\n      for (let i = 0; i < keys.length; i++) {\r\n        if (NGN.typeof(keys[i]) === 'string' && NGN.typeof(this.originalSource[keys[i]]) === 'string') {\r\n          this.reverseMap[this.originalSource[keys[i]]] = keys[i]\r\n        }\r\n      }\r\n    }\r\n\r\n    return this.reverseMap\r\n  }\r\n\r\n  /**\r\n   * Apply the map to an object.\r\n   * @param  {object} data\r\n   * @return {object}\r\n   */\r\n  applyMap (data) {\r\n    return this.applyData('map', data)\r\n  }\r\n\r\n  /**\r\n   * Apply the inversed map to an object.\r\n   * @param  {object} data\r\n   * @return {object}\r\n   */\r\n  applyInverseMap (data) {\r\n    return this.applyData('reverse', data)\r\n  }\r\n}\r\n","import EventEmitter from '../emitter/core'\r\n\r\n/**\r\n * @class NGN.DATA.Model\r\n * Represents a data model/record.\r\n * @extends NGN.EventEmitter\r\n * @fires field.update\r\n * Fired when a datafield value is changed.\r\n * @fires field.create {NGN.DATA.Field}\r\n * Fired when a datafield is created.\r\n * @fires field.remove\r\n * Fired when a datafield is deleted.\r\n * @fires field.invalid\r\n * Fired when an invalid value is detected in an data field.\r\n */\r\nexport default class NGNDataEntity extends EventEmitter { // eslint-disable-line\r\n  constructor (cfg) {\r\n    cfg = NGN.coalesce(cfg, {})\r\n\r\n    super()\r\n\r\n    if (cfg.dataMap) {\r\n      cfg.fieldmap = cfg.dataMap\r\n      NGN.WARN('\"dataMap\" is deprecated. Use \"map\" instead.')\r\n    }\r\n\r\n    if (cfg.idAttribute) {\r\n      cfg.IdentificationField = cfg.idAttribute\r\n      NGN.WARN('\"idAttribute\" is deprecated. Use \"IdentificationField\" instead.')\r\n    }\r\n\r\n    const me = this\r\n\r\n    // Create private attributes & data placeholders\r\n    Object.defineProperties(this, {\r\n      /**\r\n       * @property {Symbol} OID\r\n       * A unique object ID assigned to the model. This is an\r\n       * internal readon-only reference.\r\n       * @private\r\n       */\r\n      OID: NGN.private(Symbol('model.id')),\r\n\r\n      METADATA: NGN.privateconst({\r\n        /**\r\n         * @cfg {string} [name]\r\n         * A descriptive name for the model. This is typically used for\r\n         * debugging, logging, schema defintions, and (sometimes) data proxies.\r\n         */\r\n        name: NGN.coalesce(cfg.name, 'Untitled Model'),\r\n\r\n        /**\r\n         * @cfg {string} [description]\r\n         * A description of the model. This is typically used for\r\n         * debugging, logging, schema definitions, and (sometimes) data proxies.\r\n         */\r\n        description: NGN.coalesce(cfg.description, cfg.name, 'Generic Data Model'),\r\n\r\n        /**\r\n         * @cfg {object} fields\r\n         * A private object containing the data fields of the model.\r\n         * Each key contains the field name, while each value can be one of\r\n         * the following:\r\n         *\r\n         * - Primitive (String, Number, RegExp, Boolean)\r\n         * - Standard Type (Array, Object, Date)\r\n         * - Custom Class\r\n         * - NGN.DATA.Field\r\n         * - An NGN.DATA.Field configuration\r\n         * - `null` (Defaults to String primitive)\r\n         *\r\n         * ```js\r\n         * fields: {\r\n         *   a: String,\r\n         *   b: Date,\r\n         *   c: MyCustomClass,\r\n         *   d: new NGN.DATA.Field({\r\n         *     required: true,\r\n         *     type: String,\r\n         *     default: 'some default value'\r\n         *   }),\r\n         *   e: {\r\n         *     required: true,\r\n         *     type: String,\r\n         *     default: 'some default value'\r\n         *   },\r\n         *   f: null // Uses default field config (String)\r\n         * }\r\n         * ```\r\n         *\r\n         * Extensions of the NGN.DATA.Field are also supported,\r\n         * such as NGN.DATA.VirtualField and NGN.DATA.Relationship.\r\n         */\r\n        fields: Object.assign({}, NGN.coalesce(cfg.fields, {})),\r\n        knownFieldNames: new Set(),\r\n        invalidFieldNames: new Set(),\r\n        auditFieldNames: NGN.coalesce(cfg.audit, false) ? new Set() : null,\r\n\r\n        /**\r\n         * @property {[NGN.DATA.Rule]|Object}\r\n         * Custom validation rules used to verify the integrity of the entire\r\n         * model. This only applies to the full model. Individual data fields\r\n         * may have their own validators.\r\n         *\r\n         * If an object is specified, it should contain simple key/value pairs,\r\n         * where the key is the descriptive name of the rule and the value is\r\n         * a synchronous callback function that returns a `true`/`false` value.\r\n         * For instance, assume the fields called `price`, `items`, and `tax` exist\r\n         * in the example model below. :\r\n         *\r\n         * ```js\r\n         * {\r\n         *   'Positive Sale': function () {\r\n         *      return (this.price * this.items) > 0\r\n         *   },\r\n         *   'Taxes Applied': function () {\r\n         *      return this.tax > 0\r\n         *   }\r\n         * }\r\n         * ```\r\n         *\r\n         * Alternatively, an array of NGN.DATA.Rule instances may be provided.\r\n         */\r\n        validators: NGN.coalesce(cfg.rules, cfg.rule, cfg.validators),\r\n\r\n        /**\r\n         * @cfgproperty {boolean} [validation=true]\r\n         * Toggle data validation using this.\r\n         */\r\n        validation: NGN.coalesce(cfg.validation, true),\r\n\r\n        /**\r\n         * @cfg {boolean} [autoid=false]\r\n         * If the NGN.DATA.Model#IdentificationField/id is not provided for a record,\r\n         * a unique ID will be automatically generated for it.\r\n         *\r\n         * An NGN.DATA.Store using a model with this set to `true` will never\r\n         * have a duplicate record, since the #id or #IdentificationField will always\r\n         * be unique.\r\n         */\r\n        autoid: NGN.coalesce(cfg.autoid, false),\r\n\r\n        /**\r\n         * @cfg {String} [IdentificationField='id']\r\n         * Setting this allows an attribute of the object to be used as the ID.\r\n         * For example, if an email is the ID of a user, this would be set to\r\n         * `email`.\r\n         */\r\n        IdentificationField: NGN.coalesce(cfg.IdentificationField, cfg.idField, 'id'),\r\n\r\n        /**\r\n         * @cfgproperty {Date|Number} [expires]\r\n         * When this is set to a date/time, the model record will be marked\r\n         * as expired at the specified time/date. If a number is specified\r\n         * (milliseconds), the record will be marked as expired after the\r\n         * specified time period has elapsed. When a record/model is marked as\r\n         * \"expired\", it triggers the `expired` event. By default, expired\r\n         * records/models within an NGN.DATA.Store will be removed from the store.\r\n         *\r\n         * Setting this to any value less than `0` disables expiration.\r\n         * @fires expired\r\n         * Triggered when the model/record expires.\r\n         */\r\n        expiration: null,\r\n\r\n        // Holds a setTimeout method for expiration events.\r\n        expirationTimeout: null,\r\n\r\n        created: Date.now(),\r\n        store: null,\r\n\r\n        /**\r\n         * @cfg {boolean} [audit=false]\r\n         * Enable auditing to support #undo/#redo operations. This creates and\r\n         * manages a NGN.DATA.TransactionLog.\r\n         */\r\n        AUDITABLE: false,\r\n        AUDITLOG: NGN.coalesce(cfg.audit, false) ? new NGN.DATA.TransactionLog() : null,\r\n        AUDIT_HANDLER: function (change) {\r\n          if (change.hasOwnProperty('cursor')) {\r\n            me.METADATA.AUDITLOG.commit(me.METADATA.getAuditMap())\r\n          }\r\n        },\r\n\r\n        EVENTS: new Set([\r\n          'field.update',\r\n          'field.create',\r\n          'field.remove',\r\n          'field.invalid',\r\n          'field.valid',\r\n          'field.hidden',\r\n          'field.unhidden',\r\n          'field.rule.add',\r\n          'field.rule.remove',\r\n          'rule.add',\r\n          'rule.remove',\r\n          'relationship.create',\r\n          'relationship.remove',\r\n          'expired',\r\n          'deleted',\r\n          'reset',\r\n          'load'\r\n        ]),\r\n\r\n        /**\r\n         * An internal method used to apply field definitions to the model.\r\n         * @param  {string} fieldname\r\n         * Name of the field (as applied to the model).\r\n         * @param  {NGN.DATA.Field|Object|Primitive} [fieldConfiguration=null]\r\n         * The configuration to apply. See #addField for details.\r\n         * @param  {Boolean} [suppressEvents=false]\r\n         * Optionally suppress the `field.create` event.\r\n         * @private\r\n         */\r\n        applyField: (field, fieldcfg = null, suppressEvents = false) => {\r\n          // Prevent duplicate fields\r\n          if (this.METADATA.knownFieldNames.has(field)) {\r\n            return NGN.WARN(`Duplicate field \"${field}\" detected.`)\r\n          }\r\n\r\n          // Prevent reserved words\r\n          if (this.hasOwnProperty(field) && field.toLowerCase() !== 'id') {\r\n            throw new ReservedWordError(`\"${field}\" cannot be used as a field name (reserved word).`)\r\n          }\r\n\r\n          // If the field config isn't already an NGN.DATA.Field, create it.\r\n          if (!(fieldcfg instanceof NGN.DATA.Field)) {\r\n            if (fieldcfg instanceof NGN.DATA.Store || fieldcfg instanceof NGN.DATA.Model) {\r\n              if (this.METADATA.IdentificationField === field) {\r\n                throw new InvalidConfigurationError(`\"${field}\" cannot be an ID. Relationship fields cannot be an identification field/attribute.`)\r\n              }\r\n\r\n              this.METADATA.fields[field] = new NGN.DATA.Relationship({\r\n                name: field,\r\n                record: fieldcfg,\r\n                model: this\r\n              })\r\n            } else {\r\n              switch (NGN.typeof(fieldcfg)) {\r\n                // Custom config\r\n                case 'object':\r\n                  fieldcfg.model = this\r\n                  fieldcfg.identifier = NGN.coalesce(fieldcfg.identifier, this.METADATA.IdentificationField === field)\r\n                  fieldcfg.name = field\r\n\r\n                  this.METADATA.fields[field] = new NGN.DATA.Field(fieldcfg)\r\n\r\n                  break\r\n\r\n                // Collection of models\r\n                case 'array':\r\n                  return this.METADATA.applyField(field, fieldcfg[0], suppressEvents)\r\n\r\n                // Type-based cfg.\r\n                default:\r\n                  if (NGN.isFn(fieldcfg) || fieldcfg === null) {\r\n                    if (NGN.isFn(fieldcfg) && ['string', 'number', 'boolean', 'number', 'symbol', 'regexp', 'date', 'array', 'object'].indexOf(NGN.typeof(fieldcfg)) < 0) {\r\n                      this.METADATA.fields[field] = new NGN.DATA.VirtualField({\r\n                        name: field,\r\n                        identifier: this.METADATA.IdentificationField === field,\r\n                        model: this,\r\n                        method: fieldcfg\r\n                      })\r\n\r\n                      break\r\n                    }\r\n\r\n                    this.METADATA.fields[field] = new NGN.DATA.Field({\r\n                      name: field,\r\n                      type: fieldcfg,\r\n                      identifier: this.METADATA.IdentificationField === field,\r\n                      model: this\r\n                    })\r\n\r\n                    break\r\n                  }\r\n\r\n                  this.METADATA.fields[field] = new NGN.DATA.Field({\r\n                    name: field,\r\n                    type: NGN.isFn(fieldcfg) ? fieldcfg : String,\r\n                    identifier: NGN.isFn(fieldcfg)\r\n                      ? false\r\n                      : NGN.coalesce(fieldcfg.identifier, this.METADATA.IdentificationField === field),\r\n                    model: this\r\n                  })\r\n\r\n                  break\r\n              }\r\n            }\r\n          } else if (fieldcfg.model === null) {\r\n            fieldcfg.name = field\r\n            fieldcfg.identifier = fieldcfg.identifier = NGN.coalesce(fieldcfg.identifier, this.METADATA.IdentificationField === field)\r\n\r\n            this.METADATA.fields[field] = fieldcfg\r\n            this.METADATA.fields[field].model = this\r\n          } else if (fieldcfg.model === this) {\r\n            fieldcfg.identifier = NGN.coalesce(fieldcfg.identifier, this.METADATA.IdentificationField === field)\r\n\r\n            this.METADATA.fields[field] = fieldcfg\r\n          } else if (!(fieldcfg instanceof NGN.DATA.Field)) {\r\n            return NGN.WARN(`The \"${fieldcfg.name}\" field cannot be applied because model is already specified.`)\r\n          }\r\n\r\n          // Add a direct reference to the model.\r\n          Object.defineProperty(this, field, {\r\n            enumerable: true,\r\n            configurable: true,\r\n            get: () => this.get(field),\r\n            set: (value) => this.set(field, value)\r\n          })\r\n\r\n          // Enable auditing if necessary.\r\n          if (this.METADATA.AUDITABLE) {\r\n            if (this.METADATA.fields[field].fieldType !== 'virtual') {\r\n              this.METADATA.fields[field].auditable = true\r\n              this.METADATA.auditFieldNames.add(field)\r\n            }\r\n          }\r\n\r\n          // Add the field to the list\r\n          this.METADATA.knownFieldNames.add(field)\r\n\r\n          this.METADATA.fields[field].relay('*', this, 'field.')\r\n\r\n          if (!suppressEvents) {\r\n            this.emit('field.create', this.METADATA.fields[field])\r\n          }\r\n\r\n          return this.METADATA.fields[field]\r\n        },\r\n\r\n        /**\r\n         * An internal helper method for applying changes to the model.\r\n         * @param  {String} [type='undo']\r\n         * This can be `undo` or `redo`.\r\n         * @param  {Number} [count=1]\r\n         * The number of cursor indexes to shift\r\n         * @param  {Boolean} [suppressEvents=false]\r\n         * Indicates events should be suppressed.\r\n         * @private\r\n         */\r\n        applyChange: (type = 'undo', count = 1, suppressEvents = false) => {\r\n          if (!this.METADATA.AUDITABLE) {\r\n            NGN.WARN(`The ${type} operation failed on the ${this.name} model because auditing is disabled.`)\r\n            return\r\n          }\r\n\r\n          this.METADATA.AUDITLOG[type === 'undo' ? 'rollback' : 'advance'](count)\r\n\r\n          let data = this.METADATA.AUDITLOG.currentValue\r\n\r\n          if (data) {\r\n            this.METADATA.auditFieldNames.forEach(fieldname => {\r\n              let field = this.METADATA.fields[fieldname]\r\n              let log = field.METADATA.AUDITLOG\r\n\r\n              if (log.cursor !== data[fieldname]) {\r\n                if (typeof data[fieldname] === 'symbol') {\r\n                  log.cursor = data[fieldname]\r\n                } else {\r\n                  log.cursor = null\r\n                }\r\n\r\n                field.METADATA.setValue(NGN.coalesce(log.currentValue, field.default), suppressEvents, true)\r\n              }\r\n            })\r\n          }\r\n        },\r\n\r\n        /**\r\n         * Generates a key/value representation of the model where\r\n         * each key represents an auditable field and each value is the\r\n         * transaction cursor ID.\r\n         * @return {Object}\r\n         * @private\r\n         */\r\n        getAuditMap: () => {\r\n          let map = {}\r\n\r\n          this.METADATA.auditFieldNames.forEach(field => {\r\n            map[field] = this.METADATA.fields[field].METADATA.AUDITLOG.cursor\r\n          })\r\n\r\n          return map\r\n        },\r\n\r\n        /**\r\n         * Restore the model to a specific audit map (i.e. historical state\r\n         * of multiple fields).\r\n         * @param {Object} map\r\n         * The audit map to restore.\r\n         */\r\n        // restore: (map) => {\r\n        //   let keys = Object.keys(map)\r\n        //\r\n        //   for (let i = 0; i < keys.length; i++) {\r\n        //     if (this.METADATA.knownFieldNames.has(keys[i]) && typeof map[keys[i]] === 'symbol') {\r\n        //       console.log('Has', keys[i])\r\n        //\r\n        //     }\r\n        //   }\r\n        // },\r\n\r\n        // Deprecations\r\n        setSilent: NGN.deprecate(this.setSilentFieldValue, 'setSilent has been deprecated. Use setSilentFieldValue instead.'),\r\n\r\n        /**\r\n         * @cfgproperty {object} fieldmap\r\n         * An object mapping model attribute names to data storage field names.\r\n         *\r\n         * _Example_\r\n         * ```\r\n         * {\r\n         *   ModelFieldName: 'inputName',\r\n         *   father: 'dad',\r\n         *   email: 'eml',\r\n         *   image: 'img',\r\n         *   displayName: 'dn',\r\n         *   firstName: 'gn',\r\n         *   lastName: 'sn',\r\n         *   middleName: 'mn',\r\n         *   gender: 'sex',\r\n         *   dob: 'bd'\r\n         * }\r\n         * ```\r\n         */\r\n        DATAMAP: null\r\n      }),\r\n\r\n      MAP: NGN.get(() => {\r\n        return NGN.coalesce(\r\n          this.METADATA.DATAMAP,\r\n          this.METADATA.store instanceof NGN.DATA.Store\r\n            ? this.METADATA.store.map\r\n            : null\r\n        )\r\n      })\r\n    })\r\n\r\n    if (cfg.fieldmap instanceof NGN.DATA.FieldMap) {\r\n      this.METADATA.DATAMAP = cfg.fieldmap\r\n    } else if (NGN.typeof(cfg.fieldmap) === 'object') {\r\n      this.METADATA.DATAMAP = new NGN.DATA.FieldMap(cfg.fieldmap)\r\n    }\r\n\r\n    // Bubble events to the BUS\r\n    // this.relay('*', NGN.BUS, 'record.')\r\n\r\n    // Add data fields.\r\n    let fields = Object.keys(this.METADATA.fields)\r\n    for (let i = 0; i < fields.length; i++) {\r\n      let name = fields[i]\r\n\r\n      if (this.METADATA.knownFieldNames.has(name)) {\r\n        NGN.WARN(`Duplicate field \"${name}\" detected.`)\r\n      } else {\r\n        // Configure a data field for each configuration.\r\n        this.METADATA.applyField(name, this.METADATA.fields[name], true)\r\n      }\r\n    }\r\n\r\n    // Apply automatic ID's when applicable\r\n    if (this.METADATA.autoid) {\r\n      let autoIdValue = null\r\n\r\n      Object.defineProperty(this.METADATA, 'IdentificationValue', NGN.get(() => {\r\n        if (autoIdValue === null) {\r\n          autoIdValue = NGN.DATA.UTILITY.UUID()\r\n        }\r\n\r\n        return autoIdValue\r\n      }))\r\n    }\r\n\r\n    // Apply auditing if configured\r\n    this.auditable = NGN.coalesce(cfg.audit, false)\r\n\r\n    // Clear any cached checksums when the model changes.\r\n    this.on(['field.update', 'field.create', 'field.delete', 'field.hidden', 'field.unhidden'], () => {\r\n      if (this.METADATA.checksum) {\r\n        this.METADATA.checksum = null\r\n      }\r\n    })\r\n\r\n    // Configure TTL/Expiration\r\n    if (cfg.expires) {\r\n      this.expires = cfg.expires\r\n    }\r\n\r\n    // Configure model-level validation rules\r\n    if (this.METADATA.validators !== null) {\r\n      switch (NGN.typeof(this.METADATA.validators)) {\r\n        // Support key/value objects where the key is the name and value is a function.\r\n        case 'object':\r\n          let keys = Object.keys(this.METADATA.validators)\r\n          let rules = []\r\n\r\n          for (let i = 0; i < keys.length; i++) {\r\n            rules.push(new NGN.DATA.Rule(this.METADATA.validators[keys[i]], keys[i], this))\r\n          }\r\n\r\n          break\r\n\r\n        // Support an array of existing data rules.\r\n        case 'array':\r\n          for (let i = 0; i < this.METADATA.validators.length; i++) {\r\n            if (this.METADATA.validators[i].hasOwnProperty('RULE')) {\r\n              this.METADATA.validators[i].RULE.scope = this\r\n            } else {\r\n              throw new Error(`Invalid data rule configuration for ${this.name} model. Rule #${i} is not a valid NGN.DATA.Rule instance.`)\r\n            }\r\n          }\r\n\r\n          break\r\n\r\n        // Diasllow any other kinds of rules.\r\n        default:\r\n          throw new Error(`Invalid data rule configuration for ${this.name} model. Expected an object or array of NGN.DATA.Rule instances. Received \"${NGN.typeof(this.METADATA.validators)}\"`)\r\n      }\r\n    }\r\n  }\r\n\r\n  get name () {\r\n    return this.METADATA.name\r\n  }\r\n\r\n  set auditable (value) {\r\n    value = NGN.forceBoolean(value)\r\n\r\n    if (value !== this.METADATA.AUDITABLE) {\r\n      this.METADATA.AUDITABLE = value\r\n      this.METADATA.AUDITLOG = value ? new NGN.DATA.TransactionLog() : null\r\n      this.METADATA.auditFieldNames = value ? new Set() : null\r\n\r\n      // Set each field to an auditable state (or not).\r\n      this.METADATA.knownFieldNames.forEach(fieldname => {\r\n        if (!this.METADATA.fields[fieldname].virtual) {\r\n          this.METADATA.fields[fieldname].auditable = value\r\n\r\n          if (value) {\r\n            this.METADATA.auditFieldNames.add(fieldname)\r\n          }\r\n        }\r\n      })\r\n\r\n      if (value) {\r\n        // Track Changes (if auditing enabled)\r\n        this.on('field.transaction.*', (id) => {\r\n          this.METADATA.AUDIT_HANDLER({ cursor: id })\r\n        })\r\n      } else {\r\n        this.METADATA.auditFieldNames.clear()\r\n\r\n        this.off('field.transaction.*')\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The unique ID assigned to the model.\r\n   * @return {string}\r\n   */\r\n  get id () {\r\n    return this.get(this.METADATA.IdentificationField)\r\n  }\r\n\r\n  set id (value) {\r\n    this.set('id', value)\r\n  }\r\n\r\n  /**\r\n   * @property ID\r\n   * An alias for #id.\r\n   */\r\n  get ID () {\r\n    return this.id\r\n  }\r\n\r\n  set ID (value) {\r\n    this.set('id', value)\r\n  }\r\n\r\n  /**\r\n   * @property {Array} changelog\r\n   * The changelog returns the underlying NGN.DATA.TransactionLog#log if\r\n   * auditing is available. The array will be empty if auditing is disabled.\r\n   */\r\n  get changelog () {\r\n    return this.METADATA.AUDITLOG.log.map(entry => {\r\n      let result = {\r\n        timestamp: entry.timestamp,\r\n        activeCursor: entry.activeCursor,\r\n        value: {}\r\n      }\r\n\r\n      let data = entry.value\r\n      let field = Object.keys(data)\r\n\r\n      for (let i = 0; i < field.length; i++) {\r\n        if (typeof data[field[i]] === 'symbol') {\r\n          result.value[field[i]] = NGN.coalesce(\r\n            this.METADATA.fields[field[i]].METADATA.AUDITLOG.getCommit(data[field[i]]).value,\r\n            this.METADATA.fields[field[i]].default\r\n          )\r\n        } else {\r\n          result.value[field[i]] = NGN.coalesce(this.METADATA.fields[field[i]].default)\r\n        }\r\n      }\r\n\r\n      return result\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @property {Number} createDate\r\n   * The date/time when the model is created.\r\n   */\r\n  get createDate () {\r\n    return this.METADATA.created\r\n  }\r\n\r\n  /**\r\n   * @property {object} data\r\n   * A serialized version of the data represented by the model. This\r\n   * only includes non-virtual fields. See #representation to use\r\n   * a representation of data containing virtual fields.\r\n   */\r\n  get data () {\r\n    if (this.MAP) {\r\n      return this.MAP.applyInverseMap(this.serializeFields())\r\n    }\r\n\r\n    return this.serializeFields()\r\n  }\r\n\r\n  /**\r\n   * @property {object} unmappedData\r\n   * Returns #data _without applying_ the data #map.\r\n   */\r\n  get unmappedData () {\r\n    return this.serializeFields()\r\n  }\r\n\r\n  /**\r\n   * @property {object} representation\r\n   * A serialized version of the data represented by the model. This\r\n   * includes virtual fields. See #data to use just the raw values.\r\n   */\r\n  get representation () {\r\n    if (this.MAP) {\r\n      return this.MAP.applyInverseMap(this.serializeFields(false, false))\r\n    }\r\n\r\n    return this.serializeFields(false, false)\r\n  }\r\n\r\n  /**\r\n   * @property {object} unmappedRepresentation\r\n   * Returns #representation _without applying_ the data #map.\r\n   */\r\n  get unmappedRepresentation () {\r\n    return this.serializeFields(false, false)\r\n  }\r\n\r\n  /**\r\n   * @property {string} checksum\r\n   * The checksum is a unique \"fingerprint\" of the data stored in the model.\r\n   * Please note that generating a checksum for an individual record is\r\n   * usually a quick operation, but generating large quantities of checksums\r\n   * simultaneously/sequentially can be computationally expensive. On average,\r\n   * a checksum takes 3-125ms to generate.\r\n   */\r\n  get checksum () {\r\n    this.METADATA.checksum = NGN.coalesce(this.METADATA.checksum, NGN.DATA.UTILITY.checksum(JSON.stringify(this.data)))\r\n\r\n    return this.METADATA.checksum\r\n  }\r\n\r\n  /**\r\n   * @property {Date} expires\r\n   * The date/time when the record expires. This may be set to\r\n   * a future date, or a numeric value. Numeric values\r\n   * represent the number of milliseconds from the current time\r\n   * before the record expires. For example, set this to `3000`\r\n   * to force the record to expire 3 seconds from now.\r\n   *\r\n   * Set this to `0` to immediately expire the record. Set this to\r\n   * `-1` or `null` to prevent the record from expiring.\r\n   */\r\n  get expires () {\r\n    return this.METADATA.expiration\r\n  }\r\n\r\n  set expires (value) {\r\n    if (value === null) {\r\n      clearTimeout(this.METADATA.expirationTimeout)\r\n      this.METADATA.expiration = null\r\n      return\r\n    }\r\n\r\n    let now = new Date()\r\n\r\n    if (!isNaN(value) && !(value instanceof Date)) {\r\n      // Handle numeric (millisecond) expiration\r\n      if (value < 0) {\r\n        this.METADATA.expiration = null\r\n\r\n        return\r\n      }\r\n\r\n      if (value === 0) {\r\n        this.METADATA.expiration = now\r\n        this.emit('expire')\r\n\r\n        return\r\n      }\r\n\r\n      this.METADATA.expiration = new Date()\r\n      this.METADATA.expiration.setTime(now.getTime() + value)\r\n    } else if (!(value instanceof Date) || value <= now) {\r\n      throw new Error(`${this.name} expiration (TTL) value must be a positive number (milliseconds) or future date.`)\r\n    } else {\r\n      // Handle date-based expiration\r\n      this.METADATA.expiration = value\r\n    }\r\n\r\n    clearTimeout(this.METADATA.expirationTimeout)\r\n\r\n    this.METADATA.expirationTimeout = setTimeout(() => this.emit('expire'), this.METADATA.expiration.getTime() - now.getTime())\r\n  }\r\n\r\n  get expired () {\r\n    if (this.METADATA.expiration === null) {\r\n      return false\r\n    }\r\n\r\n    return this.METADATA.expiration <= (new Date())\r\n  }\r\n\r\n  get fieldDefinitions () {\r\n    return this.METADATA.fields\r\n    // if (this.METADATA.knownFieldNames.size === 0) {\r\n    //   return {}\r\n    // }\r\n    //\r\n    // let fields = this.METADATA.knownFieldNames.keys()\r\n    // let result = {}\r\n    // let fieldname = fields.next()\r\n    //\r\n    // while (!fieldname.done) {\r\n    //   let field = this.METADATA.fields[fieldname.value]\r\n    //\r\n    //   if ((\r\n    //     field.value === undefined ||\r\n    //     (ignoreID && fieldname.value === this.IdentificationField) ||\r\n    //     (!field.virtual || (!ignoreVirtualFields && field.virtual))\r\n    //   )) {\r\n    //     // Do not serialize hidden values or virtuals\r\n    //     if (!field.hidden) {\r\n    //       switch (NGN.typeof(field.value)) {\r\n    //         case 'array':\r\n    //         case 'object':\r\n    //           result[fieldname.value] = NGN.DATA.UTILITY.serialize(field.value)\r\n    //           break\r\n    //\r\n    //         default:\r\n    //           result[fieldname.value] = field.value\r\n    //       }\r\n    //     }\r\n    //   }\r\n    // }\r\n  }\r\n\r\n  serializeFields (ignoreID = false, ignoreVirtualFields = true) {\r\n    if (this.METADATA.knownFieldNames.size === 0) {\r\n      return {}\r\n    }\r\n\r\n    let fields = this.METADATA.knownFieldNames.keys()\r\n    let result = {}\r\n    let fieldname = fields.next()\r\n\r\n    while (!fieldname.done) {\r\n      let field = this.METADATA.fields[fieldname.value]\r\n\r\n      // Ignore unserializable fields\r\n      if ((\r\n        field.value === undefined ||\r\n        (ignoreID && fieldname.value === this.IdentificationField) ||\r\n        (!field.virtual || (!ignoreVirtualFields && field.virtual))\r\n      )) {\r\n        // Do not serialize hidden values or virtuals\r\n        if (!field.hidden) {\r\n          switch (NGN.typeof(field.value)) {\r\n            case 'array':\r\n            case 'object':\r\n              result[fieldname.value] = NGN.DATA.UTILITY.serialize(field.value)\r\n              break\r\n\r\n            default:\r\n              result[fieldname.value] = field.value\r\n          }\r\n        }\r\n      }\r\n\r\n      fieldname = fields.next()\r\n    }\r\n\r\n    return result\r\n  }\r\n\r\n  serialize () {\r\n    return NGN.deprecate(this.serializeFields, 'serialize is now serializeFields. Use NGN.DATA.UTILITY.serialize for generic object serialization.')\r\n  }\r\n\r\n  /**\r\n   * Determines whether a field exists in the model or not.\r\n   * @param  {string} field\r\n   * Name of the field to check for.\r\n   * @return {boolean}\r\n   */\r\n  fieldExists (field) {\r\n    return this.METADATA.knownFieldNames.has(field)\r\n  }\r\n\r\n  /**\r\n   * Retrieve the value of the specified field.\r\n   * @param  {string} field\r\n   * Name of the field whose value should be returned.\r\n   * @return {any}\r\n   * Returns the value of the field.\r\n   */\r\n  get (field) {\r\n    if (field === 'id' || field === 'ID' || field === this.METADATA.IdentificationField) {\r\n      field = this.METADATA.IdentificationField\r\n\r\n      if (this.METADATA.autoid) {\r\n        if (!this.METADATA.knownFieldNames.has(field)) {\r\n          return this.METADATA.IdentificationValue\r\n        } else {\r\n          return NGN.coalesce(this.METADATA.fields[field].value, this.METADATA.IdentificationValue)\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.METADATA.knownFieldNames.has(field)) {\r\n      return this.METADATA.fields[field].value\r\n    } else {\r\n      NGN.WARN(`Cannot get \"${field}\". The field is not part of the model.`)\r\n      return undefined\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set a new value for the specified field.\r\n   * @param {string} field\r\n   * Name of the field whose value will be changed.\r\n   * @param {any} value\r\n   * The new value of the field.\r\n   */\r\n  set (field, value) {\r\n    if (field === 'id' || field === 'ID') {\r\n      field = this.METADATA.IdentificationField\r\n    }\r\n\r\n    if (this.METADATA.knownFieldNames.has(field)) {\r\n      this.METADATA.fields[field].value = value\r\n    } else {\r\n      NGN.WARN(`Cannot set \"${field}\". Unrecognized field name.`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a data field after the initial model definition.\r\n   * @param {string} fieldname\r\n   * The name of the field.\r\n   * @param {NGN.DATA.Field|Object|Primitive} [fieldConfiguration=null]\r\n   * The field configuration (see cfg#fields for syntax).\r\n   * @param {boolean} [suppressEvents=false]\r\n   * Set to `true` to prevent events from firing when the field is added.\r\n   */\r\n  addField (name, fieldConfiguration = null, suppressEvents = false) {\r\n    if (name instanceof NGN.DATA.Field) {\r\n      fieldConfiguration = name\r\n      name = fieldConfiguration.name\r\n    } else if (typeof name !== 'string') {\r\n      throw new Error('Cannot add a non-string based field.')\r\n    }\r\n\r\n    this.METADATA.applyField(name, fieldConfiguration, suppressEvents)\r\n  }\r\n\r\n  /**\r\n   * @method removeField\r\n   * Remove a field from the data model.\r\n   * @param {string} name\r\n   * Name of the field to remove.\r\n   * @param {boolean} [suppressEvents=false]\r\n   * Set to `true` to prevent events from firing when the field is removed.\r\n   */\r\n  removeField (name, suppressEvents = false) {\r\n    if (this.METADATA.knownFieldNames.has(name)) {\r\n      this.METADATA.knownFieldNames.delete(name)\r\n      this.METADATA.invalidFieldNames.delete(name)\r\n\r\n      const field = this.METADATA.fields[name]\r\n\r\n      delete this[name]\r\n      delete this.METADATA.fields[name] // eslint-disable-line no-undef\r\n\r\n      // let change = {\r\n      //   action: 'delete',\r\n      //   field: field.name,\r\n      //   value: field,\r\n      //   join: field instanceof NGN.DATA.Relationship\r\n      // }\r\n\r\n      if (!suppressEvents) {\r\n        this.emit('field.remove', field)\r\n      }\r\n\r\n      if (this.METADATA.store !== null) {\r\n        this.METADATA.store.emit(this.METADATA.store.PRIVATE.EVENT.DELETE_RECORD_FIELD, {\r\n          record: this,\r\n          field\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the NGN.DATA.Field object for the specified field.\r\n   * @param  {string} fieldName\r\n   * Name of the field to retrieve.\r\n   * @return {NGN.DATA.Field}\r\n   * The raw field.\r\n   */\r\n  getField (name) {\r\n    if (name.toLowerCase() === 'id' && !this.METADATA.fields.hasOwnProperty(name) && this.METADATA.fields.hasOwnProperty(this.METADATA.IdentificationField)) {\r\n      return this.METADATA.fields[this.METADATA.IdentificationField]\r\n    }\r\n\r\n    return this.METADATA.fields[name]\r\n  }\r\n\r\n  /**\r\n   * @method setSilent\r\n   * A method to set a field value without triggering an update event.\r\n   * This is designed primarily for use with live update proxies to prevent\r\n   * endless event loops.\r\n   * @param {string} fieldname\r\n   * The name of the #field to update.\r\n   * @param {any} value\r\n   * The new value of the field.\r\n   * @private\r\n   */\r\n  setSilentFieldValue (field, value) {\r\n    this.METADATA.fields[field].silentValue = value\r\n  }\r\n\r\n  /**\r\n   * @method undo\r\n   * A rollback function to undo changes. This operation affects\r\n   * the changelog (transaction log). To \"undo\" an \"undo\", use #redo.\r\n   * @param {number} [OperationCount=1]\r\n   * The number of operations to \"undo\". Defaults to a single operation.\r\n   * @param {boolean} [suppressEvents=false]\r\n   * Set to `true` to quietly update the value (prevents `update` event from\r\n   * firing).\r\n   */\r\n  undo (count = 1, suppressEvents = false) {\r\n    this.METADATA.applyChange('undo', ...arguments)\r\n  }\r\n\r\n  /**\r\n   * @method redo\r\n   * A function to reapply known changes. This operation affects\r\n   * the changelog (transaction log).\r\n   *\r\n   * The redo operation only works after an undo operation, but before a new\r\n   * value is committed to the transaction log. In other words, `undo -> redo`\r\n   * will work, but `undo -> update -> redo` will not. For details, see how\r\n   * the NGN.DATA.TransactionLog cursor system works.\r\n   * @param {number} [OperationCount=1]\r\n   * The number of operations to \"undo\". Defaults to a single operation.\r\n   * @param {boolean} [suppressEvents=false]\r\n   * Set to `true` to quietly update the value (prevents `update` event from\r\n   * firing).\r\n   */\r\n  redo (count = 1, suppressEvents = false) {\r\n    this.METADATA.applyChange('redo', ...arguments)\r\n  }\r\n\r\n  /**\r\n   * @method load\r\n   * Load a data record.\r\n   * @param {object} data\r\n   * The data to apply to the model.\r\n   * @param {boolean} [suppressEvents=false]\r\n   * Do not emit a change event when the data is loaded.\r\n   */\r\n  load (data, suppressEvents = false) {\r\n    if (this.MAP) {\r\n      data = this.MAP.applyMap(data)\r\n    }\r\n\r\n    let keys = Object.keys(data)\r\n\r\n    for (let i = 0; i < keys.length; i++) {\r\n      if (this.METADATA.knownFieldNames.has(keys[i])) {\r\n        this.METADATA.fields[keys[i]].METADATA.setValue(data[keys[i]], suppressEvents)\r\n      } else {\r\n        NGN.WARN(`Failed to load ${keys[i]} field of ${this.name} model. \"${keys[i]}\" is not a recognized field.`)\r\n      }\r\n    }\r\n\r\n    if (!suppressEvents) {\r\n      this.emit('load')\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * @info This method only works on records within a store. If this method is\r\n   * called on a model that is not part of a store, the model itself will be\r\n   * returned.\r\n   *\r\n   * Retrieve the next record (after this one) from the store.\r\n   * This can be used to iterate through a store by calling `model.next()`.\r\n   * This is operation acts as a linked list iterator.\r\n   * @param  {Number}  [count=1]\r\n   * The number of records to retrieve. For example, `1` retrieves the next record.\r\n   * `2` retrieves the second record after this one. A negative number will\r\n   * automatically use the #previous method to retrieve prior records. Setting this\r\n   * to `0` will return the current record (i.e. no change).\r\n   * @param  {Boolean}  [cycle=false] [description]\r\n   * If this `next` is called on the last record, it will fail. Setting `cycle` to\r\n   * `true` will automatically restart the iteration, returning the first record in\r\n   * the store.\r\n   * @return {NGN.DATA.Model}\r\n   * Returns the next model in the store (after this one.)\r\n   */\r\n  next (count = 1, cycle = false) {\r\n    if (count === 0) {\r\n      return this\r\n    }\r\n\r\n    if (this.METADATA.store) {\r\n      if (typeof count === 'boolean') {\r\n        cycle = count\r\n        count = 1\r\n      }\r\n\r\n      return this.METADATA.store.getRecordSibling(this, count, cycle)\r\n    } else {\r\n      NGN.WARN('Attempted to call next() on a model that does not belong to a store.')\r\n      return this\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieve the previous record (before this one) from the store.\r\n   * This can be used to iterate through a store in reverse by calling\r\n   * `model.previous()`. This is operation acts as a doubly linked list iterator.\r\n   *\r\n   * @info This method only works on records within a store. If this method is\r\n   * called on a model that is not part of a store, the model itself will be\r\n   * returned.\r\n   * @param  {Number}  [count=1]\r\n   * The number of records to retrieve. For example, `1` retrieves the prior record.\r\n   * `2` retrieves the second record before this one. A negative number will\r\n   * automatically use the #next method to retrieve forward records. Setting this\r\n   * to `0` will return the current record (i.e. no change).\r\n   * @param  {Boolean}  [cycle=false]\r\n   * If this `next` is called on the first record, it will fail. Setting `cycle` to\r\n   * `true` will automatically restart the iteration, returning the last record in\r\n   * the store.\r\n   * @return {NGN.DATA.Model}\r\n   * Returns the previous model in the store (before this one.)\r\n   */\r\n  previous (count = 1, cycle = false) {\r\n    if (count === 0) {\r\n      return this\r\n    }\r\n\r\n    if (this.METADATA.store) {\r\n      if (typeof count === 'boolean') {\r\n        cycle = count\r\n        count = 1\r\n      }\r\n\r\n      return this.METADATA.store.getRecordSibling(this, 0 - count, cycle)\r\n    } else {\r\n      NGN.WARN('Attempted to call previous() on a model that does not belong to a store.')\r\n      return this\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove this model from the NGN.DATA.Store it is a part of.\r\n   *\r\n   * @info This method only works on records within a store. If this method is\r\n   * called on a model that is not part of a store, nothing will happen.\r\n   */\r\n  destroy () {\r\n    if (this.METADATA.store) {\r\n      this.METADATA.store.remove(this.OID)\r\n    } else {\r\n      NGN.WARN('Attempted to call remove() on a model that does not belong to a store.')\r\n    }\r\n  }\r\n}\r\n","import EventEmitter from '../../emitter/core'\r\n\r\n/**\r\n * @class NGN.DATA.Index\r\n * Data indexes are a data structure that improves the speed\r\n * of data retrieval from an NGN.DATA.Store, at the cost of\r\n * additional memory usage. Even though memory usage is increased\r\n * for each index applied to a store, it tends to be a very small\r\n * fraction of the memory required for storing data.\r\n *\r\n * Indexes help locate data within a store without having to read\r\n * every record. They will, in the overwhelming majority of cases,\r\n * speed up queries. However; if overused or misused, they may\r\n * marginally _increase_ query processing time.\r\n *\r\n * NGN data indexes were designed to be used the same way relational\r\n * data indexes and graph data vertices are used.\r\n * @fires create {Symbol}\r\n * Triggered when a new record is indexed. The payload (Symbol)\r\n * represents the NGN.DATA.Model#oid.\r\n * @fires delete {Symbol}\r\n * Triggered when a record is de-indexed. The payload (Symbol)\r\n * represents the NGN.DATA.Model#oid.\r\n * @fires update {Symbol}\r\n * Triggered when a record is re-indexed (updated). The payload (Symbol)\r\n * represents the NGN.DATA.Model#oid.\r\n * @fires reset\r\n * Triggered when the index is completely cleared/reset to it's original state.\r\n * @private\r\n */\r\nexport default class NGNDataIndex extends EventEmitter { // eslint-disable-line\r\n  /**\r\n   * Create a new data index.\r\n   * @param {Boolean} [BTree=false]\r\n   * Use a B-Tree index. This is only available for numeric values and dates.\r\n   * @param {String} [name='Untitled Index']\r\n   * Optional name for index. This is useful for debugging when multiple\r\n   * indexes exist.\r\n   */\r\n  constructor (btree = false, name = 'Untitled Index') {\r\n    super()\r\n\r\n    Object.defineProperties(this, {\r\n      // Private constants\r\n      CREATE_EVENT: NGN.privateconst(Symbol('create')),\r\n      REMOVE_EVENT: NGN.privateconst(Symbol('delete')),\r\n      UPDATE_EVENT: NGN.privateconst(Symbol('update')),\r\n\r\n      // Private data attributes\r\n      uniqueValues: NGN.privateconst(new Set()),\r\n      knownRecords: NGN.privateconst([]), // Linked list of Sets\r\n      name: NGN.const(name),\r\n      isBTree: NGN.privateconst(btree)\r\n    })\r\n\r\n    // Bubble up private events when applicable\r\n    const me = this\r\n    this.on([\r\n      this.CREATE_EVENT,\r\n      this.REMOVE_EVENT,\r\n      this.UPDATE_EVENT\r\n    ], function (oid, value, suppressEvent = false) {\r\n      if (!suppressEvent) {\r\n        me.emit(this.event.toString().replace(/^Symbol\\(|\\)$/g, ''), oid)\r\n      }\r\n    })\r\n\r\n    // When all known records for a given value are removed,\r\n    // clear the unique value index.\r\n    this.on(this.REMOVE_EVENT, (oid, value) => {\r\n      if (this.recordsFor(value).length === 0) {\r\n        let index = this.indexOf(value)\r\n\r\n        if (index >= 0) {\r\n          this.knownRecords.splice(index, 1)\r\n          this.uniqueValues.delete(value)\r\n        }\r\n      }\r\n    })\r\n\r\n    // Support BTree Indexing\r\n    if (this.isBTree) {\r\n      Object.defineProperty(this, 'BTREE', NGN.privateconst(new NGN.DATA.BTree(2, name)))\r\n    }\r\n  }\r\n\r\n  get keys () {\r\n    if (this.uniqueValues.size === 0) {\r\n      return []\r\n    }\r\n\r\n    return Array.from(this.uniqueValues.values())\r\n  }\r\n\r\n  /**\r\n   * Add a field/value to the index.\r\n   * @param {any} value\r\n   * The value of the model/record indexed field.\r\n   * @param {Symbol} oid\r\n   * The record's object ID (NGN.DATA.Model#OID)\r\n   */\r\n  add (value, oid, suppressEvent = false) {\r\n    let valueIndex = -1\r\n\r\n    // Create or identify the index of the unique value\r\n    if (!this.uniqueValues.has(value)) {\r\n      this.uniqueValues.add(value)\r\n      this.knownRecords.push(new Set())\r\n      valueIndex += this.uniqueValues.size\r\n    } else {\r\n      valueIndex = this.indexOf(value)\r\n    }\r\n\r\n    this.knownRecords[valueIndex].add(oid)\r\n\r\n    // Add BTree indexing\r\n    if (this.isBTree) {\r\n      let btreeValue = value instanceof Date ? value.getTime() : value\r\n\r\n      if (this.BTREE.get(btreeValue) === undefined) {\r\n        this.BTREE.put(btreeValue, valueIndex)\r\n      }\r\n    }\r\n\r\n    this.emit(this.CREATE_EVENT, oid, value, suppressEvent)\r\n  }\r\n\r\n  /**\r\n   * Remove a record from the index.\r\n   * @param  {Symbol} oid\r\n   * The record's object ID (NGN.DATA.Model#OID)\r\n   * @param  {any} [value=undefined]\r\n   * When specified, the field value will be used to identify\r\n   * the index value. Specifying this value will make the remove\r\n   * operation faster (uses introspection).\r\n   */\r\n  remove (oid, value, suppressEvent = false) {\r\n    // If a value is specified, attempt to lookup the OID by value.\r\n    if (value !== undefined) {\r\n      let index = this.recordsOf(value)\r\n\r\n      // If a value index is found, remove the OID\r\n      if (index) {\r\n        if (index.delete(oid)) { // Returns false if nothing is actually deleted.\r\n          if (this.isBTree && (!index || index.size === 0)) {\r\n            this.BTREE.delete(value instanceof Date ? value.getTime() : value)\r\n          }\r\n\r\n          this.emit(this.REMOVE_EVENT, oid, value, suppressEvent)\r\n\r\n          return\r\n        }\r\n      }\r\n\r\n      NGN.WARN(`Index value \"${value}\" not found in index.`)\r\n    }\r\n\r\n    // Iterate through all index values to remove the OID (slow)\r\n    let removed = false\r\n    for (let i = 0; i < this.knownRecords.length; i++) {\r\n      if (this.knownRecords[i].delete(oid) && !removed) {\r\n        removed = true\r\n        value = Array.from(this.uniqueValues.values())[i]\r\n\r\n        if (this.isBTree) {\r\n          this.BTREE.delete(value instanceof Date ? value.getTime() : value)\r\n        }\r\n\r\n        break\r\n      }\r\n    }\r\n\r\n    if (removed) {\r\n      this.emit(this.REMOVE_EVENT, oid, value, suppressEvent)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update an index to reflect an updated value.\r\n   * @param  {[type]} oid      [description]\r\n   * @param  {[type]} oldvalue [description]\r\n   * @param  {[type]} newvalue [description]\r\n   * @return {[type]}          [description]\r\n   */\r\n  update (oid, oldValue, newValue, suppressEvent = false) {\r\n    if (oldValue !== newValue) {\r\n      this.remove(oid, oldValue, true)\r\n      this.add(newValue, oid, true)\r\n      this.emit(this.UPDATE_EVENT, oid, null, suppressEvent)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Forcibly reset the index (clears everything).\r\n   */\r\n  reset () {\r\n    this.uniqueValues.clear()\r\n    this.knownRecords.splice(0)\r\n\r\n    if (this.isBTree) {\r\n      this.BTREE.reset()\r\n    }\r\n\r\n    this.emit('reset')\r\n  }\r\n\r\n  /**\r\n   * Retrieve the index number of known records for the\r\n   * specified value.\r\n   * @private\r\n   * @param  {any} value\r\n   * The unique value for which records are known.\r\n   * @return {[numeric]}\r\n   * The 0-based index of known records. Returns `-1` if no\r\n   * index exists.\r\n   */\r\n  indexOf (value) {\r\n    return Array.from(this.uniqueValues.keys()).indexOf(value)\r\n  }\r\n\r\n  /**\r\n   * The records of a particular value.\r\n   * @private\r\n   * @param  {any} value\r\n   * The index field value to use as a lookup.\r\n   * @return {Set}\r\n   * An set of object ID's or `null` if none exist.\r\n   */\r\n  recordsOf (value) {\r\n    let valueIndex = this.indexOf(value)\r\n\r\n    return valueIndex < 0 ? null : this.knownRecords[valueIndex]\r\n  }\r\n\r\n  /**\r\n   * Get the list of records for the given value.\r\n   * @param  {any} value\r\n   * The value of the index to lookup.\r\n   * @return {array}\r\n   * The array contains OID reference values (records).\r\n   */\r\n  recordsFor (value) {\r\n    let index = this.recordsOf(value)\r\n\r\n    if (index === null || index.size === 0) {\r\n      return []\r\n    }\r\n\r\n    return Array.from(index.values())\r\n  }\r\n}\r\n","import EventEmitter from '../../emitter/core'\r\n\r\n/**\r\n * @class NGN.DATA.JSONSchema\r\n * Represents a JSON Schema.\r\n * @fires parsed\r\n * Triggered when the schema is parsed.\r\n */\r\nexport default class NGNJSONSchema extends EventEmitter { // eslint-disable-line no-unused-vars\r\n  /**\r\n   * Create a new JSON schema reference.\r\n   * @param  {Object|String} [schema={}]\r\n   * The schema to parse. This can be the JSON schema object itself or the URL\r\n   * of a remote JSON schema.\r\n   * @param  {NGN.NET.Resource} [NetworkResource]\r\n   * Specify a custom network resource to make the request for a remote schema.\r\n   */\r\n  constructor (schema = {}, NetworkResource = null) {\r\n    super()\r\n\r\n    Object.defineProperties(this, {\r\n      METADATA: NGN.private({\r\n        schema,\r\n        ID: null,\r\n        name: null\r\n      }),\r\n\r\n      PRIVATE: NGN.privateconst({\r\n        MODELS: null,\r\n        NET: NGN.coalesce(NetworkResource, NGN.NET),\r\n\r\n        parsed: false,\r\n\r\n        /**\r\n         * @method PRIVATE.extractCommonPropertyAttributes\r\n         * @param  {object} property\r\n         * Schema metadata object.\r\n         * @param {array} [models=[]]\r\n         * The list of known models. This is passed in because nested objects\r\n         * may exist within a property. NGN identifies these as nested models,\r\n         * even though the JSON schema does not force these to be separate\r\n         * schemas.\r\n         * @return {Object}\r\n         * Returns a clean \"NGN-ready\" field object of common properties.\r\n         */\r\n        extractCommonPropertyAttributes: (property, models = []) => {\r\n          let field = {}\r\n\r\n          // Add pattern\r\n          if (property.pattern) {\r\n            field.pattern = property.pattern\r\n          }\r\n\r\n          // Add description\r\n          if (property.description) {\r\n            field.description = property.description\r\n          }\r\n\r\n          // Add default\r\n          if (property.default) {\r\n            field.default = property.default\r\n          }\r\n\r\n          if (!property.$ref) {\r\n            if (!property.type) {\r\n              field.type = String\r\n            } else {\r\n              let type = NGN.typeof(property.type) === 'array' ? 'array' : property.type.trim().toLowerCase()\r\n\r\n              switch (type) {\r\n                case 'string':\r\n                  let format = NGN.coalesce(property.format, 'unknown').trim().toLowerCase()\r\n\r\n                  field.type = String\r\n\r\n                  switch (format) {\r\n                    case 'date':\r\n                    case 'date-time':\r\n                    case 'datetime':\r\n                    case 'format-time':\r\n                      field.type = Date\r\n                      break\r\n\r\n                    case 'ipv4':\r\n                      field.pattern = NGN.coalesce(\r\n                        property.pattern,\r\n                        /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$|^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\\-]*[A-Za-z0-9])$|^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$/ // eslint-disable-line no-useless-escape\r\n                      )\r\n\r\n                      break\r\n\r\n                    case 'ipv6':\r\n                      field.pattern = NGN.coalesce(\r\n                        property.pattern,\r\n                        /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$|^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\\-]*[A-Za-z0-9])$|^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$/ // eslint-disable-line no-useless-escape\r\n                      )\r\n\r\n                      break\r\n\r\n                    case 'email':\r\n                      field.pattern = NGN.coalesce(\r\n                        property.pattern,\r\n                        /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+(?:[A-Z]{2}|com|org|net|gov|mil|biz|info|mobi|name|aero|jobs|museum)\\b$/\r\n                      )\r\n\r\n                      break\r\n\r\n                    case 'hostname':\r\n                      field.pattern = NGN.coalesce(\r\n                        property.pattern,\r\n                        /^([a-zA-Z0-9]+(-[a-zA-Z0-9]+)*)+(\\.([a-zA-Z0-9]+(-[a-zA-Z0-9‌​]+)*))*$/ // eslint-disable-line no-irregular-whitespace\r\n                      )\r\n\r\n                      break\r\n\r\n                    case 'uri':\r\n                      field.pattern = NGN.coalesce(\r\n                        property.pattern,\r\n                        /(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]\\.[^\\s]{2,})/\r\n                      )\r\n\r\n                      break\r\n                  }\r\n\r\n                  break\r\n\r\n                case 'integer':\r\n                  field.type = Number\r\n                  field.pattern = /^\\d+$/\r\n                  break\r\n\r\n                case 'number':\r\n                  field.type = Number\r\n                  break\r\n\r\n                case 'object':\r\n                  if (property.properties) {\r\n                    let subschema = new NGN.DATA.JSONSchema(property)\r\n\r\n                    subschema.name = `${NGN.coalesce(this.name, 'untitled')}_${NGN.coalesce(subschema.name, 'submodel')}${models.length + 1}`\r\n\r\n                    subschema.getModelDefinitions(definitions => {\r\n                      definitions[definitions.length - 1].name = subschema.name\r\n                      models = definitions.concat(models)\r\n                    })\r\n\r\n                    field = {\r\n                      $model: subschema.name\r\n                    }\r\n                  } else {\r\n                    field.type = Object\r\n                  }\r\n\r\n                  break\r\n\r\n                default:\r\n                  field.type = String\r\n                  break\r\n              }\r\n            }\r\n          }\r\n\r\n          // String validation options\r\n          if (field.type === String || field.type === Number) {\r\n            if (NGN.coalesce(property.minLength, property.minimum)) {\r\n              field.min = NGN.coalesce(property.minLength, property.minimum)\r\n            }\r\n\r\n            if (NGN.coalesce(property.maxLength, property.maximum)) {\r\n              field.max = NGN.coalesce(property.maxLength, property.maximum)\r\n            }\r\n\r\n            // Numeric-specific validations\r\n            if (property.type === Number) {\r\n              if (property.multipleOf) {\r\n                field.multipleOf = property.multipleOf\r\n              }\r\n\r\n              if (property.exclusiveMinimum) {\r\n                field.min = (property.exclusiveMinimum + 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)\r\n              }\r\n\r\n              if (property.exclusiveMaximum) {\r\n                field.max = (property.exclusiveMaximum - 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)\r\n              }\r\n            }\r\n          }\r\n\r\n          // Array validation options\r\n          if (field.type === Array) {\r\n            // Support minimum array length\r\n            if (property.hasOwnProperty('minItems')) {\r\n              field.min = property.minItems\r\n            }\r\n\r\n            // Support maximum array length\r\n            if (property.hasOwnProperty('maxItems')) {\r\n              field.max = property.maxItems\r\n            }\r\n\r\n            if (property.hasOwnProperty('items')) {\r\n              if (NGN.typeof(property.items) === 'array') {\r\n                // Apply tuple validation\r\n                field.tuples = property.items\r\n              } else {\r\n                // Apply list validation\r\n                if (property.items.hasOwnProperty('type')) {\r\n                  field.listType = NGN.getType(property.items.type)\r\n                }\r\n\r\n                if (property.items.hasOwnProperty('enum')) {\r\n                  field.enum = property.items.enum\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          return field\r\n        },\r\n\r\n        /**\r\n         * @method PRIVATE.extractModelDefinitions\r\n         * Retrieve all of the NGN.DATA.Model defitions that can be interpreted\r\n         * from this schema.\r\n         * @protected\r\n         * @private\r\n         * @param  {Object} data\r\n         * The schema object.\r\n         * @param  {Array} [models=[]]\r\n         * An array of known models. This method is used recursively, so this\r\n         * argument exists primarily for internal use.\r\n         * @param  {Function} callback\r\n         * Executed when all models have been detected.\r\n         */\r\n        extractModelDefinitions: (data, models = [], callback) => {\r\n          if (NGN.isFn(models)) {\r\n            callback = models\r\n            models = []\r\n          }\r\n\r\n          if (data.type === 'object') {\r\n            let name = NGN.coalesce(data.name, this.name, 'Untitled')\r\n\r\n            if (data.hasOwnProperty('$schema') && name === null && this.METADATA.URL) {\r\n              name = this.METADATA.URL.split(/\\/|\\\\/).pop().replace('.json', '')\r\n            }\r\n\r\n            // Configure the basic model\r\n            let model = {\r\n              name,\r\n              description: NGN.coalesce(data.description, 'No description.'),\r\n              fields: {}\r\n            }\r\n\r\n            // Flag the ID for the schema\r\n            if (data.hasOwnProperty('$schema')) {\r\n              this.METADATA.ID = NGN.coalesce(data.$id, data.$schema)\r\n            }\r\n\r\n            // Queue the tasks since several are async but sequential\r\n            let tasks = new NGN.Tasks()\r\n\r\n            // If the allOf attribute exists, the schema is extending another.\r\n            // Extract the subschema before continuing.\r\n            if (data.hasOwnProperty('allOf')) {\r\n              for (let i = 0; i < data.allOf.length; i++) {\r\n                tasks.add(`Identify base schema: ${data.allOf}`, cont => {\r\n                  let URI = NGN.coalesce(data.allOf[i].$ref, data.allOf[i].$schema)\r\n\r\n                  if (URI !== null) {\r\n                    // When a URI is specified, retrieve the remote schema\r\n                    let baseSchema = new NGN.DATA.JSONSchema(URI)\r\n\r\n                    baseSchema.getModelDefinitions(definitions => {\r\n                      let coreModel = definitions.pop()\r\n\r\n                      Object.assign(model.fields, coreModel.fields)\r\n\r\n                      // If the nested schema has additional models, apply them.\r\n                      if (definitions.length > 0) {\r\n                        models = definitions.concat(models)\r\n                      }\r\n\r\n                      this.METADATA.name = NGN.coalesce(this.METADATA.name, coreModel.name)\r\n\r\n                      cont()\r\n                    })\r\n                  } else if (data.allOf[i].hasOwnProperty('properties')) {\r\n                    // Handle additional properties\r\n                    let additionalProperties = Object.keys(data.allOf[i].properties)\r\n\r\n                    for (let prop = 0; prop < additionalProperties.length; prop++) {\r\n                      model.fields[additionalProperties[prop]] = this.extractCommonPropertyAttributes(data.allOf[i].properties[additionalProperties[prop]])\r\n                    }\r\n\r\n                    cont()\r\n                  }\r\n                })\r\n              }\r\n            }\r\n\r\n            tasks.add('Identify attributes', cont => {\r\n              // If the schema specifies dependencies, it is specifying a set of\r\n              // rules requiring the existance and non-empty value of additional\r\n              // fields. Create NGN.DATA.Rule sets to support this.\r\n              if (data.hasOwnProperty('dependencies')) {\r\n                Object.keys(data.dependencies).forEach(dependency => {\r\n                  let requiredFields = null\r\n                  let dep = data.dependencies[dependency]\r\n\r\n                  if (NGN.typeof(dep) === 'array') {\r\n                    // Simple property dependencies\r\n                    requiredFields = dep\r\n                  } else if (dep.hasOwnProperty('required')) {\r\n                    // Schema dependencies\r\n                    requiredFields = dep.required\r\n                  }\r\n\r\n                  // Add all valid dependencies as rules\r\n                  if (requiredFields !== null) {\r\n                    model.rules[`${dependency} dependency on \"${requiredFields.join(', ')}\"`] = function () {\r\n                      if (NGN.coalesce(this[dependency]) !== null) {\r\n                        for (let i = 0; i < requiredFields.length; i++) {\r\n                          if (NGN.coalesce(this[requiredFields[i]]) === null) {\r\n                            return false\r\n                          }\r\n                        }\r\n                      }\r\n\r\n                      return true\r\n                    }\r\n                  }\r\n                })\r\n              }\r\n\r\n              // Identify the fields\r\n              let properties = Object.keys(data.properties)\r\n              let subtasks = new NGN.Tasks()\r\n\r\n              if (properties.length > 0) {\r\n                for (let i = 0; i < properties.length; i++) {\r\n                  let propertyName = properties[i]\r\n                  let property = data.properties[propertyName]\r\n\r\n                  model.fields[propertyName] = this.PRIVATE.extractCommonPropertyAttributes(property, models)\r\n\r\n                  // If this is a subschema, retrieve it.\r\n                  if (property.$ref) {\r\n                    subtasks.add(next => {\r\n                      let nestedModel = new NGN.DATA.JSONSchema(property.$ref)\r\n\r\n                      nestedModel.getModelDefinitions(definitions => {\r\n                        models = definitions.concat(models)\r\n\r\n                        model.fields[propertyName] = {\r\n                          $model: definitions[definitions.length - 1].name\r\n                        }\r\n\r\n                        next()\r\n                      })\r\n                    })\r\n                  }\r\n\r\n                  model.fields[propertyName].required = NGN.coalesce(data.required, '').indexOf(propertyName) >= 0\r\n                }\r\n              }\r\n\r\n              subtasks.on('complete', () => {\r\n                models.push(model)\r\n                cont()\r\n              })\r\n\r\n              subtasks.run(true)\r\n            })\r\n\r\n            tasks.on('complete', () => callback(models))\r\n            tasks.run(true)\r\n          } else {\r\n            callback(models)\r\n          }\r\n        }\r\n      })\r\n    })\r\n\r\n    this.once('parsed', () => {\r\n      this.PRIVATE.parsed = true\r\n      this.METADATA.ID = NGN.coalesce(this.METADATA.schema.id, this.METADATA.schema.$schema)\r\n    })\r\n\r\n    // Initialize\r\n    switch (NGN.typeof(schema)) {\r\n      case 'string':\r\n        // If schema is actually a URL, retrieve it.\r\n        this.METADATA.URL = schema\r\n        this.PRIVATE.NET.json(schema, (err, schema) => {\r\n          if (err) {\r\n            throw err\r\n          }\r\n\r\n          this.METADATA.schema = schema\r\n          this.METADATA.name = NGN.coalesce(schema.name, this.METADATA.URL.split(/\\/|\\\\/).pop().replace('.json', ''))\r\n\r\n          this.emit('parsed')\r\n        })\r\n\r\n        break\r\n\r\n      case 'object':\r\n        this.METADATA.name = NGN.coalesce(schema.name, 'Untitled')\r\n        this.emit('parsed')\r\n        break\r\n\r\n      default:\r\n        throw new Error('Invalid schema definition.')\r\n    }\r\n  }\r\n\r\n  get id () {\r\n    if (this.METADATA.ID) {\r\n      return this.METADATA.ID\r\n    }\r\n\r\n    let id = NGN.coalesce(this.METADATA.URL)\r\n\r\n    if (id !== null) {\r\n      return id\r\n    }\r\n\r\n    let root\r\n    /* node-only */\r\n    root = NGN.coalesce(this.PRIVATE.NET.baseUrl, `http://${require('os').hostname()}`)\r\n    /* end-node-only */\r\n    /* browser-only */\r\n    root = NGN.coalesce(this.PRIVATE.NET.baseUrl, window.location.origin)\r\n    /* end-browser-only */\r\n\r\n    this.METADATA.ID = this.PRIVATE.NET.normalizeUrl(`${root}/${NGN.coalesce(this.name, 'untitled').toLowerCase()}.json`)\r\n\r\n    return this.METADATA.ID\r\n  }\r\n\r\n  get name () {\r\n    return this.METADATA.name\r\n  }\r\n\r\n  set name (value) {\r\n    this.METADATA.name = NGN.coalesce(value, 'Untitled')\r\n  }\r\n\r\n  getModelDefinitions (callback) {\r\n    if (!this.PRIVATE.parsed) {\r\n      this.once('parsed', () => {\r\n        this.getModelDefinitions(callback)\r\n      })\r\n    } else if (!this.PRIVATE.MODELS) {\r\n      this.PRIVATE.extractModelDefinitions(this.METADATA.schema, [], definitions => {\r\n        this.PRIVATE.MODELS = definitions\r\n        callback(definitions)\r\n      })\r\n    } else {\r\n      callback(this.PRIVATE.MODELS)\r\n    }\r\n  }\r\n}\r\n","import NGN from './core'\r\nimport EventEmitter from './emitter/core'\r\nimport * as Queue from './queue/core'\r\nimport * as Utility from './utility/core'\r\nimport * as Network from './net/core'\r\nimport * as Data from './data/core'\r\n\r\n// Add Event Emitter Class & Global Event Bus\r\nNGN.extend('EventEmitter', NGN.public(EventEmitter))\r\nNGN.extend('BUS', NGN.const(new NGN.EventEmitter()))\r\n\r\n// Add Queuing System\r\nNGN.extend('Task', NGN.const(Queue.Task))\r\nNGN.extend('Queue', NGN.const(Queue.Queue))\r\nNGN.extend('Tasks', NGN.deprecate(NGN.Queue, 'NGN.Tasks is now NGN.Queue'))\r\n\r\n// Add Networking\r\nNGN.extend('NET', NGN.const(Network.Library))\r\n\r\n// Add Utilities\r\nNGN.extend('UTILITY', NGN.const(Utility))\r\n\r\n// Add Data Library\r\nNGN.extend('DATA', NGN.const(Data))\r\n\r\nObject.defineProperty(NGN, 'version', {\r\n  enumerable: true,\r\n  writable: false,\r\n  configurable: false,\r\n  value: '[#REPLACE_VERSION#]'\r\n})\r\n","import EventEmitter from '../emitter/core'\r\n\r\n/**\r\n * @class NGN.Task\r\n * Represents a unit of work as a function. A task \"executes\"\r\n * when it's callback method is executed.\r\n * @fires start\r\n * Triggered when task execution begins. The task itself is provided\r\n * as an argument to the event handler.\r\n * @fires complete\r\n * Triggered when task execution finishes. The task itself is provided\r\n * as an argument to the event handler.\r\n * @fires skip\r\n * Triggered when task is skipped. The task itself is provided\r\n * as an argument to the event handler.\r\n * @fires timeout\r\n * Triggered when task execution time exceeds the specified timeout\r\n * limit. The task itself is provided as an argument to the event handler.\r\n */\r\nexport default class QueueItem extends EventEmitter {\r\n  constructor (config) {\r\n    config = config || {}\r\n\r\n    super(config)\r\n\r\n    Object.defineProperties(this, {\r\n      /**\r\n       * @cfg {string} name\r\n       * Descriptive name of the worker.\r\n       */\r\n      name: NGN.const(NGN.coalesce(config.name, 'Unknown')),\r\n\r\n      /**\r\n       * @cfg {function} callback\r\n       * The method to execute when the queue is ready.\r\n       */\r\n      callback: NGN.privateconst(config.callback),\r\n\r\n      /**\r\n       * @cfg {number} number\r\n       * The queue item number. This is used primarily as an ID.\r\n       */\r\n      number: NGN.const(parseInt(config.number, 10)),\r\n\r\n      timer: NGN.private(null),\r\n      _status: NGN.private(null),\r\n      bus: NGN.private(config.buz),\r\n      _skip: NGN.private(false)\r\n    })\r\n\r\n    this.on('timeout', () => {\r\n      this._status = 'timedout'\r\n    })\r\n\r\n    this.on('skip', () => {\r\n      this._status = 'skipped'\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @property {string} status\r\n   * May be `running`, `complete`, or `null` (not run yet)\r\n   */\r\n  get status () {\r\n    return this._status\r\n  }\r\n\r\n  /**\r\n   * @property {boolean} skipped\r\n   * `true` to skip the step, `false` to execute it.\r\n   */\r\n  get skipped () {\r\n    return this._skip\r\n  }\r\n\r\n  /**\r\n   * @method run\r\n   * Execute the callback function.\r\n   * @param {string} mode\r\n   * `dev` or `prod`. When in \"dev\" mode, verbose output is written\r\n   * to the console.\r\n   */\r\n  run (mode) {\r\n    if (this.skipped) {\r\n      this.emit('skip', this)\r\n\r\n      if (mode && mode === 'dev') {\r\n        NGN.WARN('SKIPPED ' + this.name)\r\n      }\r\n\r\n      return\r\n    }\r\n\r\n    this.emit('start', this)\r\n\r\n    if (mode && mode === 'dev') {\r\n      NGN.INFO('Executing ' + this.name + ':')\r\n    }\r\n\r\n    this._status = 'running'\r\n\r\n    const me = this\r\n    const scope = {\r\n      name: this.name,\r\n      number: this.number,\r\n      timeout: function (milliseconds) {\r\n        me.timer = setTimeout(function () {\r\n          me.emit('timeout', me)\r\n        }, milliseconds)\r\n      }\r\n    }\r\n\r\n    this.callback.apply(scope, [function () {\r\n      me._status = 'complete'\r\n      me.emit('complete', me)\r\n    }])\r\n\r\n    if (this.callback.length === 0) {\r\n      me._status = 'complete'\r\n      me.emit('complete', me)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method skip\r\n   * Skip this item\r\n   */\r\n  skip () {\r\n    if (this._status === 'running') {\r\n      NGN.WARN(`Cannot skip step: ${this.name} is currently running.`)\r\n    } else if (this._status === 'timedout') {\r\n      NGN.WARN(`Cannot skip step: ${this.name} timed out.`)\r\n    } else if (this._status === 'complete') {\r\n      NGN.WARN(`Cannot skip step: ${this.name} already completed.`)\r\n    }\r\n\r\n    this._skip = true\r\n  }\r\n}\r\n","import EventEmitter from '../emitter/core'\r\n\r\n/**\r\n * @class NGN.Queue\r\n * A job runner/collection capable of parallel and sequential task processing.\r\n * @fires complete\r\n * Triggered when the entire collection of tasks has completed\r\n * processing/running.\r\n * @fires aborted\r\n * Triggered when processing is aborted before completion.\r\n * @fires aborting\r\n * Triggered when the abort sequence begins.\r\n * @fires timeout\r\n * Triggered when processing times out.\r\n * @fires taskstart\r\n * Triggered whenever a new task is started. The NGN.Task is\r\n * the only argument delivered to event handlers.\r\n * @fires taskcomplete\r\n * Triggered whenever a task completes processing. The NGN.Task is\r\n * the only argument delivered to event handlers.\r\n * @fires taskcreate\r\n * Triggered when a new NGN.Task is added to the queue. The NGN.Task is\r\n * the only argument delivered to event handlers.\r\n * @fires taskremove\r\n * Triggered when a NGN.Task is removed from the queue. The NGN.Task is\r\n * the only argument delivered to event handlers.\r\n * @fires tasktimeout\r\n * Triggered when an NGN.Task times out during processing. The NGN.Task is\r\n * the only argument delivered to event handlers.\r\n */\r\nexport default class Queue extends EventEmitter {\r\n  /**\r\n   * @constructor\r\n   * @param {string} [mode=production]\r\n   * Set this to `dev` for verbose console output.\r\n   */\r\n  constructor (mode = 'production') {\r\n    super()\r\n\r\n    Object.defineProperties(this, {\r\n      steps: NGN.private([]),\r\n      completed: NGN.private(0),\r\n      timeout: NGN.private(null),\r\n      _mode: NGN.private(mode),\r\n      _cancel: NGN.private(false),\r\n      processing: NGN.private(false),\r\n      timer: NGN.private(null),\r\n      sequential: NGN.private(false)\r\n    })\r\n\r\n    this.on('taskcomplete', (step) => {\r\n      // Disallow duplicates\r\n      if (this.sequential || step.status === 'completed') {\r\n        return\r\n      }\r\n\r\n      step._status = 'complete'\r\n\r\n      // When the step is done, tally it\r\n      this.completed++\r\n\r\n      if (this.mode === 'dev') {\r\n        NGN.INFO(step.name + ' completed.')\r\n      }\r\n\r\n      // If all of the queries have been tallied, we're done.\r\n      if (this.completed === this.steps.length) {\r\n        this.processing = false\r\n\r\n        Object.keys(this.steps).forEach((step) => {\r\n          clearTimeout(this.steps[step].timer)\r\n        })\r\n\r\n        this.emit('complete')\r\n      }\r\n    })\r\n\r\n    this.on('aborting', () => {\r\n      this._cancel = true\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @property {Array} list\r\n   * A list of tasks within the collection. This is an array of\r\n   * objects, where each object contains the `id`, `name`, and\r\n   * `status` of the task.\r\n   *\r\n   * ```js\r\n   * {\r\n   *   id: <Number>,\r\n   *   name: <String>,\r\n   *   status: <String>\r\n   * }\r\n   * ```\r\n   */\r\n  get list () {\r\n    return this.steps.map(function (s) {\r\n      return {\r\n        id: s.number,\r\n        name: s.name,\r\n        status: s.status\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @property {string} mode\r\n   * The type of processing (dev, production, etc). Setting this to\r\n   * `dev` enables verbose logging.\r\n   */\r\n  get mode () {\r\n    return this._mode\r\n  }\r\n\r\n  set mode (value) {\r\n    if (value.toLowerCase().substr(0, 3) === 'dev') {\r\n      this._mode = 'dev'\r\n    } else {\r\n      this._mode = 'production'\r\n    }\r\n  }\r\n\r\n  get cancelled () {\r\n    return this._cancel\r\n  }\r\n\r\n  onTimeout () {\r\n    let log = []\r\n\r\n    if (this.steps.length > 0) {\r\n      this.steps.forEach((s) => {\r\n        log.push(s.name, s.status === null ? 'NOT STARTED' : s.status)\r\n      })\r\n    }\r\n\r\n    this.emit('timeout', {\r\n      process: log\r\n    })\r\n\r\n    log = null\r\n  }\r\n\r\n  /**\r\n   * @method add\r\n   * Add a task to the list.\r\n   * @param {string} [name]\r\n   * A descriptive name for the queued process/task.\r\n   * @param {function} callback\r\n   * The function to queue.\r\n   * @param {function} callback.next\r\n   * This argument allows users to explicitly use asynchronous\r\n   * methods. Example:\r\n   *\r\n   * ```\r\n   * let tasks = new NGN.Tasks()\r\n   *\r\n   * tasks.add('Descriptive Title', function (next) {\r\n   *   myAsyncMethod(function () {\r\n   *     console.log('Ran something async.')\r\n   *     next()\r\n   *   })\r\n   * })\r\n   * @returns {NGN.Task}\r\n   * Returns the task object added to the queue.\r\n   */\r\n  add (name, fn) {\r\n    if (this.processing) {\r\n      return NGN.WARN('Cannot add a step while processing.')\r\n    }\r\n\r\n    if (typeof name === 'function') {\r\n      fn = name\r\n      name = 'Step ' + (parseInt(this.steps.length) + 1)\r\n    }\r\n\r\n    if (typeof fn !== 'function') {\r\n      throw new Error('No processing method defined for step ' + (parseInt(this.steps.length) + 1) + '.')\r\n    }\r\n\r\n    const queue = new NGN.Task({\r\n      name: name,\r\n      callback: fn,\r\n      number: (this.steps.length > 0 ? this.steps[this.steps.length - 1].number : 0) + 1\r\n    })\r\n\r\n    queue.on('complete', (step) => this.emit('taskcomplete', step))\r\n\r\n    queue.on('timeout', (step) => {\r\n      if (step.status === 'running' || step.status === 'timedout') {\r\n        this.emit('tasktimeout', step)\r\n      }\r\n    })\r\n\r\n    this.steps.push(queue)\r\n    this.emit('taskcreate', queue)\r\n\r\n    return queue\r\n  }\r\n\r\n  /**\r\n   * @method getAt\r\n   * @param  {number} index\r\n   * Retrieve a queue item by it's index/queue number.\r\n   * @return {Queue}\r\n   */\r\n  getAt (index) {\r\n    return this.steps[index]\r\n  }\r\n\r\n  /**\r\n   * @method get\r\n   * Retrieve a specific queue item.\r\n   * @param  {string} requestedStepTitle\r\n   * The descriptie name of the queue item to retrieve.\r\n   * @return {Queue}\r\n   */\r\n  get (requestedStep) {\r\n    // Get by Name\r\n    let element = this.steps.filter((step) => {\r\n      return step.name === requestedStep\r\n    })\r\n\r\n    if (element.length === 1) {\r\n      return element[0]\r\n    }\r\n\r\n    // Get by index\r\n    element = this.steps.filter((step) => {\r\n      return step.number === requestedStep\r\n    })\r\n\r\n    if (element.length === 1) {\r\n      return element[0]\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method remove\r\n   * Remove a queue item by name or number.\r\n   * @param  {string} requestedStepTitle\r\n   * The descriptive name of the queue item to retrieve.\r\n   * @return {Queue}\r\n   * Returns the item that was removed.\r\n   */\r\n  remove (requestedStep) {\r\n    if (this.processing) {\r\n      return NGN.WARN('Cannot add a step while processing.')\r\n    }\r\n\r\n    // Remove by name\r\n    let element = this.steps.filter((step) => {\r\n      return step.name === requestedStep\r\n    })\r\n\r\n    if (element.length === 1) {\r\n      this.steps = this.steps.filter((step) => {\r\n        return step.name !== requestedStep\r\n      })\r\n\r\n      this.emit('taskremove', element[0])\r\n      return element[0]\r\n    }\r\n\r\n    // Remove by ID\r\n    element = this.steps.filter((step) => {\r\n      return step.number === requestedStep\r\n    })\r\n\r\n    if (element.length === 1) {\r\n      this.steps = this.steps.filter((step) => {\r\n        return step.number !== requestedStep\r\n      })\r\n\r\n      this.emit('taskremove', element[0])\r\n      return element[0]\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method removeAt\r\n   * Removes a queue item from the specific index.\r\n   * @param  {number} requestedStepIndex\r\n   * The queue index/number.\r\n   * @return {Queue}\r\n   * Returns the item that was removed.\r\n   */\r\n  removeAt (requestedStep) {\r\n    if (this.processing) {\r\n      return NGN.WARN('Cannot add a step while processing.')\r\n    }\r\n\r\n    // Remove by index\r\n    if (typeof requestedStep !== 'number') {\r\n      return console.error('Failed to remove step: ' + requestedStep)\r\n    }\r\n\r\n    if (requestedStep < 0 || requestedStep >= this.steps.length) {\r\n      return console.error('Step index ' + requestedStep + ' could not be found or does not exist.')\r\n    }\r\n\r\n    return this.steps.splice(requestedStep, 1)[0]\r\n  }\r\n\r\n  /**\r\n   * @method reset\r\n   * Resets all cancelled/skipped steps, essentially resetting the queue\r\n   * to it's pre-aborted state.\r\n   */\r\n  reset () {\r\n    if (this.processing) {\r\n      return NGN.WARN('Cannot reset a running queue. Abort or wait for the process to complete before resetting.')\r\n    }\r\n\r\n    // Refresh cancelled steps\r\n    this.steps.forEach((step) => {\r\n      step._skip = false\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @method process\r\n   * Run the queued processes in order.\r\n   * @param {boolean} [sequential=false]\r\n   * Set to `true` to run the queue items in a synchronous-like manner.\r\n   * This will execute each method one after the other. Each method must\r\n   * complete before the next is started.\r\n   */\r\n  process (sequential = false) {\r\n    if (this.processing) {\r\n      return NGN.WARN('Cannot start processing (already running). Please wait for this process to complete before calling process() again.')\r\n    }\r\n\r\n    if (this.steps.length === 0) {\r\n      return this.emit('complete')\r\n    }\r\n\r\n    this.processing = true\r\n    this._cancel = false\r\n\r\n    if (this.timeout !== null) {\r\n      this.timer = setTimeout(() => this.onTimeout(), this.timeout)\r\n    }\r\n\r\n    this.sequential = typeof sequential === 'boolean' ? sequential : false\r\n    if (!this.sequential) {\r\n      for (let i = 0; i < this.steps.length; i++) {\r\n        this.steps[i].run(this.mode)\r\n      }\r\n    } else {\r\n      let queue = this.steps\r\n      let listener = new NGN.EventEmitter()\r\n\r\n      listener.on('taskcomplete', () => {\r\n        if (queue.length > 0) {\r\n          const currentTask = queue.shift()\r\n\r\n          if (currentTask.skipped) {\r\n            return listener.emit('taskcomplete')\r\n          }\r\n\r\n          currentTask.on('complete', () => listener.emit('taskcomplete'))\r\n          currentTask.on('start', () => this.emit('taskstart', currentTask))\r\n\r\n          currentTask.run(this.mode)\r\n        } else {\r\n          this.emit('complete')\r\n        }\r\n      })\r\n\r\n      let currentStep = queue.shift()\r\n\r\n      currentStep.on('complete', () => listener.emit('taskcomplete'))\r\n      currentStep.on('start', () => this.emit('taskstart', currentStep))\r\n\r\n      currentStep.run(this.mode)\r\n    }\r\n  }\r\n\r\n  // Alias for process\r\n  run () {\r\n    this.process(...arguments)\r\n  }\r\n\r\n  /**\r\n   * @method abort\r\n   * Abort/cancel processing. This prevents further steps from processing.\r\n   */\r\n  abort () {\r\n    this.emit('aborting')\r\n\r\n    // Make sure the steps are skipped.\r\n    this.each((step) => {\r\n      if (['completed', 'running', 'timedout'].indexOf(step.status) < 0 && !step.skipped) {\r\n        step.skip()\r\n      }\r\n    })\r\n\r\n    this.once('complete', () => this.emit('aborted'))\r\n  }\r\n\r\n  /**\r\n   * @method each\r\n   * Apply a method to each step.\r\n   * @param {function} method\r\n   * @private\r\n   */\r\n  each (fn) {\r\n    for (let i = 0; i < this.steps.length; i++) {\r\n      fn(this.steps[i])\r\n    }\r\n  }\r\n\r\n  // Alias for abort\r\n  cancel () {\r\n    this.abort(...arguments)\r\n  }\r\n}\r\n"],"names":["CustomException","Error","[object Object]","config","super","Object","defineProperty","this","NGN","privateconst","frame","nodelike","getFileName","__filename","message","custom","me","name","type","severity","category","replace","attr","hasOwnProperty","prepareStackTrace","_","stack","_err","captureStackTrace","rawstack","err","cause","console","warn","help","info","filter","frameFilter","map","el","join","trace","filename","line","getLineNumber","column","getColumnNumber","functionname","getFunctionName","native","isNative","eval","isEval","getTypeName","EEmitter","defineProperties","global","window","e","define","enumerable","writable","configurable","value","public","private","const","get","fn","set","getset","getterFn","setterFn","LEDGER_EVENT","EVENT","BUS","emit","arguments","extend","attribute","descriptor","inherit","source","dest","prototype","getOwnPropertyNames","forEach","definition","getOwnPropertyDescriptor","getPrototypeOf","trim","toLowerCase","undefined","apply","slice","obj","Array","call","splice","nullIf","sourceExpression","comparisonExpression","nullif","converge","length","arg","coalesce","coalesceb","process","dedupe","array","matches","i","indexOf","push","typeof","toString","split","forceArray","forceBoolean","forceNumber","radix","getTime","parseInt","parseFloat","NaN","ERROR","processStackItem","item","uri","fnRegex","operation","exec","path","cwd","file","substr","location","origin","reverse","isFn","v","wrap","preFn","wrapClass","ClassFn","deprecate","WARN","deprecateClass","classFn","needs","missing","getObjectMissingPropertyNames","MissingNgnDependencyError","properties","keys","getObjectExtraneousPropertyNames","index","objectHasAll","objectHasAny","objectHasExactly","args","shift","objectRequires","check","constructor","createAlias","namespace","WARNING_EVENT","Symbol","msg","INFO_EVENT","for","INFO","ERROR_EVENT","createException","getType","defaultType","Number","RegExp","Boolean","Date","Function","String","cfg","handlers","adhoc","maxlisteners","defaultMaxListeners","subscribers","subscriberList","eventName","handler","concat","callback","pool","unshift","listenerCount","handlerFn","deleteEventHandler","scope","result","events","getAllEvents","event","adhocEvent","pop","regularEvents","adhocEvents","allEvents","test","EventEmitter","META","queued","collectionQueue","thresholdQueue","defaultTTL","wildcardEvents","Set","setTTL","ttl","off","l","listeners","clear","wrappedHandlerFn","wrapEventHandlerWithScope","delete","removeListener","deprecatedEventName","replacementEventName","on","prefix","group","topic","increaseMaxListeners","attach","preventDefaultAction","preventDefault","count","setMaxListeners","getMaxListeners","decreaseMaxListeners","forward","triggers","payload","listener","remove","relay","targetEmitter","postfix","eventNameList","relayOnce","once","delayEmit","delay","setTimeout","getInternalCollectionId","collection","handleCollectionTrigger","key","cq","remainingqueue","size","masterqueue","funnel","eventCollection","triggerEventName","funnelOnce","funnelClosureEvent","threshold","thresholdEventName","limit","finalEventName","handleThresholdTrigger","thresholdOnce","thresholdClosureEvent","applyScope","symbolEvents","getOwnPropertySymbols","_events","removeAllListeners","prepend","add","eventHandler","prependListener","addListener","prependOnceListener","eventNames","iterator","values","currentEvent","done","next","statement","tokens","rules","state","reject","lastLineIndex","currentLength","currentMatch","row","unrecognizedCharacters","addRule","input","lines","unrecognized","currentLine","currentColumn","col","pattern","action","start","flags","multiline","ignoreCase","actionFn","actionString","charAt","scan","match","token","unexpected","lastIndex","rule","states","j","k","temple","str","grammar","PROTECTED","lexer","UTILITY","Lexer","activeText","orderedList","text","orderedTokenList","from","detail","ignoreXOF","assign","mainset","subset","elements","element","has","aggregate","setA","setB","intersection","a","b","diff","difference","equal","isSuperSet","equals","hostname","host","normalizeUrl","url","protocol","queryString","params","keypair","param","encodeURIComponent","networkInterfaces","HttpMethods","Request","UrlPattern","httpmethod","enforceMethodSafety","enforcemethodsafety","headers","requestbody","body","user","username","secret","password","bearerAccessToken","accessToken","withCredentials","timeout","timer","isCrossOrigin","applyAuthorizationHeader","setHeader","basicAuthToken","btoa","parseUri","part","query","hash","credentials","port","uriParts","maximumRedirects","redirectAttempts","prepareBody","contentType","form","dataString","JSON","stringify","maxRedirects","method","queryParameters","resultSet","setQueryParameter","loc","href","pathname","substring","lastIndexOf","toUpperCase","crossOriginRequest","overwriteExisting","re","clearTimeout","xhr","XMLHttpRequest","responded","onreadystatechange","readyState","DONE","status","onerror","ontimeout","open","setRequestHeader","send","Network","parseRequestConfiguration","NET","makeRequest","request","OPTIONS","options","bind","HEAD","head","GET","POST","post","PUT","put","DELETE","TRACE","json","JSONP","jsonp","preflight","response","responseData","parse","responseText","Math","round","random","data","document","removeChild","script","createElement","src","addEventListener","appendChild","Resource","globalHeaders","globalCredentials","accesstoken","globalQuery","baseUrl","baseurl","nocache","sslonly","ssecret","prepareUrl","qp","gHeaders","Library","ObjectDiff","lhs","rhs","differences","ltype","log","relativePath","compare","compareArray","array1","array2","len1","len2","index1","val1","index2","val2","context","value1","value2","hash1","hash2","objectHash","hashCache1","hashCache2","matchByPosition","x","y","matrix","max","sequence","indices1","indices2","subsequence","backtrack","lengthMatrix","defaultMatch","crcTable","makeCRCTable","c","n","Utility","serialize","crc","charCodeAt","crypto","getRandomValues","Uint8Array","lut","d0","d1","d2","d3","SERIALIZED_ARRAY_DATA","DATA","UTIL","toISOString","mapResult","Model","currentElement","Entity","TreeNode","parent","leafs","nodes","METADATA","order","minOrder","firstNumber","secondNumber","leaf","search","node","overwrite","TreeLeaf","left","balance","Tree","root","sep","rest","right","subst","floor","unsplit","includeNodes","s","BTREE","minKey","maxKey","ptr","walk","NGNDataValidationRule","validation","RULE","validator","NGNDataField","default","EMPTYDATA","required","hidden","fieldType","identifier","isIdentifier","autocorrectInput","description","sourceName","lastValue","dataType","validators","violatedRule","allowInvalid","TRANSFORM","transformer","RAWDATAPLACEHOLDER","RAW","ENUMERABLE_VALUES","REVERSE_ENUMERABLE_VALUES","IS_NEW","EVENTS","AUDITABLE","audit","AUDITLOG","TransactionLog","auditMaxEntries","model","setValue","suppressEvents","ignoreAudit","autoCorrectValue","change","field","old","new","priorValueIsValid","valid","reason","virtual","cursor","commit","commitPayload","Rule","nonempty","range","min","minimum","maximum","RangeRule","multipleOf","abs","unique","listType","enum","tuples","enumeration","not","notin","typeList","auditable","originallyHidden","currentlyHidden","isNew","autoid","silentValue","modified","changelog","id","rollback","getCommit","advance","valueType","dt","setTime","util","maxEntryCount","transaction","changeOrder","currentValue","cursorIndex","flush","removedId","timestamp","position","removedEntries","currentPosition","entry","activeCursor","prepareRange","isString","addRange","DataField","caching","cache","virtualMethod","CACHEKEY","cachedValue","localFieldPattern","monitoredFields","content","knownFieldNames","update","create","InvalidConfigurationError","applyMonitor","manner","commonModelEventHandler","invalid","originalEvent","record","commonStoreEventHandler","Store","undo","redo","originalSource","sourceMap","reverseMap","applyData","inverse","load","dataMap","fieldmap","idAttribute","IdentificationField","OID","fields","invalidFieldNames","auditFieldNames","idField","expiration","expirationTimeout","created","now","store","AUDIT_HANDLER","getAuditMap","applyField","fieldcfg","ReservedWordError","Field","Relationship","VirtualField","applyChange","fieldname","setSilent","setSilentFieldValue","DATAMAP","MAP","FieldMap","autoIdValue","UUID","checksum","expires","ID","createDate","applyInverseMap","serializeFields","unmappedData","representation","unmappedRepresentation","isNaN","expired","fieldDefinitions","ignoreID","ignoreVirtualFields","IdentificationValue","fieldConfiguration","PRIVATE","DELETE_RECORD_FIELD","applyMap","cycle","getRecordSibling","btree","CREATE_EVENT","REMOVE_EVENT","UPDATE_EVENT","uniqueValues","knownRecords","isBTree","oid","suppressEvent","recordsFor","BTree","valueIndex","btreeValue","recordsOf","removed","oldValue","newValue","reset","isDataModel","records","allowDuplicates","errorOnDuplicate","errorOnInvalid","autoRemoveExpiredRecords","softDelete","softDeleteTtl","fifo","FIFO","lifo","LIFO","maxRecords","minRecords","autocompact","FIRSTRECORDINDEX","LASTRECORDINDEX","INDEX","STUB","delta","CREATE_RECORD","INDEXFIELDS","DELETE_RECORD","LOAD_RECORDS","RECORDMAP","Map","ACTIVERECORDMAP","FILTEREDRECORDMAP","checkModelIndexField","metaconfig","CONFIGURATION","getModelFieldType","addRecord","convertStubToRecord","newRecord","metadata","ACTIVERECORDS","FILTEREDRECORDS","freeze","createIndex","DELETECOUNT","compact","snapshots","snapshotarchive","history","recordCount","first","last","recordList","rec","defaults","applicableData","indexedFieldNames","removedRecord","activeIndex","examinedRecord","totalSize","Index","removeIndex","currentRecord","ActiveRecords","currentIndex","findIndex","purge","ARCHIVE","newModel","dataset","GUID","modelChecksums","insertableData","time","NGNDuplicateRecordError","newRecordCount","ranges","currentRange","empty","schema","NetworkResource","MODELS","parsed","extractCommonPropertyAttributes","property","models","$ref","format","subschema","JSONSchema","getModelDefinitions","definitions","$model","minLength","maxLength","exclusiveMinimum","exclusiveMaximum","minItems","maxItems","items","extractModelDefinitions","URL","$id","$schema","tasks","Tasks","allOf","cont","URI","coreModel","additionalProperties","prop","dependencies","dependency","requiredFields","dep","subtasks","propertyName","run","number","_status","bus","buz","_skip","skipped","mode","milliseconds","steps","completed","_mode","_cancel","processing","sequential","step","list","cancelled","queue","Task","requestedStep","error","onTimeout","currentTask","currentStep","each","skip","abort","Queue","Network.Library","Data"],"mappings":"+BAAqBA,UAAwBC,MAC3CC,YAAaC,GACXC,QAEAC,OAAOC,eAAeC,KAAM,cAAeC,IAAIC,aAAcC,GACpDF,IAAIG,SACPD,EAAME,gBAAkBC,YAAcH,EAAME,cAC5CF,EAAME,iBAIZT,EAA2B,iBAD3BA,EAASA,QAC+BW,QAASX,GAAWA,GACrDY,OAASZ,EAAOY,WAEvB,IAAIC,EAAKT,KAETA,KAAKU,KAAOd,EAAOc,MAAQ,WAC3BV,KAAKW,KAAOf,EAAOe,MAAQ,YAC3BX,KAAKY,SAAWhB,EAAOgB,UAAY,QACnCZ,KAAKO,QAAUX,EAAOW,SAAW,gBACjCP,KAAKa,SAAWjB,EAAOiB,UAAY,cAGnCb,KAAKU,KAAOV,KAAKU,KAAKI,QAAQ,kBAAmB,IAGjD,IAAK,IAAIC,KAAQnB,EAAOY,OAClBZ,EAAOY,OAAOQ,eAAeD,KAC/Bf,KAAKe,GAAQnB,EAAOY,OAAOO,IAM/B,GAFAf,KAAKgB,eAAe,kBAAoBhB,KAAKQ,OAEzCP,IAAIG,UAAYV,MAAMuB,kBAAmB,CAE3CvB,MAAMuB,kBAAoB,SAAUC,EAAGC,GAAS,OAAOA,GAEvD,IAAIC,EAAO,IAAI1B,MAEfA,MAAM2B,kBAAkBD,EAAMpB,MAE9BA,KAAKsB,SAAWF,EAAKD,MAErBzB,MAAMuB,kBAAoB,SAAUM,EAAKJ,GAIvC,OAHAV,EAAGe,OAASC,QAAQC,KAAKjB,EAAGe,OAC5Bf,EAAGkB,MAAQF,QAAQG,KAAKnB,EAAGkB,SAEjBlB,EAAGC,SAASD,EAAGF,YAAcY,EAAMU,OAAOpB,EAAGqB,aAAaC,IAAKC,aACtDA,KAChBC,KAAK,OAIVvC,MAAM2B,kBAAkBrB,OAsB5BkC,YACE,OAAOlC,KAAKsB,SAASO,OAAO7B,KAAK8B,aAAaC,IAAK5B,KAE/CgC,SAAUhC,EAAME,cAChB+B,KAAMjC,EAAMkC,gBACZC,OAAQnC,EAAMoC,kBACdC,aAAcrC,EAAMsC,kBACpBC,OAAQvC,EAAMwC,WACdC,KAAMzC,EAAM0C,SACZlC,KAAMR,EAAM2C,kBChFpB,ICCIC,EDDA9C,EAAMH,OAAOkD,kBAEfC,aACE,IAAM,OAAOC,OAAS,MAAOC,GAAK,OAAOF,WAgC3CG,QACEC,YAAY,EACZC,UAAU,EACVC,cAAc,EACdC,MAAO,SAAUH,EAAYC,EAAUC,EAAcC,GACnD,OACEH,WAAAA,EACAC,SAAAA,EACAC,aAAAA,EACAC,MAAAA,OAMR1D,OAAOkD,iBAAiB/C,GAsBtBwD,OAAQxD,EAAImD,QAAO,GAAO,GAAO,EAAO,SAAUI,GAChD,OAAOvD,EAAImD,QAAO,EAAuB,mBAAVI,GAAsB,EAAOA,KAwB9DE,QAASzD,EAAImD,QAAO,GAAO,GAAO,EAAO,SAAUI,GACjD,OAAOvD,EAAImD,QAAO,EAAwB,mBAAVI,GAAsB,EAAOA,KAwB/DG,MAAO1D,EAAImD,QAAO,GAAO,GAAO,EAAO,SAAUI,GAC/C,OAAOvD,EAAImD,QAAO,GAAM,GAAO,EAAOI,KAwBxCtD,aAAcD,EAAImD,QAAO,GAAO,GAAO,EAAO,SAAUI,GACtD,OAAOvD,EAAImD,QAAO,GAAO,GAAO,EAAOI,KA2BzCI,IAAK3D,EAAImD,QAAO,GAAO,GAAO,EAAO,SAAUS,GAC7C,OACER,YAAY,EACZO,IAAKC,KA4BTC,IAAK7D,EAAImD,QAAO,GAAO,GAAO,EAAO,SAAUS,GAC7C,OACER,YAAY,EACZS,IAAKD,KAcTE,OAAQ9D,EAAImD,QAAO,GAAO,GAAO,EAAO,CAACY,EAAUC,MAE/CZ,YAAY,EACZO,IAAKI,EACLF,IAAKG,KAITC,aAAcjE,EAAImD,QAAO,GAAO,GAAO,EAAQe,IACtC,WACLlE,EAAImE,IAAIC,KAAKF,KAAUG,gBAK7BxE,OAAOkD,iBAAiB/C,GAgDtBsE,OAAQtE,EAAIC,aAAa,SAAUsE,EAAWC,GAEnB,iBAAdD,EACT1E,OAAOkD,iBAAiBhD,KAAMwE,GAE9B1E,OAAOC,eAAeC,KAAMwE,EAAWC,KAY3CC,QAASzE,EAAI0D,MAAM,SAAUgB,EAAS,KAAMC,EAAO,MACjD,GAAID,GAAUC,EAAM,CAClBD,EAA2B,mBAAXA,EAAwBA,EAAOE,UAAYF,EAC3DC,EAAuB,mBAATA,EAAsBA,EAAKC,UAAYD,EAErD9E,OAAOgF,oBAAoBH,GAAQI,QAAQ,SAAUhE,GACnD,MAAMiE,EAAalF,OAAOmF,yBAAyBN,EAAQ5D,GAC3DjB,OAAOC,eAAe6E,EAAM7D,EAAMiE,KAGlBlF,OAAOgF,oBAAoBhF,OAAOoF,eAAeP,IAAS9C,OAAQd,GAC7C,gBAA9BA,EAAKoE,OAAOC,gBAAoCR,EAAK5D,eAAeD,IAGnEgE,QAAShE,SAGLsE,IAFAvF,OAAOmF,yBAAyBN,EAAQ5D,IAEH,mBAAjB4D,EAAO5D,IACrCjB,OAAOC,eAAe6E,EAAM7D,EAAMd,EAAIwD,OAAO,WAC3C,OAAOkB,EAAO5D,GAAMuE,MAAMtF,KAAMsE,mBAsB1CiB,MAAOtF,EAAIyD,QAAQ,SAAU8B,GAC3B,OAAOC,MAAMZ,UAAUU,MAAMG,KAAKF,KAkBpCG,OAAQ1F,EAAIyD,QAAQ,SAAU8B,GAC5B,OAAOC,MAAMZ,UAAUc,OAAOD,KAAKF,KAyBrCI,OAAQ3F,EAAIwD,OAAO,SAAUoC,EAAkBC,EAAuB,IACpE,IAGE,GAAID,IAAqBC,EAAsB,CAE7C,UAAWD,UAA4BC,EACrC,OAAOD,EAGT,GAAgC,iBAArBA,GACLA,EAAiBV,SAAWW,EAAqBX,OACnD,OAAOU,EAKb,OAAO,KACP,MAAO1C,GACP,OAAO,QAKX4C,OAAQ9F,EAAIwD,OAAO,WACjB,OAAOzD,KAAK4F,UAAUtB,aASxB0B,SAAU/F,EAAIyD,QAAQ,WACpB,GAAIY,UAAU2B,OAAS,EACrB,OAAO,KACF,GAAyB,IAArB3B,UAAU2B,OACnB,YAAqBZ,IAAjBf,UAAU,GACL,KACEA,UAAU,GACZrE,EAAI2F,OAAOtB,UAAU,IAErBA,UAAU,GAIrB,IAAK,IAAI4B,EAAM,EAAGA,EAAM5B,UAAU2B,OAAQC,IAExC,QAAuBb,IAAnBf,UAAU4B,IAGN,QADJ5B,UAAU,GAAKrE,EAAI2F,OAAOtB,UAAU4B,IAAQ5B,UAAU4B,UAGjCb,IAAnBf,UAAU4B,GACZ,OAAO5B,UAAU4B,GAMvB,OAAO,OAaTC,SAAUlG,EAAIwD,OAAO,WACnB,OAAOxD,EAAI+F,UAAS,KAAU1B,aAUhC8B,UAAWnG,EAAIwD,OAAO,WACpB,OAAOxD,EAAI+F,UAAS,KAAS1B,aAU/BlE,SAAUH,EAAI0D,WAA6B0B,IAAvBpF,EAAIgD,OAAOoD,SAW/BC,OAAQrG,EAAI0D,MAAO4C,IACjB,IAAIC,KAGJ,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAMN,OAAQQ,IAC5BF,EAAMG,QAAQH,EAAME,MAAQA,GAC9BD,EAAQG,KAAKJ,EAAME,IAMvB,OAFAF,EAAQ,KAEDC,IAWTI,OAAQ3G,EAAI0D,MAAO3B,IACjB,QAAWqD,IAAPrD,EACF,MAAO,YACF,GAAW,OAAPA,EACT,MAAO,OAGT,IAAIwB,EAAQ1D,OAAO+E,UAAUgC,SAASnB,KAAK1D,GAAI8E,MAAM,KAAK,GAAGhG,QAAQ,cAAe,IAAIsE,cAExF,GAAc,aAAV5B,EAAsB,CACxB,IAAKxB,EAAGtB,KACN,OAAOT,EAAImG,UAAUpE,EAAG6E,WAAW/F,QAAQ,OAAQ,IAAIA,QAAQ,uBAAwB,IAAIsE,cAAe,YAE1G5B,EAAQvD,EAAImG,UAAUpE,EAAGtB,KAAM,YAInC,OAAO8C,EAAM4B,gBAkBf2B,WAAY9G,EAAI0D,MAAOH,GACP,OAAVA,KAIyB,UAAtBvD,EAAI2G,OAAOpD,GAAqBA,GAASA,IAwBlDwD,aAAc/G,EAAI0D,MAAOH,IACvB,OAAQvD,EAAI2G,OAAOpD,IACjB,IAAK,UACH,OAAOA,EAET,IAAK,SACH,OAAiB,IAAVA,EAET,IAAK,SAGH,MAAc,WAFdA,EAAQA,EAAM2B,OAAOC,eAQvB,QACE,OAAgC,OAAzBnF,EAAImG,UAAU5C,MAsC3ByD,YAAahH,EAAI0D,MAAM,CAACH,EAAO0D,EAAQ,QACrC,IACE,OAAQjH,EAAI2G,OAAOpD,IACjB,IAAK,UACH,OAAOA,EAAQ,EAAI,EAErB,IAAK,SACH,OAAOA,EAET,IAAK,OACH,OAAOA,EAAM2D,UAEf,IAAK,SACH,OAAiB,OAAVD,EAAiBE,SAAS5D,EAAO0D,GAASG,WAAW7D,GAE9D,QACE,OAAO8D,KAEX,MAAOnE,GAEP,OADAlD,EAAIsH,MAAMpE,GACHmE,OA+DXE,iBAAkBvH,EAAIC,aAAa,SAAUuH,EAAMC,GACjD,OAAOD,EAAK3G,QAAQ,cAAe,IAChCA,QAAQ4G,EAAK,MACb5G,QAAQ,cAAe,KACvBqE,OAAO2B,MAAM,OAGlB3F,MAAOlB,EAAI2D,IAAI,YACS,IAAKlE,OAAOyB,MAAM2F,MAAM,MAC9C,IAAI3F,GAAQ,IAAKzB,OAASyB,MAAM2F,MAAM,UAClCa,EAAU,WAmCd,OAAwB,KAjCxBxG,EAAQA,EAAMU,OAAQ4F,GACbA,EAAKX,MAAM,KAAKb,OAAS,GAC/BlE,IAAK0F,IACN,IAAIG,EAAYD,EAAQE,KAAKJ,GAM7B,OAJIG,IACFA,EAAYA,EAAU,GAAG9G,QAAQ,8BAA+B,IAAIA,QAAQ,cAAe,YAGzFd,KAAKI,UAIL0H,MAHFL,EAAOzH,KAAKwH,iBAAiBC,EAAKZ,WAAYR,QAAQ0B,QAGzC9F,KAAK,KAAKnB,QAAQ,KAAMuF,QAAQ0B,MAAQ,KAEnDC,KAAMP,EAAK,GAAGQ,OAAO,EAAGR,EAAK,GAAGxB,QAChC7D,KAAMgF,SAASK,EAAK,GAAI,IACxBnF,OAAQ8E,SAASK,EAAK,GAAI,IAC1BG,UAAWA,IAMXE,MAHFL,EAAOzH,KAAKwH,iBAAiBC,EAAKZ,WAAY3D,OAAOgF,SAASC,SAGjD,GAAGF,OAAO,EAAGR,EAAK,GAAGxB,OAAS,GAAK,IAAMwB,EAAK,GAAK,IAAMA,EAAK,GACzEO,KAAMP,EAAK,GAAGQ,OAAO,EAAGR,EAAK,GAAGxB,OAAS,GACzC7D,KAAMgF,SAASK,EAAK,GAAI,IACxBnF,OAAQ8E,SAASK,EAAK,GAAI,IAC1BG,UAAWA,MAKJ3B,OACRjG,KAAKI,SAAWe,EAAMiH,UAAYjH,IAEnC2G,KAAM,UACNE,KAAM,UACN5F,KAAM,EACNE,OAAQ,MAad+F,KAAMpI,EAAIC,aAAcoI,GACF,mBAANA,GAgBhBC,KAAMtI,EAAIC,aAAa,SAAUsI,EAAO3E,GACtC,OAAO,WACL2E,KAASlE,WACTT,KAAMS,cAkBVmE,UAAWxI,EAAIC,aAAa,SAAUsI,EAAOE,GAC3C,OAAO,WAEL,OADAF,KAASlE,WACF,IAAIoE,KAAWpE,cAiB1BqE,UAAW1I,EAAIC,aAAa,SAAU2D,EAAItD,EAAU,mCAClD,OAAOP,KAAKuI,KAAK,IAAMtI,EAAI2I,KAAK,oBAAqBrI,GAAUsD,KAiBjEgF,eAAgB5I,EAAIC,aAAa,SAAU4I,EAASvI,EAAU,kCAC5D,OAAOP,KAAKyI,UAAU,IAAMxI,EAAI2I,KAAK,mBAAoBrI,GAAUuI,KAmBrEC,MAAO9I,EAAIyD,QAAQ,WACjB,IAAIsF,EAAU/I,EAAIgJ,8BAA8BhJ,KAAQqE,WAExD,GAAuB,IAAnB0E,EAAQ/C,QAKR+C,EAAQ/C,OAAS,EACnB,MAAM,IAAIiD,uDAAuDF,EAAQ/G,KAAK,QAAQnB,QAAQ,cAAe,QAoBjHmI,8BAA+BhJ,EAAIyD,QAAQ,WACzC,IAAIsF,KACAG,EAAarJ,OAAOsJ,KAAK9E,UAAU,IAEvC,IAAK,IAAImC,EAAI,EAAGA,EAAInC,UAAU2B,OAAQQ,IAChC0C,EAAWzC,QAAQpC,UAAUmC,IAAM,GACrCuC,EAAQrC,KAAKrC,UAAUmC,IAI3B,OAAOuC,IAmBTK,iCAAkCpJ,EAAIyD,QAAQ,WAC5C,IAAIyF,EAAarJ,OAAOsJ,KAAK9E,UAAU,IAEvC,IAAK,IAAImC,EAAI,EAAGA,EAAInC,UAAU2B,OAAQQ,IAAK,CACzC,IAAI6C,EAAQH,EAAWzC,QAAQpC,UAAUmC,IAErC6C,GAAS,GACXH,EAAWxD,OAAO2D,EAAO,GAI7B,OAAOH,IA2BTI,aAActJ,EAAI0D,MAAM,WACtB,IAAIwF,EAAarJ,OAAOsJ,KAAK9E,UAAU,IAEvC,IAAK,IAAImC,EAAI,EAAGA,EAAInC,UAAU2B,OAAQQ,IACpC,GAAI0C,EAAWzC,QAAQpC,UAAUmC,IAAM,EACrC,OAAO,EAIX,OAAO,IAwBT+C,aAAcvJ,EAAI0D,MAAM,WACtB,IAAIwF,EAAarJ,OAAOsJ,KAAK9E,UAAU,IAEvC,IAAK,IAAImC,EAAI,EAAGA,EAAInC,UAAU2B,OAAQQ,IACpC,GAAI0C,EAAWzC,QAAQpC,UAAUmC,KAAO,EACtC,OAAO,EAIX,OAAO,IA0BTgD,iBAAkBxJ,EAAI0D,MAAM,WAE1B,GAAgE,IAA5D3D,KAAKiJ,8BAA8B3E,UAAU,IAAI2B,OACnD,OAAO,EAGT,IAAIkD,EAAarJ,OAAOsJ,KAAK9E,UAAU,IACnCoF,EAAOzJ,EAAIsF,MAAMjB,WAErBoF,EAAKC,QAGL,IAAK,IAAIlD,EAAI,EAAGA,EAAI0C,EAAWlD,OAAQQ,IACrC,GAAIiD,EAAKhD,QAAQyC,EAAW1C,IAAM,EAChC,OAAO,EAKX,IAAK,IAAIA,EAAI,EAAGA,EAAIiD,EAAKzD,OAAQQ,IAC/B,GAAI0C,EAAWzC,QAAQgD,EAAKjD,IAAM,EAChC,OAAO,EAIX,OAAO,IASTmD,eAAgB3J,EAAI0D,MAAM,WACxB,IAAIkG,EAAQ7J,KAAKuJ,gBAAgBjF,WAEjC,IAAKuF,EACH,MAAM,IAAInK,SAAS4E,UAAU,GAAGwF,YAAYpJ,6CAA6CmJ,EAAMb,QAAQ/G,KAAK,WAoBhH8H,YAAa9J,EAAIyD,QAAQ,SAAUsG,EAAWtJ,EAAM8C,GAClD1D,OAAOC,eAAeiK,EAAWtJ,EAAMT,EAAI2D,IAAI,IACtCJ,MAkBXyG,cAAehK,EAAIC,aAAagK,OAAO,aACvCtB,KAAM3I,EAAIC,aAAaiK,GAAOlK,EAAIiE,aAAajE,EAAIgK,cAArBhK,CAAoCkK,IAgBlEC,WAAYnK,EAAIC,aAAagK,OAAOG,IAAI,aACxCC,KAAMrK,EAAIC,aAAaiK,GAAOlK,EAAIiE,aAAajE,EAAImK,WAArBnK,CAAiCkK,IAiB/DI,YAAatK,EAAIC,aAAagK,OAAOG,IAAI,cACzC9C,MAAOtH,EAAIC,aAAaiK,GAAOlK,EAAIiE,aAAajE,EAAIsK,YAArBtK,CAAkCkK,IAkDjEK,gBAAiBvK,EAAI0D,MAAM,SAAU/D,IAEnCA,EAA2B,iBAD3BA,EAASA,QAC+BW,QAASX,GAAWA,GACrDc,KAAOd,EAAOc,MAAQ,WAG7BT,EAAIgD,OAAOrD,EAAOc,MAAQ,WAKxB,OAJI4D,UAAU2B,OAAS,IACrBrG,EAAOW,QAAU+D,UAAU,IAGtB,IAAI7E,EAAgBG,MAc/B6K,QAASxK,EAAI0D,MAAM,SAAUhD,EAAM+J,GACjC,OAAQ/J,EAAKwE,OAAOC,eAClB,IAAK,SACH,OAAOuF,OAET,IAAK,QACH1K,EAAI2I,KAAK,+DAEX,IAAK,SACH,OAAOgC,OAET,IAAK,UACH,OAAOC,QAET,IAAK,SACH,OAAOX,OAET,IAAK,OACH,OAAOY,KAET,IAAK,QACH,OAAOrF,MAET,IAAK,SACH,OAAO3F,OAET,IAAK,WACH,OAAOiL,SAET,IAAK,SACH,OAAOC,OAET,QACE,OAAIN,QAIJ,SAMJF,iBACF9J,KAAM,4BACNC,KAAM,4BACNC,SAAU,WACVL,QAAS,sDACTM,SAAU,aACVL,QACEmB,KAAM,+BACNH,MAAO,+FAIPgJ,iBACF9J,KAAM,oBACNC,KAAM,oBACNC,SAAU,WACVL,QAAS,4CACTM,SAAU,aACVL,QACEmB,KAAM,2BACNH,MAAO,oGAIPgJ,iBACF9J,KAAM,4BACNC,KAAM,4BACNC,SAAU,WACVL,QAAS,yBACTM,SAAU,aACVL,QACEmB,KAAM,sDACNH,MAAO,kGAKPyB,OAAOhD,IAAMA,EC/xCjB8C,QCSEpD,YAAasL,GACXA,EAAMA,MAENnL,OAAOkD,iBAAiBhD,MACtBkL,SAAUjL,IAAIyD,YACdyH,MAAOlL,IAAIyD,YACX0H,aAAcnL,IAAIyD,QAAQuH,EAAII,qBAAuB,MASzDC,kBACE,IAAIC,KAEJ,IAAK,IAAIC,KAAaxL,KAAKkL,SACzBK,EAAeC,IACbC,QAASzL,KAAKkL,SAASM,GAAWvF,OAClCkF,MAAO,GAIX,IAAK,IAAIK,KAAaxL,KAAKmL,MACzBI,EAAeC,GAAaD,EAAeC,KACzCC,QAAS,GAGXF,EAAeC,GAAWL,MAAQnL,KAAKmL,MAAMK,GAAWvF,OAG1D,OAAOsF,EAOTF,0BACE,OAAOrL,KAAKoL,aAGdC,wBAAyB7H,GACvBxD,KAAKoL,aAAe5H,EAStB7D,cAAe6L,GACb,OAAQxL,KAAKkL,SAASM,QAAkBvF,QACrCjG,KAAKmL,MAAMK,QAAkBvF,OAQlCtG,kBACE,OAAOK,KAAKqL,oBAOd1L,gBAAiB6D,GACfxD,KAAKqL,oBAAsB7H,EAQ7B7D,aACE,IAAIuL,EAAWpL,OAAOsJ,KAAKpJ,KAAKkL,UAC5BC,EAAQrL,OAAOsJ,KAAKpJ,KAAKmL,OAC7B,OAAOlL,IAAIqG,OAAO4E,EAASQ,OAAOP,IAUpCxL,UAAW6L,GACT,IAAIN,EAAWlL,KAAKkL,SAASM,OACzBL,EAAQnL,KAAKmL,MAAMK,OACvB,OAAON,EAASQ,OAAOP,GAazBxL,YAAa6L,EAAWG,GACtB,GAAyB,iBAAdH,EACT,OAAOxL,KAAK4L,KAAKJ,GAOnB,GAJAxL,KAAKkL,SAASM,GAAaxL,KAAKkL,SAASM,OACzCxL,KAAKkL,SAASM,GAAWK,QAAQF,GACjC3L,KAAKqE,KAAK,cAAemH,EAAWG,GAEhC3L,KAAK8L,cAAcN,GAAaxL,KAAKoL,aACvC,MAAM,IAAI1L,MAAM,gFAcpBC,gBAAiB6L,EAAWG,GAC1B,GAAyB,iBAAdH,EACT,OAAOxL,KAAK4L,KAAKJ,GAOnB,GAJAxL,KAAKkL,SAASM,GAAaxL,KAAKkL,SAASM,OACzCxL,KAAKkL,SAASM,GAAW7E,KAAKgF,GAC9B3L,KAAKqE,KAAK,cAAemH,EAAWG,GAEhC3L,KAAK8L,cAAcN,GAAaxL,KAAKoL,aACvC,MAAM,IAAI1L,MAAM,gFAepBC,KAAM6L,EAAWG,GAKf,GAJA3L,KAAKmL,MAAMK,GAAaxL,KAAKmL,MAAMK,OACnCxL,KAAKmL,MAAMK,GAAW7E,KAAKgF,GAC3B3L,KAAKqE,KAAK,cAAemH,EAAWG,GAEhC3L,KAAK8L,cAAcN,GAAaxL,KAAKoL,aACvC,MAAM,IAAI1L,MAAM,gFAapBC,oBAAqB6L,EAAWG,GAK9B,GAJA3L,KAAKmL,MAAMK,GAAaxL,KAAKmL,MAAMK,OACnCxL,KAAKmL,MAAMK,GAAWK,QAAQF,GAC9B3L,KAAKqE,KAAK,cAAemH,EAAWG,GAEhC3L,KAAK8L,cAAcN,GAAaxL,KAAKoL,aACvC,MAAM,IAAI1L,MAAM,gFAapBC,eAAgB6L,EAAWO,GACzB/L,KAAKgM,mBAAmB,WAAYR,EAAWO,GAC/C/L,KAAKgM,mBAAmB,QAASR,EAAWO,GAc9CpM,mBAAoBgB,EAAM6K,EAAWO,GACnC,IAAIE,EAAQjM,KAAKW,GAEjB,GAAIsL,EAAMT,GAAY,CACpB,IAAKO,EAEH,mBADOE,EAAMT,GAIf,IAAIU,KAOJ,GANAD,EAAMT,GAAWzG,QAAS0G,IACpBA,EAAQ5E,aAAekF,EAAUlF,YACnCqF,EAAOvF,KAAK8E,KAIM,IAAlBS,EAAOjG,OAET,mBADOgG,EAAMT,GAIfS,EAAMT,GAAaU,GAQvBvM,mBAAoB6L,EAAY,MACZ,OAAdA,UACKxL,KAAKkL,SAASM,UACdxL,KAAKmL,MAAMK,KAElBxL,KAAKkL,YACLlL,KAAKmL,UAqBTxL,OACE,IAAI+J,EAAOzJ,IAAIsF,MAAMjB,WACrB,MAAMkH,EAAY9B,EAAKC,QACjBwC,EAASnM,KAAKoM,aAAaZ,GAER,iBAAdA,GACTW,EAAOxF,KAAK6E,GAGd,IAAIS,GACFI,MAAOb,GAGT,IAAK,IAAI9K,EAAO,EAAGA,EAAOyL,EAAOlG,OAAQvF,IAAQ,CAC/C,IAAI4L,EAAatM,KAAKmL,MAAMgB,EAAOzL,IAGnC,GAAI4L,EAGF,WAFOtM,KAAKmL,MAAMgB,EAAOzL,IAElB4L,EAAWrG,OAAS,GAAG,CAC5B,IAAIpC,EAAKyI,EAAWC,MAEpBN,EAAMR,QAAU5H,EAEhBA,EAAGyB,MAAM2G,EAAOvC,GAKpB,IAAI+B,EAAUzL,KAAKkL,SAASiB,EAAOzL,IAEnC,GAAI+K,EACF,IAAK,IAAI5H,EAAK,EAAGA,EAAK4H,EAAQxF,OAAQpC,IACpCoI,EAAMR,QAAUA,EAAQ5H,GACxB4H,EAAQ5H,GAAIyB,MAAM2G,EAAOvC,IAkBjC/J,aAAc6L,GACZ,MAAMgB,EAAgB1M,OAAOsJ,KAAKpJ,KAAKkL,UACjCuB,EAAc3M,OAAOsJ,KAAKpJ,KAAKmL,OACrC,IAAIuB,EAAYzM,IAAIqG,OAAOkG,EAAcd,OAAOe,IAsBhD,OApBAC,EAAYA,EAAU7K,OAAO,SAAUwK,GAErC,OAAIA,IAAUb,IAKY,WAAtBvL,IAAI2G,OAAOyF,IAAuBA,EAAM3F,QAAQ,MAAQ,KAEhC,WAAtBzG,IAAI2G,OAAOyF,KACbA,EAAQ,IAAIzB,OAAOyB,EAAMvL,QAAQ,MAAO,OAAOA,QAAQ,MAAO,MAAO,MAGhEuL,EAAMM,KAAKnB,cDjVLoB,UAAqB7J,EACxCpD,cACEE,QAIAC,OAAOkD,iBAAiBhD,MAGtB6M,KAAM5M,IAAIyD,SACRoJ,UACAC,mBACAC,kBACAC,YAAa,EACbC,eAAgB,IAAIC,MAatBC,OAAQnN,IAAI0D,MAAM,CAAC0J,GAAM,KACX,IAARA,EAKJrN,KAAK6M,KAAKI,WAAaI,EAJrBpN,IAAI2I,KAAK,uCAiBb0E,IAAKrN,IAAIwD,OAAO,CAAC+H,EAAWO,KAC1B,GAA8B,UAA1B9L,IAAI2G,OAAO4E,GAAwB,CACrC,IAAK,IAAI/E,EAAI,EAAGA,EAAI+E,EAAUvF,OAAQQ,IACpCzG,KAAKsN,IAAI9B,EAAU/E,GAAIsF,GAGzB,OAGF,IAAIwB,EAAIvN,KAAKwN,UAAUhC,GAEvB,IAAKvL,IAAIoI,KAAK0D,GACZ,OAAO/L,KAAKyN,MAAMjC,GAGpB,IAAIkC,EAAmB1N,KAAK2N,0BAA0BnC,EAAWO,GAEjE,GAAIwB,EAAE7G,QAAQgH,GAAoB,GAChC,IAAK,IAAIjH,EAAI,EAAGA,EAAI8G,EAAEtH,OAAQQ,IAC5B,GAAI8G,EAAE9G,GAAGI,aAAe6G,EAAiB7G,WAAY,CACnD7G,KAAK6M,KAAKK,eAAeU,OAAOpC,GAEhCxL,KAAK6N,eAAerC,EAAW+B,EAAE9G,IAAI,GACrC,YAIJzG,KAAK6M,KAAKK,eAAeU,OAAOpC,GAChCxL,KAAK6N,eAAerC,EAAWO,KAgBnCpD,UAAW1I,IAAI0D,MAAM,CAACmK,EAAqBC,KACzC,MAAMtN,EAAKT,KAEXA,KAAKgO,GAAGF,EAAqB,WAG3B,GAFA7N,IAAI2I,QAAQkF,qBAA0CC,SAAmCA,aAAZ,KAEzEA,EAAsB,CACxB,IAAIrE,EAAOzJ,IAAIsF,MAAMjB,WAErBoF,EAAKC,QACLD,EAAKmC,QAAQkC,GAEbtN,EAAG4D,KAAKiB,MAAM7E,EAAIiJ,QAgCxBkC,KAAM3L,IAAIC,aAAa,SAAU+N,EAAQC,GACjB,iBAAXD,IACTC,EAAQD,EACRA,EAAS,IAGX,IAAIrC,KAEJ,IAAK,IAAIJ,KAAa0C,EAAO,CAC3B,IAAIC,KAAWlO,IAAIkG,SAAS8H,EAAQ,MAAMzC,IAEtCvL,IAAIoI,KAAK6F,EAAM1C,KACjBxL,KAAKoO,uBAELxC,EAAKJ,GAAaxL,KAAKgO,GAAGG,EAAOD,EAAM1C,KACF,iBAArB0C,EAAM1C,GACtBxL,KAAK4L,QAAQuC,KAAUD,EAAM1C,IAE7BvL,IAAI2I,QAAQuF,uFA+BlBE,OAAQpO,IAAI0D,MAAM,SAAU6H,EAAW8C,GAGrC,OAFAA,EAAuBrO,IAAIkG,SAASmI,GAAsB,GAElDnL,IACFmL,IAAyBrO,IAAIG,UAC/B+C,EAAEoL,iBAGJvO,KAAKqE,KAAKmH,KAAclH,cAW5B8J,qBAAsBnO,IAAIyD,QAAQ,CAAC8K,EAAQ,KACzCxO,KAAKyO,gBAAgBzO,KAAK0O,kBAAoBF,KAUhDG,qBAAsB1O,IAAIyD,QAAQ,CAAC8K,EAAQ,KACzCxO,KAAKyO,gBAAgBzO,KAAK0O,kBAAoBF,KA2BhDI,QAAS3O,IAAI0D,MAAM,SAAU6H,EAAWqD,EAAUC,GAChDD,EAAW5O,IAAI8G,WAAW8H,GAE1B,IAAIpO,EAAKT,KACL+O,EAAW,WACb,IAAIrF,EAAOzJ,IAAIsF,MAAMjB,WAEjBwK,GACFpF,EAAK/C,KAAKmI,GAGZrO,EAAG4D,KAAKwK,KAAanF,IAOvB,OAJA1J,KAAKoO,uBACLpO,KAAKgO,GAAGxC,EAAWuD,IAIjBC,OAAQ,KACNhP,KAAK2O,uBACL3O,KAAKsN,IAAI9B,EAAWuD,OA4B1BE,MAAOhP,IAAI0D,MAAM,SAAU6H,EAAW0D,EAAejB,EAAS,KAAMkB,EAAU,MAC5E,IAAIC,EAAgBnP,IAAI8G,WAAWyE,GAEnC,IAAK,IAAI/E,EAAI,EAAGA,EAAI2I,EAAcnJ,OAAQQ,IAAK,CAC7C,IAAI+E,EAAY4D,EAAc3I,GAE9BzG,KAAKgO,GAAGxC,EAAW,WACc,WAA3BvL,IAAI2G,OAAO5G,KAAKqM,QACH,OAAX4B,GAA+B,OAAZkB,GACrBlP,IAAIqK,KAAK,4DAGX4E,EAAc7K,QAAQC,YAEtB4K,EAAc7K,QAAQpE,IAAIkG,SAAS8H,EAAQ,MAAMjO,KAAKqM,QAAQpM,IAAIkG,SAASgJ,EAAS,SAAU7K,gBAiCtG+K,UAAWpP,IAAI0D,MAAM,SAAU6H,EAAW0D,EAAejB,EAAS,KAAMkB,EAAU,MAChF,IAAIC,EAAgBnP,IAAI8G,WAAWyE,GAEnC,IAAK,IAAI/E,EAAI,EAAGA,EAAI2I,EAAcnJ,OAAQQ,IAAK,CAC7C,IAAI+E,EAAY4D,EAAc3I,GAE9BzG,KAAKsP,KAAK9D,EAAW,WACY,WAA3BvL,IAAI2G,OAAO5G,KAAKqM,QACH,OAAX4B,GAA+B,OAAZkB,GACrBlP,IAAIqK,KAAK,4DAGX4E,EAAc7K,QAAQC,YAEtB4K,EAAc7K,QAAQpE,IAAIkG,SAAS8H,EAAQ,MAAMjO,KAAKqM,QAAQpM,IAAIkG,SAASgJ,EAAS,SAAU7K,gBAmFtGiL,UAAWtP,IAAI0D,MAAM,SAAU6H,EAAWgE,GACxC,IAAKxP,KAAK6M,KAAKC,OAAO9L,eAAewK,GAAY,CAC/C,IAAI9B,EAAOzJ,IAAIsF,MAAMjB,WACrBoF,EAAK/D,OAAO,EAAG,GAEf3F,KAAK6M,KAAKC,OAAOtB,GAAaiE,WAAW,YAChCzP,KAAK6M,KAAKC,OAAOtB,GACxBxL,KAAKqE,QAAQqF,IACZ8F,MAWPE,wBAAyBzP,IAAIC,aAAa,SAAUyP,GAClD,OAAOzF,OAAOyF,KAiBhBC,wBAAyB3P,IAAIC,aAAa,SAAUsL,EAAWqE,GAC7D,IAAIpP,EAAKT,KAET,OAAO,WAELyP,WAAW,KACT,IAAIK,EAAKrP,EAAGoM,KAAKE,gBAEb+C,EAAGD,KACLC,EAAGD,GAAKE,eAAenC,OAAOpC,GAEM,IAAhCsE,EAAGD,GAAKE,eAAeC,OACzBF,EAAGD,GAAKE,eAAiBD,EAAGD,GAAKI,YAE7BhQ,IAAIoI,KAAKyH,EAAGD,GAAKrE,WACnBsE,EAAGD,GAAKrE,UAAUsE,EAAGD,GAAKf,SAE1BrO,EAAG4D,KAAKyL,EAAGD,GAAKrE,UAAWsE,EAAGD,GAAKf,YAIxC,MAiEPoB,OAAQjQ,IAAI0D,MAAM,CAACwM,EAAiBC,EAAkBtB,EAAU,QAC9D,GAAoC,UAAhC7O,IAAI2G,OAAOuJ,GACb,MAAM,IAAIzQ,uEAAuEO,IAAI2G,OAAOuJ,MAG9F,IAAIR,EAAa,IAAIxC,IAAIgD,GACrBN,EAAM7P,KAAK0P,wBAAwB1P,KAAK6M,KAAKE,iBA0BjD,OAxBA/M,KAAK6M,KAAKE,gBAAgB8C,MAE1B/P,OAAOkD,iBAAiBhD,KAAK6M,KAAKE,gBAAgB8C,IAChDI,YAAahQ,IAAI0D,MAAM,IAAIwJ,IAAIgD,IAC/BJ,eAAgB9P,IAAIyD,QAAQiM,GAC5BnE,UAAWvL,IAAI0D,MAAMyM,GACrBpB,OAAQ/O,IAAI0D,MAAM,KAChB3D,KAAK6M,KAAKE,gBAAgB8C,GAAKI,YAAYlL,QAAQsH,IACjDrM,KAAKsN,IAAIjB,EAAOrM,KAAK4P,wBAAwBvD,EAAOwD,MAGtD7P,KAAK2O,qBAAqB3O,KAAK6M,KAAKE,gBAAgB8C,GAAKI,YAAYD,aAE9DhQ,KAAK6M,KAAKE,gBAAgB8C,KAEnCf,QAAS7O,IAAI0D,MAAMmL,KAGrB9O,KAAKoO,qBAAqBuB,EAAWK,MAErCL,EAAW5K,QAAQsH,IACjBrM,KAAKgO,GAAG3B,EAAOrM,KAAK4P,wBAAwBvD,EAAOwD,MAG9C7P,KAAK6M,KAAKE,gBAAgB8C,KAkBnCQ,WAAYpQ,IAAI0D,MAAM,CAACwM,EAAiBC,EAAkBtB,EAAU,QAClE,IAAIwB,mBAAqC,IAAKxF,MAAQ3D,cAAciJ,IAEhET,EAAa3P,KAAKkQ,OAAOC,EAAiBG,EAAoBxB,GAElE9O,KAAKoO,uBACLpO,KAAKsP,KAAKgB,EAAoB,KAC5BX,EAAWX,SACXW,EAAa,KACb3P,KAAKqE,KAAK+L,EAAkBtB,OAyChCyB,UAAWtQ,IAAI0D,MAAM,SAAU6M,EAAoBC,EAAOC,EAAgB5B,EAAU,MAClF,GAAkC,iBAAvB0B,EACT,MAAM,IAAI9Q,MAAM,8DAAiE8Q,EAAsB,KAIzG,IAAIX,EAAM7P,KAAK0P,wBAAwB1P,KAAK6M,KAAKG,gBAwBjD,OAtBAhN,KAAK6M,KAAKG,eAAe6C,MAEzB/P,OAAOkD,iBAAiBhD,KAAK6M,KAAKG,eAAe6C,IAC/CA,IAAK5P,IAAI0D,MAAMkM,GACfrE,UAAWvL,IAAI0D,MAAM6M,GACrBC,MAAOxQ,IAAI0D,MAAM8M,GACjBjC,MAAOvO,IAAIyD,QAAQ,GACnBgN,eAAgBzQ,IAAI0D,MAAM+M,GAC1B1B,OAAQ/O,IAAI0D,MAAM,KAChB,IAAI0I,EAAQrM,KAAK6M,KAAKG,eAAe6C,GAAKrE,iBAEnCxL,KAAK6M,KAAKG,eAAe6C,GAEhC7P,KAAK2O,uBACL3O,KAAKsN,IAAIjB,EAAOrM,KAAK2Q,uBAAuBd,MAE9Cf,QAAS7O,IAAI0D,MAAMmL,KAGrB9O,KAAKoO,uBACLpO,KAAKgO,GAAGwC,EAAoBxQ,KAAK2Q,uBAAuBd,IAEjD7P,KAAK6M,KAAKG,eAAe6C,KAGlCe,cAAe3Q,IAAI0D,MAAM,SAAU6M,EAAoBC,EAAOC,EAAgB5B,EAAU,MACtF,IAAI+B,sBAA2C,IAAK/F,MAAQ3D,cAAcuJ,IACtEH,EAAYvQ,KAAKuQ,UAAUC,EAAoBC,EAAOI,EAAuB/B,GAEjF9O,KAAKsP,KAAKuB,EAAuB,KAC/BN,EAAUvB,SACVuB,EAAY,KACZvQ,KAAKqE,KAAKqM,EAAgB5B,OAS9B6B,uBAAwB1Q,IAAI0D,MAAM,SAAUkM,GAC1C,IAAIpP,EAAKT,KACT,OAAO,WAELyP,WAAW,KACLhP,EAAGoM,KAAKG,eAAehM,eAAe6O,KACxCpP,EAAGoM,KAAKG,eAAe6C,GAAKrB,QACxB/N,EAAGoM,KAAKG,eAAe6C,GAAKrB,QAAU/N,EAAGoM,KAAKG,eAAe6C,GAAKY,QAChExQ,IAAIoI,KAAK5H,EAAGoM,KAAKG,eAAe6C,GAAKa,gBACvCjQ,EAAGoM,KAAKG,eAAe6C,GAAKa,eAAejQ,EAAGoM,KAAKG,eAAe6C,GAAKf,SAEvErO,EAAG4D,KAAK5D,EAAGoM,KAAKG,eAAe6C,GAAKa,eAAgBjQ,EAAGoM,KAAKG,eAAe6C,GAAKf,SAK9ErO,EAAGoM,KAAKG,eAAehM,eAAe6O,KACxCpP,EAAGoM,KAAKG,eAAe6C,GAAKrB,MAAQ,MAIzC,MAYPb,0BAA2B1N,IAAIC,aAAa,CAACQ,EAAMmD,KACjD,IAAK5D,IAAIG,SACP,OAAOyD,EAGT,MAAMkI,EAAYlI,EAElB,OAAO,WACL,IAAI6F,EAAOpF,UAE0B,iBAA1BoF,EAAKA,EAAKzD,OAAS,KAC5BvF,EAAOgJ,EAAKA,EAAKzD,OAAS,GAAGY,WAAW/F,QAAQ,gBAAiB,KACjE4I,EAAOzJ,IAAIsF,MAAMmE,IACZ6C,OAGPR,EAAUzG,OAAQ+G,MAAO3L,GAAQgJ,MAYrCoH,WAAY7Q,IAAIC,aAAcwJ,IACxBzJ,IAAIG,UAAYsJ,EAAKzD,OAAS,IAC5ByD,EAAKA,EAAKzD,OAAS,GAAG8I,SACxBrF,EAAKA,EAAKzD,OAAS,GAAG8I,SAAW/O,KAAK2N,0BACpCjE,EAAK,GACLA,EAAKA,EAAKzD,OAAS,GAAG8I,UAGxBrF,EAAKA,EAAKzD,OAAS,GAAKjG,KAAK2N,0BAC3BjE,EAAK,GACLA,EAAKA,EAAKzD,OAAS,SAY/BtG,QACE,IAAIwM,EAASlM,IAAIsF,MAAMjB,WAEvB,GAAsB,IAAlB6H,EAAOlG,OAAc,CACvBjG,KAAK6M,KAAKK,eAAeO,QAEzB,IAAIsD,KAGFA,EADE9Q,IAAIG,SACSN,OAAOkR,sBAAsBhR,KAAKiR,UAEjDF,EAAejR,OAAOkR,sBAAsBhR,KAAKmL,QACrBO,OAAO5L,OAAOkR,sBAAsBhR,KAAKkL,WAGvE,IAAK,IAAIzE,EAAI,EAAGA,EAAIsK,EAAa9K,OAAQQ,IACvCzG,KAAKkR,mBAAmBH,EAAatK,IAGvC,OAAOzG,KAAKkR,qBAGd,IAAK,IAAIzK,EAAI,EAAGA,EAAI0F,EAAOlG,OAAQQ,IACjCzG,KAAK6M,KAAKK,eAAeU,OAAOzB,EAAO1F,IACvCzG,KAAKkR,mBAAmB/E,EAAO1F,IAQnC9G,aAAc6L,EAAWG,EAAU0B,EAAK8D,GAAU,GAkBhD,MAjBwB,YAApBlR,IAAI2G,OAAOyG,KACb8D,EAAU9D,EACVA,EAAMrN,KAAK6M,KAAKI,iBAGN5H,IAARgI,IACFA,EAAMrN,KAAK6M,KAAKI,YAGdI,EAAM,GACRoC,WAAW,IAAMzP,KAAKsN,IAAI9B,EAAWG,GAAW0B,GAGzB,iBAAd7B,GAA0BA,EAAU9E,QAAQ,MAAQ,GAC7D1G,KAAK6M,KAAKK,eAAekE,IAAI5F,GAGxB2F,EAqBTxR,GAAI6L,EAAWG,EAAU0B,EAAK8D,GAAU,GACtC,GAA8B,UAA1BlR,IAAI2G,OAAO4E,GAQXxL,KAAKqR,gBAAgB/M,WACvBtE,KAAKsR,gBAAgB9F,EAAWG,GAEhC3L,KAAKuR,YAAY/F,EAAWG,QAV5B,IAAK,IAAIlF,EAAI,EAAGA,EAAI+E,EAAUvF,OAAQQ,IACpCzG,KAAKgO,GAAGxC,EAAU/E,GAAIkF,EAAU0B,EAAK8D,GA2B3CxR,KAAM6L,EAAWG,EAAU0B,EAAK8D,GAAU,GACxC,GAA8B,UAA1BlR,IAAI2G,OAAO4E,GAQXxL,KAAKqR,gBAAgB/M,WACvBtE,KAAKwR,oBAAoBhG,EAAWG,GAEpC9L,MAAMyP,KAAK9D,EAAWxL,KAAK2N,0BAA0BnC,EAAWG,SAVhE,IAAK,IAAIlF,EAAI,EAAGA,EAAI+E,EAAUvF,OAAQQ,IACpCzG,KAAKsP,KAAK9D,EAAU/E,GAAIkF,EAAU0B,EAAK8D,GAc7CxR,kBACEK,KAAK8Q,WAAWxM,WAChBzE,MAAMyR,mBAAmBhN,WAG3B3E,sBACEK,KAAK8Q,WAAWxM,WAChBzE,MAAM2R,uBAAuBlN,WAG/B3E,cACEK,KAAK8Q,WAAWxM,WAChBzE,MAAM0R,eAAejN,WAGvB3E,kBAC0C,IAApC2E,UAAUA,UAAU2B,OAAS,IAC/BjG,KAAK8Q,WAAWxM,WAGlBzE,MAAMgO,kBAAkBvJ,WAa1B3E,OACE,GAAiC,UAA7BM,IAAI2G,OAAOtC,UAAU,IAAiB,CACxC,IAAIoF,EAAOzJ,IAAIsF,MAAMjB,WACjBmN,EAAa/H,EAAKC,QAEtB,IAAK,IAAIlD,EAAI,EAAGA,EAAIgL,EAAWxL,OAAQQ,IACrCzG,KAAKqE,KAAKoN,EAAWhL,MAAOiD,GAG9B,OAOF,IAAKzJ,IAAIG,WAAakE,UAAU,IAAwC,IAAlCtE,KAAK6M,KAAKK,eAAe8C,KAE7D,YADAnQ,MAAMwE,QAAQC,WAIhB,GAAIrE,IAAIG,UAAoC,iBAAjBkE,UAAU,GAEnC,YADAzE,MAAMwE,QAAQC,WAchB,IAAIoN,EAAW1R,KAAK6M,KAAKK,eAAeyE,SACpCC,EAAe,KACflI,EAAOzJ,IAAIsF,MAAMjB,WAIrB,IAFAoF,EAAKC,QAEmB,OAAjBiI,IAA0BA,EAAaC,MAAM,CAClD,GAAqB,OAAjBD,GAAyBA,EAAapO,QAAUc,UAAU,GAAI,CAGhE,GAFc,IAAIsG,OAAOgH,EAAapO,MAAM1C,QAAQ,MAAO,OAAOA,QAAQ,MAAO,MAAO,KAE5E6L,KAAKrI,UAAU,IAAK,CAC9BzE,MAAMwE,KAAKuN,EAAapO,SAAUkG,EAA8B,iBAAjBpF,UAAU,GAAkB4F,OAAO5F,UAAU,IAAMA,UAAU,IAC5G,OAIJsN,EAAeF,EAASI,0CEr8B5BnS,YAAaoS,EAAY,IACvBjS,OAAOkD,iBAAiBhD,MACtBgS,OAAQ/R,IAAIyD,YACZuO,MAAOhS,IAAIyD,YACXsL,OAAQ/O,IAAIyD,QAAQ,GACpBwO,MAAOjS,IAAIyD,QAAQ,GACnB4F,MAAOrJ,IAAIyD,QAAQ,GACnBqO,UAAW9R,IAAIyD,QAAQqO,GACvBI,OAAQlS,IAAIyD,SAAQ,GACpB0O,cAAenS,IAAIyD,QAAQ,GAC3B2O,cAAepS,IAAIyD,QAAQ,GAC3B4O,aAAcrS,IAAIyD,QAAQ,MAC1B6O,IAAKtS,IAAIyD,QAAQ,GACjB8O,uBAAwBvS,IAAIyD,SAAQ,KAItC1D,KAAKyS,QAAQ,IAAK,WAChB,MAAO,QAITzS,KAAKyS,QAAQ,IAAK,WAChB,MAAO,QAGLV,GAAaA,EAAU9L,OAAS,IAClCjG,KAAK0S,MAAQX,GAQjBW,UAAWlP,GACTxD,KAAKgP,OAAS,EACdhP,KAAKkS,MAAQ,EACblS,KAAKsJ,MAAQ,EACbtJ,KAAKsS,aAAe,KACpBtS,KAAKgS,UACLhS,KAAKuS,IAAM,EACXvS,KAAK+R,UAAYvO,EAGnBkP,YACE,OAAO1S,KAAK+R,UAOdY,YACE,OAAO3S,KAAK+R,UAAUjL,MAAM,MAAMb,OASpC2M,mBACE,OAAO5S,KAAKwS,uBAGdI,iBAAkBpP,GAEhBxD,KAAKmS,QAAS,EACdnS,KAAKwS,uBAAyBvS,IAAI+G,aAAaxD,GAQjDqP,kBACE,OAAO7S,KAAKuS,IAQdO,oBACE,IAAIC,EAAO/S,KAAKsJ,MAAQtJ,KAAKoS,cAAiBpS,KAAKqS,cAEnD,OAAe,IAARU,EAAY,EAAIA,EASzBpT,MAAOY,GACL,GAAIA,EAAS,CACX,IAAIwS,EAAO/S,KAAKsJ,MAAQtJ,KAAKoS,cAAiB,EAE9C,MAAM,IAAI1S,SAASa,aAAmBP,KAAK6S,uBAAuBE,EAAM,EAAI,EAAIA,MAGlF/S,KAAK4S,cAAe,EA2BtBjT,QAASqT,EAASC,EAAQC,GAAS,IACjC,IAAKF,EAAQ/P,OAAQ,CACnB,IAAIkQ,EAAQ,IAERH,EAAQI,YACVD,GAAS,KAGPH,EAAQK,aACVF,GAAS,KAGXH,EAAU,IAAIpI,OAAOoI,EAAQrO,OAAQwO,GAGvC,IAAIG,EASJ,GAPEA,EADoB,iBAAXL,EACE,WACT,OAAOA,GAGEA,GAGRhT,IAAIoI,KAAKiL,GACZ,MAAM,IAAI5T,mCAAmCsT,EAAQnM,+EAGvD,IAAI0M,EAAeD,EAASzM,WAE5B,GAAI0M,EAAa7M,QAAQ,gBAAkB,GAAK,8BAA8BiG,KAAK4G,GACjF,MAAM,IAAI7T,MAAM,yEAGlBM,KAAKiS,MAAMtL,MACTqM,QAAAA,EACA/P,OAAQ+P,EAAQ/P,OAChBgQ,OAAQK,EACRJ,MAAAA,IAmBJvT,OACE,GAAIK,KAAKgS,OAAO/L,OACd,OAAOjG,KAAKgS,OAAOrI,QAKrB,IAFA3J,KAAKmS,QAAS,EAEPnS,KAAKsJ,OAAStJ,KAAK+R,UAAU9L,QAAQ,CAEtC,MAAM0G,KAAK3M,KAAK+R,UAAUyB,OAAOxT,KAAKsJ,UACxCtJ,KAAKuS,MACLvS,KAAKoS,cAAgBpS,KAAKsJ,OAG5B,IAAI9C,EAAUxG,KAAKyT,OAAO9N,OAAO3F,KAAKgP,QAClC1F,EAAQtJ,KAAKsJ,MAEjB,KAAO9C,EAAQP,QACTjG,KAAKmS,QAAQ,CACf,IAAIuB,EAAQlN,EAAQmD,QAChBuC,EAASwH,EAAMxH,OACfjG,EAASyN,EAAMzN,OAEnBjG,KAAKsJ,OAASrD,EACdjG,KAAKqS,cAAgBpM,EACrBjG,KAAKmS,QAAS,EACdnS,KAAKgP,SACL,IAAI2E,EAAQD,EAAMT,OAAO3N,MAAMtF,KAAMkM,GAErC,GAAIlM,KAAKmS,OACPnS,KAAKsJ,MAAQ4C,EAAO5C,WACf,QAAcjE,IAAVsO,EACT,OAAQ1T,IAAI2G,OAAO+M,IACjB,IAAK,QACH3T,KAAKgS,OAAS2B,EAAMpO,MAAM,GAC1BoO,EAAQA,EAAM,GAEhB,QAKE,OAJI1N,IACFjG,KAAKgP,OAAS,GAGT2E,GAQjB,IAAIjB,EAAQ1S,KAAK+R,UAEjB,GAAIzI,EAAQoJ,EAAMzM,OAChB,GAAIjG,KAAKmS,OAAQ,CACfnS,KAAKgP,OAAS,EAEd,IAAI2E,EAAQ3T,KAAK4T,WAAWlB,EAAMzK,OAAOjI,KAAKsJ,QAAStJ,KAAKsJ,MAAQoJ,EAAMzM,SAE1E,QAAcZ,IAAVsO,EACF,MAA0B,UAAtB1T,IAAI2G,OAAO+M,IACb3T,KAAKgS,OAAS2B,EAAMpO,MAAM,GACnBoO,EAAM,IAENA,OAIP3T,KAAKsJ,QAAUA,IACjBtJ,KAAKgP,OAAS,GAGhBhP,KAAKmS,QAAS,MAEX,CAAA,IAAI3L,EAAQP,OAGjB,MAFAjG,KAAKmS,QAAS,IAWpBxS,OACE,IAAI6G,KACA8C,EAAQ,EACR4I,EAAQlS,KAAKkS,MACb2B,EAAY7T,KAAKsJ,MACjBoJ,EAAQ1S,KAAK+R,UAEjB,IAAK,IAAItL,EAAI,EAAGR,EAASjG,KAAKiS,MAAMhM,OAAQQ,EAAIR,EAAQQ,IAAK,CAC3D,IAAIqN,EAAO9T,KAAKiS,MAAMxL,GAClByM,EAAQY,EAAKZ,MACba,EAASb,EAAMjN,OAEnB,IACI8N,GAAUb,EAAMxM,QAAQwL,IAAU,GACjCA,EAAQ,GAAgB,IAAX6B,IAAiBb,EAAM,GACvC,CACA,IAAIF,EAAUc,EAAKd,QACnBA,EAAQa,UAAYA,EACpB,IAAI3H,EAAS8G,EAAQnL,KAAK6K,GAE1B,GAAIxG,GAAUA,EAAO5C,QAAUuK,EAAW,CACxC,IAAIG,EAAIxN,EAAQG,MACduF,OAAAA,EACA+G,OAAQa,EAAKb,OACbhN,OAAQiG,EAAO,GAAGjG,SAOpB,IAJI6N,EAAK7Q,SACPqG,EAAQ0K,KAGDA,EAAI1K,GAAO,CAClB,IAAI2K,EAAID,EAAI,EAEZ,GAAIxN,EAAQwN,GAAG/N,OAASO,EAAQyN,GAAGhO,OAAQ,CACzC,IAAIiO,EAAS1N,EAAQwN,GACrBxN,EAAQwN,GAAKxN,EAAQyN,GACrBzN,EAAQyN,GAAKC,MAOvB,OAAO1N,EAUT7G,WAAYwU,GACV,GAAInU,KAAKwS,uBAAwB,CAC/B,IAAIO,EAAO/S,KAAKsJ,MAAQtJ,KAAKoS,cAAiB,EAE9C,MAAM,IAAI1S,mCAAmCM,KAAK6S,uBAAuBE,EAAM,EAAI,EAAIA,SAAWoB,8BCpVtGxU,YAAayU,MACX,GAAuB,IAAnBA,EAAQnO,OACV,MAAM,IAAIvG,MAAM,gCAGlBI,OAAOkD,iBAAiBhD,MACtB+R,UAAW9R,IAAIyD,QAAQ,MACvBuO,MAAOhS,IAAIC,aAAakU,GAExBC,UAAWpU,IAAIC,cACboU,MAAO,IAAIrU,IAAIsU,QAAQC,MACvBC,WAAY,KACZC,YAAa,IAAIvH,QAKrB,IAAK,IAAI1G,EAAI,EAAGA,EAAIzG,KAAKiS,MAAMhM,OAAQQ,IACrCzG,KAAKqU,UAAUC,MAAM7B,QAAQzS,KAAKiS,MAAMxL,GAAG,GAAIzG,KAAKiS,MAAMxL,GAAG,IAG/D,OAAOzG,KAOT2U,WACE,OAAO3U,KAAKqU,UAAUI,WAsBxBG,uBACE,OAAOnP,MAAMoP,KAAK7U,KAAKqU,UAAUK,aAAa3S,IAAI0F,GAAQA,EAAKqN,QA4BjEnV,MAAOgV,EAAMI,GAAY,GACvB,IAAK9U,IAAIkG,SAASwO,IAAyB,iBAATA,EAChC,MAAM,IAAIjV,MAAM,4CAGlBM,KAAKqU,UAAUI,WAAaE,EAE5B,IACIhB,EADA3B,KAMJ,IAHAhS,KAAKqU,UAAUC,MAAM5B,MAAQiC,EAC7B3U,KAAKqU,UAAUK,YAAYjH,QAEpBkG,EAAQ3T,KAAKqU,UAAUC,MAAMxC,QAClC,IAAKiD,GAAwB,QAAVpB,GAA6B,QAAVA,EAAkB,CACtD3B,EAAO2B,GAAS1T,IAAIkG,SAAS6L,EAAO2B,OAEpC3B,EAAO2B,GAAOhN,MACZvE,KAAMpC,KAAKqU,UAAUC,MAAMzB,YAC3BvQ,OAAQtC,KAAKqU,UAAUC,MAAMxB,cAC7B7M,OAAQjG,KAAKqU,UAAUC,MAAMjC,cAC7B/I,MAAOtJ,KAAKqU,UAAUC,MAAMhL,MAAQtJ,KAAKqU,UAAUC,MAAMjC,cACzDK,MAAO1S,KAAKqU,UAAUC,MAAMvC,UAAU9J,OAAOjI,KAAKqU,UAAUC,MAAMhL,MAAQtJ,KAAKqU,UAAUC,MAAMjC,cAAerS,KAAKqU,UAAUC,MAAMjC,iBAGrI,MAAM/I,EAAQ0I,EAAO2B,GAAO1N,OAAS,EAErCjG,KAAKqU,UAAUK,YAAYtD,KACzB9H,MAAOA,EACPqK,MAAOA,EACPmB,aACE,OAAOhV,OAAOkV,OAAOhD,EAAOhS,KAAK2T,OAAO3T,KAAKsJ,QAASqK,MAAO3T,KAAK2T,WAM1E,OAAO3B,cClJTrS,kBAAmBsV,EAASC,GAC1B,GAAIA,EAAOlF,KAAOiF,EAAQjF,MAAwB,IAAhBkF,EAAOlF,KACvC,OAAO,EAGT,IAAImF,EAAWF,EAAQtD,SACnByD,EAAUD,EAASrD,OAEvB,MAAQsD,EAAQvD,MAAM,CACpB,IAAKoD,EAAQI,IAAID,EAAQ5R,OACvB,OAAO,EAGT4R,EAAUD,EAASrD,OAGrB,OAAO,EASTnS,gBACE,IAAI2V,EAAY,IAAInI,IAAI7I,UAAU,IAElC,IAAK,IAAImC,EAAI,EAAGA,EAAInC,UAAU2B,OAAQQ,IAAK,CACzC,IAAI0O,EAAW7Q,UAAUmC,GAAGkL,SACxByD,EAAUD,EAASrD,OAEvB,MAAQsD,EAAQvD,MACdyD,EAAUlE,IAAIgE,EAAQ5R,OACtB4R,EAAUD,EAASrD,OAIvB,OAAOwD,EAUT3V,oBAAqB4V,EAAMC,GACzB,IAAIC,EAAe,IAAItI,IACnBuI,EAAIH,EAAKvF,KAAOwF,EAAKxF,KAAOuF,EAAOC,EACnCG,EAAIJ,EAAKvF,KAAOwF,EAAKxF,KAAOwF,EAAOD,EACnCJ,EAAWO,EAAE/D,SACbyD,EAAUD,EAASrD,OAEvB,MAAQsD,EAAQvD,MACV8D,EAAEN,IAAID,EAAQ5R,QAChBiS,EAAarE,IAAIgE,EAAQ5R,OAG3B4R,EAAUD,EAASrD,OAGrB,OAAO2D,EAUT9V,kBAAmB4V,EAAMC,GACvB,IAAII,EAAO,IAAIzI,IAAIoI,GACfJ,EAAWK,EAAK7D,SAChByD,EAAUD,EAASrD,OAEvB,MAAQsD,EAAQvD,MACd+D,EAAKhI,OAAOwH,EAAQ5R,OACpB4R,EAAUD,EAASrD,OAGrB,OAAO8D,EASTjW,aAAc4V,EAAMC,GAClB,OAAuD,IAAhDvV,IAAIsU,QAAQpH,IAAI0I,WAAWN,EAAMC,GAAMxF,KAGhDrQ,gBACEM,IAAI2I,KAAK,iEACT3I,IAAIsU,QAAQpH,IAAI2I,SAASxR,WAS3B3E,kBACEwN,IAAItI,UAAUkR,WAAa,SAAUb,GACnC,OAAOjV,IAAIsU,QAAQpH,IAAI4I,WAAW/V,KAAMkV,IAG1C/H,IAAItI,UAAU6G,OAAS,WACrB,OAAOzL,IAAIsU,QAAQpH,IAAIzB,OAAO1L,QAASsE,YAGzC6I,IAAItI,UAAU4Q,aAAe,WAC3B,OAAOxV,IAAIsU,QAAQpH,IAAIsI,aAAazV,QAASsE,YAG/C6I,IAAItI,UAAUgR,WAAa,WACzB,OAAO5V,IAAIsU,QAAQpH,IAAI0I,WAAW7V,QAASsE,YAG7C6I,IAAItI,UAAUmR,OAAS,WACrB,OAAO/V,IAAIsU,QAAQpH,IAAI2I,MAAM9V,QAASsE,gBCzI5C,IAAI2R,EAGJA,EAAW/S,OAAOgF,SAASgO,KAK3B,MAAMC,EAAe,SAAUC,GAC7B,IAAI1O,KAEA2O,EAAW,cAAcxO,KAAKuO,IAElCC,EAAWA,EAASpQ,OAAS,EAAIoQ,EAAS,GAAK,QAG7CD,EAAMA,EAAItV,QAAQ,IAAI8J,UAAUyL,WAAmB,KAAM,KAG3DD,EAAMA,EAAItP,MAAM,KAEhB,IAAK,IAAIL,EAAI,EAAGA,EAAI2P,EAAInQ,OAAQQ,IACf,OAAX2P,EAAI3P,GACNiB,EAAI6E,MACgB,MAAX6J,EAAI3P,IAAc2P,EAAI3P,GAAGtB,OAAOc,OAAS,GAClDyB,EAAIf,KAAKyP,EAAI3P,IAIjBiB,EAAMA,EAAIzF,KAAK,KAAKnB,QAAQ,cAAe,OAG3C,IAAI4S,EAAQ,qBAAqB7L,KAAKH,GAClCI,EAAiB,OAAV4L,EAAiBhM,EAAMgM,EAAM,GACpC4C,EAAwB,OAAV5C,EAAiBA,EAAM,GAAK,GAI9C,GAFAhM,EAAMI,EAEFwO,EAAYnR,OAAOc,OAAS,EAAG,CACjC,IAAIsQ,KAEJD,EAAYxP,MAAM,KAAK/B,QAAQhE,IAC7B,IAAIyV,EAAUzV,EAAK+F,MAAM,KACzByP,EAAOC,EAAQ,IAAMA,EAAQvQ,OAAS,EAAIuQ,EAAQ,GAAK,OAGzDF,KACAxW,OAAOsJ,KAAKmN,GAAQxR,QAAQ,CAAC0R,EAAOhQ,KAClC6P,EAAY3P,QAAQ8P,IAA0B,OAAlBF,EAAOE,GAAkB,IAAMC,mBAAmBH,EAAOE,IAAU,QAGjG/O,KAASA,KAAO4O,EAAYrU,KAAK,OAGnC,OAAOoU,KAAcA,OAAc3O,IAAQA,GAG7C,IAAIiP,GACF,YACE,YAGAzT,OAAOgF,SAASgO,MAMpBS,EAAoB1W,IAAIqG,OAAOqQ,GAE/B,MAAMC,GACJ,UACA,OACA,MACA,OACA,MACA,SACA,QACA,iBCpEmBC,EACnBlX,YAAasL,GACXA,EAAMA,MAGNhL,IAAI2J,eAAeqB,EAAK,OAEpBhL,IAAIuJ,aAAayB,EAAK,OAAQ,SAChChL,IAAI2I,KAAK,cAAe,iFAG1B9I,OAAOkD,iBAAiBhD,MACtB8W,WAAY7W,IAAIC,aAAa,IAAI0K,OAAO,+DAMxClD,IAAKzH,IAAIyD,QAAQ,MAuBjBqT,WAAY9W,IAAIyD,QAAQ,MAcxBsT,oBAAqB/W,IAAIyD,QAAQzD,IAAIkG,SAAS8E,EAAI+L,oBAAqB/L,EAAIgM,qBAAqB,IAWhGC,QAASjX,IAAIwD,OAAOxD,IAAImG,UAAU6E,EAAIiM,UA6BtCC,YAAalX,IAAIwD,OAAOxD,IAAIkG,SAAS8E,EAAImM,OAMzCC,KAAMpX,IAAIyD,QAAQzD,IAAImG,UAAU6E,EAAIqM,WAOpCC,OAAQtX,IAAIyD,QAAQzD,IAAImG,UAAU6E,EAAIuM,WAOtCC,kBAAmBxX,IAAIyD,QAAQzD,IAAImG,UAAU6E,EAAIyM,cAmBjDC,gBAAiB1X,IAAIyD,QAAQzD,IAAIkG,SAAS8E,EAAI0M,iBAAiB,IAO/DC,QAAS3X,IAAIwD,OAAOxD,IAAIkG,SAAS8E,EAAI2M,QAAS,MAO9CC,MAAO5X,IAAIyD,QAAQ,MAUnBoU,cAAe7X,IAAIC,aAAa,SAAUkW,GAGxC,OAAOpW,KAAKkW,OAASD,IASvB8B,yBAA0B9X,IAAIC,aAAa,KACK,OAA1CD,IAAImG,UAAUpG,KAAKyX,mBACrBzX,KAAKgY,UAAU,0BAA2BhY,KAAKyX,qBAAqB,GAC3DxX,IAAImG,UAAUpG,KAAKqX,OAASpX,IAAImG,UAAUpG,KAAKuX,SACxDvX,KAAKgY,UAAU,gBAAiBhY,KAAKiY,eAAejY,KAAKqX,KAAMrX,KAAKuX,SAAS,KAUjFU,eAAgBhY,IAAIC,aAAa,CAACmX,EAAME,IAI/B,SAAWtX,IAAIgD,OAAOiV,QAAQb,KAAQE,MAuB/CY,SAAUlY,IAAIC,aAAawH,IACzB,IACI2O,EADA+B,EAAO1Q,EAAIgM,MAAM1T,KAAK8W,YAI1BT,EAAWnT,OAAOgF,SAASmO,SAASvV,QAAQ,IAAK,IAAIsE,cAErD,IAAIgR,GACFC,SAAUpW,IAAIkG,SAASiS,EAAK,GAAI/B,GAChCJ,SAAUhW,IAAIkG,SAASiS,EAAK,GAAInC,GAChCnO,KAAM7H,IAAImG,UAAUgS,EAAK,GAAI,KAC7BC,MAAOpY,IAAImG,UAAUgS,EAAK,IAC1BE,KAAMrY,IAAImG,UAAUgS,EAAK,KAI3B,GAAIhC,EAAIH,SAASvP,QAAQ,KAAO,EAAG,CACjC,IAAI6R,EAAc7Q,EAAIgM,MAAM,yBAE5B0C,EAAIH,SAAWG,EAAIH,SAASnP,MAAM,KAAKyF,MAEvCvM,KAAKqX,KAAOkB,EAAY,GACxBvY,KAAKuX,OAASgB,EAAY,GAC1BvY,KAAK+X,2BAaP,OAVA3B,EAAIoC,KAAOvY,IAAIkG,SAASiQ,EAAIH,SAASvC,MAAM,iBAAmC,UAAjB0C,EAAIC,SAAuB,IAAM,IAE1FD,EAAIH,SAASvP,QAAQ,KAAO,IAC9B0P,EAAIH,SAAWG,EAAIH,SAASnP,MAAM,KAAK,IAGd,MAAvBsP,EAAItO,KAAK0L,OAAO,KAClB4C,EAAItO,SAAWsO,EAAItO,QAGdsO,IAGTqC,SAAUxY,IAAIyD,QAAQ,MAOtBgV,iBAAkBzY,IAAIyD,QAAQ,IAC9BiV,iBAAkB1Y,IAAIyD,QAAQ,GAE9BkV,YAAa3Y,IAAIyD,QAAQ,KAEvB,GAAyB,OAArB1D,KAAKmX,YAAsB,CACR,OAAjBnX,KAAKkX,UACPlX,KAAKkX,YAGP,IAAI2B,EAAc5Y,IAAImG,UAAUpG,KAAKkX,QAAQ,gBAAiBlX,KAAKkX,QAAQ,gBAAiBlX,KAAKkX,QAAQ,iBAEzG,GAAgC,iBAArBlX,KAAKmX,YACd,GAAIlX,IAAIwJ,iBAAiBzJ,KAAKmX,YAAa,QAAS,CAClD,IAAI2B,EAAO9Y,KAAKmX,YAAY2B,KACxB1P,EAAOtJ,OAAOsJ,KAAK0P,GACnBC,KAEJ,IAAK,IAAItS,EAAI,EAAGA,EAAI2C,EAAKnD,OAAQQ,IAAK,CACpC,GAAIxG,IAAIoI,KAAKyQ,EAAK1P,EAAK3C,KACrB,MAAM,IAAI/G,MAAM,+FACkB,iBAAlBoZ,EAAK1P,EAAK3C,IAC1BsS,EAAWpS,QAAQyC,EAAK3C,MAAMiQ,mBAAmBsC,KAAKC,UAAUH,EAAK1P,EAAK3C,SAE1EsS,EAAWpS,QAAQyC,EAAK3C,MAAMiQ,mBAAmBoC,EAAK1P,EAAK3C,QAI/DzG,KAAKmX,YAAc4B,EAAW9W,KAAK,UAEnCjC,KAAKmX,YAAc6B,KAAKC,UAAUjZ,KAAKmX,aAAahS,OACpDnF,KAAKgY,UAAU,iBAAkBhY,KAAKmX,YAAYlR,QAAQ,GAC1DjG,KAAKgY,UAAU,eAAgB/X,IAAImG,UAAUyS,EAAa,qBAAqB,GAInF,GAAgC,iBAArB7Y,KAAKmX,YAA0B,CACxC,GAAoB,OAAhB0B,EAAsB,CAExB,IAAInF,EAAQ,kBAAkB7L,KAAK7H,KAAKmX,aAE1B,OAAVzD,GAAyE,UAAvD1T,KAAKmX,YAAYhS,OAAO8C,OAAO,EAAG,GAAG7C,eAAoF,MAAvDpF,KAAKmX,YAAYhS,OAAO8C,OAAO,EAAG,GAAG7C,cAC3HpF,KAAKgY,UAAU,eAAgB,qCAAqC,IAEpEhY,KAAKgY,UAAU,eAAgB,cAE4B,UAAvDhY,KAAKmX,YAAYhS,OAAO8C,OAAO,EAAG,GAAG7C,cAIzB,QAFdsO,EAAQ,gBAAgB7L,KAAK7H,KAAKmX,YAAYhS,UAG5CnF,KAAKgY,UAAU,eAAgBtE,EAAM,IAE9B,cAAc/G,KAAK3M,KAAKmX,YAAYhS,QAE7CnF,KAAKgY,UAAU,eAAgB,mBACtB,aAAarL,KAAK3M,KAAKmX,YAAYhS,SAE5CnF,KAAKgY,UAAU,eAAgB,cAKrChY,KAAKgY,UAAU,eAAgBhY,KAAKmX,YAAYlR,QAAQ,QAExDhG,IAAI2I,KAAK,6DAA8D5I,KAAKmX,oFAMhFlM,EAAIiO,eACNlZ,KAAKkZ,aAAejO,EAAIiO,cAG1BlZ,KAAKoW,IAAMnL,EAAImL,IACfpW,KAAKmZ,OAASlZ,IAAImG,UAAU6E,EAAIkO,OAAQ,OAExCnZ,KAAK4Y,cAGgE,OAAjE3Y,IAAIkG,SAASnG,KAAKqX,KAAMrX,KAAKuX,OAAQvX,KAAKyX,oBAC5CzX,KAAK+X,2BAITmB,mBACE,OAAOlZ,KAAK0Y,iBAGdQ,iBAAkB1V,GACZA,EAAQ,KACVA,EAAQ,IAGNA,EAAQ,IACVA,EAAQ,GAGVxD,KAAK0Y,iBAAmBlV,EAQ1B6S,eACE,OAAOpW,IAAIkG,SAASnG,KAAKyY,SAASpC,SAAU,QAO9CH,WACE,OAAOjW,IAAIkG,SAASnG,KAAKyY,SAASxC,UAGpCA,eACE,OAAOjW,KAAKkW,KAOdsC,WACE,OAAOxY,KAAKyY,SAASD,KAOvB1Q,WACE,OAAO7H,IAAIkG,SAASnG,KAAKyY,SAAS3Q,KAAM,KAQ1CuQ,YACE,OAAOpY,IAAIkG,SAASnG,KAAKyY,SAASJ,MAAO,IAY3Ce,sBACE,IAAI7C,EAASvW,KAAKqY,MAAMvR,MAAM,KAC1BuS,KAEJ,IAAK,IAAI5S,EAAI,EAAGA,EAAI8P,EAAOtQ,OAAQQ,IAAK,CACtC,IAAI+P,EAAUD,EAAO9P,GAAGK,MAAM,KAC1B/F,WAAgByV,EAAQ,WAE5B1W,OAAOC,eAAesZ,EAAWtY,GAC/BsC,YAAY,EACZE,cAAc,EACdD,UAAU,EACVE,MAAOvD,IAAImG,UAAUoQ,EAAQ,MAG/B1W,OAAOC,eAAesZ,EAAW7C,EAAQ,IACvCnT,YAAY,EACZE,cAAc,EACdK,IAAK,IAAeyV,EAAUtY,GAC9B+C,IAAMN,IACJ6V,EAAUtY,GAAQyC,EAClBxD,KAAKsZ,kBAAkB9C,EAAQ,GAAIhT,GAAO,MAKhD,OAAO6V,EAOTf,WACE,OAAOrY,IAAIkG,SAASnG,KAAKyY,SAASH,KAAM,IAO1ClC,UACE,OAAOpW,KAAK0H,IAGd0O,QAAS5S,GAOP,GAN6B,OAAzBvD,IAAImG,UAAU5C,IAChBvD,IAAI2I,KAAK,kBAAmB,6CAKI,OAA9B,cAAcf,KAAKrE,IAAkD,OAA/B,eAAeqE,KAAKrE,IAAmBvD,IAAIgD,OAAOjC,eAAe,YAAa,CACtH,IAAIuY,EAAMtZ,IAAIgD,OAAOiF,SACjBsR,KAAUD,EAAIrD,OAAOqD,EAAIE,YAE7BD,EAAOA,EAAK1S,MAAM,MAET0S,EAAKvT,OAAS,GAAGS,QAAQ,MAAQ,GACxC8S,EAAKjN,MAIPiN,GADAA,EAAOA,EAAKvX,KAAK,MACLyX,UAAU,EAAGF,EAAKG,YAAY,KAAO,GAEjDnW,KAAWvD,IAAIgD,OAAOiF,SAASmO,aAAamD,KAAQhW,IAAQ1C,QAAQ,iBAAkB,KAGxFd,KAAK0H,IAAMyO,EAAa3S,EAAM2B,QAC9BnF,KAAKyY,SAAWzY,KAAKmY,SAASnY,KAAK0H,KAGrCyR,aACE,OAAOnZ,KAAK+W,WAGdoC,WAAY3V,GACNxD,KAAK+W,aAAevT,IAIK,OAAzBvD,IAAImG,UAAU5C,IAChBvD,IAAI2I,KAAK,qBAAsB,6BAGjCpF,EAAQA,EAAM2B,OAAOyU,cAEjBhD,EAAYlQ,QAAQlD,GAAS,GAC/BvD,IAAI2I,KAAK,gFAAiFpF,MAG5FxD,KAAK+W,WAAavT,GAGpB4T,WACE,OAAOpX,KAAKmX,YAGdC,SAAU5T,GACRxD,KAAKmX,YAAc3T,EACnBxD,KAAK4Y,cAQPiB,yBACE,OAAO7Z,KAAK8X,cAAc9X,KAAK0H,KAOjC4P,eACE,OAAOrX,IAAIkG,SAASnG,KAAKqX,MAG3BC,aAAcD,GACZA,EAAOpX,IAAImG,UAAUiR,GAEjBrX,KAAKqX,OAASA,IAChBrX,KAAKqX,KAAOA,EAEuB,OAA/BpX,IAAImG,UAAUpG,KAAKuX,SACrBvX,KAAK+X,4BAWXP,aAAcD,GACZA,EAAStX,IAAImG,UAAUmR,GAEnBvX,KAAKuX,SAAWA,IAClBvX,KAAKuX,OAASA,EAEmB,OAA7BtX,IAAImG,UAAUpG,KAAKqX,OACrBrX,KAAK+X,4BAUXL,gBAAiB/D,GACfA,EAAQ1T,IAAImG,UAAUuN,GAElB3T,KAAKyX,oBAAsB9D,IAC7B3T,KAAKyX,kBAAoB9D,EACzB3T,KAAK+X,4BAeTpY,UAAWkQ,EAAKrM,EAAOsW,GAAoB,GACzCjK,EAAMA,EAAI/O,QAAQ,QAAS,IAAIsE,eAEV,OAAjBpF,KAAKkX,cAA0C7R,IAAtBrF,KAAKkX,QAAQrH,IAAsBiK,KACzC,OAAjB9Z,KAAKkX,UACPlX,KAAKkX,YAGPlX,KAAKkX,QAAQrH,GAAOrM,GAWxB7D,UAAWkQ,GACT,GAAqB,OAAjB7P,KAAKkX,SAIJlX,KAAKkX,QAAQlW,eAAe6O,EAAIzK,eAIrC,OAAOpF,KAAKkX,QAAQrH,EAAIzK,eAU1BzF,aAAckQ,GACS,OAAjB7P,KAAKkX,iBACAlX,KAAKkX,QAAQrH,EAAIzK,sBACjBpF,KAAKkX,QAAQrH,IAgBxBlQ,kBAAmBkQ,EAAKrM,EAAOsW,GAAoB,GACjD,IAEIpG,EAFAqG,EAAK,IAAInP,OAAO,cAAgBiF,EAAM,wBAA0BA,EAAM,OAAQ,KAIlF,GAHoC,OAAtBkK,EAAGlS,KAAK7H,KAAK0H,KAGf,CACV,IAAKoS,EACH,OAKY,QAFdpG,EAAQqG,EAAGlS,KAAK7H,KAAK0H,QAGnB1H,KAAKoW,IAAMpW,KAAK0H,IAAI5G,WAAWb,IAAImG,UAAUsN,EAAM,GAAIA,EAAM,SAAU7D,IAAgB,OAAVrM,EAAiB,IAAMkT,mBAAmBlT,GAAS,YAGlIxD,KAAKoW,OAASpW,KAAK0H,MAA4B,IAAtB1H,KAAKqY,MAAMpS,OAAe,IAAM,MAAM4J,IAAgB,OAAVrM,EAAiB,IAAMkT,mBAAmBlT,GAAS,KAS5H7D,qBAAsBkQ,GACpB7P,KAAKoW,IAAMpW,KAAK0H,IAAI5G,QAAQ,IAAI8J,UAAUiF,iBAAmBA,MAAQA,IAAO,MAAO,IAGrFlQ,eACqB,OAAfK,KAAK6X,QACP7X,KAAK6X,MAAQpI,WAAW,KACtB,MAAM,IAAI/P,MAAM,wBAA0BM,KAAKoW,MAC9CpW,KAAK4X,UAIZjY,cACEqa,aAAaha,KAAK6X,OAClB7X,KAAK6X,MAAQ,KAWflY,KAAMgM,GACJ,IAAIyL,EAAOpX,KAAKoX,KAGZnX,IAAIkG,SAASiR,IACXpX,KAAKgX,qBAAuB,mBAAmBtQ,QAAQ1G,KAAKmZ,SAAW,IACzE/B,EAAO,MAMX,IAAI6C,EAAM,IAAIC,eACVC,GAAY,EACZ1Z,EAAKT,KA8CT,GA3CAia,EAAIG,mBAAqB,WACnBD,GAIAF,EAAII,aAAeH,eAAeI,OACpCH,GAAY,EAEO,IAAfF,EAAIM,QACNta,IAAI2I,uBAAuBnI,EAAG0Y,UAAU1Y,EAAG2V,8BAGzCnW,IAAIoI,KAAKsD,IACXA,EAASsO,KAMfA,EAAIO,QAAU,SAAUrX,GACtBlD,IAAI2I,KAAK,YAAazF,IAEjBgX,GAAala,IAAIoI,KAAKsD,IACzBA,EAASsO,GAGXE,GAAY,GAGdF,EAAIQ,UAAY,SAAUtX,GACxBgX,GAAY,EACZxO,EAASsO,IAGXA,EAAIrC,QAAU5X,KAAK4X,QAGnBqC,EAAIS,KAAK1a,KAAKmZ,OAAQnZ,KAAKoW,KAAK,GAGhC6D,EAAItC,gBAAkB3X,KAAK2X,gBAGN,OAAjB3X,KAAKkX,QAAkB,CACzB,IAAIA,EAAUpX,OAAOsJ,KAAKpJ,KAAKkX,SAC/B,IAAK,IAAIzQ,EAAI,EAAGA,EAAIyQ,EAAQjR,OAAQQ,IAClCwT,EAAIU,iBAAiBzD,EAAQzQ,GAAIzG,KAAKkX,QAAQA,EAAQzQ,KAK1DwT,EAAIW,KAAKxD,UCnwBQyD,EACnBlb,cACEG,OAAOkD,iBAAiBhD,MAOtB8a,0BAA2B7a,IAAIyD,QAAQ,CAACuH,EAAKkO,EAAS,SACjC,iBAARlO,IACTA,GACEmL,IAAKnL,KAITA,EAAMA,OACFkO,OAASA,EACblO,EAAImL,IAAMnW,IAAImG,UAAU6E,EAAImL,IAAKH,GAE1B,IAAIhW,IAAI8a,IAAIlE,QAAQ5L,KAI7B+P,YAAa/a,IAAIyD,QAASyV,IACxB,MAAM1Y,EAAKT,KAEX,OAAO,WACL,IACI2L,EADAjC,EAAOzJ,IAAIsF,MAAMjB,WAGjBrE,IAAIoI,KAAKqB,EAAKA,EAAKzD,OAAS,MAC9B0F,EAAWjC,EAAK6C,OAGlB7C,EAAK/C,KAAKwS,GAEV,IAAI8B,EAAUxa,EAAGqa,6BAA6BpR,GAG9CjJ,EAAGma,KAAKK,EAAStP,MAKrBuP,QAASjb,IAAIC,aAAaF,KAAKmb,QAAQC,KAAKpb,OAC5Cqb,KAAMpb,IAAIC,aAAaF,KAAKsb,KAAKF,KAAKpb,OACtCub,IAAKtb,IAAIC,aAAaF,KAAK4D,IAAIwX,KAAKpb,OACpCwb,KAAMvb,IAAIC,aAAaF,KAAKyb,KAAKL,KAAKpb,OACtC0b,IAAKzb,IAAIC,aAAaF,KAAK2b,IAAIP,KAAKpb,OACpC4b,OAAQ3b,IAAIC,aAAaF,KAAK4N,OAAOwN,KAAKpb,OAC1C6b,MAAO5b,IAAIC,aAAaF,KAAKkC,MAAMkZ,KAAKpb,OACxCgZ,KAAM/Y,IAAIC,aAAaF,KAAK8b,KAAKV,KAAKpb,OACtC+b,MAAO9b,IAAIC,aAAaF,KAAKgc,MAAMZ,KAAKpb,SAI5C6W,cACE,OAAOA,EAaTlX,QAASsL,EAAKU,IACZV,EAAMA,OACFkO,OAASlZ,IAAImG,UAAU6E,EAAIkO,OAAQ,OAEnClZ,IAAIoI,KAAKrI,KAAKiL,EAAIkO,SACpBnZ,KAAKgb,YAAY/P,EAAIkO,OAArBnZ,IAAgCsE,WAEhCtE,KAAK4a,KAAK,IAAI3a,IAAI8a,IAAIlE,QAAQ5L,GAAMU,GAexChM,UACEK,KAAKgb,YAAY,WAAW1V,MAAMtF,KAAMsE,WAc1C3E,OACEK,KAAKgb,YAAY,QAAQ1V,MAAMtF,KAAMsE,WAcvC3E,MACEK,KAAKgb,YAAY,OAAO1V,MAAMtF,KAAMsE,WActC3E,OACEK,KAAKgb,YAAY,QAAQ1V,MAAMtF,KAAMsE,WAcvC3E,MACEK,KAAKgb,YAAY,OAAO1V,MAAMtF,KAAMsE,WActC3E,SACEK,KAAKgb,YAAY,UAAU1V,MAAMtF,KAAMsE,WAiBzC3E,QACEM,IAAI2I,KAAK,yBAA0B,mCACnC5I,KAAKgb,YAAY,SAAS1V,MAAMtF,KAAMsE,WAiBxC3E,KAAMyW,EAAKzK,GACT,IAAK1L,IAAIoI,KAAKsD,GACZ,MAAM,IAAIjM,MAAM,4CAIlB,IAAIub,EAAUjb,KAAK8a,2BAA2B1E,IAAAA,IAE9CpW,KAAKic,UAAUhB,GAEfA,EAAQL,KAAMsB,IACZ,IACE,IAAIC,EAAenD,KAAKoD,MAAMF,EAASG,cACvC1Q,EAAS,KAAMwQ,GACf,MAAOhZ,GACPA,EAAE+Y,SAAWjc,IAAIkG,SAAS+V,EAASG,cACnC1Q,EAASxI,EAAG,SAqBlBxD,MAAOyW,EAAKzK,GAGV,MAAM9H,EAAK,kBAAoByY,KAAKC,MAAM,IAASD,KAAKE,UAExDtZ,OAAOW,GAAM,CAAC4Y,WACLvZ,OAAOW,GAEd6Y,SAAStF,KAAKuF,YAAYC,GAEnBjR,EAAS,KAAM8Q,KAGxB,IAAIG,EAASF,SAASG,cAAc,UAEpCD,EAAOE,IAAM1G,GAAOA,EAAI1P,QAAQ,MAAQ,EAAI,IAAM,KAAO,YAAc7C,EAEvE+Y,EAAOG,iBAAiB,QAAU5Z,WACzBD,OAAOW,GAEP8H,EAAS,IAAIjM,MAAM,kJAG5Bgd,SAAStF,KAAK4F,YAAYJ,GAK5Bjd,KAAMsb,EAAStP,GACb3L,KAAKic,UAAUhB,GACfA,EAAQL,KAAKjP,GAQfhM,UAAWsb,KC9QbJ,EAAQhW,UAAUoY,uBCyC2BpC,EAC3Clb,YAAasL,GACXpL,QAEAoL,EAAMA,MAENnL,OAAOkD,iBAAiBhD,MAKtBkd,cAAejd,IAAIyD,QAAQzD,IAAImG,UAAU6E,EAAIiM,aAO7CiG,kBAAmBld,IAAIyD,QAAQzD,IAAImG,UAAU6E,EAAIsN,iBAMjDlB,KAAMpX,IAAIyD,QAAQzD,IAAImG,UAAU6E,EAAIqM,WAMpCC,OAAQtX,IAAIyD,QAAQzD,IAAImG,UAAU6E,EAAIuM,WAMtC4F,YAAand,IAAIyD,QAAQzD,IAAImG,UAAU6E,EAAI0I,MAAO1I,EAAIyM,cAOtD2F,YAAapd,IAAIyD,QAAQzD,IAAImG,UAAU6E,EAAIoN,WAY3CiF,QAASrd,IAAIyD,QAAQzD,IAAIkG,SAAS8E,EAAIqS,QAASrS,EAAIsS,kBAAmBtH,OAMtEuH,QAASvd,IAAIyD,QAAQzD,IAAIkG,SAAS8E,EAAIuS,SAAS,IAM/CC,QAASxd,IAAIwD,OAAOxD,IAAIkG,SAAS8E,EAAIwS,SAAS,MAG5Czd,KAAKsd,QAAQ5W,QAAQ,OAAS,GAAK1G,KAAKsd,QAAQ5W,QAAQ,OAAS,GACnE1G,KAAKsd,eAAiBtd,KAAKyd,QAAU,IAAM,QAAQzd,KAAKsd,UAC/Ctd,KAAKyd,UACdzd,KAAKsd,QAAUtd,KAAKsd,QAAQxc,QAAQ,UAAW,aAGxB,OAArBd,KAAKod,YACPpd,KAAKuY,aACHb,YAAa1X,KAAKod,aAEG,OAAdpd,KAAKqX,MAAkC,OAAjBrX,KAAK0d,UACpC1d,KAAKuY,aACHjB,SAAUtX,KAAKqX,KACfG,SAAUxX,KAAKuX,SAKrBD,eACE,OAAOtX,KAAKqX,KAGdC,aAAc9T,GACRxD,KAAKqX,OAAS7T,IAChBxD,KAAKqX,KAAO7T,EAEQ,OAAhBxD,KAAKuX,SACPvX,KAAKuY,aACHjB,SAAUtX,KAAKqX,KACfG,SAAUxX,KAAKuX,UAMvBC,aAAchU,GACRxD,KAAKuX,SAAW/T,IAClBxD,KAAKuX,OAAS/T,EAEI,OAAdxD,KAAKqX,OACPrX,KAAKuY,aACHjB,SAAUtX,KAAKqX,KACfG,SAAUxX,KAAKuX,UAuBvBL,cACE,OAAOlX,KAAKkd,cAGdhG,YAAa1T,GACXxD,KAAKkd,cAAgB1Z,EA0BvB+U,gBAAiBA,GACf,GAAIA,EAAYvX,eAAe,gBAAkBuX,EAAYvX,eAAe,gBAAkBuX,EAAYvX,eAAe,SACvHuX,EAAYb,YAAczX,IAAIkG,SAASoS,EAAYb,YAAaa,EAAY6E,YAAa7E,EAAY5E,OAEjG4E,EAAYvX,eAAe,oBACtBuX,EAAYjB,SAGjBiB,EAAYvX,eAAe,oBACtBuX,EAAYf,cAEhB,KAAMe,EAAYvX,eAAe,aAAeuX,EAAYvX,eAAe,aAAiBuX,EAAYvX,eAAe,gBAC5H,MAAM,IAAItB,MAAM,oGAGlBM,KAAKmd,kBAAoB5E,EAErBA,EAAYjB,WACdtX,KAAKsX,SAAWiB,EAAYjB,UAG1BiB,EAAYf,WACdxX,KAAKwX,SAAWe,EAAYf,UAKhCe,kBAEE,OADAtY,IAAI2I,KAAK,2EAEP0O,SAAU,KACVC,OAAQ,KACRC,SAAU,KACVE,YAAa,MAuBjBW,YACE,OAAOrY,KAAKqd,YAGdhF,UAAW7U,GACTxD,KAAKqd,YAAc7Z,EAYrB7D,WAAY+H,GAKV,OAJIA,EAAIhB,QAAQ,OAAS,IACvBgB,EAAMyO,KAAgBnW,KAAKsd,WAAW5V,MAGjCA,EAAI5G,QAAQ,YAAa,KAAKA,QAAQ,UAAW,OAU1DnB,UAAWsb,GAETA,EAAQ7E,IAAMpW,KAAK2d,WAAW1C,EAAQ7E,KAGtC,IAAIwH,EAAK9d,OAAOsJ,KAAKpJ,KAAKqd,aAC1B,GAAIO,EAAG3X,OAAS,EAAG,CACjB,IAAIqQ,KACJ,IAAK,IAAI7P,EAAI,EAAGA,EAAImX,EAAG3X,OAAQQ,IAC7B6P,EAAY3P,QAAQiX,EAAGnX,MAAMiQ,mBAAmB1W,KAAKqd,YAAYO,EAAGnX,QAGhD,KAAlBwU,EAAQ5C,MACV4C,EAAQ7E,OAAS6E,EAAQ7E,OAAOE,EAAYrU,KAAK,OAEjDgZ,EAAQ7E,OAAS6E,EAAQ7E,OAAOE,EAAYrU,KAAK,OAKrD,IAAI4b,EAAW/d,OAAOsJ,KAAKpJ,KAAKkd,eAChC,IAAK,IAAIzW,EAAI,EAAGA,EAAIoX,EAAS5X,OAAQQ,IACnCwU,EAAQjD,UAAU6F,EAASpX,GAAIzG,KAAKkd,cAAcW,EAASpX,KAIzDzG,KAAKmd,kBAAkBzF,YACzBuD,EAAQvD,YAAc1X,KAAKmd,kBAAkBzF,YACpC1X,KAAKmd,kBAAkB7F,WAChC2D,EAAQ3D,SAAWtX,KAAKmd,kBAAkB7F,SAC1C2D,EAAQzD,SAAWxX,KAAKmd,kBAAkB3F,UAIxCxX,KAAKwd,SACPvC,EAAQ3B,kBAAkB,WAAY,IAAKxO,MAAQ3D,UAAUN,WAAayV,KAAKE,SAAS3V,WAAW/F,QAAQ,IAAK,IAAK,QDtU3H,MAAMgd,EAAU,IAAIjD,QEXCkD,EACnBpe,eAAgBqe,EAAKC,EAAKnW,MACxB,IAAIoW,KACAC,EAAQle,IAAI2G,OAAOoX,GAMvB,GAAIG,IALQle,IAAI2G,OAAOqX,GAMrB,QACG,IAAKnW,EAAMkW,EAAKC,IAIrB,OADJxc,QAAQ2c,IAAI,WAAYD,EAAOH,EAAKC,EAAK,OAAQnW,EAAK7F,KAAK,MAC/Ckc,GAQN,IAAK,SACH,IAAI/U,EAAOtJ,OAAOsJ,KAAK4U,GAIvB,IAAK,IAAIvX,EAAI,EAAGA,EAAI2C,EAAKnD,OAAQQ,IAAK,CAEpC,IAAI4X,EAAeve,OAAOkV,UAAWlN,GAErCuW,EAAa1X,KAAKyC,EAAK3C,IAElBwX,EAAIjd,eAAeoI,EAAK3C,IAGW,WAA7BxG,IAAI2G,OAAOoX,EAAI5U,EAAK3C,KAE7ByX,EAAcA,EAAYxS,OAAO1L,KAAKse,QAAQN,EAAI5U,EAAK3C,IAAKwX,EAAI7U,EAAK3C,IAAK4X,IACjEL,EAAI5U,EAAK3C,MAAQwX,EAAI7U,EAAK3C,MACF,UAA7BxG,IAAI2G,OAAOoX,EAAI5U,EAAK3C,MAAiD,UAA7BxG,IAAI2G,OAAOqX,EAAI7U,EAAK3C,KAE9DyX,EAAcA,EAAYxS,OAAO1L,KAAKse,QAAQN,EAAI5U,EAAK3C,IAAKwX,EAAI7U,EAAK3C,IAAK4X,IAI1EH,EAAYvX,MAAM,IAAK0X,EAAcL,EAAI5U,EAAK3C,IAAKwX,EAAI7U,EAAK3C,OAX9DyX,EAAYvX,MAAM,IAAK0X,EAAcL,EAAI5U,EAAK3C,OAiBlD2C,EAAOtJ,OAAOsJ,KAAK4U,IACdnS,QAAQoS,GACb7U,EAAOnJ,IAAIoJ,iCAAiC/D,MAAMtF,KAAMoJ,GAExD,IAAK,IAAI3C,EAAI,EAAGA,EAAI2C,EAAKnD,OAAQQ,IAAK,CAEpC,IAAI4X,EAAeve,OAAOkV,UAAWlN,GACrCuW,EAAa1X,KAAKyC,EAAK3C,IAEvByX,EAAYvX,MAAM,IAAK0X,EAAcJ,EAAI7U,EAAK3C,MAGhD,MAEF,IAAK,QACHyX,EAAcle,KAAKue,aAAaP,EAAKC,GAErC,MAEF,IAAK,SACHxc,QAAQ2c,IAAI,0BAEd,QACMJ,IAAQC,IACc,cAApBhe,IAAI2G,OAAOoX,IAA4C,cAApB/d,IAAI2G,OAAOqX,GAChDC,EAAYvX,MAAM,IAAKmB,EAAMkW,IACA,cAApB/d,IAAI2G,OAAOoX,IAA4C,cAApB/d,IAAI2G,OAAOqX,GACvDC,EAAYvX,MAAM,IAAKmB,EAAMmW,IAE7BC,EAAYvX,MAAM,IAAKmB,EAAMkW,EAAKC,KAK1C,OAAOC,EAGTve,aAAcqe,EAAKC,GAEf,SAQJte,4BAA6B6e,EAAQC,EAAQC,EAAMC,GACjD,IAAK,IAAIC,EAAS,EAAGA,EAASF,EAAME,IAAU,CAC5C,IAAIC,EAAOL,EAAOI,GAElB,IAAK,IAAIE,EAAS,EAAGA,EAASH,EAAMG,IAAU,CAC5C,IAAIC,EAAON,EAAOK,GAElB,GAAIF,IAAWE,GAAUD,IAASE,EAChC,OAAO,IAMfpf,kBAAmB6e,EAAQC,EAAQG,EAAQE,EAAQE,GACjD,IAAIC,EAAST,EAAOI,GAChBM,EAAST,EAAOK,GAEpB,GAAIG,IAAWC,EACb,OAAO,EAGT,GAAsB,iBAAXD,GAAyC,iBAAXC,EACvC,OAAO,EAGT,IAOIC,EACAC,EARAC,EAAaL,EAAQK,WAEzB,OAAKA,GAQiB,iBAAXT,GACTI,EAAQM,WAAarf,IAAI8G,WAAWiY,EAAQM,iBAGvB,KAFrBH,EAAQH,EAAQM,WAAWV,MAGzBI,EAAQM,WAAWV,GAAUO,EAAQE,EAAWJ,EAAQL,KAG1DO,EAAQE,EAAWJ,QAGA,IAAVE,IAIW,iBAAXL,GACTE,EAAQO,WAAatf,IAAI8G,WAAWiY,EAAQO,iBAGvB,KAFrBH,EAAQJ,EAAQO,WAAWT,MAGzBE,EAAQO,WAAWT,GAAUM,EAAQC,EAAWH,EAAQJ,KAG1DM,EAAQC,EAAWH,QAGA,IAAVE,GAIJD,IAAUC,IApCRJ,EAAQQ,iBAAmBZ,IAAWE,EA4CjDnf,uBAAwB6e,EAAQC,EAAQG,EAAQE,GAC9C,OAAON,EAAOI,KAAYH,EAAOK,GAGnCnf,uBAAwB6e,EAAQC,EAAQ/K,EAAOsL,GAC7C,IAEIS,EACAC,EAHAhB,EAAOF,EAAOvY,OACd0Y,EAAOF,EAAOxY,OAKd0Z,GAAUjB,EAAO,GAErB,IAAKe,EAAI,EAAGA,EAAIf,EAAO,EAAGe,IAGxB,IAFAE,EAAOF,IAAMd,EAAO,GAEfe,EAAI,EAAGA,EAAIf,EAAO,EAAGe,IACxBC,EAAOF,GAAGC,GAAK,EAOnB,IAHAC,EAAOjM,MAAQA,EAGV+L,EAAI,EAAGA,EAAIf,EAAO,EAAGe,IACxB,IAAKC,EAAI,EAAGA,EAAIf,EAAO,EAAGe,IACpBhM,EAAM8K,EAAQC,EAAQgB,EAAI,EAAGC,EAAI,EAAGV,GACtCW,EAAOF,GAAGC,GAAKC,EAAOF,EAAI,GAAGC,EAAI,GAAK,EAEtCC,EAAOF,GAAGC,GAAKpD,KAAKsD,IAAID,EAAOF,EAAI,GAAGC,GAAIC,EAAOF,GAAGC,EAAI,IAK9D,OAAOC,EAGThgB,oBAAqBggB,EAAQnB,EAAQC,EAAQG,EAAQE,EAAQE,GAC3D,GAAe,IAAXJ,GAA2B,IAAXE,EAClB,OACEe,YACAC,YACAC,aAIJ,GAAIJ,EAAOjM,MAAM8K,EAAQC,EAAQG,EAAS,EAAGE,EAAS,EAAGE,GAAU,CACjE,IAAIgB,EAAcC,UAAUN,EAAQnB,EAAQC,EAAQG,EAAS,EAAGE,EAAS,EAAGE,GAM5E,OAJAgB,EAAYH,SAASlZ,KAAK6X,EAAOI,EAAS,IAC1CoB,EAAYF,SAASnZ,KAAKiY,EAAS,GACnCoB,EAAYD,SAASpZ,KAAKmY,EAAS,GAE5BkB,EAGT,OAAIL,EAAOf,GAAQE,EAAS,GAAKa,EAAOf,EAAS,GAAGE,GAC3CmB,UAAUN,EAAQnB,EAAQC,EAAQG,EAAQE,EAAS,EAAGE,GAEtDiB,UAAUN,EAAQnB,EAAQC,EAAQG,EAAS,EAAGE,EAAQE,GAIjErf,cAAe6e,EAAQC,EAAQ/K,EAAOsL,GACpCA,EAAUA,MAEV,IAAIW,EAASO,aAAa1B,EAAQC,EAAQ/K,GAASyM,aAAcnB,GAC7D9S,EAAS+T,UAAUN,EAAQnB,EAAQC,EAAQD,EAAOvY,OAAQwY,EAAOxY,OAAQ+Y,GAM7E,MAJsB,iBAAXR,GAAyC,iBAAXC,IACvCvS,EAAO2T,SAAW3T,EAAO2T,SAAS5d,KAAK,KAGlCiK,GCzPX,IAAIkU,EAAW,KAOf,MAAMC,EAAe,WACnB,IAAIC,EACAF,KAEJ,IAAK,IAAIG,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC5BD,EAAIC,EAEJ,IAAK,IAAItM,EAAI,EAAGA,EAAI,EAAGA,IACrBqM,EAAU,EAAJA,EAAU,WAAcA,IAAM,EAAOA,IAAM,EAGnDF,EAASG,GAAKD,EAGhB,OAAOF,SAOYI,EACnB7gB,cACE,OAAOoe,EAAWO,WAAWha,WAW/B3E,gBAAiBwU,GACI,iBAARA,IACTA,EAAM6E,KAAKC,UAAUjZ,KAAKygB,UAAUtM,KAGjCiM,IACHA,EAAWC,KAGb,IAAIK,GAAM,EAEV,IAAK,IAAIja,EAAI,EAAGA,EAAI0N,EAAIlO,OAAQQ,IAC9Bia,EAAOA,IAAQ,EAAKN,EAAqC,KAA3BM,EAAMvM,EAAIwM,WAAWla,KAGrD,QAAgB,EAARia,KAAgB,EAkB1B/gB,cAGE,QAAS,MAAM,KAAK,KAAK,KAAK,MAAMmB,QAAQ,SAAUwf,IACnDA,EAAIM,OAAOC,gBAAgB,IAAIC,WAAW,IAAI,GAAK,IAAMR,EAAI,GAAGzZ,SAAS,KAe9ElH,cACE,IAAIohB,KAEJ,IAAK,IAAIta,EAAI,EAAGA,EAAI,IAAKA,IACvBsa,EAAIta,IAAMA,EAAI,GAAK,IAAM,IAAM,EAAII,SAAS,IAG9C,MAAMma,EAAqB,WAAhB1E,KAAKE,SAAwB,EAClCyE,EAAqB,WAAhB3E,KAAKE,SAAwB,EAClC0E,EAAqB,WAAhB5E,KAAKE,SAAwB,EAClC2E,EAAqB,WAAhB7E,KAAKE,SAAwB,EAExC,OAAOuE,EAAS,IAALC,GAAaD,EAAIC,GAAM,EAAI,KAAQD,EAAIC,GAAM,GAAK,KAAQD,EAAIC,GAAM,GAAK,KAClF,IAAMD,EAAS,IAALE,GAAaF,EAAIE,GAAM,EAAI,KAAQ,IAAMF,EAAIE,GAAM,GAAK,GAAO,IACzEF,EAAIE,GAAM,GAAK,KAAQ,IAAMF,EAAS,GAALG,EAAY,KAAQH,EAAIG,GAAM,EAAI,KAAQ,IAC3EH,EAAIG,GAAM,GAAK,KAAQH,EAAIG,GAAM,GAAK,KAAQH,EAAS,IAALI,GAAaJ,EAAII,GAAM,EAAI,KAC7EJ,EAAII,GAAM,GAAK,KAAQJ,EAAII,GAAM,GAAK,KAc1CxhB,iBAAkB8c,GAChB,GAAoB,iBAATA,EACT,MAAM,IAAI/c,0BAA0BO,IAAI2G,OAAO6V,gCAIjD,IAAI2E,EAAwBlX,OAAO,cAEV,UAArBjK,IAAI2G,OAAO6V,KACbA,GACE9c,CAACyhB,GAAwB3E,IAI7B,IAAIvQ,KACA1H,EAAY1E,OAAOsJ,KAAKqT,GAE5B,IAAK,IAAIhW,EAAI,EAAGA,EAAIjC,EAAUyB,OAAQQ,IACpC,QAA2BpB,IAAvBoX,EAAKjY,EAAUiC,IACjB,OAAQxG,IAAI2G,OAAO6V,EAAKjY,EAAUiC,MAChC,IAAK,SACH3G,OAAOC,eACLmM,EACA1H,EAAUiC,GACVxG,IAAIwD,OAAOxD,IAAIohB,KAAKC,KAAKb,UAAUhE,EAAKjY,EAAUiC,OAGpD,MAEF,IAAK,QACHyF,EAAO1H,EAAUiC,OAEjB,IAAK,IAAIiP,EAAI,EAAGA,EAAI+G,EAAKjY,EAAUiC,IAAIR,OAAQyP,IAC7CxJ,EAAO1H,EAAUiC,IAAIE,KAAK1G,IAAIohB,KAAKC,KAAKb,UAAUhE,EAAKjY,EAAUiC,MAGnE,MAEF,IAAK,OACH3G,OAAOC,eAAemM,EAAQ1H,EAAUiC,GAAIxG,IAAIwD,OAAOgZ,EAAKjY,EAAUiC,IAAI8a,gBAE1E,MAEF,IAAK,SACCH,IAA0B5c,EAAUiC,KACtCyF,EAAO1H,EAAUiC,IAAMgW,EAAKjY,EAAUiC,IAAII,YAG5C,MAEF,IAAK,SACH/G,OAAOC,eAAemM,EAAQ1H,EAAUiC,GAAIxG,IAAIwD,OAAOgZ,EAAKjY,EAAUiC,IAAII,aAE1E,MAEF,IAAK,UACL,IAAK,MACH,IAAI2a,KAEJ/E,EAAKjY,EAAUiC,IAAI1B,QAAQ,CAACvB,EAAOqM,KACjC2R,EAAU3R,EAAIhJ,YAAc7G,KAAKygB,UAAUjd,KAG7C0I,EAAO1H,EAAUiC,IAAM+a,EAEvB,MAEF,IAAK,UACL,IAAK,MACH,GAAgC,IAA5B/E,EAAKjY,EAAUiC,IAAIuJ,KAAY,CACjC9D,EAAO1H,EAAUiC,OACjB,MAGFyF,EAAO1H,EAAUiC,IAAMzG,KAAKygB,UAAUhb,MAAMoP,KAAK4H,EAAKjY,EAAUiC,IAAIkL,WAEpE,MAEF,IAAK,WACH,MAEF,QACEzF,EAAO1H,EAAUiC,IAAMgW,EAAKjY,EAAUiC,IAK9C,YAAyCpB,IAAlC6G,EAAOkV,GAAuClV,EAAOkV,GAAyBlV,EAUtFvM,mBAAoB8hB,GAClB,GAAIA,aAAiBxhB,IAAIohB,KAAKI,OAA+B,UAAtBxhB,IAAI2G,OAAO6a,GAChD,OAAO,EAGT,GAAIA,EAAMzgB,eAAe,cAAoC,OAApBygB,EAAM5c,UAAoB,CACjE,IAAI6c,EAAiBD,EACjBjT,EAAQ,EAEZ,KAAoC,OAA7BkT,EAAe7c,WAAsB2J,EAAQ,IAKlD,GAJAA,KAEAkT,EAAiBA,EAAe7c,qBAEF5E,IAAIohB,KAAKI,OAAwC,UAA/BxhB,IAAI2G,OAAO8a,GACzD,OAAO,EAKb,OAAOD,aAAiBxhB,IAAIohB,KAAKM,cCxOhCC,EACJjiB,YAAakiB,EAAS,KAAMC,KAAYC,GAAS,OAC/CjiB,OAAOkD,iBAAiBhD,MACtB6hB,OAAQ5hB,IAAIyD,QAAQme,GACpBC,MAAO7hB,IAAIyD,QAAQoe,GACnBC,MAAO9hB,IAAIyD,QAAQqe,GAEnBC,SAAU/hB,IAAIyD,SACZue,MAAO,KACPC,SAAU,KAWV5D,QAAS,CAAC6D,EAAaC,IACdD,EAAcC,GAAgB,EAAKD,EAAcC,EAAe,EAAI,MAMjF,IAAK,IAAI3b,EAAI,EAAGA,EAAIzG,KAAK8hB,MAAM7b,OAAQQ,IACrCzG,KAAK8hB,MAAMrb,GAAGob,OAAS7hB,KAKzB,IAAK,IAAIyG,EAAI,EAAGA,EAAIzG,KAAK+hB,MAAM9b,OAAQQ,IACf,OAAlBzG,KAAK+hB,MAAMtb,KACbzG,KAAK+hB,MAAMtb,GAAGob,OAAS7hB,MAW7BL,OAAQkQ,GACN,GAAI7P,KAAK8hB,MAAM7b,OAAS,EAAG,CACzB,IAiBIQ,EAjBAiP,EAAI1V,KAAK8hB,MAAM,GAEnB,GAA0C,IAAtC9hB,KAAKgiB,SAAS1D,QAAQ5I,EAAE7F,IAAKA,GAC/B,OACEwS,KAAM3M,EACNpM,MAAO,GAIX,GAAItJ,KAAKgiB,SAAS1D,QAAQzO,EAAK6F,EAAE7F,KAAO,EACtC,OAAsB,OAAlB7P,KAAK+hB,MAAM,GACN/hB,KAAK+hB,MAAM,GAAGO,OAAOzS,IAGrB0S,KAAMviB,KAAMsJ,MAAO,GAI9B,IAAK7C,EAAI,EAAGA,EAAIzG,KAAK8hB,MAAM7b,OAAQQ,IAAK,CACtC,IAAIkP,EAAI3V,KAAK8hB,MAAMrb,GAEnB,GAA0C,IAAtCzG,KAAKgiB,SAAS1D,QAAQ3I,EAAE9F,IAAKA,GAC/B,OACEwS,KAAM1M,EACNrM,MAAO7C,GAIX,GAAIzG,KAAKgiB,SAAS1D,QAAQzO,EAAK8F,EAAE9F,KAAO,EACtC,OAAsB,OAAlB7P,KAAK+hB,MAAMtb,GACNzG,KAAK+hB,MAAMtb,GAAG6b,OAAOzS,IAGrB0S,KAAMviB,KAAMsJ,MAAO7C,GAG9BiP,EAAIC,EAGN,OAAsB,OAAlB3V,KAAK+hB,MAAMtb,GACNzG,KAAK+hB,MAAMtb,GAAG6b,OAAOzS,IAGrB0S,KAAMviB,KAAMsJ,MAAO7C,GAG9B,OAAS8b,KAAMviB,KAAMsJ,MAAO,GAS9B3J,IAAKkQ,GACH,IAAI3D,EAASlM,KAAKsiB,OAAOzS,GACzB,OAAO3D,EAAOmW,KAAOnW,EAAOmW,KAAK7e,WAAQ6B,EAU3C1F,IAAKkQ,EAAKrM,EAAOgf,GAAY,GAC3B,IAAItW,EAASlM,KAAKsiB,OAAOzS,GAGzB,GAAI3D,EAAOmW,KAAM,CACf,IAAKG,EACH,OAIF,YADAtW,EAAOmW,KAAK7e,MAAQA,GAItB,IAAI+e,EAAOrW,EAAOqW,KACdjZ,EAAQ4C,EAAO5C,MAEnBiZ,EAAKT,MAAMnc,OAAO2D,EAAO,EAAG,IAAImZ,EAASF,EAAM1S,EAAKrM,IACpD+e,EAAKR,MAAMpc,OAAO2D,EAAQ,EAAG,EAAG,MAE5BiZ,EAAKT,MAAM7b,OAASjG,KAAKgiB,SAASC,OACpCM,EAAKzb,QAQTnH,OAAQkQ,GACN,IAAI3D,EAASlM,KAAKsiB,OAAOzS,GAEzB,IAAK3D,EAAOmW,KACV,OAGF,IACIE,EADOrW,EAAOmW,KACFR,OACZvY,EAAQ4C,EAAO5C,MACfoZ,EAAOH,EAAKR,MAAMzY,GAEtB,GAAa,OAAToZ,EACFH,EAAKT,MAAMnc,OAAO2D,EAAO,GACzBiZ,EAAKR,MAAMpc,OAAO2D,EAAO,GACzBiZ,EAAKI,cACA,CACL,IAAI/C,EAAM8C,EAAKZ,MAAMY,EAAKZ,MAAM7b,OAAS,GAEzCyc,EAAK9U,OAAOgS,EAAI/P,KAEhB+P,EAAIiC,OAASU,EAEbA,EAAKT,MAAMnc,OAAO2D,EAAO,EAAGsW,GAG9B,OAAO,EAOTjgB,UACE,GAAIK,KAAK6hB,kBAAkBe,EAOzB,YAL0B,IAAtB5iB,KAAK8hB,MAAM7b,QAAkC,OAAlBjG,KAAK+hB,MAAM,KACxC/hB,KAAK6hB,OAAOgB,KAAO7iB,KAAK+hB,MAAM,GAC9B/hB,KAAK6hB,OAAOgB,KAAKhB,OAAS7hB,KAAK6hB,SAMnC,GAAI7hB,KAAK8hB,MAAM7b,QAAUjG,KAAKgiB,SAASE,SACrC,OAGF,IAGIY,EACAT,EACAU,EALAzZ,EAAQtJ,KAAK6hB,OAAOE,MAAMrb,QAAQ1G,MAClC0iB,EAAOpZ,EAAQ,EAAItJ,KAAK6hB,OAAOE,MAAMzY,EAAQ,GAAK,KAClD0Z,EAAQhjB,KAAK6hB,OAAOE,MAAM9b,OAASqD,EAAQ,EAAItJ,KAAK6hB,OAAOE,MAAMzY,EAAQ,GAAK,KAKlF,GAAc,OAAV0Z,GAAkBA,EAAMlB,MAAM7b,OAASjG,KAAKgiB,SAASE,UAEvDY,EAAM9iB,KAAK6hB,OAAOC,MAAMxY,IACpBuY,OAAS7hB,KAEbA,KAAK8hB,MAAMnb,KAAKmc,IAGhBT,EAAOW,EAAMlB,MAAMnY,SACdkY,OAAS7hB,KAAK6hB,OAEnB7hB,KAAK6hB,OAAOC,MAAMxY,GAAS+Y,EAKd,QAFbU,EAAOC,EAAMjB,MAAMpY,WAGjBoZ,EAAKlB,OAAS7hB,MAGhBA,KAAK+hB,MAAMpb,KAAKoc,QACX,GAAa,OAATL,GAAiBA,EAAKZ,MAAM7b,OAASjG,KAAKgiB,SAASE,UAE5DY,EAAM9iB,KAAK6hB,OAAOC,MAAMxY,EAAQ,IAC5BuY,OAAS7hB,KAEbA,KAAK8hB,MAAMjW,QAAQiX,IAGnBT,EAAOK,EAAKZ,MAAMvV,OACbsV,OAAS7hB,KAAK6hB,OAEnB7hB,KAAK6hB,OAAOC,MAAMxY,EAAQ,GAAK+Y,EAKlB,QAFbU,EAAOL,EAAKX,MAAMxV,SAGhBwW,EAAKlB,OAAS7hB,MAGhBA,KAAK+hB,MAAMlW,QAAQkX,OACd,CACL,IAAIE,EAEJ,GAAc,OAAVD,EAEFF,EAAM9iB,KAAK6hB,OAAOC,MAAMxY,IACxB2Z,EAAQ,IAAIrB,EAAS5hB,KAAK6hB,OAAQ7hB,KAAK8hB,MAAMpW,QAAQoX,GAAME,EAAMlB,OAAQ9hB,KAAK+hB,MAAMrW,OAAOsX,EAAMjB,SAC3FC,SAASC,MAAQjiB,KAAKgiB,SAASC,MACrCgB,EAAMjB,SAASE,SAAWliB,KAAKgiB,SAASE,SAGxCliB,KAAK6hB,OAAOC,MAAMnc,OAAO2D,EAAO,GAGhCtJ,KAAK6hB,OAAOE,MAAMpc,OAAO2D,EAAO,EAAG2Z,OAC9B,CAAA,GAAa,OAATP,EAkBT,MAAM,IAAIhjB,yBAAyBM,KAAK6G,UAAS,6CAhBjDic,EAAM9iB,KAAK6hB,OAAOC,MAAMxY,EAAQ,IAChC2Z,EAAQ,IAAIrB,EACV5hB,KAAK6hB,OACLa,EAAKZ,MAAMpW,QAAQoX,GAAM9iB,KAAK8hB,OAC9BY,EAAKX,MAAMrW,OAAO1L,KAAK+hB,SAGnBC,SAASE,SAAWliB,KAAKgiB,SAASE,SACxCe,EAAMjB,SAASC,MAAQjiB,KAAKgiB,SAASC,MAGrCjiB,KAAK6hB,OAAOC,MAAMnc,OAAO2D,EAAQ,EAAG,GAGpCtJ,KAAK6hB,OAAOE,MAAMpc,OAAO2D,EAAQ,EAAG,EAAG2Z,GAKzCjjB,KAAK6hB,OAAOc,WAOhBhjB,QACE,IAAI2J,EAAQgT,KAAK4G,MAAMljB,KAAK8hB,MAAM7b,OAAS,GAE3C,GAAIjG,KAAK6hB,kBAAkBe,EACzB5iB,KAAK+hB,OACH,IAAIH,EAAS5hB,KAAMA,KAAK8hB,MAAMvc,MAAM,EAAG+D,GAAQtJ,KAAK+hB,MAAMxc,MAAM,EAAG+D,EAAQ,IAC3E,IAAIsY,EAAS5hB,KAAMA,KAAK8hB,MAAMvc,MAAM+D,EAAQ,GAAItJ,KAAK+hB,MAAMxc,MAAM+D,EAAQ,KAG3EtJ,KAAK8hB,OAAS9hB,KAAK8hB,MAAMxY,QACpB,CACL,IAAI+Y,EAAOriB,KAAK8hB,MAAMxY,GAClByZ,EAAO,IAAInB,EACb5hB,KAAK6hB,OACL7hB,KAAK8hB,MAAMvc,MAAM+D,EAAQ,GACzBtJ,KAAK+hB,MAAMxc,MAAM+D,EAAQ,IAG3BtJ,KAAK8hB,MAAQ9hB,KAAK8hB,MAAMvc,MAAM,EAAG+D,GACjCtJ,KAAK+hB,MAAQ/hB,KAAK+hB,MAAMxc,MAAM,EAAG+D,EAAQ,GAEzCtJ,KAAK6hB,OAAOsB,QAAQd,EAAMU,IAW9BpjB,QAAS0iB,EAAMU,GACbV,EAAKR,OAAS7hB,KACd+iB,EAAKlB,OAAS7hB,KAEd,IAAI0V,EAAI1V,KAAK8hB,MAAM,GAEnB,GAAI9hB,KAAKgiB,SAAS1D,QAAQ+D,EAAKxS,IAAK6F,EAAE7F,KAAO,EAC3C7P,KAAK8hB,MAAMjW,QAAQwW,GACnBriB,KAAK+hB,MAAMpc,OAAO,EAAG,EAAGod,OACnB,CACL,IAAItc,EACJ,IAAKA,EAAI,EAAGA,EAAIzG,KAAK8hB,MAAM7b,OAAQQ,IAAK,CACtC,IAAIkP,EAAI3V,KAAK8hB,MAAMrb,GAEnB,GAAIzG,KAAKgiB,SAAS1D,QAAQ+D,EAAKxS,IAAK8F,EAAE9F,KAAO,EAAG,CAC9C7P,KAAK8hB,MAAMnc,OAAOc,EAAG,EAAG4b,GACxBriB,KAAK+hB,MAAMpc,OAAOc,EAAI,EAAG,EAAGsc,GAC5B,OAIAtc,IAAMzG,KAAK8hB,MAAM7b,SACnBjG,KAAK8hB,MAAMnb,KAAK0b,GAChBriB,KAAK+hB,MAAMpb,KAAKoc,IAIhB/iB,KAAK8hB,MAAM7b,OAASjG,KAAKgiB,SAASC,OACpCjiB,KAAK8G,QAWTnH,SAAUyjB,GAAe,GACvB,IACI3c,EADAjD,KAGJ,IAAKiD,EAAI,EAAGA,EAAIzG,KAAK8hB,MAAM7b,OAAQQ,IACjCjD,EAAMmD,KAAK3G,KAAK8hB,MAAMrb,GAAGoJ,KAG3B,IAAIwT,MAAQ7f,EAAMqD,cAAe7G,KAAK6hB,kBAAkBe,EAAO,KAAO,MAAO5iB,KAAK6hB,SAElF,GAAIuB,EACF,IAAK3c,EAAI,EAAGA,EAAIzG,KAAK+hB,MAAM9b,OAAQQ,IACjC4c,UAAYrjB,KAAK+hB,MAAMtb,KAI3B,OAAO4c,SAOLZ,EAOJ9iB,YAAakiB,EAAQhS,EAAKrM,GACxB1D,OAAOkD,iBAAiBhD,MACtB6hB,OAAQ5hB,IAAIyD,QAAQme,GACpBhS,IAAK5P,IAAIyD,QAAQmM,GACjBrM,MAAOvD,IAAIyD,QAAQF,KAIvB7D,WACE,OAAOK,KAAK6P,IAAIhJ,kBASC+b,UAAahW,EAChCjN,YAAasiB,EAAQ,IACnBpiB,QAGAoiB,EAAQA,EAAQ,EAAI,EAAIA,EAExBniB,OAAOkD,iBAAiBhD,MACtB6iB,KAAM5iB,IAAIyD,QAAQ,IAAIke,EAAS5hB,OAE/BsjB,MAAOrjB,IAAIyD,YAEXse,SAAU/hB,IAAIyD,SACZue,MAAOA,EAEPC,SAAUD,EAAQ,EAAI3F,KAAK4G,MAAMjB,EAAQ,GAAK,EAE9C3D,QAAS,CAAC6D,EAAaC,IACdD,EAAcC,GAAgB,EAAKD,EAAcC,EAAe,EAAI,MAKjFpiB,KAAK6iB,KAAKb,SAASE,SAAWliB,KAAKgiB,SAASE,SAC5CliB,KAAK6iB,KAAKb,SAASC,MAAQjiB,KAAKgiB,SAASC,MAQ3CtiB,SAAU4iB,GACR,GAAIA,aAAgBK,EAClB,OAOF,IAAInc,EAEJ,IANI8b,EAAKT,MAAM7b,OAAS,IAAMsc,EAAKR,MAAM9b,QACvChG,IAAIsH,oCAAoCgb,MAASA,EAAKT,MAAM7b,UAAUsc,EAAKR,MAAM9b,UAK9EQ,EAAI,EAAGA,EAAI8b,EAAKT,MAAM7b,OAAQQ,IAC5B8b,EAAKT,MAAMrb,IACdxG,IAAIsH,yBAAyBgb,QAAW9b,MAAM8b,EAAKT,MAAMrb,MAI7D,IAAKA,EAAI,EAAGA,EAAI8b,EAAKR,MAAM9b,OAAQQ,IACC,cAA9BxG,IAAI2G,OAAO2b,EAAKR,MAAMtb,KACxBxG,IAAIsH,yBAAyBgb,QAAW9b,gBAY9C9G,IAAKkQ,EAAKrM,EAAOgf,GAAY,GAC3B,GAAwB,WAApBviB,IAAI2G,OAAOiJ,GACb,MAAM,IAAInQ,sBAAsBmQ,KAGlC,QAAcxK,IAAV7B,EACF,MAAM,IAAI9D,wBAAwB8D,KAGpC,OAAOxD,KAAK6iB,KAAKlH,IAAI9L,EAAKrM,EAAOgf,GASnC7iB,IAAKkQ,GACH,GAAwB,WAApB5P,IAAI2G,OAAOiJ,GACb,MAAM,IAAInQ,sBAAsBmQ,KAGlC,OAAO7P,KAAK6iB,KAAKjf,IAAIiM,GAOvBlQ,OAAQkQ,GACN,GAAwB,WAApB5P,IAAI2G,OAAOiJ,GACb,MAAM,IAAInQ,sBAAsBmQ,KAGlC,OAAO7P,KAAK6iB,KAAKjV,OAAOiC,GAe1BlQ,KAAM4jB,EAAQC,EAAQ7X,GACpB,GAA+B,IAA3B3L,KAAK6iB,KAAKf,MAAM7b,OAClB,OAcF,IAAIwd,EACAna,EAEJ,GAdIrJ,IAAIoI,KAAKkb,IACX5X,EAAW4X,EACXA,EAASC,EAAS,MACTvjB,IAAIoI,KAAKmb,KAClB7X,EAAW6X,EACXA,EAAS,MAGXD,EAAStjB,IAAIkG,SAASod,GACtBC,EAASvjB,IAAIkG,SAASqd,GAKP,OAAXD,EAAiB,CAInB,IAFAE,EAAMzjB,KAAK6iB,KAEa,OAAjBY,EAAI1B,MAAM,IACf0B,EAAMA,EAAI1B,MAAM,GAGlBzY,EAAQ,MACH,CAEL,IAAI4C,EAASlM,KAAK6iB,KAAKP,OAAOiB,GAE9B,GAAIrX,EAAOmW,KAGT/Y,GADAma,EAAMvX,EAAOmW,KAAKR,QACNC,MAAMpb,QAAQwF,EAAOmW,WAMjC,GAHAoB,EAAMvX,EAAOqW,MACbjZ,EAAQ4C,EAAO5C,QAEFma,EAAI3B,MAAM7b,OAAQ,CAE7B,GAAIwd,EAAI5B,kBAAkBe,GAAQa,EAAI5B,OAAOE,MAAMrb,QAAQ+c,IAAQA,EAAI5B,OAAOC,MAAM7b,OAClF,OAGFwd,EAAMA,EAAI5B,QAMhB,OACiB,OAAX2B,GAAmBxjB,KAAKgiB,SAAS1D,QAAQmF,EAAI3B,MAAMxY,GAAOuG,IAAK2T,GAAU,GAGpD,IAArBC,EAAI3B,MAAM7b,QAIV0F,EAAS8X,EAAI3B,MAAMxY,GAAOuG,IAAK4T,EAAI3B,MAAMxY,GAAO9F,SAIpD,GAA6B,OAAzBigB,EAAI1B,MAAMzY,EAAQ,GAKpB,IAHAma,EAAMA,EAAI1B,MAAMzY,EAAQ,GACxBA,EAAQ,EAEgB,OAAjBma,EAAI1B,MAAM,IACf0B,EAAMA,EAAI1B,MAAM,QAEb,GAAI0B,EAAI3B,MAAM7b,OAASqD,EAAQ,EAEpCA,SAGA,EAAG,CACD,GAAKma,EAAI5B,kBAAkBe,EACzB,OAGFtZ,EAAQma,EAAI5B,OAAOE,MAAMrb,QAAQ+c,GACjCA,EAAMA,EAAI5B,aACHvY,GAASma,EAAI3B,MAAM7b,QAiBlCtG,SAAU4jB,EAAQC,EAAQ7X,GAYxB,IAAI8X,EACAna,EACJ,GAbIrJ,IAAIoI,KAAKkb,IACX5X,EAAW4X,EACXA,EAASC,EAAS,MACTvjB,IAAIoI,KAAKmb,KAClB7X,EAAW6X,EACXA,EAAS,MAGXD,EAAStjB,IAAIkG,SAASod,GAKP,QAJfC,EAASvjB,IAAIkG,SAASqd,IAID,CAInB,IAFAC,EAAMzjB,KAAK6iB,KAEgC,OAApCY,EAAI1B,MAAM0B,EAAI1B,MAAM9b,OAAS,IAClCwd,EAAMA,EAAI1B,MAAM0B,EAAI1B,MAAM9b,OAAS,GAGrCqD,EAAQma,EAAI3B,MAAM7b,OAAS,MACtB,CAEL,IAAIiG,EAASlM,KAAK6iB,KAAKP,OAAOkB,GAE9B,GAAItX,EAAOmW,KAGT/Y,GADAma,EAAMvX,EAAOmW,KAAKR,QACNC,MAAMpb,QAAQwF,EAAOmW,WAMjC,IAHAoB,EAAMvX,EAAOqW,KACbjZ,EAAQ4C,EAAO5C,MAAQ,EAEhBA,EAAQ,GAAG,CAEhB,GAAIma,EAAI5B,kBAAkBe,EACxB,OAKF,IAFAtZ,EAAQma,EAAI5B,OAAOE,MAAMrb,QAAQ+c,GAAO,GAE5B,EACV,OAGFA,EAAMA,EAAI5B,QAMhB,OACiB,OAAX0B,GAAmBvjB,KAAKgiB,SAAS1D,QAAQmF,EAAI3B,MAAMxY,GAAOuG,IAAK0T,GAAU,GAIzE5X,EAAS8X,EAAI3B,MAAMxY,GAAOuG,IAAK4T,EAAI3B,MAAMxY,GAAO9F,SAIpD,GAAyB,OAArBigB,EAAI1B,MAAMzY,GAAiB,CAI7B,IAFAma,EAAMA,EAAI1B,MAAMzY,GAE2B,OAApCma,EAAI1B,MAAM0B,EAAI1B,MAAM9b,OAAS,IAClCwd,EAAMA,EAAI1B,MAAM0B,EAAI1B,MAAM9b,OAAS,GAGrCqD,EAAQma,EAAI3B,MAAM7b,OAAS,OACtB,GAAIqD,EAAQ,EAEjBA,SAGA,EAAG,CACD,GAAKma,EAAI5B,kBAAkBe,EACzB,OAGFtZ,EAAQma,EAAI5B,OAAOE,MAAMrb,QAAQ+c,GAAO,EAExCA,EAAMA,EAAI5B,aACHvY,EAAQ,GAavB3J,MAAO4jB,EAAQC,GACb,IAAIjD,EAAI,EAQR,OANAvgB,KAAK0jB,UACQre,IAAXke,EAAuBA,EAAS,UACrBle,IAAXme,EAAuBA,EAAS,KAChC,CAAC3T,EAAKrM,KAAY+c,MAGbA,EAOT5gB,WACE,cAAeK,KAAKgiB,SAASC,UAAUjiB,KAAK6iB,KAAKhc,aAGnDZ,aACE,OAAOjG,KAAKwO,eCvuBKmV,EAgBnBhkB,YAAaikB,EAAYljB,EAAO,KAAMuL,EAAQ,MAC5C,MAAMtL,EAAOV,IAAI2G,OAAOgd,GAExB9jB,OAAOkD,iBAAiBhD,MACtB6jB,KAAM5jB,IAAIyD,SACR/C,KAAMA,EACNmjB,UAAWF,EACXljB,KAAMT,IAAIkG,SAASzF,cAAkBC,EAAKiZ,4BAC1C3N,MAAOhM,IAAIkG,SAAS8F,EAAOjM,UAKjCU,WACE,OAAOV,KAAK6jB,KAAKnjB,KAGnBC,WACE,OAAOX,KAAK6jB,KAAKljB,KAWnBhB,KAAM6D,GACJ,GAAIvD,IAAIoI,KAAKrI,KAAK6jB,KAAKC,WAErB,OAAO9jB,KAAK6jB,KAAKC,UAAUxe,MAAMtF,KAAK6jB,KAAK5X,OAAQzI,IAEnD,OAAQxD,KAAKW,MAEX,IAAK,QACH,OAA+C,IAAxCX,KAAK6jB,KAAKC,UAAUpd,QAAQlD,GAGrC,IAAK,SACH,OAAOxD,KAAK6jB,KAAKC,UAAUnX,KAAKnJ,GAElC,QACE,OAAOxD,KAAK6jB,KAAKC,YAActgB,UChCpBugB,UAAqBnX,EAMxCjN,YAAasL,GAUX,GAPmB,iBAFnBA,EAAMA,SAGJA,GACEvK,KAAMuK,IAKNA,EAAIjK,eAAe,YAA0C,WAA5Bf,IAAI2G,OAAOqE,EAAI+H,SAClD,MAAM,IAAItT,MAAM,0GAGD2F,IAAb4F,EAAItK,MACFsK,EAAI+Y,UACN/Y,EAAItK,KAAOV,IAAIwK,QAAQxK,IAAI2G,OAAOqE,EAAI+Y,SAAUhZ,SAIpDnL,MAAMoL,GAEN,MAAMgZ,EAAY/Z,OAAO,SAsRzB,GApRApK,OAAOkD,iBAAiBhD,MACtBgiB,SAAU/hB,IAAIC,cAKZgkB,SAAUjkB,IAAIkG,SAAS8E,EAAIiZ,UAAU,GAMrCC,OAAQlkB,IAAIkG,SAAS8E,EAAIkZ,QAAQ,GAIjCC,UAAWnkB,IAAIkG,SAAS8E,EAAIoZ,YAAY,GAAS,MAAQ,OAEzDC,aAAcrkB,IAAIkG,SAAS8E,EAAIoZ,YAAY,GAU3CE,iBAAkBtkB,IAAIkG,SAAS8E,EAAIsZ,kBAAkB,GAMrDvR,QAAS/S,IAAImG,UAAU6E,EAAI+H,SAM3BtS,KAAMT,IAAIkG,SAAS8E,EAAIvK,MAOvB8jB,YAAavkB,IAAIkG,SAAS8E,EAAIuZ,eAAgBvkB,IAAI2G,OAAOqE,EAAItK,eAmC7D8jB,WAAYxkB,IAAIkG,SAAS8E,EAAIwZ,YAM7BT,QAAS/jB,IAAIkG,SAAS8E,EAAI+Y,SAE1BU,UAAWxa,OAAO,YAOlBya,SAAU1kB,IAAIkG,SAAS8E,EAAItK,KAAMqK,QAQjCiH,MAAOhS,IAAIkG,SAAS8E,EAAI6I,KAAM7I,EAAIgH,MAAOhH,EAAI2Z,eAC7CC,aAAc,KAMdC,aAAc7kB,IAAIkG,SAAS8E,EAAI6Z,cAAc,GA8B7CC,UAAW9kB,IAAIkG,SAAS8E,EAAI+Z,aAE5BC,mBAAoBhB,EACpBiB,IAAKjB,EACLkB,kBAAmB,KACnBC,0BAA2B,KAC3BC,QAAQ,EAERC,OAAQ,IAAInY,KACV,SACA,WACA,SACA,UACA,QACA,WACA,gBAQFoY,UAAWtlB,IAAIkG,SAAS8E,EAAIua,OAAO,GAOnCC,SAAUxlB,IAAIkG,SAAS8E,EAAIua,OAAO,GAC9B,IAAIvlB,IAAIohB,KAAKqE,eAAezlB,IAAIkG,SAAS8E,EAAI0a,gBAAiB,KAC9D,KAMJC,MAAO,KAGPC,SAAU,CAACriB,EAAOsiB,GAAiB,EAAOC,GAAc,KAYtD,GAVgC,OAA5B/lB,KAAKgiB,SAAS+C,WAAsB9kB,IAAIoI,KAAKrI,KAAKgiB,SAAS+C,aAC7DvhB,EAAQxD,KAAKgiB,SAAS+C,UAAUrf,KAAK1F,KAAMwD,IAIzCxD,KAAKgiB,SAASuC,kBAAoBvkB,KAAKW,OAASV,IAAI2G,OAAOpD,KAC7DA,EAAQxD,KAAKgmB,iBAAiBxiB,IAI5BA,IAAUxD,KAAKwD,MACjB,OAGF,IAAIyiB,GACFC,MAAOlmB,KACPmmB,IAAkC,iBAAtBnmB,KAAKgiB,SAASkD,SAAmB7f,EAAYrF,KAAKgiB,SAASkD,IACvEkB,IAAK5iB,GAGH6iB,EAAoBrmB,KAAKsmB,MAK7B,GAHAtmB,KAAKgiB,SAASkD,IAAM1hB,EAGfxD,KAAKsmB,OAaER,GAAwC,OAAtBO,GAA8BA,GAG1DrmB,KAAKqE,KAAK,QAAS4hB,OAhBJ,CAIf,IAAKjmB,KAAKgiB,SAAS8C,aAEjB,MADA9kB,KAAKgiB,SAASkD,IAAMe,EAAOE,IACrB,IAAIzmB,UAAU8D,uBAA2BxD,KAAKgiB,SAAS6C,sBAE7DoB,EAAOM,WAAa/iB,uBAA2BxD,KAAKgiB,SAAS6C,qBAC7D5kB,IAAI2I,KAAKqd,EAAOM,QAGlBvmB,KAAKqE,KAAK,UAAW4hB,GAOgB,iBAA5BjmB,KAAKgiB,SAAS0C,YACvB1kB,KAAKgiB,SAAS0C,UAAYlhB,GAKvBuiB,GAAgB/lB,KAAKwmB,UAAWxmB,KAAKgiB,SAASuD,YACjDU,EAAOQ,OAASzmB,KAAKgiB,SAASyD,SAASiB,OAAO1mB,KAAKgiB,SAASkD,MAIzDY,GACH9lB,KAAKqE,KAAK,SAAU4hB,GAItBI,EAAoB,KACpBJ,EAAS,MAIXU,cAAgB7X,IACV9O,KAAKgiB,SAAS4D,QAChB9W,EAAQmE,OAAS,SACjBnE,EAAQ7M,MAAO,EAEfjC,KAAKoO,qBAAqB,GAC1BpO,KAAKgiB,SAAS4D,MAAMvhB,MAEhB,YACGyK,EAAQoX,yBACDpX,EAAQoX,SAEpBpX,GAGFA,EAAU,WAOsB,UAApC7O,IAAI2G,OAAO5G,KAAKgiB,SAAS/P,SAC3BjS,KAAKgiB,SAAS/P,MAAQhS,IAAI8G,WAAW/G,KAAKgiB,SAAS/P,QAGjDjS,KAAKgiB,SAAS/P,MAAMhM,OAAS,EAC/B,IAAK,IAAIQ,EAAI,EAAGA,EAAIzG,KAAKgiB,SAAS/P,MAAMhM,OAAQQ,KAC1CxG,IAAIoI,KAAKrI,KAAKgiB,SAAS/P,MAAMxL,KAASzG,KAAKgiB,SAAS/P,MAAMxL,aAAcxG,IAAIohB,KAAKuF,OACnF5mB,KAAKgiB,SAAS/P,MAAMxL,GAAK,IAAIxG,IAAIohB,KAAKuF,KAAK5mB,KAAKgiB,SAAS/P,MAAMxL,mBAAoBA,EAAI,MAwO7F,GAlOIzG,KAAKgiB,SAAS2C,WAAa3Z,SACC,OAA1BhL,KAAKgiB,SAAShP,SAChBhT,KAAKgiB,SAAS/P,MAAMpG,QAAQ,IAAI5L,IAAIohB,KAAKuF,KAAK3b,EAAI+H,0BAA2B/H,EAAI+H,QAAQnM,gBAQvFoE,EAAI4b,UACN7mB,KAAKgiB,SAAS/P,MAAMpG,QAAQ,IAAI5L,IAAIohB,KAAKuF,KAAKpjB,GACrCA,EAAM2B,OAAOc,OAAS,gBACdgF,EAAI+H,QAAQnM,iBA0B7B7G,KAAKgiB,SAAS2C,WAAaha,QAAU3K,KAAKgiB,SAAS2C,WAAa7Z,MAAQ9K,KAAKgiB,SAAS2C,WAAa3Z,SAEjG/K,IAAIuJ,aAAayB,EAAK,MAAO,UAAW,MAAO,aACjDA,EAAI6b,MAAQ7mB,IAAI8G,WAAW9G,IAAIkG,SAAS8E,EAAI6b,QAC5C7b,EAAI6b,MAAMngB,MAAM1G,IAAIkG,SAAS8E,EAAI8b,IAAK9b,EAAI+b,SAAU/mB,IAAIkG,SAAS8E,EAAI2U,IAAK3U,EAAIgc,YAW5Ehc,EAAIjK,eAAe,UACrBhB,KAAKgiB,SAAS/P,MAAMpG,QAAQ,IAAI5L,IAAIohB,KAAK6F,UAAU,gBAAiBjc,EAAI6b,QAGtE9mB,KAAKgiB,SAAS2C,WAAaha,SAEzB1K,IAAIkG,SAAS8E,EAAI+H,UACnBhT,KAAKgiB,SAAS/P,MAAMpG,QAAQ,IAAI5L,IAAIohB,KAAKuF,KAAKpjB,GACrCyH,EAAI+H,QAAQrG,KAAKnJ,EAAMqD,gCACToE,EAAI+H,QAAQnM,WAAWoB,OAAO,EAAG,KAAOgD,EAAI+H,QAAQnM,WAAWZ,OAAS,GAAK,MAAQ,SAU3E,WAA/BhG,IAAI2G,OAAOqE,EAAIkc,aACjBnnB,KAAKgiB,SAAS/P,MAAMpG,QAAQ,IAAI5L,IAAIohB,KAAKuF,KAAKpjB,GACA,IAArC8Y,KAAK8K,IAAI5jB,EAAQyH,EAAIkc,mCACJlc,EAAIkc,iBAMhCnnB,KAAKgiB,SAAS2C,WAAalf,QAEzBxF,IAAIuJ,aAAayB,EAAK,MAAO,YAC/BjL,KAAKgiB,SAAS/P,MAAMtL,KAAK,IAAI1G,IAAIohB,KAAKuF,KAAKpjB,GAASA,EAAMyC,QAAUhG,IAAIkG,SAAS8E,EAAI8b,IAAK9b,EAAI+b,YAAa/mB,IAAIkG,SAAS8E,EAAI8b,IAAK9b,EAAI+b,2BAInI/mB,IAAIuJ,aAAayB,EAAK,MAAO,YAC/BjL,KAAKgiB,SAAS/P,MAAMtL,KAAK,IAAI1G,IAAIohB,KAAKuF,KAAKpjB,GAASA,EAAMyC,QAAUhG,IAAIkG,SAAS8E,EAAI2U,IAAK3U,EAAIgc,YAAahnB,IAAIkG,SAAS8E,EAAI2U,IAAK3U,EAAIgc,2BASnIhnB,IAAIkG,SAAS8E,EAAIoc,QAAQ,IAC3BrnB,KAAKgiB,SAAS/P,MAAMtL,KAAK,IAAI1G,IAAIohB,KAAKuF,KAAKpjB,GAASvD,IAAIqG,OAAO9C,GAAOyC,SAAWzC,EAAMyC,OAAQ,4BAe7FgF,EAAIjK,eAAe,aACrBhB,KAAKgiB,SAAS/P,MAAMtL,KAAK,IAAI1G,IAAIohB,KAAKuF,KAAKpjB,IACzC,IAAK,IAAIiD,EAAI,EAAGA,EAAIjD,EAAMyC,OAAQQ,IAChC,GAAIxG,IAAI2G,OAAOpD,EAAMiD,MAAQxG,IAAI2G,OAAOqE,EAAIqc,UAC1C,OAAO,EAIX,OAAO,MACHrnB,IAAI2G,OAAOqE,EAAIqc,UAAU1N,uCAI7B3O,EAAIjK,eAAe,SACrBhB,KAAKgiB,SAAS/P,MAAMtL,KAAK,IAAI1G,IAAIohB,KAAKuF,KAAKpjB,GAClCyH,EAAIsc,KAAK7gB,QAAQlD,IAAU,IA+BlCyH,EAAIjK,eAAe,WACrBhB,KAAKgiB,SAAS/P,MAAMtL,KAAK,IAAI1G,IAAIohB,KAAKuF,KAAKpjB,IACzC,GAAIA,EAAMyC,OAASgF,EAAIuc,OAAOvhB,OAC5B,OAAO,EAGT,IAAK,IAAIQ,EAAI,EAAGA,EAAIwE,EAAIuc,OAAOvhB,OAAQQ,IAAK,CAC1C,GAAIwE,EAAIuc,OAAO/gB,GAAGzF,eAAe,SAC3Bf,IAAI2G,OAAOpD,EAAMiD,MAAQxG,IAAI2G,OAAOqE,EAAIuc,OAAO/gB,GAAG9F,MACpD,OAAO,EAIX,GAAIsK,EAAIuc,OAAO/gB,GAAGzF,eAAe,SAC3BiK,EAAIuc,OAAO/gB,GAAG8gB,KAAK7gB,QAAQlD,EAAMiD,IAAM,EACzC,OAAO,EAKb,OAAO,GACN,sBAQHxG,IAAIuJ,aAAayB,EAAK,OAAQ,iBAChCjL,KAAKgiB,SAASmD,kBAAoB,IAAIhY,IAAIlN,IAAI8G,WAAW9G,IAAIkG,SAAS8E,EAAIsc,KAAMtc,EAAIwc,eACpFznB,KAAKgiB,SAAS/P,MAAMtL,KAAK,IAAI1G,IAAIohB,KAAKuF,KAAMpjB,GAAUxD,KAAKgiB,SAASmD,kBAAkB9P,IAAI7R,GAAQ,uBAOhGvD,IAAIuJ,aAAayB,EAAK,MAAO,WAC/BjL,KAAKgiB,SAASoD,0BAA4B,IAAIjY,IAAIlN,IAAI8G,WAAW9G,IAAIkG,SAAS8E,EAAIyc,IAAKzc,EAAI0c,SAC3F3nB,KAAKgiB,SAAS/P,MAAMtL,KAAK,IAAI1G,IAAIohB,KAAKuF,KAAMpjB,IAAWxD,KAAKgiB,SAASoD,0BAA0B/P,IAAI7R,GAAQ,qBAKzGyH,EAAItK,gBAAgB8E,QAGE,IAApBwF,EAAItK,KAAKsF,QACXhG,IAAI2I,mCAAmC5I,KAAKU,0CAC5CuK,EAAItK,KAAO8E,OACkB,IAApBwF,EAAItK,KAAKsF,SAGlBgF,EAAItK,KAAOsK,EAAItK,KAAK,KAWpBsK,EAAItK,gBAAgB8E,MAAO,CAC7B,IAAImiB,EAAW3c,EAAItK,KAAKoB,IAAIpB,GAAQV,IAAI2G,OAAOjG,IAE/CX,KAAKgiB,SAAS/P,MAAMpG,QAClB,IAAI5L,IAAIohB,KAAKuF,KACVpjB,GAAUokB,EAASlhB,QAAQzG,IAAI2G,OAAOpD,KAAW,KAC/CxD,KAAKW,KAAKiZ,uCAIjB5Z,KAAKgiB,SAAS/P,MAAMpG,QAClB,IAAI5L,IAAIohB,KAAKuF,KACVpjB,GAAUvD,IAAI2G,OAAOpD,KAAWvD,IAAI2G,OAAO5G,KAAKgiB,SAAS2C,aACvD3kB,KAAKW,KAAKiZ,6BAMa,OAA5B3Z,IAAIkG,SAAS8E,EAAI2a,SACnB5lB,KAAK4lB,MAAQ3a,EAAI2a,OAIrBnB,iBACE,OAAOzkB,KAAKgiB,SAASyC,WAGvBoD,gBACE,OAAO7nB,KAAKgiB,SAASuD,UAGvBsC,cAAerkB,IACbA,EAAQvD,IAAI+G,aAAaxD,MAEXxD,KAAKgiB,SAASuD,YAC1BvlB,KAAKgiB,SAASuD,UAAY/hB,EAC1BxD,KAAKgiB,SAASyD,SAAWjiB,EAAQ,IAAIvD,IAAIohB,KAAKqE,eAAmB,KACjE1lB,KAAKgiB,SAASyD,SAASxW,MAAM,IAAKjP,KAAM,iBAW5C4lB,YACE,OAAO5lB,KAAKgiB,SAAS4D,MAGvBA,UAAWpiB,GACmB,OAAxBxD,KAAKgiB,SAAS4D,MACZpiB,aAAiBvD,IAAIohB,KAAKM,QAC5B3hB,KAAKgiB,SAAS4D,MAAQpiB,EAKtBxD,KAAKgO,GAAG,SAAWc,GAAY9O,KAAKgiB,SAAS2E,cAAc7X,KAM3D7O,IAAI2I,KAAK,kBAGX3I,IAAI2I,KAAK,oCAQbwb,gBACE,OAAOpkB,KAAKgiB,SAASoC,UAOvBF,eACE,OAAOlkB,KAAKgiB,SAASkC,SAGvBA,aAAc1gB,GACZxD,KAAKgiB,SAASkC,SAAWjkB,IAAI+G,aAAaxD,GAO5C7C,WACE,OAAOV,IAAI2G,OAAO5G,KAAKgiB,SAAS2C,UAOlCR,aACE,OAAOnkB,KAAKgiB,SAASmC,OAGvBA,WAAY3gB,GACV,IAAIskB,EAAmB9nB,KAAKmkB,OACxB4D,EAAkB9nB,IAAI+G,aAAaxD,GAEnCskB,IAAqBC,IACvB/nB,KAAKgiB,SAASmC,OAAS4D,EACvB/nB,KAAKqE,KAAKyjB,EAAmB,WAAa,WAQ9CtB,cACE,MAAmC,YAA5BxmB,KAAKgiB,SAASoC,UAOvBC,iBACE,OAAOrkB,KAAKgiB,SAASsC,aAGvBD,eAAgB7gB,IACdA,EAAQvD,IAAI+G,aAAaxD,MAEXxD,KAAKgiB,SAASsC,eAC1BtkB,KAAKgiB,SAASsC,aAAe9gB,EAC7BxD,KAAKqE,KAAK,oBAAqBrE,OAInCU,WACE,OAAOV,KAAKgiB,SAASthB,KASvBsnB,YACE,OAAOhoB,KAAKgiB,SAASqD,OAOvBrB,cACE,OAAIhkB,KAAKskB,aACArkB,IAAIkG,SAASnG,KAAKgiB,SAASiG,OAAQjoB,KAAKgiB,SAASgC,SAGtD/jB,IAAIoI,KAAKrI,KAAKgiB,SAASgC,UAA0B,aAAdhkB,KAAKW,KACnCX,KAAKgiB,SAASgC,QAAQ1e,MAAMtF,MAG9BA,KAAKgiB,SAASgC,QAOvBxgB,YACE,MAAiC,iBAAtBxD,KAAKgiB,SAASkD,IAChBllB,KAAKgiB,SAASkD,IAGhBllB,KAAKgiB,SAASgC,QAGvBxgB,UAAWA,GACTxD,KAAKgiB,SAAS6D,SAASriB,GAazB0kB,gBAAiB1kB,GACfxD,KAAKgiB,SAAS6D,SAASriB,GAAO,GAGhC2kB,eACE,MAAmC,iBAAxBnoB,KAAK6M,KAAK6X,WAId1kB,KAAKgiB,SAAS0C,YAAc1kB,KAAKwD,MAO1C8iB,YACE,GAAItmB,KAAKkkB,UAAgD,OAApCjkB,IAAIkG,SAASnG,KAAKgiB,SAASkD,KAG9C,OAFAllB,KAAKgiB,SAAS6C,aAAe,gBAC7B5kB,IAAI2I,QAAQ5I,KAAKgiB,SAASthB,8BACnB,EAGT,GAAIV,KAAKgiB,SAAS/P,MAAMhM,OAAS,EAC/B,IAAK,IAAI6N,EAAO,EAAGA,EAAO9T,KAAKgiB,SAAS/P,MAAMhM,OAAQ6N,IACpD,IAAK9T,KAAKgiB,SAAS/P,MAAM6B,GAAMnH,KAAK3M,KAAKgiB,SAASkD,KAEhD,OADAllB,KAAKgiB,SAAS6C,aAAe7kB,KAAKgiB,SAAS/P,MAAM6B,GAAMpT,MAChD,EAOb,OAFAV,KAAKgiB,SAAS6C,aAAe,MAEtB,EAOTA,mBACE,OAAO5kB,IAAIkG,SAASnG,KAAKgiB,SAAS6C,aAAc,QAQlDuD,gBACE,OAAKpoB,KAAKgiB,SAASuD,UAKZvlB,KAAKgiB,SAASyD,SAASrH,KAJ5Bne,IAAI2I,8BAA8B5I,KAAKU,yDAiB3Cf,KAAM6O,EAAQ,EAAGsX,GAAiB,GAChC,IAAK9lB,KAAKgiB,SAASuD,UAEjB,YADAtlB,IAAI2I,yCAAyC5I,KAAKU,4CAIpD,IAAI2nB,EAAKroB,KAAKgiB,SAASyD,SAAS6C,SAAS9Z,GAGzCxO,KAAKgiB,SAAS6D,SAAS7lB,KAAKgiB,SAASyD,SAAS8C,UAAUF,GAAI7kB,MAAOsiB,GAAgB,GAkBrFnmB,KAAM6O,EAAQ,EAAGsX,GAAiB,GAChC,IAAK9lB,KAAKgiB,SAASuD,UAEjB,YADAtlB,IAAI2I,yCAAyC5I,KAAKU,4CAIpD,IAAI2nB,EAAKroB,KAAKgiB,SAASyD,SAAS+C,QAAQha,GAGxCxO,KAAKgiB,SAAS6D,SAAS7lB,KAAKgiB,SAASyD,SAAS8C,UAAUF,GAAI7kB,MAAOsiB,GAAgB,GAMrFnmB,OACEK,KAAKmkB,QAAS,EAMhBxkB,SACEK,KAAKmkB,QAAS,EAMhBxkB,eACEK,KAAKgiB,SAAS8C,cAAe,EAM/BnlB,kBACEK,KAAKgiB,SAAS8C,cAAe,EAW/BnlB,iBAAkB6D,GAChB,IACE,OAAQxD,KAAKW,MACX,IAAK,SACH6C,EAAQvD,IAAIgH,YAAYzD,GACxB,MAEF,IAAK,UACHA,EAAQvD,IAAI+G,aAAaxD,GACzB,MAEF,IAAK,QACHA,EAAQvD,IAAI8G,WAAWvD,GACvB,MAEF,IAAK,SACHA,EAAQA,EAAMqD,WACd,MAEF,IAAK,OACH,IAAI4hB,EAAYxoB,IAAI2G,OAAOpD,GAE3B,GAAkB,SAAdilB,EACF,GAAkB,WAAdA,EAAwB,CAC1B,IAAIC,EAAK,IAAI5d,KACb4d,EAAGC,QAAQnlB,GAEXA,EAAQklB,OAERllB,EAAQ,IAAIsH,KAAKA,KAAKsR,MAAM5Y,aAOpC,OAAOA,ICz7BbvD,IAAIuK,iBACF9J,KAAM,0BACNH,QAAS,0DCUX,MA4BMqoB,EAAO3oB,IAAI0I,UAAU4L,EAAS,4GCUW3H,EAO7CjN,YAAakpB,GACXhpB,QAEAC,OAAOkD,iBAAiBhD,MACtBgiB,SAAU/hB,IAAIyD,SACZolB,eACAC,eACAtC,OAAQ,KACR7G,IAAK3f,IAAIkG,SAAS0iB,EAAe,QAKvC5iB,aACE,OAAOjG,KAAKgiB,SAAS+G,YAAY9iB,OAOnCwgB,aACE,OAAOzmB,KAAKgiB,SAASyE,OAGvBA,WAAYjjB,GACV,GAAc,OAAVA,IAAmBxD,KAAKgiB,SAAS8G,YAAY9nB,eAAewC,GAC9D,MAAM,IAAI9D,MAAM,2DAGlBM,KAAKgiB,SAASyE,OAASjjB,EAOzBwlB,mBACE,GAA6B,OAAzBhpB,KAAKgiB,SAASyE,OAIlB,OAAOzmB,KAAKuoB,UAAUvoB,KAAKgiB,SAASyE,QAAQjjB,MAO9CylB,kBACE,GAA6B,OAAzBjpB,KAAKgiB,SAASyE,OAIlB,OAAOzmB,KAAKgiB,SAAS+G,YAAYriB,QAAQ1G,KAAKgiB,SAASyE,QAYzD9mB,OAAQ6D,GACN,IAAI6kB,EAAsB,iBAAV7kB,EAAqB0G,OAAOc,OAAOxH,IAAU0G,OAAOjK,IAAIkG,SAAS3C,EAAOvD,IAAI2G,OAAOpD,IAAQqD,YAY3G,GAVA7G,KAAKgiB,SAAS8G,YAAYT,IACxB,IAAIvd,KACJtH,GAGFxD,KAAKkpB,QAELlpB,KAAKgiB,SAAS+G,YAAYpiB,KAAK0hB,GAC/BroB,KAAKgiB,SAASyE,OAAS4B,EAEnBroB,KAAKgiB,SAASpC,IAAM,GAAK5f,KAAKgiB,SAAS+G,YAAY9iB,OAASjG,KAAKgiB,SAASpC,IAAK,CACjF,IAAIuJ,EAAYnpB,KAAKgiB,SAAS+G,YAAYpf,eACnC3J,KAAKgiB,SAAS8G,YAAYK,GAKnC,OAFAnpB,KAAKqE,KAAK,SAAUgkB,EAAI,MAEjBA,EAUT1oB,UAAW0oB,EAAK,MACd,GAAKroB,KAAKgiB,SAAS8G,YAAY9nB,eAAeqnB,GAI9C,OACEe,UAAWppB,KAAKgiB,SAAS8G,YAAYT,GAAI,GACzC7kB,MAAOxD,KAAKgiB,SAAS8G,YAAYT,GAAI,IAOzC1oB,QACE,GAA6B,OAAzBK,KAAKgiB,SAASyE,OAChB,OAGF,IAAI4C,EAAWrpB,KAAKgiB,SAAS+G,YAAYriB,QAAQ1G,KAAKgiB,SAASyE,QAG/D,GAAiB,IAAb4C,EACF,OAGF,IAAIC,EAAiBtpB,KAAKgiB,SAAS+G,YAAYpjB,OAAO0jB,EAAW,GAEjE,IAAK,IAAI5iB,EAAI,EAAGA,EAAI6iB,EAAerjB,OAAQQ,WAClCzG,KAAKgiB,SAAS8G,YAAYQ,EAAe7iB,IAGlDzG,KAAKgiB,SAASyE,OAASzmB,KAAKgiB,SAAS+G,YAAY/oB,KAAKgiB,SAAS+G,YAAY9iB,OAAS,GAqBtFtG,SAAU2J,EAAQ,GAEhB,GAAyC,IAArCtJ,KAAKgiB,SAAS+G,YAAY9iB,OAC5B,OAAO,KAGT,GAAqB,iBAAVqD,EAET,OADAtJ,KAAKymB,OAASnd,EACPA,EAGT,GAAIA,GAAStJ,KAAKgiB,SAAS+G,YAAY9iB,OACrCjG,KAAKgiB,SAASyE,OAASzmB,KAAKgiB,SAAS+G,YAAY,OAC5C,CAEL,GAAqB,iBAAVzf,EAAoB,CAC7B,GAAIA,GAAS,EACX,OAAOtJ,KAAKgiB,SAASyE,OAGvB,IAAI8C,EAAkBvpB,KAAKgiB,SAAS+G,YAAYriB,QAAQ1G,KAAKgiB,SAASyE,SACtE8C,GAAmBjgB,IAEI,IACrBigB,EAAkB,GAGpBjgB,EAAQtJ,KAAKgiB,SAAS+G,YAAYQ,GAGpCvpB,KAAKgiB,SAASyE,OAASnd,EAKzB,OAFAtJ,KAAKqE,KAAK,WAAYrE,KAAKgiB,SAASyE,OAAQ,MAErCzmB,KAAKgiB,SAASyE,OAqBvB9mB,QAAS2J,EAAQ,GAEf,GAAyC,IAArCtJ,KAAKgiB,SAAS+G,YAAY9iB,OAC5B,OAAO,KAIT,GAAqB,iBAAVqD,EAAoB,CAC7B,GAAIA,GAAS,EACX,OAAOtJ,KAAKgiB,SAASyE,OAGvB,IAAI8C,EAAkBvpB,KAAKgiB,SAAS+G,YAAYriB,QAAQ1G,KAAKgiB,SAASyE,SACtE8C,GAAmBjgB,IAEItJ,KAAKgiB,SAAS+G,YAAY9iB,SAC/CsjB,EAAkBvpB,KAAKgiB,SAAS+G,YAAY9iB,OAAS,GAGvDqD,EAAQtJ,KAAKgiB,SAAS+G,YAAYQ,GAOpC,OAJAvpB,KAAKgiB,SAASyE,OAASnd,EAEvBtJ,KAAKqE,KAAK,UAAWrE,KAAKgiB,SAASyE,OAAQ,MAEpCzmB,KAAKgiB,SAASyE,OAMvB9mB,MAAOmmB,GAAiB,GACtB9lB,KAAKgiB,SAAS8G,eACd9oB,KAAKgiB,SAAS+G,eACd/oB,KAAKgiB,SAASyE,OAAS,KAElBX,GACH9lB,KAAKqE,KAAK,SAoBd+Z,UACE,OAAOpe,KAAKgiB,SAAS+G,YAAYhnB,IAAIynB,KAEjCJ,UAAWppB,KAAKgiB,SAAS8G,YAAYU,GAAO,GAC5ChmB,MAAOxD,KAAKgiB,SAAS8G,YAAYU,GAAO,GACxCC,aAAczpB,KAAKgiB,SAASyE,SAAW+C,sCC/TS5C,EAuCtDjnB,YAAae,EAAMuL,EAAO6a,MACE,UAAtB7mB,IAAI2G,OAAOqF,KACb6a,EAAQ7a,EACRA,EAAQ,MAGVpM,MAAM,KAAMa,EAAMuL,GAElBjM,KAAK6jB,KAAK6F,aAAe,SAAUlmB,GAEjCA,EAAQvD,IAAI8G,WAAWvD,GAEM,UAAzBvD,IAAI2G,OAAOpD,EAAM,MACnBA,GAASA,IAGX,IAAK,IAAIiD,EAAI,EAAGA,EAAIjD,EAAMyC,OAAQQ,IAAK,CACrC,GAAwB,IAApBjD,EAAMiD,GAAGR,OAAc,CACzB,GAAgC,WAA5BhG,IAAI2G,OAAOpD,EAAMiD,GAAG,IACtB,MAAM,IAAI/G,yBAAyB8D,EAAMiD,GAAGI,eAG9CrD,EAAMiD,GAAKjD,EAAMiD,GAAG,GAAG3F,QAAQ,aAAc,IAAIgG,MAAM,aAGzB,WAA5B7G,IAAI2G,OAAOpD,EAAMiD,GAAG,MACtBjD,EAAMiD,GAAG,GAAKxG,IAAIkG,SAAS3C,EAAMiD,GAAG,GAAI,IAAI3F,QAAQ,kBAAmB,KAGzC,WAA5Bb,IAAI2G,OAAOpD,EAAMiD,GAAG,MACtBjD,EAAMiD,GAAG,GAAKxG,IAAIkG,SAAS3C,EAAMiD,GAAG,GAAI,IAAI3F,QAAQ,kBAAmB,KAI3E,OAAO0C,GAITxD,KAAK6jB,KAAKiD,MAAQ,IAAI3Z,IACtBnN,KAAK8mB,MAAQA,EAGb9mB,KAAK6jB,KAAKC,UAAY,CAACtgB,IACrB,IAAImmB,EAAiC,WAAtB1pB,IAAI2G,OAAOpD,GACtBsjB,EAAQ9mB,KAAK8mB,MAEjB,IAAK,IAAIrgB,EAAI,EAAGA,EAAIqgB,EAAM7gB,OAAQQ,IAAK,CACrC,IAAIsgB,EAAM9mB,IAAImG,UAAU0gB,EAAMrgB,GAAG,GAAIkjB,EAAWnmB,EAAMyC,OAASzC,GAC3Doc,EAAM3f,IAAImG,UAAU0gB,EAAMrgB,GAAG,GAAIkjB,EAAWnmB,EAAMyC,OAASzC,GAE/D,GACGmmB,GAAYnmB,EAAMyC,QAAU8gB,GAAOvjB,EAAMyC,QAAU2Z,IAClD+J,GAAYnmB,GAASujB,GAAOvjB,GAASoc,EAEvC,OAAO,EAIX,OAAO,IAIXkH,YACE,OAAOrhB,MAAMoP,KAAK7U,KAAK6jB,KAAKiD,MAAMnV,UAGpCmV,UAAWtjB,GACTxD,KAAK6jB,KAAKiD,MAAQ,IAAI3Z,IACtBnN,KAAK4pB,SAASpmB,GAShB7D,SAAU6D,GACRA,EAAQxD,KAAK6jB,KAAK6F,aAAalmB,GAE/B,IAAK,IAAIiD,EAAI,EAAGA,EAAIjD,EAAMyC,OAAQQ,IAAK,CACrC,GAAmC,OAA/BxG,IAAImG,UAAU5C,EAAMiD,GAAG,KAA+C,OAA/BxG,IAAImG,UAAU5C,EAAMiD,GAAG,KAAgBjD,EAAMiD,GAAG,GAAKjD,EAAMiD,GAAG,GACvG,MAAM,IAAI/G,wBAAwB8D,EAAMiD,GAAG,GAAGI,iBAAiBrD,EAAMiD,GAAG,GAAGI,qDAG7E7G,KAAK6jB,KAAKiD,MAAM1V,IAAI5N,EAAMiD,KAU9B9G,YAAa6D,GACX,IAAIsjB,EAAQ9mB,KAAK8mB,MACjBtjB,EAAQxD,KAAK6jB,KAAK6F,aAAalmB,GAE/B,IAAK,IAAIiD,EAAI,EAAGA,EAAIjD,EAAMyC,OAAQQ,IAChC,IAAK,IAAIgZ,EAAI,EAAGA,EAAIqH,EAAM7gB,OAAQwZ,IAC5Bjc,EAAMiD,GAAGI,aAAeigB,EAAMrH,GAAG5Y,YACnC7G,KAAK6jB,KAAKiD,MAAMlZ,OAAOkZ,EAAMrH,yCC5GUoK,EAC/ClqB,YAAasL,IACXA,EAAMA,OAEI2a,iBAAiB3lB,IAAIohB,KAAKM,QAClC1hB,IAAI2I,KAAK,iEAIJqC,EAAIiZ,gBACJjZ,EAAI+Y,eACJ/Y,EAAI8b,WACJ9b,EAAI+b,eACJ/b,EAAI2U,WACJ3U,EAAIgc,eACJhc,EAAI6b,aACJ7b,EAAI6I,YACJ7I,EAAIgH,aACJhH,EAAI2Z,kBACJ3Z,EAAI+H,QAEXnT,MAAMoL,GAENjL,KAAKgiB,SAASuD,WAAY,EAC1BvlB,KAAKgiB,SAASoC,UAAY,UAgB1BpkB,KAAKgiB,SAAS8H,QAAU7pB,IAAIkG,SAAS8E,EAAI8e,OAAO,GAOhD/pB,KAAKgiB,SAAS/V,MAAQhM,IAAIkG,SAAS8E,EAAIgB,MAAOhB,EAAI2a,MAAO5lB,MAOzD,MAAMS,EAAKT,KACL+L,EAAYd,EAAIkO,OAWtB,GATAnZ,KAAKgiB,SAASgI,cAAgB,WAC5B,OAAOje,EAAUzG,MAAM7E,EAAGuhB,SAAS/V,SAAU3H,YAI/CtE,KAAKgiB,SAASiI,SAAW/f,OAAO,YAChClK,KAAKgiB,SAASkI,YAAclqB,KAAKgiB,SAASiI,SAGtCjqB,KAAKgiB,SAAS8H,SAAW9pB,KAAK4lB,MAAO,CAGvC,MAAMuE,EAAoB,6CAG1B,IAAIC,EAAkB,IAAIjd,IACtBkd,EAAUte,EAAUlF,WACpB6K,EAAWyY,EAAkBtiB,KAAKwiB,GAEtC,KAAoB,OAAb3Y,GAAmB,CACxB,IAAIwU,EAAQjmB,IAAIkG,SAASuL,EAAS,GAAIA,EAAS,IAE3C1R,KAAK4lB,MAAM5D,SAASsI,gBAAgBjV,IAAI6Q,IAC1CkE,EAAgBhZ,IAAI8U,GAGtBmE,EAAUA,EAAQvpB,QAAQqpB,EAAmB,IAC7CzY,EAAWyY,EAAkBtiB,KAAKwiB,GAGpCrqB,KAAKgiB,SAAS4D,MAAMha,KAAK,UACvB2e,OAAStE,IACHA,EAAOC,OAASkE,EAAgB/U,IAAI4Q,EAAOC,MAAMxlB,QACnDV,KAAKgiB,SAASkI,YAAclqB,KAAKgiB,SAASiI,SAC1CjqB,KAAKqE,KAAK,cAAerE,QAI7BgP,OAASkX,IACHkE,EAAgB/U,IAAI6Q,EAAMxlB,QAC5BV,KAAKgiB,SAASkI,YAAclqB,KAAKgiB,SAASiI,SAC1CjqB,KAAKqE,KAAK,cAAerE,MACzBC,IAAIsH,aAAavH,KAAKU,+BAA+BwlB,EAAMxlB,2EAI/D8pB,OAAStE,IACHkE,EAAgB/U,IAAI6Q,EAAMxlB,QAC5BV,KAAKgiB,SAASkI,YAAclqB,KAAKgiB,SAASiI,SAC1CjqB,KAAKqE,KAAK,cAAerE,MACzBC,IAAIqK,YAAYtK,KAAKU,+BAA+BwlB,EAAMxlB,qCAOpEmnB,gBAEE,OADA5nB,IAAI2I,KAAK,0DACF,EAGTif,cAAerkB,GACbvD,IAAI2I,KAAK,yDAQXpF,YACE,OAAIxD,KAAKgiB,SAAS8H,QACZ9pB,KAAKgiB,SAASkI,cAAgBlqB,KAAKgiB,SAASiI,SACvCjqB,KAAKgiB,SAASkI,aAErBlqB,KAAKgiB,SAASkI,YAAclqB,KAAKgiB,SAASgI,gBACnChqB,KAAKgiB,SAASkI,aAIlBlqB,KAAKgiB,SAASgI,gBAGvBxmB,UAAWA,GACTvD,IAAI2I,KAAK,wDAGXsb,eAEE,OADAjkB,IAAI2I,KAAK,yDACF,EAGTsb,aAAc1gB,GACZvD,IAAI2I,KAAK,wDAGXof,YAEE,OADA/nB,IAAI2I,KAAK,sDACF,EAGTob,cACE/jB,IAAI2I,KAAK,8CAIXob,YAAaxgB,GACXvD,IAAI2I,KAAK,8CAIXic,mBACE,MAAO,OAGTyB,YAEE,OADArmB,IAAI2I,KAAK,qCACF,EAGTuf,eAEE,OADAloB,IAAI2I,KAAK,uDACF,EAGTjJ,eACEM,IAAI2I,KAAK,kDAGXjJ,kBACEM,IAAI2I,KAAK,qDAGXjJ,mBACEM,IAAI2I,KAAK,mFCtLqCihB,EAChDlqB,YAAasL,MACX,IAAItK,EAAOV,IAAI2G,OAAOqE,EAAIhJ,MAG1B,IAAKgJ,EAAIhJ,KACP,MAAM,IAAIwoB,0BAA0B,0CAC/B,IACJ,QAAS,SAAS/jB,QAAQ/F,GAAQ,IAExB,UAATA,GAC4B,UAA5BV,IAAI2G,OAAOqE,EAAIhJ,KAAK,KAGtB,MAAM,IAAIwoB,sHAAsHxqB,IAAI2G,OAAOqE,EAAIhJ,UAMjJgJ,EAAIoZ,YAAa,EACjBxkB,MAAMoL,GAENjL,KAAKgiB,SAASoC,UAAY,OAC1BpkB,KAAKgiB,SAAS/f,KAAOiI,OAAO,gBAG5BlK,KAAKgiB,SAAS0I,aAAe,MACE,UAAzB1qB,KAAKgiB,SAAS2I,QAEhB3qB,KAAKgiB,SAAS/f,KAAK2J,KAAK,UACtB4e,OAAQxqB,KAAKgiB,SAAS4I,wBAAwB,gBAC9CL,OAAQvqB,KAAKgiB,SAAS4I,wBAAwB,gBAC9C5b,OAAQhP,KAAKgiB,SAAS4I,wBAAwB,gBAC9CC,QAAUpO,IACRzc,KAAKqE,MAAM,qBAAsBrE,KAAKgiB,SAASthB,QAAQ+b,EAAKyJ,WAE9DI,MAAQ7J,IACNzc,KAAKqE,MAAM,iBAAkBrE,KAAKgiB,SAASthB,QAAQ+b,EAAKyJ,eA+BhElmB,KAAKgiB,SAAS4I,wBAA0B,CAACjqB,IACvC,MAAMF,EAAKT,KAEX,OAAO,SAAUimB,GACfxlB,EAAGuhB,SAAS2E,eACVT,SAAUzlB,EAAGC,QAAQulB,EAAOC,QAC5BC,IAAKlmB,IAAIkG,SAAS8f,EAAOE,KACzBC,IAAKnmB,IAAIkG,SAAS8f,EAAOG,KACzBnkB,MAAM,EACN6oB,eACEze,MAAOrM,KAAKqM,MACZ0e,OAAQtqB,EAAGuhB,SAAS+I,aAO5B/qB,KAAKgiB,SAASgJ,wBAA0B,CAACrqB,IACvC,MAAMF,EAAKT,KAEX,OAAO,SAAU+qB,EAAQ9E,GACvB,IAAIE,EAAMF,EAAShmB,IAAIkG,SAAS8f,EAAOE,KAAO1lB,EAAGgc,KAE9B,kBAAfzc,KAAKqM,MACP8Z,EAAI5Z,MACoB,kBAAfvM,KAAKqM,OACd8Z,EAAIxf,KAAKokB,EAAOtO,MAGlBhc,EAAGuhB,SAAS2E,eACVT,MAAOzlB,EAAGC,MAAQulB,MAAaA,EAAOC,QAAU,IAChDC,IAAKF,EAAShmB,IAAIkG,SAAS8f,EAAOE,KAAOA,EACzCC,IAAKH,EAAShmB,IAAIkG,SAAS8f,EAAOG,KAAO3lB,EAAGgc,KAC5Cxa,MAAM,EACN6oB,eACEze,MAAOrM,KAAKqM,MACZ0e,OAAQA,QAiEhB/qB,KAAKwD,MAAQvD,IAAIkG,SAAS8E,EAAIhJ,MAC9BjC,KAAKgiB,SAASuD,WAAY,EAC1BvlB,KAAK6nB,UAAY5nB,IAAIkG,SAAS8E,EAAIua,OAAO,GAmC3CmF,aACE,OAAO1qB,IAAIkG,SAASnG,KAAKgiB,SAAS2I,OAAQ,WAG5CnnB,YACE,OAAOxD,KAAKgiB,SAAS/f,KAIvBuB,UAAWA,GAET,IAAIwlB,EAAehpB,KAAKgiB,SAAS/f,KAEjC,GAAI+mB,IAAiBxlB,EACnB,OAGF,IAAI7C,EAAOV,IAAI2G,OAAOpD,GAEtB,GAAa,UAAT7C,EAAkB,CACpB,GAAqB,IAAjB6C,EAAMyC,OACR,MAAM,IAAIvG,SAASM,KAAKgiB,SAASthB,yFAGnCV,KAAKgiB,SAAS2I,OAAS,QACvBnnB,EAAQ,IAAIvD,IAAIohB,KAAK4J,OACnBrF,MAAOpiB,EAAM,SAEV,CAAA,MAAK,QAAS,SAASkD,QAAQ/F,IAAS,GAI7C,MADAV,IAAIsH,cAAcvH,KAAKgiB,SAASthB,0IAC1B,IAAI+pB,+DAA+DzqB,KAAKgiB,SAASthB,gBAHvFV,KAAKgiB,SAAS2I,OAAShqB,EAMzB,GAAoB,YAAhBX,KAAK2qB,OACP,MAAM,IAAIjrB,MAAM,yKAGlBM,KAAKgiB,SAAS/f,KAAgB,UAATtB,EAAmB,IAAI6C,EAAUA,EACtDxD,KAAK6nB,UAAY7nB,KAAKgiB,SAASuD,UAC/BvlB,KAAKgiB,SAAS0I,eAGc,iBAAjB1B,GACThpB,KAAKqE,KAAK,UACR8hB,IAAK6C,EACL5C,IAAK5iB,IAKXqkB,cAAerkB,IACbA,EAAQvD,IAAI+G,aAAaxD,MAEXxD,KAAKgiB,SAASuD,YAC1BvlB,KAAKgiB,SAASuD,UAAY/hB,EAC1BxD,KAAKgiB,SAAS/f,KAAK4lB,UAAYrkB,GAKnC7D,OAC+B,UAAzBK,KAAKgiB,SAAS2I,QAChB3qB,KAAKgiB,SAAS/f,KAAKipB,QAAQ5mB,WAI/B3E,OAC+B,UAAzBK,KAAKgiB,SAAS2I,QAChB3qB,KAAKgiB,SAAS/f,KAAKkpB,QAAQ7mB,4BCnQ/B3E,YAAasL,MACXnL,OAAOkD,iBAAiBhD,MACtBorB,eAAgBnrB,IAAIC,aAAa+K,GACjCogB,UAAWprB,IAAIyD,QAAQ,MACvB4nB,WAAYrrB,IAAIyD,QAAQ,MACxB6nB,UAAWtrB,IAAIC,aAAa,CAAC6B,EAAM,MAAO0a,KACxC,GAAyB,WAArBxc,IAAI2G,OAAO6V,GACb,OAAOA,EAGT,IAAIrT,EAAOtJ,OAAOsJ,KAAKqT,GACvB1a,EAAc,QAARA,EAAgB/B,KAAKwrB,QAAUxrB,KAAK+B,IAE1C,IAAK,IAAI0E,EAAI,EAAGA,EAAI2C,EAAKnD,OAAQQ,IAC3B1E,EAAIf,eAAeoI,EAAK3C,MAC1BgW,EAAK1a,EAAIqH,EAAK3C,KAAOgW,EAAKrT,EAAK3C,WACxBgW,EAAKrT,EAAK3C,KAIrB,OAAOgW,MASb1a,UACE,GAAuB,OAAnB/B,KAAKqrB,UAAoB,CAC3B,IAAIjiB,EAAOtJ,OAAOsJ,KAAKpJ,KAAKorB,gBAE5BprB,KAAKqrB,aAEL,IAAK,IAAI5kB,EAAI,EAAGA,EAAI2C,EAAKnD,OAAQQ,IACH,WAAxBxG,IAAI2G,OAAOwC,EAAK3C,KAAiE,WAA7CxG,IAAI2G,OAAO5G,KAAKorB,eAAehiB,EAAK3C,OAC1EzG,KAAKqrB,UAAUjiB,EAAK3C,IAAMzG,KAAKorB,eAAehiB,EAAK3C,KAKzD,OAAOzG,KAAKqrB,UAOdG,cACE,GAAwB,OAApBxrB,KAAKsrB,WAAqB,CAC5B,IAAIliB,EAAOtJ,OAAOsJ,KAAKpJ,KAAKorB,gBAE5BprB,KAAKsrB,cAEL,IAAK,IAAI7kB,EAAI,EAAGA,EAAI2C,EAAKnD,OAAQQ,IACH,WAAxBxG,IAAI2G,OAAOwC,EAAK3C,KAAiE,WAA7CxG,IAAI2G,OAAO5G,KAAKorB,eAAehiB,EAAK3C,OAC1EzG,KAAKsrB,WAAWtrB,KAAKorB,eAAehiB,EAAK3C,KAAO2C,EAAK3C,IAK3D,OAAOzG,KAAKsrB,WAQd3rB,SAAU8c,GACR,OAAOzc,KAAKurB,UAAU,MAAO9O,GAQ/B9c,gBAAiB8c,GACf,OAAOzc,KAAKurB,UAAU,UAAW9O,WLxIvB,SAAUxR,GACtB,GAAwB,WAApBhL,IAAI2G,OAAOqE,GACb,MAAM,IAAIvL,MAAM,6BAGlB,IAAI+hB,EAAQ,SAAUhF,EAAMqJ,GAAiB,GAC3C,IAAInE,EAAS,IAAI1hB,IAAIohB,KAAKM,OAAO1W,GAMjC,OAJIwR,GACFkF,EAAO8J,KAAKhP,EAAMqJ,GAGbnE,GAGT,MAAMlhB,EAAKT,KAUX,OARAF,OAAOC,eAAe0hB,EAAM5c,UAAW,gBAAiB5E,IAAI0D,MAAMsH,IAClEnL,OAAOC,eAAe0hB,EAAM5c,UAAW,UACrCxB,YAAY,EACZO,IAAI,IACKnD,IAIJghB,wBMxBkC7U,EACzCjN,YAAasL,GACXA,EAAMhL,IAAIkG,SAAS8E,MAEnBpL,QAEIoL,EAAIygB,UACNzgB,EAAI0gB,SAAW1gB,EAAIygB,QACnBzrB,IAAI2I,KAAK,gDAGPqC,EAAI2gB,cACN3gB,EAAI4gB,oBAAsB5gB,EAAI2gB,YAC9B3rB,IAAI2I,KAAK,oEAGX,MAAMnI,EAAKT,KAGXF,OAAOkD,iBAAiBhD,MAOtB8rB,IAAK7rB,IAAIyD,QAAQwG,OAAO,aAExB8X,SAAU/hB,IAAIC,cAMZQ,KAAMT,IAAIkG,SAAS8E,EAAIvK,KAAM,kBAO7B8jB,YAAavkB,IAAIkG,SAAS8E,EAAIuZ,YAAavZ,EAAIvK,KAAM,sBAqCrDqrB,OAAQjsB,OAAOkV,UAAW/U,IAAIkG,SAAS8E,EAAI8gB,YAC3CzB,gBAAiB,IAAInd,IACrB6e,kBAAmB,IAAI7e,IACvB8e,gBAAiBhsB,IAAIkG,SAAS8E,EAAIua,OAAO,GAAS,IAAIrY,IAAQ,KA2B9DyX,WAAY3kB,IAAIkG,SAAS8E,EAAIgH,MAAOhH,EAAI6I,KAAM7I,EAAI2Z,YAMlDhB,WAAY3jB,IAAIkG,SAAS8E,EAAI2Y,YAAY,GAWzCqE,OAAQhoB,IAAIkG,SAAS8E,EAAIgd,QAAQ,GAQjC4D,oBAAqB5rB,IAAIkG,SAAS8E,EAAI4gB,oBAAqB5gB,EAAIihB,QAAS,MAexEC,WAAY,KAGZC,kBAAmB,KAEnBC,QAASvhB,KAAKwhB,MACdC,MAAO,KAOPhH,WAAW,EACXE,SAAUxlB,IAAIkG,SAAS8E,EAAIua,OAAO,GAAS,IAAIvlB,IAAIohB,KAAKqE,eAAmB,KAC3E8G,cAAe,SAAUvG,GACnBA,EAAOjlB,eAAe,WACxBP,EAAGuhB,SAASyD,SAASiB,OAAOjmB,EAAGuhB,SAASyK,gBAI5CnH,OAAQ,IAAInY,KACV,eACA,eACA,eACA,gBACA,cACA,eACA,iBACA,iBACA,oBACA,WACA,cACA,sBACA,sBACA,UACA,UACA,QACA,SAaFuf,WAAY,CAACxG,EAAOyG,EAAW,KAAM7G,GAAiB,KAEpD,GAAI9lB,KAAKgiB,SAASsI,gBAAgBjV,IAAI6Q,GACpC,OAAOjmB,IAAI2I,yBAAyBsd,gBAItC,GAAIlmB,KAAKgB,eAAeklB,IAAkC,OAAxBA,EAAM9gB,cACtC,MAAM,IAAIwnB,sBAAsB1G,sDAIlC,GAAMyG,aAAoB1sB,IAAIohB,KAAKwL,OA+D5B,GAAuB,OAAnBF,EAAS/G,MAClB+G,EAASjsB,KAAOwlB,EAChByG,EAAStI,WAAasI,EAAStI,WAAapkB,IAAIkG,SAASwmB,EAAStI,WAAYrkB,KAAKgiB,SAAS6J,sBAAwB3F,GAEpHlmB,KAAKgiB,SAAS+J,OAAO7F,GAASyG,EAC9B3sB,KAAKgiB,SAAS+J,OAAO7F,GAAON,MAAQ5lB,UAC/B,GAAI2sB,EAAS/G,QAAU5lB,KAC5B2sB,EAAStI,WAAapkB,IAAIkG,SAASwmB,EAAStI,WAAYrkB,KAAKgiB,SAAS6J,sBAAwB3F,GAE9FlmB,KAAKgiB,SAAS+J,OAAO7F,GAASyG,OACzB,KAAMA,aAAoB1sB,IAAIohB,KAAKwL,OACxC,OAAO5sB,IAAI2I,aAAa+jB,EAASjsB,0EAzEjC,GAAIisB,aAAoB1sB,IAAIohB,KAAK4J,OAAS0B,aAAoB1sB,IAAIohB,KAAKI,MAAO,CAC5E,GAAIzhB,KAAKgiB,SAAS6J,sBAAwB3F,EACxC,MAAM,IAAIuE,8BAA8BvE,wFAG1ClmB,KAAKgiB,SAAS+J,OAAO7F,GAAS,IAAIjmB,IAAIohB,KAAKyL,cACzCpsB,KAAMwlB,EACN6E,OAAQ4B,EACR/G,MAAO5lB,YAGT,OAAQC,IAAI2G,OAAO+lB,IAEjB,IAAK,SACHA,EAAS/G,MAAQ5lB,KACjB2sB,EAAStI,WAAapkB,IAAIkG,SAASwmB,EAAStI,WAAYrkB,KAAKgiB,SAAS6J,sBAAwB3F,GAC9FyG,EAASjsB,KAAOwlB,EAEhBlmB,KAAKgiB,SAAS+J,OAAO7F,GAAS,IAAIjmB,IAAIohB,KAAKwL,MAAMF,GAEjD,MAGF,IAAK,QACH,OAAO3sB,KAAKgiB,SAAS0K,WAAWxG,EAAOyG,EAAS,GAAI7G,GAGtD,QACE,GAAI7lB,IAAIoI,KAAKskB,IAA0B,OAAbA,EAAmB,CAC3C,GAAI1sB,IAAIoI,KAAKskB,KAAc,SAAU,SAAU,UAAW,SAAU,SAAU,SAAU,OAAQ,QAAS,UAAUjmB,QAAQzG,IAAI2G,OAAO+lB,IAAa,EAAG,CACpJ3sB,KAAKgiB,SAAS+J,OAAO7F,GAAS,IAAIjmB,IAAIohB,KAAK0L,cACzCrsB,KAAMwlB,EACN7B,WAAYrkB,KAAKgiB,SAAS6J,sBAAwB3F,EAClDN,MAAO5lB,KACPmZ,OAAQwT,IAGV,MAGF3sB,KAAKgiB,SAAS+J,OAAO7F,GAAS,IAAIjmB,IAAIohB,KAAKwL,OACzCnsB,KAAMwlB,EACNvlB,KAAMgsB,EACNtI,WAAYrkB,KAAKgiB,SAAS6J,sBAAwB3F,EAClDN,MAAO5lB,OAGT,MAGFA,KAAKgiB,SAAS+J,OAAO7F,GAAS,IAAIjmB,IAAIohB,KAAKwL,OACzCnsB,KAAMwlB,EACNvlB,KAAMV,IAAIoI,KAAKskB,GAAYA,EAAW3hB,OACtCqZ,YAAYpkB,IAAIoI,KAAKskB,IAEjB1sB,IAAIkG,SAASwmB,EAAStI,WAAYrkB,KAAKgiB,SAAS6J,sBAAwB3F,GAC5EN,MAAO5lB,OA6CjB,OAxBAF,OAAOC,eAAeC,KAAMkmB,GAC1B7iB,YAAY,EACZE,cAAc,EACdK,IAAK,IAAM5D,KAAK4D,IAAIsiB,GACpBpiB,IAAMN,GAAUxD,KAAK8D,IAAIoiB,EAAO1iB,KAI9BxD,KAAKgiB,SAASuD,WAC8B,YAA1CvlB,KAAKgiB,SAAS+J,OAAO7F,GAAO9B,YAC9BpkB,KAAKgiB,SAAS+J,OAAO7F,GAAO2B,WAAY,EACxC7nB,KAAKgiB,SAASiK,gBAAgB7a,IAAI8U,IAKtClmB,KAAKgiB,SAASsI,gBAAgBlZ,IAAI8U,GAElClmB,KAAKgiB,SAAS+J,OAAO7F,GAAOjX,MAAM,IAAKjP,KAAM,UAExC8lB,GACH9lB,KAAKqE,KAAK,eAAgBrE,KAAKgiB,SAAS+J,OAAO7F,IAG1ClmB,KAAKgiB,SAAS+J,OAAO7F,IAa9B8G,YAAa,CAACrsB,EAAO,OAAQ6N,EAAQ,EAAGsX,GAAiB,KACvD,IAAK9lB,KAAKgiB,SAASuD,UAEjB,YADAtlB,IAAI2I,YAAYjI,6BAAgCX,KAAKU,4CAIvDV,KAAKgiB,SAASyD,SAAkB,SAAT9kB,EAAkB,WAAa,WAAW6N,GAEjE,IAAIiO,EAAOzc,KAAKgiB,SAASyD,SAASuD,aAE9BvM,GACFzc,KAAKgiB,SAASiK,gBAAgBlnB,QAAQkoB,IACpC,IAAI/G,EAAQlmB,KAAKgiB,SAAS+J,OAAOkB,GAC7B7O,EAAM8H,EAAMlE,SAASyD,SAErBrH,EAAIqI,SAAWhK,EAAKwQ,KACS,iBAApBxQ,EAAKwQ,GACd7O,EAAIqI,OAAShK,EAAKwQ,GAElB7O,EAAIqI,OAAS,KAGfP,EAAMlE,SAAS6D,SAAS5lB,IAAIkG,SAASiY,EAAI4K,aAAc9C,EAAMlC,SAAU8B,GAAgB,OAa/F2G,YAAa,KACX,IAAI1qB,KAMJ,OAJA/B,KAAKgiB,SAASiK,gBAAgBlnB,QAAQmhB,IACpCnkB,EAAImkB,GAASlmB,KAAKgiB,SAAS+J,OAAO7F,GAAOlE,SAASyD,SAASgB,SAGtD1kB,GAqBTmrB,UAAWjtB,IAAI0I,UAAU3I,KAAKmtB,oBAAqB,mEAsBnDC,QAAS,OAGXC,IAAKptB,IAAI2D,IAAI,IACJ3D,IAAIkG,SACTnG,KAAKgiB,SAASoL,QACdptB,KAAKgiB,SAASuK,iBAAiBtsB,IAAIohB,KAAK4J,MACpCjrB,KAAKgiB,SAASuK,MAAMxqB,IACpB,SAKNkJ,EAAI0gB,oBAAoB1rB,IAAIohB,KAAKiM,SACnCttB,KAAKgiB,SAASoL,QAAUniB,EAAI0gB,SACU,WAA7B1rB,IAAI2G,OAAOqE,EAAI0gB,YACxB3rB,KAAKgiB,SAASoL,QAAU,IAAIntB,IAAIohB,KAAKiM,SAASriB,EAAI0gB,WAOpD,IAAII,EAASjsB,OAAOsJ,KAAKpJ,KAAKgiB,SAAS+J,QACvC,IAAK,IAAItlB,EAAI,EAAGA,EAAIslB,EAAO9lB,OAAQQ,IAAK,CACtC,IAAI/F,EAAOqrB,EAAOtlB,GAEdzG,KAAKgiB,SAASsI,gBAAgBjV,IAAI3U,GACpCT,IAAI2I,yBAAyBlI,gBAG7BV,KAAKgiB,SAAS0K,WAAWhsB,EAAMV,KAAKgiB,SAAS+J,OAAOrrB,IAAO,GAK/D,GAAIV,KAAKgiB,SAASiG,OAAQ,CACxB,IAAIsF,EAAc,KAElBztB,OAAOC,eAAeC,KAAKgiB,SAAU,sBAAuB/hB,IAAI2D,IAAI,KAC9C,OAAhB2pB,IACFA,EAActtB,IAAIohB,KAAK9M,QAAQiZ,QAG1BD,KAoBX,GAfAvtB,KAAK6nB,UAAY5nB,IAAIkG,SAAS8E,EAAIua,OAAO,GAGzCxlB,KAAKgO,IAAI,eAAgB,eAAgB,eAAgB,eAAgB,kBAAmB,KACtFhO,KAAKgiB,SAASyL,WAChBztB,KAAKgiB,SAASyL,SAAW,QAKzBxiB,EAAIyiB,UACN1tB,KAAK0tB,QAAUziB,EAAIyiB,SAIY,OAA7B1tB,KAAKgiB,SAAS4C,WAChB,OAAQ3kB,IAAI2G,OAAO5G,KAAKgiB,SAAS4C,aAE/B,IAAK,SACH,IAAIxb,EAAOtJ,OAAOsJ,KAAKpJ,KAAKgiB,SAAS4C,YACjC3S,KAEJ,IAAK,IAAIxL,EAAI,EAAGA,EAAI2C,EAAKnD,OAAQQ,IAC/BwL,EAAMtL,KAAK,IAAI1G,IAAIohB,KAAKuF,KAAK5mB,KAAKgiB,SAAS4C,WAAWxb,EAAK3C,IAAK2C,EAAK3C,GAAIzG,OAG3E,MAGF,IAAK,QACH,IAAK,IAAIyG,EAAI,EAAGA,EAAIzG,KAAKgiB,SAAS4C,WAAW3e,OAAQQ,IAAK,CACxD,IAAIzG,KAAKgiB,SAAS4C,WAAWne,GAAGzF,eAAe,QAG7C,MAAM,IAAItB,6CAA6CM,KAAKU,qBAAqB+F,4CAFjFzG,KAAKgiB,SAAS4C,WAAWne,GAAGod,KAAK5X,MAAQjM,KAM7C,MAGF,QACE,MAAM,IAAIN,6CAA6CM,KAAKU,iFAAiFT,IAAI2G,OAAO5G,KAAKgiB,SAAS4C,iBAK9KlkB,WACE,OAAOV,KAAKgiB,SAASthB,KAGvBmnB,cAAerkB,IACbA,EAAQvD,IAAI+G,aAAaxD,MAEXxD,KAAKgiB,SAASuD,YAC1BvlB,KAAKgiB,SAASuD,UAAY/hB,EAC1BxD,KAAKgiB,SAASyD,SAAWjiB,EAAQ,IAAIvD,IAAIohB,KAAKqE,eAAmB,KACjE1lB,KAAKgiB,SAASiK,gBAAkBzoB,EAAQ,IAAI2J,IAAQ,KAGpDnN,KAAKgiB,SAASsI,gBAAgBvlB,QAAQkoB,IAC/BjtB,KAAKgiB,SAAS+J,OAAOkB,GAAWzG,UACnCxmB,KAAKgiB,SAAS+J,OAAOkB,GAAWpF,UAAYrkB,EAExCA,GACFxD,KAAKgiB,SAASiK,gBAAgB7a,IAAI6b,MAKpCzpB,EAEFxD,KAAKgO,GAAG,sBAAwBqa,IAC9BroB,KAAKgiB,SAASwK,eAAgB/F,OAAQ4B,OAGxCroB,KAAKgiB,SAASiK,gBAAgBxe,QAE9BzN,KAAKsN,IAAI,yBASf+a,SACE,OAAOroB,KAAK4D,IAAI5D,KAAKgiB,SAAS6J,qBAGhCxD,OAAQ7kB,GACNxD,KAAK8D,IAAI,KAAMN,GAOjBmqB,SACE,OAAO3tB,KAAKqoB,GAGdsF,OAAQnqB,GACNxD,KAAK8D,IAAI,KAAMN,GAQjB4kB,gBACE,OAAOpoB,KAAKgiB,SAASyD,SAASrH,IAAIrc,IAAIynB,IACpC,IAAItd,GACFkd,UAAWI,EAAMJ,UACjBK,aAAcD,EAAMC,aACpBjmB,UAGEiZ,EAAO+M,EAAMhmB,MACb0iB,EAAQpmB,OAAOsJ,KAAKqT,GAExB,IAAK,IAAIhW,EAAI,EAAGA,EAAIyf,EAAMjgB,OAAQQ,IACF,iBAAnBgW,EAAKyJ,EAAMzf,IACpByF,EAAO1I,MAAM0iB,EAAMzf,IAAMxG,IAAIkG,SAC3BnG,KAAKgiB,SAAS+J,OAAO7F,EAAMzf,IAAIub,SAASyD,SAAS8C,UAAU9L,EAAKyJ,EAAMzf,KAAKjD,MAC3ExD,KAAKgiB,SAAS+J,OAAO7F,EAAMzf,IAAIud,SAGjC9X,EAAO1I,MAAM0iB,EAAMzf,IAAMxG,IAAIkG,SAASnG,KAAKgiB,SAAS+J,OAAO7F,EAAMzf,IAAIud,SAIzE,OAAO9X,IAQX0hB,iBACE,OAAO5tB,KAAKgiB,SAASqK,QASvB5P,WACE,OAAIzc,KAAKqtB,IACArtB,KAAKqtB,IAAIQ,gBAAgB7tB,KAAK8tB,mBAGhC9tB,KAAK8tB,kBAOdC,mBACE,OAAO/tB,KAAK8tB,kBAQdE,qBACE,OAAIhuB,KAAKqtB,IACArtB,KAAKqtB,IAAIQ,gBAAgB7tB,KAAK8tB,iBAAgB,GAAO,IAGvD9tB,KAAK8tB,iBAAgB,GAAO,GAOrCG,6BACE,OAAOjuB,KAAK8tB,iBAAgB,GAAO,GAWrCL,eAGE,OAFAztB,KAAKgiB,SAASyL,SAAWxtB,IAAIkG,SAASnG,KAAKgiB,SAASyL,SAAUxtB,IAAIohB,KAAK9M,QAAQkZ,SAASzU,KAAKC,UAAUjZ,KAAKyc,QAErGzc,KAAKgiB,SAASyL,SAcvBC,cACE,OAAO1tB,KAAKgiB,SAASmK,WAGvBuB,YAAalqB,GACX,GAAc,OAAVA,EAGF,OAFAwW,aAAaha,KAAKgiB,SAASoK,wBAC3BpsB,KAAKgiB,SAASmK,WAAa,MAI7B,IAAIG,EAAM,IAAIxhB,KAEd,GAAKojB,MAAM1qB,IAAYA,aAAiBsH,KAiBjC,CAAA,KAAMtH,aAAiBsH,OAAStH,GAAS8oB,EAC9C,MAAM,IAAI5sB,SAASM,KAAKU,wFAGxBV,KAAKgiB,SAASmK,WAAa3oB,MArBkB,CAE7C,GAAIA,EAAQ,EAGV,YAFAxD,KAAKgiB,SAASmK,WAAa,MAK7B,GAAc,IAAV3oB,EAIF,OAHAxD,KAAKgiB,SAASmK,WAAaG,OAC3BtsB,KAAKqE,KAAK,UAKZrE,KAAKgiB,SAASmK,WAAa,IAAIrhB,KAC/B9K,KAAKgiB,SAASmK,WAAWxD,QAAQ2D,EAAInlB,UAAY3D,GAQnDwW,aAAaha,KAAKgiB,SAASoK,mBAE3BpsB,KAAKgiB,SAASoK,kBAAoB3c,WAAW,IAAMzP,KAAKqE,KAAK,UAAWrE,KAAKgiB,SAASmK,WAAWhlB,UAAYmlB,EAAInlB,WAGnHgnB,cACE,OAAiC,OAA7BnuB,KAAKgiB,SAASmK,YAIXnsB,KAAKgiB,SAASmK,gBAAmBrhB,KAG1CsjB,uBACE,OAAOpuB,KAAKgiB,SAAS+J,OAiCvBpsB,gBAAiB0uB,GAAW,EAAOC,GAAsB,GACvD,GAA2C,IAAvCtuB,KAAKgiB,SAASsI,gBAAgBta,KAChC,SAGF,IAAI+b,EAAS/rB,KAAKgiB,SAASsI,gBAAgBlhB,OACvC8C,KACA+gB,EAAYlB,EAAOja,OAEvB,MAAQmb,EAAUpb,MAAM,CACtB,IAAIqU,EAAQlmB,KAAKgiB,SAAS+J,OAAOkB,EAAUzpB,OAG3C,SACkB6B,IAAhB6gB,EAAM1iB,OACL6qB,GAAYpB,EAAUzpB,QAAUxD,KAAK6rB,sBACpC3F,EAAMM,UAAa8H,GAAuBpI,EAAMM,WAG7CN,EAAM/B,OACT,OAAQlkB,IAAI2G,OAAOsf,EAAM1iB,QACvB,IAAK,QACL,IAAK,SACH0I,EAAO+gB,EAAUzpB,OAASvD,IAAIohB,KAAK9M,QAAQkM,UAAUyF,EAAM1iB,OAC3D,MAEF,QACE0I,EAAO+gB,EAAUzpB,OAAS0iB,EAAM1iB,MAKxCypB,EAAYlB,EAAOja,OAGrB,OAAO5F,EAGTvM,YACE,OAAOM,IAAI0I,UAAU3I,KAAK8tB,gBAAiB,sGAS7CnuB,YAAaumB,GACX,OAAOlmB,KAAKgiB,SAASsI,gBAAgBjV,IAAI6Q,GAU3CvmB,IAAKumB,GACH,MAAc,OAAVA,GAA4B,OAAVA,GAAkBA,IAAUlmB,KAAKgiB,SAAS6J,sBAC9D3F,EAAQlmB,KAAKgiB,SAAS6J,qBAElB7rB,KAAKgiB,SAASiG,QAShBjoB,KAAKgiB,SAASsI,gBAAgBjV,IAAI6Q,GAC7BlmB,KAAKgiB,SAAS+J,OAAO7F,GAAO1iB,WAEnCvD,IAAI2I,oBAAoBsd,2CAXjBlmB,KAAKgiB,SAASsI,gBAAgBjV,IAAI6Q,GAG9BjmB,IAAIkG,SAASnG,KAAKgiB,SAAS+J,OAAO7F,GAAO1iB,MAAOxD,KAAKgiB,SAASuM,qBAF9DvuB,KAAKgiB,SAASuM,oBAsB7B5uB,IAAKumB,EAAO1iB,GACI,OAAV0iB,GAA4B,OAAVA,IACpBA,EAAQlmB,KAAKgiB,SAAS6J,qBAGpB7rB,KAAKgiB,SAASsI,gBAAgBjV,IAAI6Q,GACpClmB,KAAKgiB,SAAS+J,OAAO7F,GAAO1iB,MAAQA,EAEpCvD,IAAI2I,oBAAoBsd,gCAa5BvmB,SAAUe,EAAM8tB,EAAqB,KAAM1I,GAAiB,GAC1D,GAAIplB,aAAgBT,IAAIohB,KAAKwL,MAE3BnsB,GADA8tB,EAAqB9tB,GACKA,UACrB,GAAoB,iBAATA,EAChB,MAAM,IAAIhB,MAAM,wCAGlBM,KAAKgiB,SAAS0K,WAAWhsB,EAAM8tB,EAAoB1I,GAWrDnmB,YAAae,EAAMolB,GAAiB,GAClC,GAAI9lB,KAAKgiB,SAASsI,gBAAgBjV,IAAI3U,GAAO,CAC3CV,KAAKgiB,SAASsI,gBAAgB1c,OAAOlN,GACrCV,KAAKgiB,SAASgK,kBAAkBpe,OAAOlN,GAEvC,MAAMwlB,EAAQlmB,KAAKgiB,SAAS+J,OAAOrrB,UAE5BV,KAAKU,UACLV,KAAKgiB,SAAS+J,OAAOrrB,GASvBolB,GACH9lB,KAAKqE,KAAK,eAAgB6hB,GAGA,OAAxBlmB,KAAKgiB,SAASuK,OAChBvsB,KAAKgiB,SAASuK,MAAMloB,KAAKrE,KAAKgiB,SAASuK,MAAMkC,QAAQtqB,MAAMuqB,qBACzD3D,OAAQ/qB,KACRkmB,MAAAA,KAaRvmB,SAAUe,GACR,MAA2B,OAAvBA,EAAK0E,gBAA2BpF,KAAKgiB,SAAS+J,OAAO/qB,eAAeN,IAASV,KAAKgiB,SAAS+J,OAAO/qB,eAAehB,KAAKgiB,SAAS6J,qBAC1H7rB,KAAKgiB,SAAS+J,OAAO/rB,KAAKgiB,SAAS6J,qBAGrC7rB,KAAKgiB,SAAS+J,OAAOrrB,GAc9Bf,oBAAqBumB,EAAO1iB,GAC1BxD,KAAKgiB,SAAS+J,OAAO7F,GAAOgC,YAAc1kB,EAa5C7D,KAAM6O,EAAQ,EAAGsX,GAAiB,GAChC9lB,KAAKgiB,SAASgL,YAAY,UAAW1oB,WAkBvC3E,KAAM6O,EAAQ,EAAGsX,GAAiB,GAChC9lB,KAAKgiB,SAASgL,YAAY,UAAW1oB,WAWvC3E,KAAM8c,EAAMqJ,GAAiB,GACvB9lB,KAAKqtB,MACP5Q,EAAOzc,KAAKqtB,IAAIsB,SAASlS,IAG3B,IAAIrT,EAAOtJ,OAAOsJ,KAAKqT,GAEvB,IAAK,IAAIhW,EAAI,EAAGA,EAAI2C,EAAKnD,OAAQQ,IAC3BzG,KAAKgiB,SAASsI,gBAAgBjV,IAAIjM,EAAK3C,IACzCzG,KAAKgiB,SAAS+J,OAAO3iB,EAAK3C,IAAIub,SAAS6D,SAASpJ,EAAKrT,EAAK3C,IAAKqf,GAE/D7lB,IAAI2I,uBAAuBQ,EAAK3C,eAAezG,KAAKU,gBAAgB0I,EAAK3C,kCAQ7E,OAJKqf,GACH9lB,KAAKqE,KAAK,QAGLrE,KAuBTL,KAAM6O,EAAQ,EAAGogB,GAAQ,GACvB,OAAc,IAAVpgB,EACKxO,KAGLA,KAAKgiB,SAASuK,OACK,kBAAV/d,IACTogB,EAAQpgB,EACRA,EAAQ,GAGHxO,KAAKgiB,SAASuK,MAAMsC,iBAAiB7uB,KAAMwO,EAAOogB,KAEzD3uB,IAAI2I,KAAK,wEACF5I,MAwBXL,SAAU6O,EAAQ,EAAGogB,GAAQ,GAC3B,OAAc,IAAVpgB,EACKxO,KAGLA,KAAKgiB,SAASuK,OACK,kBAAV/d,IACTogB,EAAQpgB,EACRA,EAAQ,GAGHxO,KAAKgiB,SAASuK,MAAMsC,iBAAiB7uB,KAAM,EAAIwO,EAAOogB,KAE7D3uB,IAAI2I,KAAK,4EACF5I,MAUXL,UACMK,KAAKgiB,SAASuK,MAChBvsB,KAAKgiB,SAASuK,MAAMvd,OAAOhP,KAAK8rB,KAEhC7rB,IAAI2I,KAAK,gGCvjC2BgE,EASxCjN,YAAamvB,GAAQ,EAAOpuB,EAAO,kBACjCb,QAEAC,OAAOkD,iBAAiBhD,MAEtB+uB,aAAc9uB,IAAIC,aAAagK,OAAO,WACtC8kB,aAAc/uB,IAAIC,aAAagK,OAAO,WACtC+kB,aAAchvB,IAAIC,aAAagK,OAAO,WAGtCglB,aAAcjvB,IAAIC,aAAa,IAAIiN,KACnCgiB,aAAclvB,IAAIC,iBAClBQ,KAAMT,IAAI0D,MAAMjD,GAChB0uB,QAASnvB,IAAIC,aAAa4uB,KAI5B,MAAMruB,EAAKT,KACXA,KAAKgO,IACHhO,KAAK+uB,aACL/uB,KAAKgvB,aACLhvB,KAAKivB,cACJ,SAAUI,EAAK7rB,EAAO8rB,GAAgB,GAClCA,GACH7uB,EAAG4D,KAAKrE,KAAKqM,MAAMxF,WAAW/F,QAAQ,iBAAkB,IAAKuuB,KAMjErvB,KAAKgO,GAAGhO,KAAKgvB,aAAc,CAACK,EAAK7rB,KAC/B,GAAsC,IAAlCxD,KAAKuvB,WAAW/rB,GAAOyC,OAAc,CACvC,IAAIqD,EAAQtJ,KAAK0G,QAAQlD,GAErB8F,GAAS,IACXtJ,KAAKmvB,aAAaxpB,OAAO2D,EAAO,GAChCtJ,KAAKkvB,aAAathB,OAAOpK,OAM3BxD,KAAKovB,SACPtvB,OAAOC,eAAeC,KAAM,QAASC,IAAIC,aAAa,IAAID,IAAIohB,KAAKmO,MAAM,EAAG9uB,KAIhF0I,WACE,OAA+B,IAA3BpJ,KAAKkvB,aAAalf,QAIfvK,MAAMoP,KAAK7U,KAAKkvB,aAAavd,UAUtChS,IAAK6D,EAAO6rB,EAAKC,GAAgB,GAC/B,IAAIG,GAAc,EAclB,GAXKzvB,KAAKkvB,aAAa7Z,IAAI7R,GAKzBisB,EAAazvB,KAAK0G,QAAQlD,IAJ1BxD,KAAKkvB,aAAa9d,IAAI5N,GACtBxD,KAAKmvB,aAAaxoB,KAAK,IAAIwG,KAC3BsiB,GAAczvB,KAAKkvB,aAAalf,MAKlChQ,KAAKmvB,aAAaM,GAAYre,IAAIie,GAG9BrvB,KAAKovB,QAAS,CAChB,IAAIM,EAAalsB,aAAiBsH,KAAOtH,EAAM2D,UAAY3D,OAExB6B,IAA/BrF,KAAKsjB,MAAM1f,IAAI8rB,IACjB1vB,KAAKsjB,MAAM3H,IAAI+T,EAAYD,GAI/BzvB,KAAKqE,KAAKrE,KAAK+uB,aAAcM,EAAK7rB,EAAO8rB,GAY3C3vB,OAAQ0vB,EAAK7rB,EAAO8rB,GAAgB,GAElC,QAAcjqB,IAAV7B,EAAqB,CACvB,IAAI8F,EAAQtJ,KAAK2vB,UAAUnsB,GAG3B,GAAI8F,GACEA,EAAMsE,OAAOyhB,GAOf,OANIrvB,KAAKovB,SAAa9lB,GAAwB,IAAfA,EAAM0G,MACnChQ,KAAKsjB,MAAM1V,OAAOpK,aAAiBsH,KAAOtH,EAAM2D,UAAY3D,QAG9DxD,KAAKqE,KAAKrE,KAAKgvB,aAAcK,EAAK7rB,EAAO8rB,GAM7CrvB,IAAI2I,qBAAqBpF,0BAI3B,IAAIosB,GAAU,EACd,IAAK,IAAInpB,EAAI,EAAGA,EAAIzG,KAAKmvB,aAAalpB,OAAQQ,IAC5C,GAAIzG,KAAKmvB,aAAa1oB,GAAGmH,OAAOyhB,KAASO,EAAS,CAChDA,GAAU,EACVpsB,EAAQiC,MAAMoP,KAAK7U,KAAKkvB,aAAavd,UAAUlL,GAE3CzG,KAAKovB,SACPpvB,KAAKsjB,MAAM1V,OAAOpK,aAAiBsH,KAAOtH,EAAM2D,UAAY3D,GAG9D,MAIAosB,GACF5vB,KAAKqE,KAAKrE,KAAKgvB,aAAcK,EAAK7rB,EAAO8rB,GAW7C3vB,OAAQ0vB,EAAKQ,EAAUC,EAAUR,GAAgB,GAC3CO,IAAaC,IACf9vB,KAAKgP,OAAOqgB,EAAKQ,GAAU,GAC3B7vB,KAAKoR,IAAI0e,EAAUT,GAAK,GACxBrvB,KAAKqE,KAAKrE,KAAKivB,aAAcI,EAAK,KAAMC,IAO5C3vB,QACEK,KAAKkvB,aAAazhB,QAClBzN,KAAKmvB,aAAaxpB,OAAO,GAErB3F,KAAKovB,SACPpvB,KAAKsjB,MAAMyM,QAGb/vB,KAAKqE,KAAK,SAaZ1E,QAAS6D,GACP,OAAOiC,MAAMoP,KAAK7U,KAAKkvB,aAAa9lB,QAAQ1C,QAAQlD,GAWtD7D,UAAW6D,GACT,IAAIisB,EAAazvB,KAAK0G,QAAQlD,GAE9B,OAAOisB,EAAa,EAAI,KAAOzvB,KAAKmvB,aAAaM,GAUnD9vB,WAAY6D,GACV,IAAI8F,EAAQtJ,KAAK2vB,UAAUnsB,GAE3B,OAAc,OAAV8F,GAAiC,IAAfA,EAAM0G,QAIrBvK,MAAMoP,KAAKvL,EAAMqI,gCRzNc/E,EACxCjN,YAAasL,MACX,GAAwB,UAApBhL,IAAI2G,OAAOqE,GACbA,GAAQ2a,MAAO3a,QACV,IAAKA,EAAI2a,QAAU3lB,IAAIohB,KAAK9M,QAAQyb,YAAY/kB,EAAI2a,OACzD,MAAM,IAAI6E,0BAA0B,sDAGtC5qB,QAEA,MAAMY,EAAKT,KA2dX,GAzdAF,OAAOkD,iBAAiBhD,MAMtBU,KAAMT,IAAI0D,MAAM1D,IAAIkG,SAAS8E,EAAIvK,KAAM,wBAEvCshB,SAAU/hB,IAAIyD,SAEZusB,WAMAxO,MAAOxhB,IAAIkG,SAAS8E,EAAI2a,OAiBxBsK,gBAAiBjwB,IAAIkG,SAAS8E,EAAIilB,iBAAiB,GAQnDC,iBAAkBlwB,IAAIkG,SAAS8E,EAAIklB,iBAAkBllB,EAAIilB,iBAAiB,GAM1EpL,aAAc7kB,IAAIkG,SAAS8E,EAAI6Z,cAAc,GAO7CsL,eAAgBnwB,IAAIkG,SAAS8E,EAAImlB,eAAgBnlB,EAAI6Z,cAAc,GAMnEuL,yBAA0BpwB,IAAIkG,SAAS8E,EAAIolB,0BAA0B,GA+CrEC,WAAYrwB,IAAIkG,SAAS8E,EAAIqlB,YAAY,GAOzCC,cAAetwB,IAAIkG,SAAS8E,EAAIslB,eAAgB,GAoBhDC,KAAMvwB,IAAIkG,SAAS8E,EAAIwlB,MAAO,GAwB9BC,KAAMzwB,IAAIkG,SAAS8E,EAAI0lB,MAAO,GAQ9BC,WAAY3wB,IAAIkG,SAAS8E,EAAI2lB,YAAa,GAS1CC,WAAY5wB,IAAIkG,SAAS8E,EAAI4lB,WAAY,GAQzCC,YAAa7wB,IAAIkG,SAAS8E,EAAI6lB,YAAa,KAsB3CzD,IAAKptB,IAAIkG,SAAS8E,EAAI0gB,UAEtBrG,OAAQ,IAAInY,KACV,mBACA,gBACA,gBACA,gBACA,kBACA,gBACA,cACA,iBACA,eACA,QACA,gBACA,gBACA,eACA,eACA,gBACA,qBAQFoY,UAAWtlB,IAAIkG,SAAS8E,EAAIua,OAAO,GACnCC,SAAUxlB,IAAIkG,SAAS8E,EAAIua,OAAO,GAAS,IAAIvlB,IAAIohB,KAAKqE,eAAmB,KAC3E8G,cAAgBvG,IACVA,EAAOjlB,eAAe,WACxBhB,KAAKgiB,SAASyD,SAASiB,OAAO1mB,KAAKgiB,SAASyK,gBAShDsE,iBAAkB,EAClBC,gBAAiB,EAOjBC,MAAO,OAITxC,QAASxuB,IAAIC,cACXgxB,KAAMhnB,OAAO,eAGb+mB,MAAO,SAAUlG,EAAQoG,GACvB,GAA0B,iBAAfnxB,KAAKqM,MACd,OAAQrM,KAAKqM,OACX,KAAK5L,EAAGguB,QAAQtqB,MAAMitB,cACpB3wB,EAAGuhB,SAASqP,YAAYtsB,QAAQmhB,GAASzlB,EAAGuhB,SAASiP,MAAM/K,GAAO9U,IAAI2Z,EAAO7E,GAAQ6E,EAAOe,MAC5F,MAEF,KAAKrrB,EAAGguB,QAAQtqB,MAAMmtB,cACpB7wB,EAAGuhB,SAASqP,YAAYtsB,QAAQmhB,GAASzlB,EAAGuhB,SAASiP,MAAM/K,GAAOlX,OAAO+b,EAAOe,IAAKf,EAAO7E,KAC5F,MAEF,KAAKzlB,EAAGguB,QAAQtqB,MAAMotB,aACpB,IAAK,IAAI9qB,EAAI,EAAGA,EAAIhG,EAAGuhB,SAASiO,QAAQhqB,OAAQQ,IAC9ChG,EAAGuhB,SAASqP,YAAYtsB,QAAQmhB,GAASzlB,EAAGuhB,SAASiP,MAAM/K,GAAO9U,IAAI3Q,EAAGuhB,SAASiO,QAAQxpB,GAAGyf,GAAQzlB,EAAGuhB,SAASiO,QAAQxpB,GAAGqlB,MAG9H,MAEF,KAAKrrB,EAAGguB,QAAQtqB,MAAMuqB,oBAChBjuB,EAAGuhB,SAASqP,YAAYhc,IAAI0V,EAAO7E,MAAMxlB,OAC3CD,EAAGuhB,SAASiP,MAAMlG,EAAO7E,MAAMxlB,MAAMsO,OAAO+b,EAAOA,OAAOe,IAAKf,EAAO7E,MAAM1iB,YAMlF,OAAQxD,KAAKqM,OACX,IAAK,gBACC5L,EAAGuhB,SAASqP,YAAYhc,IAAI8b,EAAMjL,MAAMxlB,OAC1CD,EAAGuhB,SAASiP,MAAME,EAAMjL,MAAMxlB,MAAM6pB,OAAOQ,EAAOe,IAAKqF,EAAMhL,IAAKgL,EAAM/K,KAE1E,MAEF,IAAK,QACH3lB,EAAGuhB,SAASqP,YAAYtsB,QAAQmhB,GAASzlB,EAAGuhB,SAASiP,MAAM/K,GAAO6J,WAO1EyB,UAAW,IAAIC,IAGfC,gBAAiB,KAGjBC,kBAAmB,KAGnBxtB,OACEitB,cAAelnB,OAAO,iBACtBonB,cAAepnB,OAAO,iBACtBwkB,oBAAqBxkB,OAAO,wBAC5BqnB,aAAcrnB,OAAO,iBAIvB0nB,qBAAuB1L,IACrB,IAAI2L,EAAa7xB,KAAKgiB,SAASP,MAAM5c,UAAUitB,cAE/C,IAAID,EAAW9F,SAAU8F,EAAW9F,OAAO/qB,eAAeklB,GAWxD,MAAM,IAAIxmB,qDAAqDwmB,OAV/D,GAAiC,OAA7B2L,EAAW9F,OAAO7F,GAAiB,CACrC,IAAK,QAAS,QAAS,SAAU,YAAYxf,QAAQzG,IAAI2G,OAAOirB,EAAW9F,OAAO7F,MAAY,EAC5F,MAAM,IAAIxmB,kCAAkCwmB,gHACvC,GAA6C,WAAzCjmB,IAAI2G,OAAOirB,EAAW9F,OAAO7F,MACjC,QAAS,QAAS,SAAU,YAAYxf,QAAQzG,IAAI2G,OAAO3G,IAAIkG,SAAS0rB,EAAW9F,OAAO7F,GAAOvlB,SAAW,EAC/G,MAAM,IAAIjB,kCAAkCwmB,kHAUtD6L,kBAAoB7L,IAClB,IAAI2L,EAAa7xB,KAAKgiB,SAASP,MAAM5c,UAAUitB,cAE/C,OAAiC,OAA7BD,EAAW9F,OAAO7F,GACbjmB,IAAI2G,OAAOirB,EAAW9F,OAAO7F,IAGlC2L,EAAW9F,OAAO7F,GAAOvlB,KACpBV,IAAI2G,OAAOirB,EAAW9F,OAAO7F,GAAOvlB,MAGzCkxB,EAAW9F,OAAO7F,GAAOlC,QACpB/jB,IAAI2G,OAAOirB,EAAW9F,OAAO7F,GAAOlC,SAGtC/jB,IAAI2G,OAAO3G,IAAIkG,SAAS0rB,EAAW9F,OAAO7F,MAInD8L,UAAW,CAACvV,EAAMqJ,GAAiB,KACjC,MAAMiF,EAAS,IAAItqB,EAAGuhB,SAASP,MAAMhF,GAErC,KAAMsO,aAAkB9qB,IAAIohB,KAAKM,QAC/B,MAAM,IAAIjiB,6FAA6FO,IAAI2G,OAAO6V,cAIpH,IAAKhc,EAAGuhB,SAAS8C,eAAiBiG,EAAOzE,QACvCrmB,IAAI2I,+CAA+C5I,KAAKU,gEAAgE+E,MAAMoP,KAAKkW,EAAO/I,SAASgK,kBAAkB5iB,QAAQnH,KAAK,SAE7K6jB,GACH9lB,KAAKqE,KAAK,iBAAkB0mB,GAG1B/qB,KAAKgiB,SAASoO,gBAChB,MAAM,IAAI1wB,8CAA8CM,KAAKU,gBAKjE,IAAKD,EAAGuhB,SAASkO,gBACf,IAAK,IAAIzpB,EAAI,EAAGA,EAAIzG,KAAKgiB,SAASiO,QAAQhqB,OAAQQ,IAChD,GAAIzG,KAAKgiB,SAASiO,QAAQxpB,GAAGgnB,WAAa1C,EAAO0C,SAAU,CAOzD,GANAxtB,IAAI2I,qDAAqD5I,KAAKU,8BAEzDolB,GACH9lB,KAAKqE,KAAK,mBAAoB0mB,GAG5B/qB,KAAKgiB,SAASmO,iBAChB,MAAM,IAAIzwB,mDAAmDM,KAAKU,qBAGpE,MAuCN,OAjCID,EAAGuhB,SAAS0O,KAAO,GAAKjwB,EAAGuhB,SAASiO,QAAQhqB,OAAS,EAAIxF,EAAGuhB,SAAS0O,KACvEjwB,EAAGuO,OAAOvO,EAAGuhB,SAASiO,QAAQhqB,OAAS,EAAG6f,GACjC9lB,KAAKgiB,SAASwO,KAAO,GAAK/vB,EAAGuhB,SAASiO,QAAQhqB,OAAS,EAAIxF,EAAGuhB,SAASwO,MAChF/vB,EAAGuO,OAAO,EAAG8W,GAKfiF,EAAO/c,GAAG,IAAK,WACb,OAAQhO,KAAKqM,OAMX,IAAK,gBACL,IAAK,cACH,OAAO5L,EAAG4D,KAAKrE,KAAKqM,MAAMvL,QAAQ,SAAU,WAAYiqB,aAOvDA,EAAO/I,SAASuK,MACvBzsB,OAAOC,eAAegrB,EAAO/I,SAAU,QAAS/hB,IAAI2D,IAAI,IAAMnD,IAG9DA,EAAGuhB,SAASiO,QAAQtpB,KAAKokB,GAGzBtqB,EAAGguB,QAAQ+C,UAAU1tB,IAAIinB,EAAOe,IAAKrrB,EAAGuhB,SAASiO,QAAQhqB,OAAS,GAE3D8kB,GAGTkH,oBAAqB,CAAC3oB,EAAOyhB,KAC3B,GAAIA,EAAO/pB,eAAehB,KAAKyuB,QAAQyC,MAAO,CAC5C,IAAIgB,EAAYlyB,KAAKyuB,QAAQuD,UAAUjH,EAAOoH,UAAU,GAKxD,OAJAD,EAAUpG,IAAMf,EAAOe,IAEvB9rB,KAAKgiB,SAASiO,QAAQ3mB,GAAS4oB,EAExBA,EAEP,OAAOnH,KAMbnd,OAAQ3N,IAAI0D,MAAM1D,IAAI0I,UAAU3I,KAAKgP,OAAQ,4DAI/ClP,OAAOkD,iBAAiBhD,KAAKyuB,SAC3B2D,cAAenyB,IAAI2D,IAAI,IACgB,OAAjC5D,KAAKyuB,QAAQiD,gBACR1xB,KAAKyuB,QAAQ+C,UAGfxxB,KAAKyuB,QAAQiD,iBAGtBW,gBAAiBpyB,IAAI2D,IAAI,IACgB,OAAnC5D,KAAKyuB,QAAQkD,kBACR3xB,KAAKyuB,QAAQ+C,UAGfxxB,KAAKyuB,QAAQkD,qBAKxB7xB,OAAOwyB,OAAOtyB,KAAKyuB,QAAQtqB,OAGvBnE,KAAKgiB,SAAS0O,KAAO,GAAK1wB,KAAKgiB,SAASwO,KAAO,EACjD,MAAM,IAAI/F,0BAA0B,sFAIlCzqB,KAAKgiB,SAAS0O,KAAO,GAAK1wB,KAAKgiB,SAASwO,KAAO,GACjDxwB,KAAKgiB,SAAS6O,WAAa,EAC3B7wB,KAAKgiB,SAAS4O,YAAc,GAE5B5wB,KAAKgiB,SAAS6O,WAAa7wB,KAAKgiB,SAAS6O,WAAa,EAAI,EAAI7wB,KAAKgiB,SAAS6O,WAO1E5wB,IAAIkG,SAAS8E,EAAI3B,QAA6E,WAAnErJ,IAAI2G,OAAO5G,KAAKgiB,SAASP,MAAM5c,UAAUitB,cAAc/F,SACpF/rB,KAAKuyB,YAAYtnB,EAAI3B,OAInBtJ,KAAKgiB,SAAS8O,YAAc,MAC9B9wB,KAAKgiB,SAASwQ,YAAc,EAC5BxyB,KAAKgO,GAAGhO,KAAKyuB,QAAQnJ,OAAOgM,cAAe,KACzCtxB,KAAKgiB,SAASwQ,cAEVxyB,KAAKgiB,UAAYhiB,KAAKgiB,SAAS8O,cACjC9wB,KAAKgiB,SAASwQ,YAAc,EAC5BxyB,KAAKyyB,cAYbC,gBACE,OAAOzyB,IAAIkG,SAASnG,KAAK2yB,oBAI3BC,cAEE,OADA3yB,IAAI2I,KAAK,gEACF5I,KAAKooB,UAIdyK,kBAEE,OADA5yB,IAAI2I,KAAK,+DACF5I,KAAKgQ,KAQdA,WACE,OAAOhQ,KAAKyuB,QAAQ2D,cAAcpiB,KAQpC/J,aACE,OAAOjG,KAAKgiB,SAASiO,QAAQhqB,OAQ/B6sB,YACE,IAAI/H,EAAS9qB,IAAIkG,SAASnG,KAAKgiB,SAASiO,QAAQjwB,KAAKgiB,SAAS+O,mBAE9D,OAAO/wB,KAAKyuB,QAAQwD,oBAAoBjyB,KAAKgiB,SAAS+O,iBAAkBhG,GAS1EgI,WACE,IAAIhI,EAAS9qB,IAAIkG,SAASnG,KAAKgiB,SAASiO,QAAQjwB,KAAKgiB,SAASgP,kBAE9D,OAAOhxB,KAAKyuB,QAAQwD,oBAAoBjyB,KAAKgiB,SAASgP,gBAAiBjG,GASzEtO,WACE,MAAMuW,EAAahzB,KAAKyuB,QAAQ2D,cAGhC,GAAwB,IAApBY,EAAWhjB,KACb,SAGF,IAAIijB,EAAMjzB,KAAKyuB,QAAQwD,oBAAoBjyB,KAAKgiB,SAAS+O,iBAAkB/wB,KAAKgiB,SAASiO,QAAQjwB,KAAKgiB,SAAS+O,mBAErF,OAAtB/wB,KAAKgiB,SAASqL,MAChBrtB,KAAKgiB,SAASqL,IAAMptB,IAAIkG,SAAS8sB,EAAI5F,MAGvC,IAAI6F,EAAW,KAEf,GAAID,aAAehzB,IAAIohB,KAAKM,OAAQ,CAClC,IAAIyM,EAAmB6E,EAAI7E,iBACvBrC,EAASjsB,OAAOsJ,KAAKglB,GAEzB8E,KAEAnH,EAAOhnB,QAAQmhB,IACRkI,EAAiBlI,GAAO/B,QAAWiK,EAAiBlI,GAAOM,UAC9D0M,EAAShN,GAASkI,EAAiBlI,GAAOlC,WAKhD,MAAM9X,KAsBN,OAlBA8mB,EAAWjuB,QAAQuE,IACjB,GAAqC,OAAjCtJ,KAAKgiB,SAASiO,QAAQ3mB,GAExB,GAAItJ,KAAKgiB,SAASiO,QAAQ3mB,GAAOtI,eAAehB,KAAKyuB,QAAQyC,MAAO,CAClE,IAAIiC,EAAiBrzB,OAAOkV,UAAWke,GACnCzW,EAAO3c,OAAOkV,OAAOme,EAAgBnzB,KAAKgiB,SAASiO,QAAQ3mB,GAAO6oB,UAE5C,OAAtBnyB,KAAKgiB,SAASqL,IAChBnhB,EAAOvF,KAAK3G,KAAKgiB,SAASqL,IAAIQ,gBAAgBpR,IAE9CvQ,EAAOvF,KAAK8V,QAGdvQ,EAAOvF,KAAK3G,KAAKgiB,SAASiO,QAAQ3mB,GAAOmT,QAKxCvQ,EAQT8hB,qBACE,MAAM9hB,KASN,OARmBlM,KAAKyuB,QAAQ2D,cAErBrtB,QAAQuE,IACoB,OAAjCtJ,KAAKgiB,SAASiO,QAAQ3mB,IACxB4C,EAAOvF,KAAK3G,KAAKgiB,SAASiO,QAAQ3mB,GAAO0kB,kBAItC9hB,EAGT2b,gBACE,OAAO7nB,KAAKgiB,SAASuD,UAGvBsC,cAAerkB,IACbA,EAAQvD,IAAI+G,aAAaxD,MAEXxD,KAAKgiB,SAASuD,YAC1BvlB,KAAKgiB,SAASuD,UAAY/hB,EAC1BxD,KAAKgiB,SAASyD,SAAWjiB,EAAQ,IAAIvD,IAAIohB,KAAKqE,eAAmB,MAIrEE,YACE,OAAO5lB,KAAKgiB,SAASP,MAavB1f,UACE,OAAO/B,KAAKgiB,SAASqL,IAOvB+F,wBACE,OAAIpzB,KAAKgiB,SAASqP,YACT5rB,MAAMoP,KAAK7U,KAAKgiB,SAASqP,gBAmBpC1xB,IAAK8c,EAAMqJ,GAAiB,GAE1B,GAAyB,UAArB7lB,IAAI2G,OAAO6V,GAAmB,CAChC,IAAIvQ,EAAS,IAAIzG,MAAMgX,EAAKxW,QAE5B,IAAK,IAAIQ,EAAI,EAAGA,EAAIgW,EAAKxW,OAAQQ,IAC/ByF,EAAOzF,GAAKzG,KAAKoR,IAAIqL,EAAKhW,GAAIqf,GAGhC,OAAO5Z,EAIT,GAAIlM,KAAKgiB,SAAS4O,WAAa,GAAK5wB,KAAKgiB,SAASiO,QAAQhqB,OAAS,EAAIjG,KAAKgiB,SAAS4O,WACnF,MAAM,IAAIlxB,MAAM,kCAGlB,GAAM+c,aAAgBzc,KAAKgiB,SAASP,MAUlChF,EAAOA,EAAKA,UAJZ,GAJyB,WAArBxc,IAAI2G,OAAO6V,KACbA,EAAOzD,KAAKoD,MAAMK,IAGA,iBAATA,EACT,MAAM,IAAI/c,SAASO,IAAI2G,OAAO6V,mEAAsEzc,KAAKgiB,SAASP,MAAM/gB,8BAM5H,MAAMqqB,EAAS/qB,KAAKyuB,QAAQuD,UAAUvV,GAWtC,OARAzc,KAAKgiB,SAASgP,gBAAkBhxB,KAAKgiB,SAASiO,QAAQhqB,OAAS,EAE/DjG,KAAKqE,KAAKrE,KAAKyuB,QAAQtqB,MAAMitB,cAAerG,GAEvCjF,GACH9lB,KAAKqE,KAAK,gBAAiB0mB,GAGtBA,EAsBTprB,OAAQorB,EAAQjF,GAAiB,GAE/B,GAAqC,IAAjC9lB,KAAKgiB,SAASiO,QAAQhqB,OAExB,YADAhG,IAAIqK,SAAStK,KAAKU,mEAKpB,GAA2B,UAAvBT,IAAI2G,OAAOmkB,GAAqB,CAClC,IAAI7e,EAAS,IAAIzG,MAAMslB,EAAO9kB,QAE9B,IAAK,IAAIQ,EAAI,EAAGA,EAAIskB,EAAO9kB,OAAQQ,IACjCyF,EAAOzF,GAAKzG,KAAKgP,OAAO+b,EAAOtkB,IAGjC,OAAOyF,EAIT,GAAIlM,KAAK6wB,WAAa,GAAK7wB,KAAKgiB,SAASiO,QAAQhqB,OAAS,EAAIjG,KAAK6wB,WACjE,MAAM,IAAInxB,MAAM,gEAIlB,IAAI4J,EAEJ,OAAQrJ,IAAI2G,OAAOmkB,IACjB,IAAK,SACH,GAAIA,EAAS,IAAM/qB,KAAKgiB,SAASiO,QAAQlF,GAEvC,OADA9qB,IAAIsH,2DAA2DwjB,GAAU,aAAalkB,gBAC/E,KAGTyC,EAAQyhB,EAER,MAKF,QACE,KAAMA,aAAkB9qB,IAAIohB,KAAKM,QAE/B,OADA1hB,IAAIsH,MAAM,yDACH,KAGTwjB,EAASA,EAAOe,IAElB,IAAK,SAGH,IAFAxiB,EAAQtJ,KAAKyuB,QAAQ2D,cAAcxuB,IAAImnB,IAE3B,EAEV,OADA9qB,IAAIsH,uDAAuDwjB,EAAOlkB,iBAC3D,KASwB,OAAjC7G,KAAKyuB,QAAQiD,kBAEf1xB,KAAKyuB,QAAQiD,gBAAkB,IAAID,IAAIzxB,KAAKyuB,QAAQ+C,YAItD,MAAM6B,EAAgBrzB,KAAKgiB,SAASiO,QAAQ3mB,GAG5C,GAAsB,OAAlB+pB,EAEF,OADApzB,IAAI2I,KAAK,oCACF,KAGT,IAAI0qB,EAActzB,KAAKyuB,QAAQ2D,cAAcxuB,IAAIyvB,EAAcvH,KAE/D,GAAIoC,MAAMoF,GAER,OADArzB,IAAI2I,8BAA8ByqB,EAAcvH,IAAIjlB,gBAC7C,KA0BT,GAvBA7G,KAAKyuB,QAAQ2D,cAAcxkB,OAAOylB,EAAcvH,KAI5C9rB,KAAKgiB,SAASsO,WACZtwB,KAAKgiB,SAASuO,eAAiB,IACjC8C,EAAc/jB,KAAK,UAAW,KAC5BtP,KAAKgiB,SAASiO,QAAQjwB,KAAKyuB,QAAQ+C,UAAU5tB,IAAIyvB,EAAcvH,MAAQ,KACvE9rB,KAAKyuB,QAAQ+C,UAAU5jB,OAAOylB,EAAcvH,KAEvChG,GACH9lB,KAAKqE,KAAK,eAAgBgvB,KAI9BA,EAAc3F,QAAU1tB,KAAKgiB,SAASuO,gBAGxCvwB,KAAKgiB,SAASiO,QAAQjwB,KAAKyuB,QAAQ+C,UAAU5tB,IAAIyvB,EAAcvH,MAAQ,KACvE9rB,KAAKyuB,QAAQ+C,UAAU5jB,OAAOylB,EAAcvH,MAI1C9rB,KAAKgiB,SAASgP,kBAAoBsC,GACpC,GAAItzB,KAAKyuB,QAAQ2D,cAAcpiB,MAAQ,EACrChQ,KAAKgiB,SAASgP,gBAAkBhxB,KAAKyuB,QAAQ2D,cAAczgB,SAASG,OAAOtO,MAC3ExD,KAAKgiB,SAAS+O,iBAAmB/wB,KAAKgiB,SAASgP,qBAC1C,GAAoB,IAAhBsC,EACT,IAAK,IAAI7sB,EAAK6sB,EAAc,EAAI7sB,GAAK,EAAGA,IAAK,CAC3C,GAAU,IAANA,EAAS,CACXzG,KAAKgiB,SAASgP,gBAAkB,EAChC,MAGF,MAAMuC,EAAiBvzB,KAAKgiB,SAASiO,QAAQxpB,GAE7C,GAAuB,OAAnB8sB,GACEvzB,KAAKyuB,QAAQ2D,cAAc/c,IAAIke,EAAezH,KAAM,CACtD9rB,KAAKgiB,SAASgP,gBAAkBhxB,KAAKyuB,QAAQ2D,cAAcxuB,IAAI2vB,EAAezH,KAC9E,aAKH,GAAI9rB,KAAKgiB,SAAS+O,mBAAqBuC,EAAa,CACzD,IAAIE,EAAYxzB,KAAKyuB,QAAQ2D,cAAcpiB,KAE3C,IAAK,IAAIvJ,EAAK6sB,EAAc,EAAI7sB,EAAI+sB,EAAW/sB,IAAK,CAClD,MAAM8sB,EAAiBvzB,KAAKgiB,SAASiO,QAAQxpB,GAE7C,GAAuB,OAAnB8sB,GACEvzB,KAAKyuB,QAAQ2D,cAAc/c,IAAIke,EAAezH,KAAM,CACtD9rB,KAAKgiB,SAAS+O,iBAAmB/wB,KAAKyuB,QAAQ2D,cAAcxuB,IAAI2vB,EAAezH,KAC/E,QAYR,OANA9rB,KAAKqE,KAAKrE,KAAKyuB,QAAQtqB,MAAMmtB,cAAe+B,GAEvCvN,GACH9lB,KAAKqE,KAAK,gBAAiBgvB,GAGtBA,EAWT1zB,YAAaumB,GAEX,GAA0B,UAAtBjmB,IAAI2G,OAAOsf,GAAoB,CACjC,IAAK,IAAIzf,EAAI,EAAGA,EAAIyf,EAAMjgB,OAAQQ,IAChCzG,KAAKuyB,YAAYrM,EAAMzf,IAGzB,OAkBF,GAdKzG,KAAKgiB,SAASqP,cACjBrxB,KAAKgiB,SAASqP,YAAc,IAAIlkB,IAGhCnN,KAAKgO,IACHhO,KAAKyuB,QAAQtqB,MAAMitB,cACnBpxB,KAAKyuB,QAAQtqB,MAAMmtB,cACnBtxB,KAAKyuB,QAAQtqB,MAAMotB,aACnBvxB,KAAKyuB,QAAQtqB,MAAMuqB,oBACnB,SACC1uB,KAAKyuB,QAAQwC,QAIdjxB,KAAKgiB,SAASqP,YAAYhc,IAAI6Q,GAChC,OAIFlmB,KAAKgiB,SAASiP,MAAQhxB,IAAIkG,SAASnG,KAAKgiB,SAASiP,UAEjDjxB,KAAKyuB,QAAQmD,qBAAqB1L,GAElClmB,KAAKgiB,SAASqP,YAAYjgB,IAAI8U,GAG9B,IAAI4I,GAAS,SAAU,QAAQpoB,QAAQ1G,KAAKyuB,QAAQsD,kBAAkB7L,KAAW,EAEjFlmB,KAAKgiB,SAASiP,MAAM/K,GAAS,IAAIjmB,IAAIohB,KAAKoS,MAAM3E,KAAU5I,EAAMtM,iBAAiBkV,EAAQ,SAAW,WAGhG9uB,KAAKgiB,SAASiO,QAAQhqB,OAAS,GACjCjG,KAAKyuB,QAAQwC,MAAM3rB,OAAQ+G,MAAOrM,KAAKyuB,QAAQtqB,MAAMotB,eAGvDvxB,KAAKqE,KAAK,gBAAiB6hB,GAY7BvmB,YAAaumB,EAAQ,MACnB,GAAKlmB,KAAKgiB,SAASqP,YASnB,GAL4B,OAAxBpxB,IAAIkG,SAAS+f,KACfA,EAAQlmB,KAAKozB,mBAIW,UAAtBnzB,IAAI2G,OAAOsf,GASflmB,KAAKgiB,SAASqP,YAAYzjB,OAAOsY,UAC1BlmB,KAAKgiB,SAASiP,MAAM/K,GAC3BlmB,KAAKqE,KAAK,eAAgB6hB,GAIa,IAAnClmB,KAAKgiB,SAASqP,YAAYrhB,OAC5BhQ,KAAKgiB,SAASiP,MAAQ,YACfjxB,KAAKgiB,SAASqP,YAErBrxB,KAAKsN,KACHtN,KAAKyuB,QAAQtqB,MAAMitB,cACnBpxB,KAAKyuB,QAAQtqB,MAAMmtB,cACnBtxB,KAAKyuB,QAAQtqB,MAAMotB,aACnBvxB,KAAKyuB,QAAQtqB,MAAMuqB,qBAClB1uB,KAAKyuB,QAAQwC,aAvBhB,IAAK,IAAIxqB,EAAI,EAAGA,EAAIyf,EAAMjgB,OAAQQ,IAChCzG,KAAK0zB,YAAYxN,EAAMzf,IAmC7B9G,iBAAkBg0B,EAAenlB,EAAQ,EAAGogB,GAAQ,GAClD,IAAI5e,EAAOhQ,KAAKgQ,KAEhB,GAAa,IAATA,EAEF,OADA/P,IAAI2I,KAAK,iEACF,KAQT,GAJI0T,KAAK8K,IAAI5Y,GAASwB,IACpBxB,GAAgBwB,GAGL,IAATA,GAAwB,IAAVxB,EAChB,OAAOmlB,EAGT,IAAIC,EAAgBnuB,MAAMoP,KAAK7U,KAAKyuB,QAAQ2D,eACxCyB,EAAeD,EAAcE,UAAUrsB,GAAQksB,EAAc7H,MAAQrkB,EAAK,IAE9E,GAAIosB,EAAe,EACjB,MAAM,IAAIn0B,MAAM,qBAgBlB,QAbAm0B,GAAgBrlB,IAGKolB,EAAc3tB,QAAU4tB,EAAe,IAAMjF,IAE5DpgB,EAAQ,EACVqlB,GAA8BD,EAAc3tB,OAG5C4tB,EAAeD,EAAc3tB,OAASqW,KAAK8K,IAAIyM,IAI/CA,EAAe,GAAKA,GAAgBD,EAAc3tB,OAC7C,KAGFjG,KAAKgiB,SAASiO,QAAQ2D,EAAcC,GAAc,IAY3Dl0B,QAASorB,GACP,OAAO/qB,KAAKyuB,QAAQ+C,UAAU5tB,IAAImnB,EAAOe,KAU3CnsB,SAAUorB,GACR,OAAO/qB,KAAKyuB,QAAQ2D,cAAc/c,IAAI0V,EAAOe,KAe/CnsB,gBAAiBumB,EAAO1iB,GACtB,GAAIxD,KAAKgiB,SAASiP,OAASjxB,KAAKgiB,SAASiP,MAAMjwB,eAAeklB,GAAQ,CACpE,IAAImJ,EAAMrvB,KAAKgiB,SAASiP,MAAM/K,GAAOqJ,WAAW/rB,GAC5C0I,EAAS,IAAIzG,MAAM4pB,EAAIppB,QAE3B,IAAK,IAAIQ,EAAI,EAAGA,EAAI4oB,EAAIppB,OAAQQ,IAC9ByF,EAAOzF,GAAKzG,KAAKgiB,SAASiO,QAAQjwB,KAAKyuB,QAAQ+C,UAAU5tB,IAAIyrB,EAAI5oB,KAGnE,OAAOyF,EAGT,SAQFvM,UAAW2J,EAAQ,GAKjB,MAJqB,iBAAVA,IACTA,EAAQtJ,KAAKyuB,QAAQ2D,cAAcxuB,IAAI0F,IAGrCA,EAAQ,GACVrJ,IAAI2I,KAAK,kDACF,MAGLU,GAAStJ,KAAKyuB,QAAQ2D,cAAcpiB,MACtC/P,IAAI2I,KAAK,+FACF,MAGF5I,KAAKgiB,SAASiO,QAAQxqB,MAAMoP,KAAK7U,KAAKyuB,QAAQ2D,eAAe9oB,GAAO,IAa7E3J,MAAOo0B,GAAQ,EAAMjO,GAAiB,GAChC9lB,KAAKgiB,SAASgS,UACXD,SAGI/zB,KAAKgiB,SAASgS,QAFrBh0B,KAAKgiB,SAASgS,QAAUh0B,KAAKiwB,SAMjCjwB,KAAKgiB,SAASiO,WACdjwB,KAAKyuB,QAAQ+C,UAAY,IAAIC,IAC7BzxB,KAAKyuB,QAAQiD,gBAAkB,KAC/B1xB,KAAKyuB,QAAQkD,kBAAoB,KACjC3xB,KAAKgiB,SAASgP,gBAAkB,EAChChxB,KAAKgiB,SAAS+O,iBAAmB,EAE7B/wB,KAAKgiB,SAASuD,WAChBvlB,KAAKgiB,SAASyD,SAASsK,QAKpBjK,GACH9lB,KAAKqE,KAAK,SAUd1E,cACEE,MAAM4N,SAASnJ,WASjB3E,aAAcs0B,GACZh0B,IAAI0I,UACF,KAAQ3I,KAAK4lB,MAAQqO,GACrB,oEA+BJt0B,WACEK,KAAKgiB,SAAS2Q,gBAAkB1yB,IAAIkG,SAASnG,KAAKgiB,SAAS2Q,oBAE3D,IAAIlW,EAAOzc,KAAKyc,KACZyX,GACF7L,GAAIpoB,IAAIohB,KAAK9M,QAAQ4f,OACrB/K,WAAW,IAAKte,MAAQyW,cACxBkM,SAAUxtB,IAAIohB,KAAK9M,QAAQkZ,SAASzU,KAAKC,UAAUwD,IAAO5V,WAC1DutB,eAAgBp0B,KAAKyc,KAAK1a,IAAK0F,GACtBxH,IAAIohB,KAAK9M,QAAQkZ,SAASzU,KAAKC,UAAUxR,IAAOZ,YAEzD4V,KAAMA,GAMR,OAHAzc,KAAKgiB,SAAS2Q,gBAAgB9mB,QAAQqoB,GACtCl0B,KAAKqE,KAAK,WAAY6vB,GAEfA,EAOTv0B,iBACEK,KAAK2yB,gBAAkB,KAGzBhzB,KAAM8c,GAEJ,IAAI4X,EAGJ,GAJA5yB,QAAQ6yB,KAAK,QAIRt0B,KAAKgiB,SAASkO,gBAcjBmE,EAAiB5X,MAdiB,CAClC,IAAIyS,EAAe,IAAI/hB,IAEvBknB,KAEA,IAAK,IAAI5tB,EAAI,EAAGA,EAAIgW,EAAKxW,OAAQQ,IAC/B,GAAKyoB,EAAa7Z,IAAI2D,KAAKC,UAAUwD,EAAKhW,MAGnC,GAAIzG,KAAKgiB,SAASmO,iBACvB,MAAM,IAAIoE,6BAHVrF,EAAa9d,IAAI4H,KAAKC,UAAUwD,EAAKhW,KACrC4tB,EAAe1tB,KAAK8V,EAAKhW,IAS/B,IAAI+tB,EAAiBH,EAAepuB,OAASjG,KAAKgiB,SAASiO,QAAQhqB,OAGnE,GAAIjG,KAAKgiB,SAAS4O,WAAa,GAAK4D,EAAiBx0B,KAAKgiB,SAAS4O,WACjE,MAAM,IAAIlxB,MAAM,kCAGlB,GAAI80B,EAAiB,IACnB,MAAM,IAAI90B,MAAM,4EAGlB,IAAK,IAAI+G,EAAI,EAAGA,EAAI4tB,EAAepuB,OAAQQ,IAAK,CAC9C,IAAI4oB,EAAMnlB,OAAO,YACjBlK,KAAKgiB,SAASiO,QAAQtpB,MACpBhH,CAACK,KAAKyuB,QAAQyC,OAAO,EACrBpF,IAAKuD,EACL8C,SAAUkC,EAAe5tB,KAI3BzG,KAAKyuB,QAAQ+C,UAAU1tB,IAAIurB,EAAKrvB,KAAKgiB,SAASiO,QAAQhqB,OAAS,GAIjEjG,KAAKgiB,SAASgP,gBAAkBhxB,KAAKgiB,SAASiO,QAAQhqB,OAAS,EA4BjEtG,UAGE,GAFAK,KAAKqE,KAAK,iBAENrE,KAAKgiB,SAASiO,QAAQhqB,OAAS,IAOjC,OANAjG,KAAKqE,KAAK,yBAE2B,IAAjCrE,KAAKgiB,SAASiO,QAAQhqB,QACxBhG,IAAI2I,4BAA4B5I,KAAKU,uCAMzC,IAAI+zB,KACAC,KACAC,EAAQ,EAGZ,IAAK,IAAIluB,EAAI,EAAGA,EAAIzG,KAAKgiB,SAASiO,QAAQhqB,OAAQQ,IACf,OAA7BzG,KAAKgiB,SAASiO,QAAQxpB,IACxBkuB,IAE4B,IAAxBD,EAAazuB,QACfyuB,EAAa/tB,KAAKF,KAIhBkuB,EAAQ,IACV30B,KAAKyuB,QAAQ+C,UAAU1tB,IAAI9D,KAAKgiB,SAASiO,QAAQxpB,GAAGqlB,IAAKrlB,EAAIkuB,GAEzD30B,KAAKgiB,SAAS+O,mBAAqBtqB,IACrCzG,KAAKgiB,SAAS+O,iBAAmBtqB,EAAIkuB,GAGnC30B,KAAKgiB,SAASgP,kBAAoBvqB,IACpCzG,KAAKgiB,SAASgP,gBAAkBvqB,EAAIkuB,IAIZ,IAAxBD,EAAazuB,SACfyuB,EAAa/tB,KAAKF,EAAI,GACtBguB,EAAO9tB,KAAK+tB,GACZA,OAON,IADAC,EAAQ,EACDF,EAAOxuB,OAAS,GACrBjG,KAAKgiB,SAASiO,QAAQtqB,OAAO8uB,EAAO,GAAG,GAAKE,EAAOF,EAAO,GAAG,GAAKA,EAAO,GAAG,GAAK,GACjFE,GAASF,EAAO,GAAG,GAAKA,EAAO,GAAG,GAAK,EACvCA,EAAO9qB,QAIT3J,KAAKyuB,QAAQiD,gBAAkB,KAE/B1xB,KAAKqE,KAAK,oBAeZ1E,QAASkE,GACP,IAAK5D,IAAIoI,KAAKxE,GACZ,MAAM,IAAInE,WAAWO,IAAI2G,OAAO/C,qBAAsB7D,KAAKU,sDAG7DV,KAAKyuB,QAAQ2D,cAAcrtB,QAAQ,CAACvB,EAAOqM,EAAK9N,KAC9C8B,EAAG7D,KAAKgiB,SAASiO,QAAQzsB,yCS56CYoJ,EASzCjN,YAAai1B,KAAaC,EAAkB,MAqX1C,OApXAh1B,QAEAC,OAAOkD,iBAAiBhD,MACtBgiB,SAAU/hB,IAAIyD,SACZkxB,OAAAA,EACAjH,GAAI,KACJjtB,KAAM,OAGR+tB,QAASxuB,IAAIC,cACX40B,OAAQ,KACR/Z,IAAK9a,IAAIkG,SAAS0uB,EAAiB50B,IAAI8a,KAEvCga,QAAQ,EAcRC,gCAAiC,CAACC,EAAUC,QAC1C,IAAIhP,KAiBJ,GAdI+O,EAASjiB,UACXkT,EAAMlT,QAAUiiB,EAASjiB,SAIvBiiB,EAASzQ,cACX0B,EAAM1B,YAAcyQ,EAASzQ,aAI3ByQ,EAASjR,UACXkC,EAAMlC,QAAUiR,EAASjR,UAGtBiR,EAASE,KACZ,GAAKF,EAASt0B,KAKZ,OAFyC,UAA9BV,IAAI2G,OAAOquB,EAASt0B,MAAoB,QAAUs0B,EAASt0B,KAAKwE,OAAOC,eAGhF,IAAK,SACH,IAAIgwB,EAASn1B,IAAIkG,SAAS8uB,EAASG,OAAQ,WAAWjwB,OAAOC,cAI7D,OAFA8gB,EAAMvlB,KAAOqK,OAELoqB,GACN,IAAK,OACL,IAAK,YACL,IAAK,WACL,IAAK,cACHlP,EAAMvlB,KAAOmK,KACb,MAEF,IAAK,OAQL,IAAK,OACHob,EAAMlT,QAAU/S,IAAIkG,SAClB8uB,EAASjiB,QACT,qwCAGF,MAEF,IAAK,QACHkT,EAAMlT,QAAU/S,IAAIkG,SAClB8uB,EAASjiB,QACT,oLAGF,MAEF,IAAK,WACHkT,EAAMlT,QAAU/S,IAAIkG,SAClB8uB,EAASjiB,QACT,0EAGF,MAEF,IAAK,MACHkT,EAAMlT,QAAU/S,IAAIkG,SAClB8uB,EAASjiB,QACT,mNAMN,MAEF,IAAK,UACHkT,EAAMvlB,KAAOgK,OACbub,EAAMlT,QAAU,QAChB,MAEF,IAAK,SACHkT,EAAMvlB,KAAOgK,OACb,MAEF,IAAK,SACH,GAAIsqB,EAAS9rB,WAAY,CACvB,IAAIksB,EAAY,IAAIp1B,IAAIohB,KAAKiU,WAAWL,GAExCI,EAAU30B,QAAUT,IAAIkG,SAASnG,KAAKU,KAAM,eAAeT,IAAIkG,SAASkvB,EAAU30B,KAAM,cAAcw0B,EAAOjvB,OAAS,IAEtHovB,EAAUE,oBAAoBC,IAC5BA,EAAYA,EAAYvvB,OAAS,GAAGvF,KAAO20B,EAAU30B,KACrDw0B,EAASM,EAAY9pB,OAAOwpB,KAG9BhP,GACEuP,OAAQJ,EAAU30B,WAGpBwlB,EAAMvlB,KAAOb,OAGf,MAEF,QACEomB,EAAMvlB,KAAOqK,YA3FjBkb,EAAMvlB,KAAOqK,OAwJjB,OAtDIkb,EAAMvlB,OAASqK,QAAUkb,EAAMvlB,OAASgK,SACtC1K,IAAIkG,SAAS8uB,EAASS,UAAWT,EAASjO,WAC5Cd,EAAMa,IAAM9mB,IAAIkG,SAAS8uB,EAASS,UAAWT,EAASjO,UAGpD/mB,IAAIkG,SAAS8uB,EAASU,UAAWV,EAAShO,WAC5Cf,EAAMtG,IAAM3f,IAAIkG,SAAS8uB,EAASU,UAAWV,EAAShO,UAIpDgO,EAASt0B,OAASgK,SAChBsqB,EAAS9N,aACXjB,EAAMiB,WAAa8N,EAAS9N,YAG1B8N,EAASW,mBACX1P,EAAMa,IAAOkO,EAASW,iBAAmB,QAGvCX,EAASY,mBACX3P,EAAMtG,IAAOqV,EAASY,iBAAmB,UAM3C3P,EAAMvlB,OAAS8E,QAEbwvB,EAASj0B,eAAe,cAC1BklB,EAAMa,IAAMkO,EAASa,UAInBb,EAASj0B,eAAe,cAC1BklB,EAAMtG,IAAMqV,EAASc,UAGnBd,EAASj0B,eAAe,WACS,UAA/Bf,IAAI2G,OAAOquB,EAASe,OAEtB9P,EAAMsB,OAASyN,EAASe,OAGpBf,EAASe,MAAMh1B,eAAe,UAChCklB,EAAMoB,SAAWrnB,IAAIwK,QAAQwqB,EAASe,MAAMr1B,OAG1Cs0B,EAASe,MAAMh1B,eAAe,UAChCklB,EAAMqB,KAAO0N,EAASe,MAAMzO,SAM7BrB,GAiBT+P,wBAAyB,CAACxZ,EAAMyY,KAAavpB,KAM3C,GALI1L,IAAIoI,KAAK6sB,KACXvpB,EAAWupB,EACXA,MAGgB,WAAdzY,EAAK9b,KAAmB,CAC1B,IAAID,EAAOT,IAAIkG,SAASsW,EAAK/b,KAAMV,KAAKU,KAAM,YAE1C+b,EAAKzb,eAAe,YAAuB,OAATN,GAAiBV,KAAKgiB,SAASkU,MACnEx1B,EAAOV,KAAKgiB,SAASkU,IAAIpvB,MAAM,SAASyF,MAAMzL,QAAQ,QAAS,KAIjE,IAAI8kB,GACFllB,KAAAA,EACA8jB,YAAavkB,IAAIkG,SAASsW,EAAK+H,YAAa,mBAC5CuH,WAIEtP,EAAKzb,eAAe,aACtBhB,KAAKgiB,SAAS2L,GAAK1tB,IAAIkG,SAASsW,EAAK0Z,IAAK1Z,EAAK2Z,UAIjD,IAAIC,EAAQ,IAAIp2B,IAAIq2B,MAIpB,GAAI7Z,EAAKzb,eAAe,SACtB,IAAK,IAAIyF,EAAI,EAAGA,EAAIgW,EAAK8Z,MAAMtwB,OAAQQ,IACrC4vB,EAAMjlB,6BAA6BqL,EAAK8Z,QAASC,IAC/C,IAAIC,EAAMx2B,IAAIkG,SAASsW,EAAK8Z,MAAM9vB,GAAG0uB,KAAM1Y,EAAK8Z,MAAM9vB,GAAG2vB,SAEzD,GAAY,OAARK,EAEe,IAAIx2B,IAAIohB,KAAKiU,WAAWmB,GAE9BlB,oBAAoBC,IAC7B,IAAIkB,EAAYlB,EAAYjpB,MAE5BzM,OAAOkV,OAAO4Q,EAAMmG,OAAQ2K,EAAU3K,QAGlCyJ,EAAYvvB,OAAS,IACvBivB,EAASM,EAAY9pB,OAAOwpB,IAG9Bl1B,KAAKgiB,SAASthB,KAAOT,IAAIkG,SAASnG,KAAKgiB,SAASthB,KAAMg2B,EAAUh2B,MAEhE81B,WAEG,GAAI/Z,EAAK8Z,MAAM9vB,GAAGzF,eAAe,cAAe,CAErD,IAAI21B,EAAuB72B,OAAOsJ,KAAKqT,EAAK8Z,MAAM9vB,GAAG0C,YAErD,IAAK,IAAIytB,EAAO,EAAGA,EAAOD,EAAqB1wB,OAAQ2wB,IACrDhR,EAAMmG,OAAO4K,EAAqBC,IAAS52B,KAAKg1B,gCAAgCvY,EAAK8Z,MAAM9vB,GAAG0C,WAAWwtB,EAAqBC,KAGhIJ,OAMRH,EAAMjlB,IAAI,sBAAuBolB,IAI3B/Z,EAAKzb,eAAe,iBACtBlB,OAAOsJ,KAAKqT,EAAKoa,cAAc9xB,QAAQ+xB,IACrC,IAAIC,EAAiB,KACjBC,EAAMva,EAAKoa,aAAaC,GAEJ,UAApB72B,IAAI2G,OAAOowB,GAEbD,EAAiBC,EACRA,EAAIh2B,eAAe,cAE5B+1B,EAAiBC,EAAI9S,UAIA,OAAnB6S,IACFnR,EAAM3T,SAAS6kB,oBAA6BC,EAAe90B,KAAK,UAAY,WAC1E,GAAuC,OAAnChC,IAAIkG,SAASnG,KAAK82B,IACpB,IAAK,IAAIrwB,EAAI,EAAGA,EAAIswB,EAAe9wB,OAAQQ,IACzC,GAA8C,OAA1CxG,IAAIkG,SAASnG,KAAK+2B,EAAetwB,KACnC,OAAO,EAKb,OAAO,MAOf,IAAI0C,EAAarJ,OAAOsJ,KAAKqT,EAAKtT,YAC9B8tB,EAAW,IAAIh3B,IAAIq2B,MAEvB,GAAIntB,EAAWlD,OAAS,EACtB,IAAK,IAAIQ,EAAI,EAAGA,EAAI0C,EAAWlD,OAAQQ,IAAK,CAC1C,IAAIywB,EAAe/tB,EAAW1C,GAC1BwuB,EAAWxY,EAAKtT,WAAW+tB,GAE/BtR,EAAMmG,OAAOmL,GAAgBl3B,KAAKyuB,QAAQuG,gCAAgCC,EAAUC,GAGhFD,EAASE,MACX8B,EAAS7lB,IAAIU,IACO,IAAI7R,IAAIohB,KAAKiU,WAAWL,EAASE,MAEvCI,oBAAoBC,IAC9BN,EAASM,EAAY9pB,OAAOwpB,GAE5BtP,EAAMmG,OAAOmL,IACXzB,OAAQD,EAAYA,EAAYvvB,OAAS,GAAGvF,MAG9CoR,QAKN8T,EAAMmG,OAAOmL,GAAchT,SAAWjkB,IAAIkG,SAASsW,EAAKyH,SAAU,IAAIxd,QAAQwwB,IAAiB,EAInGD,EAASjpB,GAAG,WAAY,KACtBknB,EAAOvuB,KAAKif,GACZ4Q,MAGFS,EAASE,KAAI,KAGfd,EAAMroB,GAAG,WAAY,IAAMrC,EAASupB,IACpCmB,EAAMc,KAAI,QAEVxrB,EAASupB,QAMjBl1B,KAAKsP,KAAK,SAAU,KAClBtP,KAAKyuB,QAAQsG,QAAS,EACtB/0B,KAAKgiB,SAAS2L,GAAK1tB,IAAIkG,SAASnG,KAAKgiB,SAAS4S,OAAOvM,GAAIroB,KAAKgiB,SAAS4S,OAAOwB,WAIxEn2B,IAAI2G,OAAOguB,IACjB,IAAK,SAEH50B,KAAKgiB,SAASkU,IAAMtB,EACpB50B,KAAKyuB,QAAQ1T,IAAIe,KAAK8Y,EAAQ,CAACrzB,EAAKqzB,KAClC,GAAIrzB,EACF,MAAMA,EAGRvB,KAAKgiB,SAAS4S,OAASA,EACvB50B,KAAKgiB,SAASthB,KAAOT,IAAIkG,SAASyuB,EAAOl0B,KAAMV,KAAKgiB,SAASkU,IAAIpvB,MAAM,SAASyF,MAAMzL,QAAQ,QAAS,KAEvGd,KAAKqE,KAAK,YAGZ,MAEF,IAAK,SACHrE,KAAKgiB,SAASthB,KAAOT,IAAIkG,SAASyuB,EAAOl0B,KAAM,YAC/CV,KAAKqE,KAAK,UACV,MAEF,QACE,MAAM,IAAI3E,MAAM,+BAItB2oB,SACE,GAAIroB,KAAKgiB,SAAS2L,GAChB,OAAO3tB,KAAKgiB,SAAS2L,GAGvB,IAMI9K,EANAwF,EAAKpoB,IAAIkG,SAASnG,KAAKgiB,SAASkU,KAEpC,OAAW,OAAP7N,EACKA,GAMTxF,EAAO5iB,IAAIkG,SAASnG,KAAKyuB,QAAQ1T,IAAIuC,QAASpa,OAAOgF,SAASC,QAG9DnI,KAAKgiB,SAAS2L,GAAK3tB,KAAKyuB,QAAQ1T,IAAI5E,gBAAgB0M,KAAQ5iB,IAAIkG,SAASnG,KAAKU,KAAM,YAAY0E,sBAEzFpF,KAAKgiB,SAAS2L,IAGvBjtB,WACE,OAAOV,KAAKgiB,SAASthB,KAGvBA,SAAU8C,GACRxD,KAAKgiB,SAASthB,KAAOT,IAAIkG,SAAS3C,EAAO,YAG3C7D,oBAAqBgM,GACd3L,KAAKyuB,QAAQsG,OAIN/0B,KAAKyuB,QAAQqG,OAMvBnpB,EAAS3L,KAAKyuB,QAAQqG,QALtB90B,KAAKyuB,QAAQwH,wBAAwBj2B,KAAKgiB,SAAS4S,UAAYY,IAC7Dx1B,KAAKyuB,QAAQqG,OAASU,EACtB7pB,EAAS6pB,KANXx1B,KAAKsP,KAAK,SAAU,KAClBtP,KAAKu1B,oBAAoB5pB,WC1b7BpH,OAAO,eAAgBtE,EAAIwD,OAAOmJ,MAClCrI,OAAO,MAAOtE,EAAI0D,MAAM,IAAI1D,EAAI2M,iBAGhCrI,OAAO,OAAQtE,EAAI0D,oBCOgBiJ,EACrCjN,YAAaC,GAGXC,MAFAD,EAASA,OAITE,OAAOkD,iBAAiBhD,MAKtBU,KAAMT,IAAI0D,MAAM1D,IAAIkG,SAASvG,EAAOc,KAAM,YAM1CiL,SAAU1L,IAAIC,aAAaN,EAAO+L,UAMlCyrB,OAAQn3B,IAAI0D,MAAMyD,SAASxH,EAAOw3B,OAAQ,KAE1Cvf,MAAO5X,IAAIyD,QAAQ,MACnB2zB,QAASp3B,IAAIyD,QAAQ,MACrB4zB,IAAKr3B,IAAIyD,QAAQ9D,EAAO23B,KACxBC,MAAOv3B,IAAIyD,SAAQ,KAGrB1D,KAAKgO,GAAG,UAAW,KACjBhO,KAAKq3B,QAAU,aAGjBr3B,KAAKgO,GAAG,OAAQ,KACdhO,KAAKq3B,QAAU,YAQnB9c,aACE,OAAOva,KAAKq3B,QAOdI,cACE,OAAOz3B,KAAKw3B,MAUd73B,IAAK+3B,GACH,GAAI13B,KAAKy3B,QAOP,OANAz3B,KAAKqE,KAAK,OAAQrE,WAEd03B,GAAiB,QAATA,GACVz3B,IAAI2I,KAAK,WAAa5I,KAAKU,OAM/BV,KAAKqE,KAAK,QAASrE,MAEf03B,GAAiB,QAATA,GACVz3B,IAAIqK,KAAK,aAAetK,KAAKU,KAAO,KAGtCV,KAAKq3B,QAAU,UAEf,MAAM52B,EAAKT,KACLiM,GACJvL,KAAMV,KAAKU,KACX02B,OAAQp3B,KAAKo3B,OACbxf,QAAS,SAAU+f,GACjBl3B,EAAGoX,MAAQpI,WAAW,WACpBhP,EAAG4D,KAAK,UAAW5D,IAClBk3B,KAIP33B,KAAK2L,SAASrG,MAAM2G,GAAQ,WAC1BxL,EAAG42B,QAAU,WACb52B,EAAG4D,KAAK,WAAY5D,MAGO,IAAzBT,KAAK2L,SAAS1F,SAChBxF,EAAG42B,QAAU,WACb52B,EAAG4D,KAAK,WAAY5D,IAQxBd,OACuB,YAAjBK,KAAKq3B,QACPp3B,IAAI2I,0BAA0B5I,KAAKU,8BACT,aAAjBV,KAAKq3B,QACdp3B,IAAI2I,0BAA0B5I,KAAKU,mBACT,aAAjBV,KAAKq3B,SACdp3B,IAAI2I,0BAA0B5I,KAAKU,2BAGrCV,KAAKw3B,OAAQ,QD3HbjzB,OAAO,QAAStE,EAAI0D,oBEiBWiJ,EAMjCjN,YAAa+3B,EAAO,cAClB73B,QAEAC,OAAOkD,iBAAiBhD,MACtB43B,MAAO33B,IAAIyD,YACXm0B,UAAW53B,IAAIyD,QAAQ,GACvBkU,QAAS3X,IAAIyD,QAAQ,MACrBo0B,MAAO73B,IAAIyD,QAAQg0B,GACnBK,QAAS93B,IAAIyD,SAAQ,GACrBs0B,WAAY/3B,IAAIyD,SAAQ,GACxBmU,MAAO5X,IAAIyD,QAAQ,MACnBu0B,WAAYh4B,IAAIyD,SAAQ,KAG1B1D,KAAKgO,GAAG,eAAiBkqB,IAEnBl4B,KAAKi4B,YAA8B,cAAhBC,EAAK3d,SAI5B2d,EAAKb,QAAU,WAGfr3B,KAAK63B,YAEa,QAAd73B,KAAK03B,MACPz3B,IAAIqK,KAAK4tB,EAAKx3B,KAAO,eAInBV,KAAK63B,YAAc73B,KAAK43B,MAAM3xB,SAChCjG,KAAKg4B,YAAa,EAElBl4B,OAAOsJ,KAAKpJ,KAAK43B,OAAO7yB,QAASmzB,IAC/Ble,aAAaha,KAAK43B,MAAMM,GAAMrgB,SAGhC7X,KAAKqE,KAAK,gBAIdrE,KAAKgO,GAAG,WAAY,KAClBhO,KAAK+3B,SAAU,IAkBnBI,WACE,OAAOn4B,KAAK43B,MAAM71B,IAAI,SAAUshB,GAC9B,OACEgF,GAAIhF,EAAE+T,OACN12B,KAAM2iB,EAAE3iB,KACR6Z,OAAQ8I,EAAE9I,UAUhBmd,WACE,OAAO13B,KAAK83B,MAGdJ,SAAUl0B,GACiC,QAArCA,EAAM4B,cAAc6C,OAAO,EAAG,GAChCjI,KAAK83B,MAAQ,MAEb93B,KAAK83B,MAAQ,aAIjBM,gBACE,OAAOp4B,KAAK+3B,QAGdp4B,YACE,IAAIye,KAEApe,KAAK43B,MAAM3xB,OAAS,GACtBjG,KAAK43B,MAAM7yB,QAASse,IAClBjF,EAAIzX,KAAK0c,EAAE3iB,KAAmB,OAAb2iB,EAAE9I,OAAkB,cAAgB8I,EAAE9I,UAI3Dva,KAAKqE,KAAK,WACRgC,QAAS+X,IAGXA,EAAM,KA0BRze,IAAKe,EAAMmD,GACT,GAAI7D,KAAKg4B,WACP,OAAO/3B,IAAI2I,KAAK,uCAQlB,GALoB,mBAATlI,IACTmD,EAAKnD,EACLA,EAAO,SAAW0G,SAASpH,KAAK43B,MAAM3xB,QAAU,IAGhC,mBAAPpC,EACT,MAAM,IAAInE,MAAM,0CAA4C0H,SAASpH,KAAK43B,MAAM3xB,QAAU,GAAK,KAGjG,MAAMoyB,EAAQ,IAAIp4B,IAAIq4B,MACpB53B,KAAMA,EACNiL,SAAU9H,EACVuzB,QAASp3B,KAAK43B,MAAM3xB,OAAS,EAAIjG,KAAK43B,MAAM53B,KAAK43B,MAAM3xB,OAAS,GAAGmxB,OAAS,GAAK,IAcnF,OAXAiB,EAAMrqB,GAAG,WAAakqB,GAASl4B,KAAKqE,KAAK,eAAgB6zB,IAEzDG,EAAMrqB,GAAG,UAAYkqB,IACC,YAAhBA,EAAK3d,QAAwC,aAAhB2d,EAAK3d,QACpCva,KAAKqE,KAAK,cAAe6zB,KAI7Bl4B,KAAK43B,MAAMjxB,KAAK0xB,GAChBr4B,KAAKqE,KAAK,aAAcg0B,GAEjBA,EAST14B,MAAO2J,GACL,OAAOtJ,KAAK43B,MAAMtuB,GAUpB3J,IAAK44B,GAEH,IAAInjB,EAAUpV,KAAK43B,MAAM/1B,OAAQq2B,GACxBA,EAAKx3B,OAAS63B,GAGvB,OAAuB,IAAnBnjB,EAAQnP,OACHmP,EAAQ,GAQM,KAJvBA,EAAUpV,KAAK43B,MAAM/1B,OAAQq2B,GACpBA,EAAKd,SAAWmB,IAGbtyB,OACHmP,EAAQ,QADjB,EAaFzV,OAAQ44B,GACN,GAAIv4B,KAAKg4B,WACP,OAAO/3B,IAAI2I,KAAK,uCAIlB,IAAIwM,EAAUpV,KAAK43B,MAAM/1B,OAAQq2B,GACxBA,EAAKx3B,OAAS63B,GAGvB,OAAuB,IAAnBnjB,EAAQnP,QACVjG,KAAK43B,MAAQ53B,KAAK43B,MAAM/1B,OAAQq2B,GACvBA,EAAKx3B,OAAS63B,GAGvBv4B,KAAKqE,KAAK,aAAc+Q,EAAQ,IACzBA,EAAQ,IAQM,KAJvBA,EAAUpV,KAAK43B,MAAM/1B,OAAQq2B,GACpBA,EAAKd,SAAWmB,IAGbtyB,QACVjG,KAAK43B,MAAQ53B,KAAK43B,MAAM/1B,OAAQq2B,GACvBA,EAAKd,SAAWmB,GAGzBv4B,KAAKqE,KAAK,aAAc+Q,EAAQ,IACzBA,EAAQ,SANjB,EAkBFzV,SAAU44B,GACR,OAAIv4B,KAAKg4B,WACA/3B,IAAI2I,KAAK,uCAIW,iBAAlB2vB,EACF92B,QAAQ+2B,MAAM,0BAA4BD,GAG/CA,EAAgB,GAAKA,GAAiBv4B,KAAK43B,MAAM3xB,OAC5CxE,QAAQ+2B,MAAM,cAAgBD,EAAgB,0CAGhDv4B,KAAK43B,MAAMjyB,OAAO4yB,EAAe,GAAG,GAQ7C54B,QACE,GAAIK,KAAKg4B,WACP,OAAO/3B,IAAI2I,KAAK,6FAIlB5I,KAAK43B,MAAM7yB,QAASmzB,IAClBA,EAAKV,OAAQ,IAYjB73B,QAASs4B,GAAa,GACpB,GAAIj4B,KAAKg4B,WACP,OAAO/3B,IAAI2I,KAAK,uHAGlB,GAA0B,IAAtB5I,KAAK43B,MAAM3xB,OACb,OAAOjG,KAAKqE,KAAK,YAWnB,GARArE,KAAKg4B,YAAa,EAClBh4B,KAAK+3B,SAAU,EAEM,OAAjB/3B,KAAK4X,UACP5X,KAAK6X,MAAQpI,WAAW,IAAMzP,KAAKy4B,YAAaz4B,KAAK4X,UAGvD5X,KAAKi4B,WAAmC,kBAAfA,GAA2BA,EAC/Cj4B,KAAKi4B,WAIH,CACL,IAAII,EAAQr4B,KAAK43B,MACb7oB,EAAW,IAAI9O,IAAI2M,aAEvBmC,EAASf,GAAG,eAAgB,KAC1B,GAAIqqB,EAAMpyB,OAAS,EAAG,CACpB,MAAMyyB,EAAcL,EAAM1uB,QAE1B,GAAI+uB,EAAYjB,QACd,OAAO1oB,EAAS1K,KAAK,gBAGvBq0B,EAAY1qB,GAAG,WAAY,IAAMe,EAAS1K,KAAK,iBAC/Cq0B,EAAY1qB,GAAG,QAAS,IAAMhO,KAAKqE,KAAK,YAAaq0B,IAErDA,EAAYvB,IAAIn3B,KAAK03B,WAErB13B,KAAKqE,KAAK,cAId,IAAIs0B,EAAcN,EAAM1uB,QAExBgvB,EAAY3qB,GAAG,WAAY,IAAMe,EAAS1K,KAAK,iBAC/Cs0B,EAAY3qB,GAAG,QAAS,IAAMhO,KAAKqE,KAAK,YAAas0B,IAErDA,EAAYxB,IAAIn3B,KAAK03B,WA7BrB,IAAK,IAAIjxB,EAAI,EAAGA,EAAIzG,KAAK43B,MAAM3xB,OAAQQ,IACrCzG,KAAK43B,MAAMnxB,GAAG0wB,IAAIn3B,KAAK03B,MAiC7B/3B,MACEK,KAAKqG,WAAW/B,WAOlB3E,QACEK,KAAKqE,KAAK,YAGVrE,KAAK44B,KAAMV,KACJ,YAAa,UAAW,YAAYxxB,QAAQwxB,EAAK3d,QAAU,IAAM2d,EAAKT,SACzES,EAAKW,SAIT74B,KAAKsP,KAAK,WAAY,IAAMtP,KAAKqE,KAAK,YASxC1E,KAAMkE,GACJ,IAAK,IAAI4C,EAAI,EAAGA,EAAIzG,KAAK43B,MAAM3xB,OAAQQ,IACrC5C,EAAG7D,KAAK43B,MAAMnxB,IAKlB9G,SACEK,KAAK84B,SAASx0B,iBFjZdC,OAAO,QAAStE,EAAI0I,UAAU1I,EAAI84B,MAAO,iCAGzCx0B,OAAO,MAAOtE,EAAI0D,MAAMq1B,MAGxBz0B,OAAO,UAAWtE,EAAI0D,MAAM6c,MAG5Bjc,OAAO,OAAQtE,EAAI0D,MAAMs1B,IAE7Bn5B,OAAOC,eAAeE,EAAK,WACzBoD,YAAY,EACZC,UAAU,EACVC,cAAc,EACdC,MAAO"}