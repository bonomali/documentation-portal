{
  "classes": {
    "NGNDateField": {
      "type": "class",
      "label": "NGNDateField",
      "description": "NGN.DATA.DateField\r\nDates are complex, and while JavaScript supports a date object, it does not\r\ncontain a date primitive. The date field can be used to define a date and\r\nrespond to many nuances within the context of data management.\r\n\nThis should not be used for traditional date manipulation. If you merely\r\nwant to manage a single date, please use NGNX.DateTime instead.",
      "code": "class NGNDateField extends NGNDataField { // eslint-disable-line\r\n  constructor (cfg = {}) {\r\n    cfg.type = Date\r\n\r\n    super(cfg)\r\n  }\r\n}",
      "tags": {},
      "exceptions": {},
      "events": {},
      "start": {
        "line": 10,
        "column": 15
      },
      "end": {
        "line": 16,
        "column": 1
      },
      "flags": [],
      "authors": [],
      "sourcefile": "./\\data\\field\\DateField.js",
      "extends": "NGNDataField",
      "configuration": {},
      "properties": {
        "type": {
          "type": "property",
          "label": "type",
          "description": null,
          "code": "cfg.type = Date",
          "start": {
            "line": 12,
            "column": 8
          },
          "end": {
            "line": 12,
            "column": 12
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": false
        }
      },
      "methods": {
        "constructor": {
          "type": "method",
          "label": "constructor",
          "description": null,
          "code": "constructor (cfg = {}) {\r\n    cfg.type = Date\r\n\r\n    super(cfg)\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 11,
            "column": 2
          },
          "end": {
            "line": 15,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "cfg": {
              "type": "argument",
              "label": "cfg",
              "description": null,
              "code": "cfg = {}",
              "start": {
                "line": 11,
                "column": 15
              },
              "end": {
                "line": 11,
                "column": 23
              },
              "flags": [],
              "authors": [],
              "default": "{}",
              "datatype": "object",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "constructor",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        }
      }
    },
    "NGN.DATA.Field": {
      "type": "class",
      "label": "NGN.DATA.Field",
      "description": "The changelog returns the underlying NGN.DATA.TransactionLog#log if\r\n  auditing is available. The array will be empty if auditing is disabled.",
      "code": "class NGNDataField extends EventEmitter { // eslint-disable-line\r\n  /**\r\n   * @param {string|object} configuration\r\n   * Accepts an object with all configuration objects, or a string representing\r\n   * the name of the field.\r\n   */\r\n  constructor (cfg) {\r\n    cfg = cfg || {}\r\n\r\n    if (typeof cfg === 'string') {\r\n      cfg = {\r\n        name: cfg\r\n      }\r\n    }\r\n\r\n    // Validate field configuration values\r\n    if (cfg.hasOwnProperty('pattern') && NGN.typeof(cfg.pattern) !== 'regexp') {\r\n      throw new Error('Invalid data field configuration. Pattern must be a valid JavaScript regular expression (RegExp).')\r\n    }\r\n\r\n    if (cfg.type === undefined) {\r\n      if (cfg.default) {\r\n        cfg.type = NGN.getType(NGN.typeof(cfg.default), String)\r\n      }\r\n    }\r\n\r\n    super(cfg)\r\n\r\n    const EMPTYDATA = Symbol('empty')\r\n\r\n    Object.defineProperties(this, {\r\n      METADATA: NGN.privateconst({\r\n        /**\r\n         * @cfg {boolean} [required=false]\r\n         * Indicates the value is required.\r\n         */\r\n        required: NGN.coalesce(cfg.required, false),\r\n\r\n        /**\r\n         * @cfgproperty {boolean} [hidden=false]\r\n         * Indicates the field is hidden (metadata).\r\n         */\r\n        hidden: NGN.coalesce(cfg.hidden, false),\r\n\r\n        // Identifies the property as a standard data attribute.\r\n        // Alternative options include `data`, `key`, `join`, `virtual`.\r\n        fieldType: NGN.coalesce(cfg.identifier, false) ? 'key' : 'data',\r\n\r\n        isIdentifier: NGN.coalesce(cfg.identifier, false),\r\n\r\n        /**\r\n         * @cfg {boolean} [autocorrectInput=true]\r\n         * Attempt to automatically correct data type values. For example,\r\n         * a numeric field receiving a value of `'10'` will automatically\r\n         * convert the input to `10`. Only arrays, numbers, and booleans are\r\n         * supported. See NGN#forceArray, NGN#forceBoolean, and NGN#forceNumber\r\n         * for details.\r\n         */\r\n        autocorrectInput: NGN.coalesce(cfg.autocorrectInput, false),\r\n\r\n        /**\r\n         * @cfg {RegExp} [pattern]\r\n         * A pattern, as defined by a standard RegExp, that the data must match.\r\n         */\r\n        pattern: NGN.coalesceb(cfg.pattern),\r\n\r\n        /**\r\n         * @cfgproperty {string} name\r\n         * The field name.\r\n         */\r\n        name: NGN.coalesce(cfg.name),\r\n\r\n        /**\r\n         * @cfgproperty {string} description\r\n         * This is a metadata field, primarily used for documentation\r\n         * or schema generation purposes.\r\n         */\r\n        description: NGN.coalesce(cfg.description, `${NGN.typeof(cfg.type)} field`),\r\n\r\n        /**\r\n         * @cfgproperty {string} [sourceName]\r\n         * A source name represents the physical name of an attribute as it\r\n         * would be recognized in a system of record. For example, a field\r\n         * named `firstname` may need to be written to disk/memory as `gn`\r\n         * (commonly used as shorthand for givenName in LDAP environments\r\n         * and relational databases).\r\n         *\r\n         * By specifying `firstname` as the field name and `gn` as the source\r\n         * name, the field will automatically map values from the source\r\n         * to model name and vice versa.\r\n         *\r\n         * For instance, a JSON input may look like:\r\n         *\r\n         * ```js\r\n         * {\r\n         *   \"gn\": \"John\",\r\n         *   \"sn\": \"Doe\"\r\n         * }\r\n         * ```\r\n         *\r\n         * When this data is applied to the field (or loaded in a\r\n         * NGN.DATA.Model), the field #value for `firstname` would be `John`.\r\n         * If the field #value is changed to `Jill` (i.e.\r\n         * `firstname.value = 'Jill'`), the resulting data set would look like:\r\n         *\r\n         * ```js\r\n         * {\r\n         *   \"gn\": \"Jill\",\r\n         *   \"sn\": \"Doe\"\r\n         * }\r\n         * ```\r\n         */\r\n        sourceName: NGN.coalesce(cfg.sourceName),\r\n\r\n        /**\r\n         * @cfg {any} default\r\n         * The default value of the field when no value is specified.\r\n         */\r\n        default: NGN.coalesce(cfg.default),\r\n\r\n        lastValue: Symbol('no.value'),\r\n\r\n        /**\r\n         * @cfg {Primitive} [type=String]\r\n         * The JS primitive representing the type of data represented\r\n         * by the field.\r\n         */\r\n        dataType: NGN.coalesce(cfg.type, String),\r\n\r\n        /**\r\n         * @cfg {function} [rule[]]\r\n         * A function, or an array of functions, which determine whether the\r\n         * field value is valid or not. These functions receive a single argument\r\n         * (the data value) and must return a Boolean value.\r\n         */\r\n        rules: NGN.coalesce(cfg.rule, cfg.rules, cfg.validators, []),\r\n        violatedRule: null,\r\n\r\n        /**\r\n         * @cfg {boolean} [allowInvalid=true]\r\n         * If this is set to `false`, invalid values will throw an error.\r\n         */\r\n        allowInvalid: NGN.coalesce(cfg.allowInvalid, true),\r\n\r\n        /**\r\n         * @cfg {function} transformer\r\n         * A synchronous transformation function will be applied each time\r\n         * the field value is set. This can be used to modify data _before_ it\r\n         * is stored as a field value. The returned value from the function\r\n         * will be the new value of the field.\r\n         *\r\n         * The transformation function will receive the input as it's only\r\n         * aregument. For example:\r\n         *\r\n         * ```js\r\n         * let field = new NGN.DATA.Field({\r\n         *   name: 'testfield',\r\n         *   transformer: function (input) {\r\n         *     return input + '_test'\r\n         *   }\r\n         * })\r\n         *\r\n         * field.value = 'a'\r\n         *\r\n         * console.log(field.value) // Outputs \"a_test\"\r\n         * ```\r\n         *\r\n         * **Transformations can affect performance.** In small data sets,\r\n         * transformations are typically negligible, only adding a few\r\n         * milliseconds to processing time. This may affect large data sets,\r\n         * particularly data stores using defauly bulk recod loading.\r\n         */\r\n        TRANSFORM: NGN.coalesce(cfg.transformer),\r\n\r\n        RAWDATAPLACEHOLDER: EMPTYDATA,\r\n        RAW: EMPTYDATA,\r\n        ENUMERABLE_VALUES: null,\r\n        REVERSE_ENUMERABLE_VALUES: null,\r\n        IS_NEW: true,\r\n\r\n        EVENTS: new Set([\r\n          'hidden',\r\n          'unhidden',\r\n          'update',\r\n          'invalid',\r\n          'valid',\r\n          'rule.add',\r\n          'rule.remove'\r\n        ]),\r\n\r\n        /**\r\n         * @cfg {boolean} [audit=false]\r\n         * Enable auditing to support #undo/#redo operations. This creates and\r\n         * manages a NGN.DATA.TransactionLog.\r\n         */\r\n        AUDITABLE: NGN.coalesce(cfg.audit, false),\r\n\r\n        /**\r\n         * @cfg {Number} [auditMaxEntries=20]\r\n         * The maximum number of historical records to maintain for the field.\r\n         * See NGN.DATA.TransactionLog#constructor for details.\r\n         */\r\n        AUDITLOG: NGN.coalesce(cfg.audit, false)\r\n          ? new NGN.DATA.TransactionLog(NGN.coalesce(cfg.auditMaxEntries, 10))\r\n          : null,\r\n\r\n        /**\r\n         * @cfg {NGN.DATA.Model} [model]\r\n         * Optionally specify the parent model.\r\n         */\r\n        model: null,\r\n\r\n        // Set the value using a configuration.\r\n        setValue: (value, suppressEvents = false, ignoreAudit = false) => {\r\n          // Preprocessing (transform input)\r\n          if (this.METADATA.TRANSFORM !== null && NGN.isFn(this.METADATA.TRANSFORM)) {\r\n            value = this.METADATA.TRANSFORM.call(this, value)\r\n          }\r\n\r\n          // Attempt to auto-correct input when possible.\r\n          if (this.METADATA.autocorrectInput && this.type !== NGN.typeof(value)) {\r\n            value = this.autoCorrectValue(value)\r\n          }\r\n\r\n          // Ignore changes when the value hasn't been modified.\r\n          if (value === this.value) {\r\n            return\r\n          }\r\n\r\n          let change = {\r\n            field: this,\r\n            old: typeof this.METADATA.RAW === 'symbol' ? undefined : this.METADATA.RAW,\r\n            new: value\r\n          }\r\n\r\n          let priorValueIsValid = this.valid\r\n\r\n          this.METADATA.RAW = value\r\n\r\n          // Notify when an invalid value is detected.\r\n          if (!this.valid) {\r\n            // If invalid values are explicitly prohibited, throw an error.\r\n            // The value is rolled back before throwing the error so developers may\r\n            // catch the error and continue processing.\r\n            if (!this.METADATA.allowInvalid) {\r\n              this.METADATA.RAW = change.old\r\n              throw new Error(`\"${value}\" did not pass the ${this.METADATA.violatedRule} rule.`)\r\n            } else {\r\n              change.reason = `\"${value}\" did not pass the ${this.METADATA.violatedRule} rule.`\r\n              NGN.WARN(change.reason)\r\n            }\r\n\r\n            this.emit('invalid', change)\r\n          } else if (!suppressEvents && priorValueIsValid !== null && priorValueIsValid) {\r\n            // If the field BECAME valid (compared to prior value),\r\n            // emit an event.\r\n            this.emit('valid', change)\r\n          }\r\n\r\n          if (typeof this.METADATA.lastValue === 'symbol') {\r\n            this.METADATA.lastValue = value\r\n          }\r\n\r\n          // If auditing is enabled and not explicitly ignored by an internal\r\n          // operation, commit the change.\r\n          if (!ignoreAudit && !this.virtual && this.METADATA.AUDITABLE) {\r\n            change.cursor = this.METADATA.AUDITLOG.commit(this.METADATA.RAW)\r\n          }\r\n\r\n          // Notify when the update is complete.\r\n          if (!suppressEvents) {\r\n            this.emit('update', change)\r\n          }\r\n\r\n          // Mark unnecessary code for garbage collection.\r\n          priorValueIsValid = null\r\n          change = null\r\n        },\r\n\r\n        // Submit the payload to the parent model (if applicable).\r\n        commitPayload: (payload) => {\r\n          if (this.METADATA.model) {\r\n            payload.action = 'update'\r\n            payload.join = true\r\n\r\n            this.increaseMaxListeners(3)\r\n            this.METADATA.model.emit(\r\n              [\r\n                'update',\r\n                `${payload.field}.update`,\r\n                `update.${payload.field}`\r\n              ],\r\n              payload\r\n            )\r\n\r\n            payload = null // Mark for garbage collection\r\n          }\r\n        }\r\n      })\r\n    })\r\n\r\n    // Apply common rules\r\n    if (NGN.typeof(this.METADATA.rules) !== 'array') {\r\n      this.METADATA.rules = NGN.forceArray(this.METADATA.rules)\r\n    }\r\n\r\n    if (this.METADATA.rules.length > 0) {\r\n      for (let i = 0; i < this.METADATA.rules.length; i++) {\r\n        if (NGN.isFn(this.METADATA.rules[i]) && !(this.METADATA.rules[i] instanceof NGN.DATA.Rule)) {\r\n          this.METADATA.rules[i] = new NGN.DATA.Rule(this.METADATA.rules[i], `Custom Rule #${i + 1}`)\r\n        }\r\n      }\r\n    }\r\n\r\n    // Apply pattern validation if specified.\r\n    if (this.METADATA.dataType === String) {\r\n      if (this.METADATA.pattern !== null) {\r\n        this.METADATA.rules.unshift(new NGN.DATA.Rule(cfg.pattern, `Pattern Match (${cfg.pattern.toString()})`))\r\n      }\r\n\r\n      /**\r\n       * @cfg {Boolean} [nonempty]\r\n       * @info This validation attribute applies to #String fields only.\r\n       * Validates a value is not blank, `null`, or `undefined`.\r\n       */\r\n      if (cfg.nonempty) {\r\n        this.METADATA.rules.unshift(new NGN.DATA.Rule(value => {\r\n          return value.trim().length > 0\r\n        }, `No Blanks (${cfg.pattern.toString()})`))\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @cfg {Number} [min]\r\n     * @info This validation attribute applies to #Array, #String, and #Number fields only.\r\n     * Specify a minimum value:\r\n     *\r\n     * - For string values, this is a minimum number of characters.\r\n     * - For numeric values, this is a minimum inclusive value (i.e. value must be greater than\r\n     * or equal to the minimum).\r\n     * - For arrays, this is a minimum number of items that must exist in the array.\r\n     */\r\n    /**\r\n     * @cfg {Number} [max]\r\n     * @info This validation attribute applies to #Array, #String, and #Number fields only.\r\n     * Specify a maximum value:\r\n     *\r\n     * - For string values, this is a maximum number of characters.\r\n     * - For numeric values, this is a maximum inclusive value (i.e. value must be less than\r\n     * or equal to the maximum).\r\n     * - For arrays, this is a maximum number of items that may exist in the array.\r\n     */\r\n\r\n    // Apply number-specific validations.\r\n    if (this.METADATA.dataType === Number || this.METADATA.dataType === Date || this.METADATA.dataType === String) {\r\n      // Support minimum/maximum range\r\n      if (NGN.objectHasAny(cfg, 'min', 'minimum', 'max', 'maximum')) {\r\n        cfg.range = NGN.forceArray(NGN.coalesce(cfg.range))\r\n        cfg.range.push([NGN.coalesce(cfg.min, cfg.minimum), NGN.coalesce(cfg.max, cfg.maximum)])\r\n      }\r\n\r\n      /**\r\n       * @cfg {Number} [range]\r\n       * @info This validation attribute applies to #String and #Number fields only.\r\n       * Specify a range of acceptable values:\r\n       *\r\n       * - For numbers, this implies inclusive ranges. For example, `1-10` means \"between 1 and 10, where both 1 and 10 are valid.\"\r\n       * - For strings, this implies inclusive ranges just like numbers, where the number is the character count.\r\n       */\r\n      if (cfg.hasOwnProperty('range')) {\r\n        this.METADATA.rules.unshift(new NGN.DATA.RangeRule('Numeric Range', cfg.range))\r\n      }\r\n\r\n      if (this.METADATA.dataType === Number) {\r\n        // Support numeric patterns (i.e. support for integers)\r\n        if (NGN.coalesce(cfg.pattern)) {\r\n          this.METADATA.rules.unshift(new NGN.DATA.Rule(value => {\r\n            return cfg.pattern.test(value.toString())\r\n          }, `Numeric Pattern (${cfg.pattern.toString().substr(0, 15) + (cfg.pattern.toString().length > 15 ? '...' : '')})`))\r\n        }\r\n\r\n        /**\r\n         * @cfg {Number} [multipleOf]\r\n         * @info This validation attribute applies to #Number fields only.\r\n         * Insures the field value is a multiple of this number. For example,\r\n         * if the multiple is `10` and the value is `100`, it is valid.\r\n         * If the multiple is `10` and the value is `101`, it is invalid.\r\n         */\r\n        if (NGN.typeof(cfg.multipleOf) === 'number') {\r\n          this.METADATA.rules.unshift(new NGN.DATA.Rule(value => {\r\n            return Math.abs(value % cfg.multipleOf) === 0\r\n          }, `Numeric Multiple of ${cfg.multipleOf}`))\r\n        }\r\n      }\r\n    }\r\n\r\n    // Apply array-specific native validations\r\n    if (this.METADATA.dataType === Array) {\r\n      // Enforce minimum number of array items\r\n      if (NGN.objectHasAny(cfg, 'min', 'minimum')) {\r\n        this.METADATA.rules.push(new NGN.DATA.Rule(value => value.length >= NGN.coalesce(cfg.min, cfg.minimum), `${NGN.coalesce(cfg.min, cfg.minimum)} count minimum`))\r\n      }\r\n\r\n      // Enforce maximum number of array items\r\n      if (NGN.objectHasAny(cfg, 'max', 'maximum')) {\r\n        this.METADATA.rules.push(new NGN.DATA.Rule(value => value.length <= NGN.coalesce(cfg.max, cfg.maximum), `${NGN.coalesce(cfg.max, cfg.maximum)} count maximum`))\r\n      }\r\n\r\n      /**\r\n       * @cfg {Array} [unique]\r\n       * @info This validation attribute applies to #Array fields only.\r\n       * @warning This is a computationally expensive validation when used in NGN Data Stores.\r\n       * Validates that all items are unique.\r\n       */\r\n      if (NGN.coalesce(cfg.unique, false)) {\r\n        this.METADATA.rules.push(new NGN.DATA.Rule(value => NGN.dedupe(value).length === value.length, 'Unique value constraint'))\r\n      }\r\n\r\n      /**\r\n       * @cfg {any} [listType]\r\n       * @info This validation attribute applies to #Array fields only.\r\n       * Require each element of the array to conform to the specified data\r\n       * type. For example, setting `listType: Number` will validate that\r\n       * each element of the array is a number.\r\n       *\r\n       * ```js\r\n       * [1, 2, 3, 4, 5] // Valid\r\n       * [1, 2, 'three', 4, 5] // Invalid\r\n       * ```\r\n       */\r\n      if (cfg.hasOwnProperty('listType')) {\r\n        this.METADATA.rules.push(new NGN.DATA.Rule(value => {\r\n          for (let i = 0; i < value.length; i++) {\r\n            if (NGN.typeof(value[i]) !== NGN.typeof(cfg.listType)) {\r\n              return false\r\n            }\r\n          }\r\n\r\n          return true\r\n        }, `${NGN.typeof(cfg.listType).toUpperCase()} list type constraint`))\r\n      }\r\n\r\n      // Support enumerations in array values\r\n      if (cfg.hasOwnProperty('enum')) {\r\n        this.METADATA.rules.push(new NGN.DATA.Rule(value => {\r\n          return cfg.enum.indexOf(value) >= 0\r\n        }))\r\n      }\r\n\r\n      /**\r\n       * @cfg {Array} [tuples]\r\n       * @info This validation attribute applies to #Array fields only.\r\n       * @warning This is a computationally expensive validation when used in NGN Data Stores.\r\n       * Validate each item of an array according to a unique schema.\r\n       * Each item is a key value object, which supports only the `type` and\r\n       * `enum` validations.\r\n       *\r\n       * For example:\r\n       *\r\n       * ```js\r\n       * {\r\n       *   tuples: [{\r\n       *     type: Number\r\n       *   }, {\r\n       *     type: String,\r\n       *     enum: ['a', 'b', 'c']\r\n       *   }, {\r\n       *     enum: ['d', 1]\r\n       *   }]\r\n       * }\r\n       * ```\r\n       * The configuration above will make sure the first array item is a number,\r\n       * while the second is either `a`, `b`, or `c`, and the third is either\r\n       * the letter `d` or the number `1`. Only the first three items of the\r\n       * array will be checked, but there must be at least 3 items.\r\n       */\r\n      if (cfg.hasOwnProperty('tuples')) {\r\n        this.METADATA.rules.push(new NGN.DATA.Rule(value => {\r\n          if (value.length < cfg.tuples.length) {\r\n            return false\r\n          }\r\n\r\n          for (let i = 0; i < cfg.tuples.length; i++) {\r\n            if (cfg.tuples[i].hasOwnProperty('type')) {\r\n              if (NGN.typeof(value[i]) !== NGN.typeof(cfg.tuples[i].type)) {\r\n                return false\r\n              }\r\n            }\r\n\r\n            if (cfg.tuples[i].hasOwnProperty('enum')) {\r\n              if (cfg.tuples[i].enum.indexOf(value[i]) < 0) {\r\n                return false\r\n              }\r\n            }\r\n          }\r\n\r\n          return true\r\n        }, 'Tuple constraint'))\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @cfg {Array} [enum]\r\n     * An enumeration of available values this field is allowed to have.\r\n     */\r\n    if (NGN.objectHasAny(cfg, 'enum', 'enumeration')) {\r\n      this.METADATA.ENUMERABLE_VALUES = new Set(NGN.forceArray(NGN.coalesce(cfg.enum, cfg.enumeration)))\r\n      this.METADATA.rules.push(new NGN.DATA.Rule((value) => this.METADATA.ENUMERABLE_VALUES.has(value), 'Enumerable Values'))\r\n    }\r\n\r\n    /**\r\n     * @cfg {Array} [not]\r\n     * A \"reverse\" enumeration, i.e. a list of values this field is **not** allowed to be.\r\n     */\r\n    if (NGN.objectHasAny(cfg, 'not', 'notin')) {\r\n      this.METADATA.REVERSE_ENUMERABLE_VALUES = new Set(NGN.forceArray(NGN.coalesce(cfg.not, cfg.notin)))\r\n      this.METADATA.rules.push(new NGN.DATA.Rule((value) => !this.METADATA.REVERSE_ENUMERABLE_VALUES.has(value), 'Rejected Values'))\r\n    }\r\n\r\n    // Check if the field type is an array, which indicates multiple\r\n    // data types are considered valid.\r\n    if (cfg.type instanceof Array) {\r\n      // If the array has no values, assume the user meant to create an \"Array\" data type.\r\n      // Warn them, in case this was not the intention.\r\n      if (cfg.type.length === 0) {\r\n        NGN.WARN(`No data type specified for ${this.name} field. Autoconverted to an array.`)\r\n        cfg.type = Array\r\n      } else if (cfg.type.length === 1) {\r\n        // If there is only one data type, the array is extraneous and standard\r\n        // datatype validation can be used.\r\n        cfg.type = cfg.type[0]\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @cfg {Primitive|Array} [type=String]\r\n     * The type should be a JavaScript primitive, class, or constructor.\r\n     * For example, `String`, `Number`, `Boolean`, `RegExp`, `Array`, or `Date`.\r\n     * This can also be an array of primitive values. For example, `[String, Number]`\r\n     * indicates the field could be a string or a numeric value.\r\n     */\r\n    if (cfg.type instanceof Array) {\r\n      let typeList = cfg.type.map(type => NGN.typeof(type))\r\n\r\n      this.METADATA.rules.unshift(\r\n        new NGN.DATA.Rule(\r\n          (value) => typeList.indexOf(NGN.typeof(value)) >= 0,\r\n          `${this.type.toUpperCase()} Multitype Check`\r\n        )\r\n      )\r\n    } else {\r\n      this.METADATA.rules.unshift(\r\n        new NGN.DATA.Rule(\r\n          (value) => NGN.typeof(value) === NGN.typeof(this.METADATA.dataType),\r\n          `${this.type.toUpperCase()} Type Check`\r\n        )\r\n      )\r\n    }\r\n\r\n    // Associate a model if one is defined.\r\n    if (NGN.coalesce(cfg.model) !== null) {\r\n      this.model = cfg.model\r\n    }\r\n  }\r\n\r\n  get sourceName () {\r\n    return this.METADATA.sourceName\r\n  }\r\n\r\n  get auditable () {\r\n    return this.METADATA.AUDITABLE\r\n  }\r\n\r\n  set auditable (value) {\r\n    value = NGN.forceBoolean(value)\r\n\r\n    if (value !== this.METADATA.AUDITABLE) {\r\n      this.METADATA.AUDITABLE = value\r\n      this.METADATA.AUDITLOG = value ? new NGN.DATA.TransactionLog() : null\r\n      this.METADATA.AUDITLOG.relay('*', this, 'transaction.')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @property {NGN.DATA.Model} model\r\n   * Represents the model/record the field is associated to.\r\n   * The model may be configured once, after which this property\r\n   * becomes read-only. This will also be read-only if #model is set\r\n   * to a valid value.\r\n   */\r\n  get model () {\r\n    return this.METADATA.model\r\n  }\r\n\r\n  set model (value) {\r\n    if (this.METADATA.model === null) {\r\n      if (value instanceof NGN.DATA.Entity) {\r\n        this.METADATA.model = value\r\n\r\n        // let events = Array.from(this.METADATA.EVENTS.values())\r\n        // events.splice(events.indexOf('update'), 1)\r\n        //\r\n        this.on('update', (payload) => this.METADATA.commitPayload(payload))\r\n        //\r\n        // for (let i = 0; i < events.length; i++) {\r\n        //   this.on(events[i], () => this.METADATA.model.emit(`field.${events[i]}`, ...arguments))\r\n        // }\r\n      } else {\r\n        NGN.WARN('Invalid model.')\r\n      }\r\n    } else {\r\n      NGN.WARN('Cannot set model multiple times.')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @property {string} fieldType\r\n   * The type of field.\r\n   */\r\n  get fieldType () {\r\n    return this.METADATA.fieldType\r\n  }\r\n\r\n  /**\r\n   * @property {boolean} required\r\n   * Indicates the field must have a non-null value.\r\n   */\r\n  get required () {\r\n    return this.METADATA.required\r\n  }\r\n\r\n  set required (value) {\r\n    this.METADATA.required = NGN.forceBoolean(value)\r\n  }\r\n\r\n  /**\r\n   * @property {string} type\r\n   * The type of data in string format.\r\n   */\r\n  get type () {\r\n    return NGN.typeof(this.METADATA.dataType)\r\n  }\r\n\r\n  /**\r\n   * @property {boolean} hidden\r\n   * Indicates the field should be considered hidden.\r\n   */\r\n  get hidden () {\r\n    return this.METADATA.hidden\r\n  }\r\n\r\n  set hidden (value) {\r\n    let originallyHidden = this.hidden\r\n    let currentlyHidden = NGN.forceBoolean(value)\r\n\r\n    if (originallyHidden !== currentlyHidden) {\r\n      this.METADATA.hidden = currentlyHidden\r\n      this.emit(originallyHidden ? 'unhidden' : 'hidden')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @property {boolean} virtual\r\n   * Indicates the field should be considered virtual.\r\n   */\r\n  get virtual () {\r\n    return this.METADATA.fieldType === 'virtual'\r\n  }\r\n\r\n  /**\r\n   * @property {boolean} identifier\r\n   * Indicates the field is considered an identifier.\r\n   */\r\n  get identifier () {\r\n    return this.METADATA.isIdentifier\r\n  }\r\n\r\n  set identifier (value) {\r\n    value = NGN.forceBoolean(value)\r\n\r\n    if (value !== this.METADATA.isIdentifier) {\r\n      this.METADATA.isIdentifier = value\r\n      this.emit('keystatus.changed', this)\r\n    }\r\n  }\r\n\r\n  get name () {\r\n    return this.METADATA.name\r\n  }\r\n\r\n  /**\r\n   * @property {Boolean}\r\n   * Indicates the model is new or does not exist according to the persistence store.\r\n   * @private\r\n   * @readonly\r\n   */\r\n  get isNew () {\r\n    return this.METADATA.IS_NEW\r\n  }\r\n\r\n  /**\r\n   * @property {Any} default\r\n   * The default field value.\r\n   */\r\n  get default () {\r\n    if (this.isIdentifier) {\r\n      return NGN.coalesce(this.METADATA.autoid, this.METADATA.default)\r\n    }\r\n\r\n    if (NGN.isFn(this.METADATA.default) && this.type !== 'function') {\r\n      return this.METADATA.default.apply(this)\r\n    }\r\n\r\n    return this.METADATA.default\r\n  }\r\n\r\n  /**\r\n   * @property {Any} value\r\n   * The value of the field.\r\n   */\r\n  get value () {\r\n    if (typeof this.METADATA.RAW !== 'symbol') {\r\n      return this.METADATA.RAW\r\n    }\r\n\r\n    return this.METADATA.default\r\n  }\r\n\r\n  set value (value) {\r\n    this.METADATA.setValue(value)\r\n  }\r\n\r\n  /**\r\n   * @property silentValue\r\n   * A write-only attribute to set the value without triggering an update event.\r\n   * This is designed primarily for use with live update proxies to prevent\r\n   * endless event loops.\r\n   * @param {any} value\r\n   * The new value of the field.\r\n   * @private\r\n   * @writeonly\r\n   */\r\n  set silentValue (value) {\r\n    this.METADATA.setValue(value, true)\r\n  }\r\n\r\n  get modified () {\r\n    if (typeof this.META.lastValue === 'symbol') {\r\n      return false\r\n    }\r\n\r\n    return this.METADATA.lastValue !== this.value\r\n  }\r\n\r\n  /**\r\n   * @property {boolean} valid\r\n   * Indicates the field value is valid.\r\n   */\r\n  get valid () {\r\n    if (this.required && NGN.coalesce(this.METADATA.RAW) === null) {\r\n      this.METADATA.violatedRule = 'Data Required'\r\n      NGN.WARN(`${this.METADATA.name} is a required field.`)\r\n      return false\r\n    }\r\n\r\n    if (this.METADATA.rules.length > 0) {\r\n      for (let rule = 0; rule < this.METADATA.rules.length; rule++) {\r\n        if (!this.METADATA.rules[rule].test(this.METADATA.RAW)) {\r\n          this.METADATA.violatedRule = this.METADATA.rules[rule].name\r\n          return false\r\n        }\r\n      }\r\n    }\r\n\r\n    this.METADATA.violatedRule = null\r\n\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * @property {String}\r\n   * Name of the rule which was violated.\r\n   */\r\n  get violatedRule () {\r\n    return NGN.coalesce(this.METADATA.violatedRule, 'None')\r\n  }\r\n\r\n  /**\r\n   * @property {Array} changelog\r\n   * The changelog returns the underlying NGN.DATA.TransactionLog#log if\r\n   * auditing is available. The array will be empty if auditing is disabled.\r\n   */\r\n  get changelog () {\r\n    if (!this.METADATA.AUDITABLE) {\r\n      NGN.WARN(`The changelog for the ${this.name} field is empty because auditing is disabled.`)\r\n      return []\r\n    }\r\n\r\n    return this.METADATA.AUDITLOG.log\r\n  }\r\n\r\n  /**\r\n   * @method undo\r\n   * A rollback function to undo changes. This operation affects\r\n   * the changelog (transaction log). To \"undo\" an \"undo\", use #redo.\r\n   * @param {number} [OperationCount=1]\r\n   * The number of operations to \"undo\". Defaults to a single operation.\r\n   * @param {boolean} [suppressEvents=false]\r\n   * Set to `true` to quietly update the value (prevents `update` event from\r\n   * firing).\r\n   */\r\n  undo (count = 1, suppressEvents = false) {\r\n    if (!this.METADATA.AUDITABLE) {\r\n      NGN.WARN(`The undo operation failed on the ${this.name} field because auditing is disabled.`)\r\n      return\r\n    }\r\n\r\n    let id = this.METADATA.AUDITLOG.rollback(count)\r\n\r\n    // Silently set the value to an older value.\r\n    this.METADATA.setValue(this.METADATA.AUDITLOG.getCommit(id).value, suppressEvents, true)\r\n  }\r\n\r\n  /**\r\n   * @method redo\r\n   * A function to reapply known changes. This operation affects\r\n   * the changelog (transaction log).\r\n   *\r\n   * The redo operation only works after an undo operation, but before a new\r\n   * value is committed to the transaction log. In other words, `undo -> redo`\r\n   * will work, but `undo -> update -> redo` will not. For details, see how\r\n   * the NGN.DATA.TransactionLog cursor system works.\r\n   * @param {number} [OperationCount=1]\r\n   * The number of operations to \"undo\". Defaults to a single operation.\r\n   * @param {boolean} [suppressEvents=false]\r\n   * Set to `true` to quietly update the value (prevents `update` event from\r\n   * firing).\r\n   */\r\n  redo (count = 1, suppressEvents = false) {\r\n    if (!this.METADATA.AUDITABLE) {\r\n      NGN.WARN(`The redo operation failed on the ${this.name} field because auditing is disabled.`)\r\n      return\r\n    }\r\n\r\n    let id = this.METADATA.AUDITLOG.advance(count)\r\n\r\n    // Silently set the value to a newer value.\r\n    this.METADATA.setValue(this.METADATA.AUDITLOG.getCommit(id).value, suppressEvents, true)\r\n  }\r\n\r\n  /**\r\n   * Hide the field.\r\n   */\r\n  hide () {\r\n    this.hidden = true\r\n  }\r\n\r\n  /**\r\n   * Unhide the field.\r\n   */\r\n  unhide () {\r\n    this.hidden = false\r\n  }\r\n\r\n  /**\r\n   * Do not throw errors whan a value is marked as invalid.\r\n   */\r\n  allowInvalid () {\r\n    this.METADATA.allowInvalid = true\r\n  }\r\n\r\n  /**\r\n   * Throw errors whan a value is marked as invalid.\r\n   */\r\n  disallowInvalid () {\r\n    this.METADATA.allowInvalid = false\r\n  }\r\n\r\n  /**\r\n   * Attempt to automatically correct a value according to the\r\n   * field's data type.\r\n   * @param  {Any} value\r\n   * The value to attempt to autocorrect.\r\n   * @return {Any}\r\n   * Returns the value after attempting to autocorrect the value.\r\n   */\r\n  autoCorrectValue (value) {\r\n    try {\r\n      switch (this.type) {\r\n        case 'number':\r\n          value = NGN.forceNumber(value)\r\n          break\r\n\r\n        case 'boolean':\r\n          value = NGN.forceBoolean(value)\r\n          break\r\n\r\n        case 'array':\r\n          value = NGN.forceArray(value)\r\n          break\r\n\r\n        case 'string':\r\n          value = value.toString()\r\n          break\r\n\r\n        case 'date':\r\n          let valueType = NGN.typeof(value)\r\n\r\n          if (valueType !== 'date') {\r\n            if (valueType === 'number') {\r\n              let dt = new Date()\r\n              dt.setTime(value)\r\n\r\n              value = dt\r\n            } else {\r\n              value = new Date(Date.parse(value))\r\n            }\r\n          }\r\n\r\n          break\r\n      }\r\n    } finally {\r\n      return value // eslint-disable-line no-unsafe-finally\r\n    }\r\n  }\r\n}",
      "tags": {},
      "exceptions": {},
      "events": {
        "hidden": {
          "type": "event",
          "label": "hidden",
          "description": "Triggered when the field changes from unhidden to hidden.",
          "code": "@fires hidden\nTriggered when the field changes from unhidden to hidden.",
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "parameters": {
            "payload": {
              "type": "argument",
              "label": "payload",
              "description": null,
              "code": null,
              "start": {
                "line": 0,
                "column": 0
              },
              "end": {
                "line": 0,
                "column": 0
              },
              "flags": [],
              "authors": [],
              "datatype": "",
              "required": false,
              "enum": null
            }
          },
          "deprecated": false,
          "deprecationReplacement": null
        },
        "unhidden": {
          "type": "event",
          "label": "unhidden",
          "description": "Triggered when the field changes from hidden to unhidden.",
          "code": "@fires unhidden\nTriggered when the field changes from hidden to unhidden.",
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "parameters": {
            "payload": {
              "type": "argument",
              "label": "payload",
              "description": null,
              "code": null,
              "start": {
                "line": 0,
                "column": 0
              },
              "end": {
                "line": 0,
                "column": 0
              },
              "flags": [],
              "authors": [],
              "datatype": "",
              "required": false,
              "enum": null
            }
          },
          "deprecated": false,
          "deprecationReplacement": null
        },
        "update": {
          "type": "event",
          "label": "update",
          "description": null,
          "code": "this.emit('update', change)",
          "start": {
            "line": 305,
            "column": 12
          },
          "end": {
            "line": 305,
            "column": 39
          },
          "flags": [],
          "authors": [],
          "parameters": {
            "change": {
              "type": "argument",
              "label": "change",
              "description": null,
              "code": "change",
              "start": {
                "line": 305,
                "column": 32
              },
              "end": {
                "line": 305,
                "column": 38
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "deprecated": false,
          "deprecationReplacement": null
        },
        "invalid": {
          "type": "event",
          "label": "invalid",
          "description": null,
          "code": "this.emit('invalid', change)",
          "start": {
            "line": 286,
            "column": 12
          },
          "end": {
            "line": 286,
            "column": 40
          },
          "flags": [],
          "authors": [],
          "parameters": {
            "change": {
              "type": "argument",
              "label": "change",
              "description": null,
              "code": "change",
              "start": {
                "line": 286,
                "column": 33
              },
              "end": {
                "line": 286,
                "column": 39
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "deprecated": false,
          "deprecationReplacement": null
        },
        "valid": {
          "type": "event",
          "label": "valid",
          "description": null,
          "code": "this.emit('valid', change)",
          "start": {
            "line": 290,
            "column": 12
          },
          "end": {
            "line": 290,
            "column": 38
          },
          "flags": [],
          "authors": [],
          "parameters": {
            "change": {
              "type": "argument",
              "label": "change",
              "description": null,
              "code": "change",
              "start": {
                "line": 290,
                "column": 31
              },
              "end": {
                "line": 290,
                "column": 37
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "deprecated": false,
          "deprecationReplacement": null
        },
        "rule.add": {
          "type": "event",
          "label": "rule.add",
          "description": "{NGN.DATA.Rule}\nTriggered when a new validation rule is added. The rule is emitted\nto event handlers.",
          "code": "@fires rule.add {NGN.DATA.Rule}\nTriggered when a new validation rule is added. The rule is emitted\nto event handlers.",
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "parameters": {
            "payload": {
              "type": "argument",
              "label": "payload",
              "description": null,
              "code": null,
              "start": {
                "line": 0,
                "column": 0
              },
              "end": {
                "line": 0,
                "column": 0
              },
              "flags": [],
              "authors": [],
              "datatype": "",
              "required": false,
              "enum": null
            }
          },
          "deprecated": false,
          "deprecationReplacement": null
        },
        "rule.remove": {
          "type": "event",
          "label": "rule.remove",
          "description": "{NGN.DATA.Rule}\nTriggered when a validation rule is removed. The rule is emitted\nto event handlers.",
          "code": "@fires rule.remove {NGN.DATA.Rule}\nTriggered when a validation rule is removed. The rule is emitted\nto event handlers.",
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "parameters": {
            "payload": {
              "type": "argument",
              "label": "payload",
              "description": null,
              "code": null,
              "start": {
                "line": 0,
                "column": 0
              },
              "end": {
                "line": 0,
                "column": 0
              },
              "flags": [],
              "authors": [],
              "datatype": "",
              "required": false,
              "enum": null
            }
          },
          "deprecated": false,
          "deprecationReplacement": null
        },
        "keystatus.changed": {
          "type": "event",
          "label": "keystatus.changed",
          "description": "{boolean}\nTriggered when the key  status changes. The boolean\npayload indicates whether the field is considered an identifier.",
          "code": "@fires keystatus.changed {boolean}\nTriggered when the key (identifier) status changes. The boolean\npayload indicates whether the field is considered an identifier.",
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "parameters": {
            "payload": {
              "type": "argument",
              "label": "payload",
              "description": null,
              "code": null,
              "start": {
                "line": 0,
                "column": 0
              },
              "end": {
                "line": 0,
                "column": 0
              },
              "flags": [],
              "authors": [],
              "datatype": "",
              "required": false,
              "enum": null
            }
          },
          "deprecated": false,
          "deprecationReplacement": null
        }
      },
      "start": {
        "line": 34,
        "column": 15
      },
      "end": {
        "line": 959,
        "column": 1
      },
      "flags": [],
      "authors": [],
      "sourcefile": "./\\data\\field\\Field.js",
      "extends": "EventEmitter",
      "configuration": {},
      "properties": {
        "METADATA": {
          "type": "property",
          "label": "METADATA",
          "description": null,
          "code": "METADATA: NGN.privateconst({\r\n        /**\r\n         * @cfg {boolean} [required=false]\r\n         * Indicates the value is required.\r\n         */\r\n        required: NGN.coalesce(cfg.required, false),\r\n\r\n        /**\r\n         * @cfgproperty {boolean} [hidden=false]\r\n         * Indicates the field is hidden (metadata).\r\n         */\r\n        hidden: NGN.coalesce(cfg.hidden, false),\r\n\r\n        // Identifies the property as a standard data attribute.\r\n        // Alternative options include `data`, `key`, `join`, `virtual`.\r\n        fieldType: NGN.coalesce(cfg.identifier, false) ? 'key' : 'data',\r\n\r\n        isIdentifier: NGN.coalesce(cfg.identifier, false),\r\n\r\n        /**\r\n         * @cfg {boolean} [autocorrectInput=true]\r\n         * Attempt to automatically correct data type values. For example,\r\n         * a numeric field receiving a value of `'10'` will automatically\r\n         * convert the input to `10`. Only arrays, numbers, and booleans are\r\n         * supported. See NGN#forceArray, NGN#forceBoolean, and NGN#forceNumber\r\n         * for details.\r\n         */\r\n        autocorrectInput: NGN.coalesce(cfg.autocorrectInput, false),\r\n\r\n        /**\r\n         * @cfg {RegExp} [pattern]\r\n         * A pattern, as defined by a standard RegExp, that the data must match.\r\n         */\r\n        pattern: NGN.coalesceb(cfg.pattern),\r\n\r\n        /**\r\n         * @cfgproperty {string} name\r\n         * The field name.\r\n         */\r\n        name: NGN.coalesce(cfg.name),\r\n\r\n        /**\r\n         * @cfgproperty {string} description\r\n         * This is a metadata field, primarily used for documentation\r\n         * or schema generation purposes.\r\n         */\r\n        description: NGN.coalesce(cfg.description, `${NGN.typeof(cfg.type)} field`),\r\n\r\n        /**\r\n         * @cfgproperty {string} [sourceName]\r\n         * A source name represents the physical name of an attribute as it\r\n         * would be recognized in a system of record. For example, a field\r\n         * named `firstname` may need to be written to disk/memory as `gn`\r\n         * (commonly used as shorthand for givenName in LDAP environments\r\n         * and relational databases).\r\n         *\r\n         * By specifying `firstname` as the field name and `gn` as the source\r\n         * name, the field will automatically map values from the source\r\n         * to model name and vice versa.\r\n         *\r\n         * For instance, a JSON input may look like:\r\n         *\r\n         * ```js\r\n         * {\r\n         *   \"gn\": \"John\",\r\n         *   \"sn\": \"Doe\"\r\n         * }\r\n         * ```\r\n         *\r\n         * When this data is applied to the field (or loaded in a\r\n         * NGN.DATA.Model), the field #value for `firstname` would be `John`.\r\n         * If the field #value is changed to `Jill` (i.e.\r\n         * `firstname.value = 'Jill'`), the resulting data set would look like:\r\n         *\r\n         * ```js\r\n         * {\r\n         *   \"gn\": \"Jill\",\r\n         *   \"sn\": \"Doe\"\r\n         * }\r\n         * ```\r\n         */\r\n        sourceName: NGN.coalesce(cfg.sourceName),\r\n\r\n        /**\r\n         * @cfg {any} default\r\n         * The default value of the field when no value is specified.\r\n         */\r\n        default: NGN.coalesce(cfg.default),\r\n\r\n        lastValue: Symbol('no.value'),\r\n\r\n        /**\r\n         * @cfg {Primitive} [type=String]\r\n         * The JS primitive representing the type of data represented\r\n         * by the field.\r\n         */\r\n        dataType: NGN.coalesce(cfg.type, String),\r\n\r\n        /**\r\n         * @cfg {function} [rule[]]\r\n         * A function, or an array of functions, which determine whether the\r\n         * field value is valid or not. These functions receive a single argument\r\n         * (the data value) and must return a Boolean value.\r\n         */\r\n        rules: NGN.coalesce(cfg.rule, cfg.rules, cfg.validators, []),\r\n        violatedRule: null,\r\n\r\n        /**\r\n         * @cfg {boolean} [allowInvalid=true]\r\n         * If this is set to `false`, invalid values will throw an error.\r\n         */\r\n        allowInvalid: NGN.coalesce(cfg.allowInvalid, true),\r\n\r\n        /**\r\n         * @cfg {function} transformer\r\n         * A synchronous transformation function will be applied each time\r\n         * the field value is set. This can be used to modify data _before_ it\r\n         * is stored as a field value. The returned value from the function\r\n         * will be the new value of the field.\r\n         *\r\n         * The transformation function will receive the input as it's only\r\n         * aregument. For example:\r\n         *\r\n         * ```js\r\n         * let field = new NGN.DATA.Field({\r\n         *   name: 'testfield',\r\n         *   transformer: function (input) {\r\n         *     return input + '_test'\r\n         *   }\r\n         * })\r\n         *\r\n         * field.value = 'a'\r\n         *\r\n         * console.log(field.value) // Outputs \"a_test\"\r\n         * ```\r\n         *\r\n         * **Transformations can affect performance.** In small data sets,\r\n         * transformations are typically negligible, only adding a few\r\n         * milliseconds to processing time. This may affect large data sets,\r\n         * particularly data stores using defauly bulk recod loading.\r\n         */\r\n        TRANSFORM: NGN.coalesce(cfg.transformer),\r\n\r\n        RAWDATAPLACEHOLDER: EMPTYDATA,\r\n        RAW: EMPTYDATA,\r\n        ENUMERABLE_VALUES: null,\r\n        REVERSE_ENUMERABLE_VALUES: null,\r\n        IS_NEW: true,\r\n\r\n        EVENTS: new Set([\r\n          'hidden',\r\n          'unhidden',\r\n          'update',\r\n          'invalid',\r\n          'valid',\r\n          'rule.add',\r\n          'rule.remove'\r\n        ]),\r\n\r\n        /**\r\n         * @cfg {boolean} [audit=false]\r\n         * Enable auditing to support #undo/#redo operations. This creates and\r\n         * manages a NGN.DATA.TransactionLog.\r\n         */\r\n        AUDITABLE: NGN.coalesce(cfg.audit, false),\r\n\r\n        /**\r\n         * @cfg {Number} [auditMaxEntries=20]\r\n         * The maximum number of historical records to maintain for the field.\r\n         * See NGN.DATA.TransactionLog#constructor for details.\r\n         */\r\n        AUDITLOG: NGN.coalesce(cfg.audit, false)\r\n          ? new NGN.DATA.TransactionLog(NGN.coalesce(cfg.auditMaxEntries, 10))\r\n          : null,\r\n\r\n        /**\r\n         * @cfg {NGN.DATA.Model} [model]\r\n         * Optionally specify the parent model.\r\n         */\r\n        model: null,\r\n\r\n        // Set the value using a configuration.\r\n        setValue: (value, suppressEvents = false, ignoreAudit = false) => {\r\n          // Preprocessing (transform input)\r\n          if (this.METADATA.TRANSFORM !== null && NGN.isFn(this.METADATA.TRANSFORM)) {\r\n            value = this.METADATA.TRANSFORM.call(this, value)\r\n          }\r\n\r\n          // Attempt to auto-correct input when possible.\r\n          if (this.METADATA.autocorrectInput && this.type !== NGN.typeof(value)) {\r\n            value = this.autoCorrectValue(value)\r\n          }\r\n\r\n          // Ignore changes when the value hasn't been modified.\r\n          if (value === this.value) {\r\n            return\r\n          }\r\n\r\n          let change = {\r\n            field: this,\r\n            old: typeof this.METADATA.RAW === 'symbol' ? undefined : this.METADATA.RAW,\r\n            new: value\r\n          }\r\n\r\n          let priorValueIsValid = this.valid\r\n\r\n          this.METADATA.RAW = value\r\n\r\n          // Notify when an invalid value is detected.\r\n          if (!this.valid) {\r\n            // If invalid values are explicitly prohibited, throw an error.\r\n            // The value is rolled back before throwing the error so developers may\r\n            // catch the error and continue processing.\r\n            if (!this.METADATA.allowInvalid) {\r\n              this.METADATA.RAW = change.old\r\n              throw new Error(`\"${value}\" did not pass the ${this.METADATA.violatedRule} rule.`)\r\n            } else {\r\n              change.reason = `\"${value}\" did not pass the ${this.METADATA.violatedRule} rule.`\r\n              NGN.WARN(change.reason)\r\n            }\r\n\r\n            this.emit('invalid', change)\r\n          } else if (!suppressEvents && priorValueIsValid !== null && priorValueIsValid) {\r\n            // If the field BECAME valid (compared to prior value),\r\n            // emit an event.\r\n            this.emit('valid', change)\r\n          }\r\n\r\n          if (typeof this.METADATA.lastValue === 'symbol') {\r\n            this.METADATA.lastValue = value\r\n          }\r\n\r\n          // If auditing is enabled and not explicitly ignored by an internal\r\n          // operation, commit the change.\r\n          if (!ignoreAudit && !this.virtual && this.METADATA.AUDITABLE) {\r\n            change.cursor = this.METADATA.AUDITLOG.commit(this.METADATA.RAW)\r\n          }\r\n\r\n          // Notify when the update is complete.\r\n          if (!suppressEvents) {\r\n            this.emit('update', change)\r\n          }\r\n\r\n          // Mark unnecessary code for garbage collection.\r\n          priorValueIsValid = null\r\n          change = null\r\n        },\r\n\r\n        // Submit the payload to the parent model (if applicable).\r\n        commitPayload: (payload) => {\r\n          if (this.METADATA.model) {\r\n            payload.action = 'update'\r\n            payload.join = true\r\n\r\n            this.increaseMaxListeners(3)\r\n            this.METADATA.model.emit(\r\n              [\r\n                'update',\r\n                `${payload.field}.update`,\r\n                `update.${payload.field}`\r\n              ],\r\n              payload\r\n            )\r\n\r\n            payload = null // Mark for garbage collection\r\n          }\r\n        }\r\n      })",
          "start": {
            "line": 65,
            "column": 6
          },
          "end": {
            "line": 332,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        },
        "sourceName": {
          "type": "property",
          "label": "sourceName",
          "description": null,
          "code": "get sourceName () {\r\n    return this.METADATA.sourceName\r\n  }",
          "start": {
            "line": 599,
            "column": 2
          },
          "end": {
            "line": 601,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "auditable": {
          "type": "property",
          "label": "auditable",
          "description": null,
          "code": "set auditable (value) {\r\n    value = NGN.forceBoolean(value)\r\n\r\n    if (value !== this.METADATA.AUDITABLE) {\r\n      this.METADATA.AUDITABLE = value\r\n      this.METADATA.AUDITLOG = value ? new NGN.DATA.TransactionLog() : null\r\n      this.METADATA.AUDITLOG.relay('*', this, 'transaction.')\r\n    }\r\n  }",
          "start": {
            "line": 607,
            "column": 2
          },
          "end": {
            "line": 615,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": false,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "model": {
          "type": "property",
          "label": "model",
          "description": null,
          "code": "set model (value) {\r\n    if (this.METADATA.model === null) {\r\n      if (value instanceof NGN.DATA.Entity) {\r\n        this.METADATA.model = value\r\n\r\n        // let events = Array.from(this.METADATA.EVENTS.values())\r\n        // events.splice(events.indexOf('update'), 1)\r\n        //\r\n        this.on('update', (payload) => this.METADATA.commitPayload(payload))\r\n        //\r\n        // for (let i = 0; i < events.length; i++) {\r\n        //   this.on(events[i], () => this.METADATA.model.emit(`field.${events[i]}`, ...arguments))\r\n        // }\r\n      } else {\r\n        NGN.WARN('Invalid model.')\r\n      }\r\n    } else {\r\n      NGN.WARN('Cannot set model multiple times.')\r\n    }\r\n  }",
          "start": {
            "line": 628,
            "column": 2
          },
          "end": {
            "line": 647,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": false,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "fieldType": {
          "type": "property",
          "label": "fieldType",
          "description": null,
          "code": "get fieldType () {\r\n    return this.METADATA.fieldType\r\n  }",
          "start": {
            "line": 653,
            "column": 2
          },
          "end": {
            "line": 655,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "required": {
          "type": "property",
          "label": "required",
          "description": null,
          "code": "set required (value) {\r\n    this.METADATA.required = NGN.forceBoolean(value)\r\n  }",
          "start": {
            "line": 665,
            "column": 2
          },
          "end": {
            "line": 667,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": false,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "type": {
          "type": "property",
          "label": "type",
          "description": null,
          "code": "get type () {\r\n    return NGN.typeof(this.METADATA.dataType)\r\n  }",
          "start": {
            "line": 673,
            "column": 2
          },
          "end": {
            "line": 675,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "hidden": {
          "type": "property",
          "label": "hidden",
          "description": null,
          "code": "set hidden (value) {\r\n    let originallyHidden = this.hidden\r\n    let currentlyHidden = NGN.forceBoolean(value)\r\n\r\n    if (originallyHidden !== currentlyHidden) {\r\n      this.METADATA.hidden = currentlyHidden\r\n      this.emit(originallyHidden ? 'unhidden' : 'hidden')\r\n    }\r\n  }",
          "start": {
            "line": 685,
            "column": 2
          },
          "end": {
            "line": 693,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": false,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "virtual": {
          "type": "property",
          "label": "virtual",
          "description": null,
          "code": "get virtual () {\r\n    return this.METADATA.fieldType === 'virtual'\r\n  }",
          "start": {
            "line": 699,
            "column": 2
          },
          "end": {
            "line": 701,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "identifier": {
          "type": "property",
          "label": "identifier",
          "description": null,
          "code": "set identifier (value) {\r\n    value = NGN.forceBoolean(value)\r\n\r\n    if (value !== this.METADATA.isIdentifier) {\r\n      this.METADATA.isIdentifier = value\r\n      this.emit('keystatus.changed', this)\r\n    }\r\n  }",
          "start": {
            "line": 711,
            "column": 2
          },
          "end": {
            "line": 718,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": false,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "name": {
          "type": "property",
          "label": "name",
          "description": null,
          "code": "get name () {\r\n    return this.METADATA.name\r\n  }",
          "start": {
            "line": 720,
            "column": 2
          },
          "end": {
            "line": 722,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "isNew": {
          "type": "property",
          "label": "isNew",
          "description": null,
          "code": "get isNew () {\r\n    return this.METADATA.IS_NEW\r\n  }",
          "start": {
            "line": 730,
            "column": 2
          },
          "end": {
            "line": 732,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "default": {
          "type": "property",
          "label": "default",
          "description": null,
          "code": "get default () {\r\n    if (this.isIdentifier) {\r\n      return NGN.coalesce(this.METADATA.autoid, this.METADATA.default)\r\n    }\r\n\r\n    if (NGN.isFn(this.METADATA.default) && this.type !== 'function') {\r\n      return this.METADATA.default.apply(this)\r\n    }\r\n\r\n    return this.METADATA.default\r\n  }",
          "start": {
            "line": 738,
            "column": 2
          },
          "end": {
            "line": 748,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "value": {
          "type": "property",
          "label": "value",
          "description": null,
          "code": "set value (value) {\r\n    this.METADATA.setValue(value)\r\n  }",
          "start": {
            "line": 762,
            "column": 2
          },
          "end": {
            "line": 764,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": false,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "silentValue": {
          "type": "property",
          "label": "silentValue",
          "description": null,
          "code": "set silentValue (value) {\r\n    this.METADATA.setValue(value, true)\r\n  }",
          "start": {
            "line": 776,
            "column": 2
          },
          "end": {
            "line": 778,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": false,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "modified": {
          "type": "property",
          "label": "modified",
          "description": null,
          "code": "get modified () {\r\n    if (typeof this.META.lastValue === 'symbol') {\r\n      return false\r\n    }\r\n\r\n    return this.METADATA.lastValue !== this.value\r\n  }",
          "start": {
            "line": 780,
            "column": 2
          },
          "end": {
            "line": 786,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "valid": {
          "type": "property",
          "label": "valid",
          "description": null,
          "code": "get valid () {\r\n    if (this.required && NGN.coalesce(this.METADATA.RAW) === null) {\r\n      this.METADATA.violatedRule = 'Data Required'\r\n      NGN.WARN(`${this.METADATA.name} is a required field.`)\r\n      return false\r\n    }\r\n\r\n    if (this.METADATA.rules.length > 0) {\r\n      for (let rule = 0; rule < this.METADATA.rules.length; rule++) {\r\n        if (!this.METADATA.rules[rule].test(this.METADATA.RAW)) {\r\n          this.METADATA.violatedRule = this.METADATA.rules[rule].name\r\n          return false\r\n        }\r\n      }\r\n    }\r\n\r\n    this.METADATA.violatedRule = null\r\n\r\n    return true\r\n  }",
          "start": {
            "line": 792,
            "column": 2
          },
          "end": {
            "line": 811,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "boolean",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "violatedRule": {
          "type": "property",
          "label": "violatedRule",
          "description": null,
          "code": "get violatedRule () {\r\n    return NGN.coalesce(this.METADATA.violatedRule, 'None')\r\n  }",
          "start": {
            "line": 817,
            "column": 2
          },
          "end": {
            "line": 819,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "changelog": {
          "type": "property",
          "label": "changelog",
          "description": null,
          "code": "get changelog () {\r\n    if (!this.METADATA.AUDITABLE) {\r\n      NGN.WARN(`The changelog for the ${this.name} field is empty because auditing is disabled.`)\r\n      return []\r\n    }\r\n\r\n    return this.METADATA.AUDITLOG.log\r\n  }",
          "start": {
            "line": 826,
            "column": 2
          },
          "end": {
            "line": 833,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        }
      },
      "methods": {
        "constructor": {
          "type": "method",
          "label": "constructor",
          "description": "Accepts an object with all configuration objects, or a string representing\r\n  the name of the field.",
          "code": "constructor (cfg) {\r\n    cfg = cfg || {}\r\n\r\n    if (typeof cfg === 'string') {\r\n      cfg = {\r\n        name: cfg\r\n      }\r\n    }\r\n\r\n    // Validate field configuration values\r\n    if (cfg.hasOwnProperty('pattern') && NGN.typeof(cfg.pattern) !== 'regexp') {\r\n      throw new Error('Invalid data field configuration. Pattern must be a valid JavaScript regular expression (RegExp).')\r\n    }\r\n\r\n    if (cfg.type === undefined) {\r\n      if (cfg.default) {\r\n        cfg.type = NGN.getType(NGN.typeof(cfg.default), String)\r\n      }\r\n    }\r\n\r\n    super(cfg)\r\n\r\n    const EMPTYDATA = Symbol('empty')\r\n\r\n    Object.defineProperties(this, {\r\n      METADATA: NGN.privateconst({\r\n        /**\r\n         * @cfg {boolean} [required=false]\r\n         * Indicates the value is required.\r\n         */\r\n        required: NGN.coalesce(cfg.required, false),\r\n\r\n        /**\r\n         * @cfgproperty {boolean} [hidden=false]\r\n         * Indicates the field is hidden (metadata).\r\n         */\r\n        hidden: NGN.coalesce(cfg.hidden, false),\r\n\r\n        // Identifies the property as a standard data attribute.\r\n        // Alternative options include `data`, `key`, `join`, `virtual`.\r\n        fieldType: NGN.coalesce(cfg.identifier, false) ? 'key' : 'data',\r\n\r\n        isIdentifier: NGN.coalesce(cfg.identifier, false),\r\n\r\n        /**\r\n         * @cfg {boolean} [autocorrectInput=true]\r\n         * Attempt to automatically correct data type values. For example,\r\n         * a numeric field receiving a value of `'10'` will automatically\r\n         * convert the input to `10`. Only arrays, numbers, and booleans are\r\n         * supported. See NGN#forceArray, NGN#forceBoolean, and NGN#forceNumber\r\n         * for details.\r\n         */\r\n        autocorrectInput: NGN.coalesce(cfg.autocorrectInput, false),\r\n\r\n        /**\r\n         * @cfg {RegExp} [pattern]\r\n         * A pattern, as defined by a standard RegExp, that the data must match.\r\n         */\r\n        pattern: NGN.coalesceb(cfg.pattern),\r\n\r\n        /**\r\n         * @cfgproperty {string} name\r\n         * The field name.\r\n         */\r\n        name: NGN.coalesce(cfg.name),\r\n\r\n        /**\r\n         * @cfgproperty {string} description\r\n         * This is a metadata field, primarily used for documentation\r\n         * or schema generation purposes.\r\n         */\r\n        description: NGN.coalesce(cfg.description, `${NGN.typeof(cfg.type)} field`),\r\n\r\n        /**\r\n         * @cfgproperty {string} [sourceName]\r\n         * A source name represents the physical name of an attribute as it\r\n         * would be recognized in a system of record. For example, a field\r\n         * named `firstname` may need to be written to disk/memory as `gn`\r\n         * (commonly used as shorthand for givenName in LDAP environments\r\n         * and relational databases).\r\n         *\r\n         * By specifying `firstname` as the field name and `gn` as the source\r\n         * name, the field will automatically map values from the source\r\n         * to model name and vice versa.\r\n         *\r\n         * For instance, a JSON input may look like:\r\n         *\r\n         * ```js\r\n         * {\r\n         *   \"gn\": \"John\",\r\n         *   \"sn\": \"Doe\"\r\n         * }\r\n         * ```\r\n         *\r\n         * When this data is applied to the field (or loaded in a\r\n         * NGN.DATA.Model), the field #value for `firstname` would be `John`.\r\n         * If the field #value is changed to `Jill` (i.e.\r\n         * `firstname.value = 'Jill'`), the resulting data set would look like:\r\n         *\r\n         * ```js\r\n         * {\r\n         *   \"gn\": \"Jill\",\r\n         *   \"sn\": \"Doe\"\r\n         * }\r\n         * ```\r\n         */\r\n        sourceName: NGN.coalesce(cfg.sourceName),\r\n\r\n        /**\r\n         * @cfg {any} default\r\n         * The default value of the field when no value is specified.\r\n         */\r\n        default: NGN.coalesce(cfg.default),\r\n\r\n        lastValue: Symbol('no.value'),\r\n\r\n        /**\r\n         * @cfg {Primitive} [type=String]\r\n         * The JS primitive representing the type of data represented\r\n         * by the field.\r\n         */\r\n        dataType: NGN.coalesce(cfg.type, String),\r\n\r\n        /**\r\n         * @cfg {function} [rule[]]\r\n         * A function, or an array of functions, which determine whether the\r\n         * field value is valid or not. These functions receive a single argument\r\n         * (the data value) and must return a Boolean value.\r\n         */\r\n        rules: NGN.coalesce(cfg.rule, cfg.rules, cfg.validators, []),\r\n        violatedRule: null,\r\n\r\n        /**\r\n         * @cfg {boolean} [allowInvalid=true]\r\n         * If this is set to `false`, invalid values will throw an error.\r\n         */\r\n        allowInvalid: NGN.coalesce(cfg.allowInvalid, true),\r\n\r\n        /**\r\n         * @cfg {function} transformer\r\n         * A synchronous transformation function will be applied each time\r\n         * the field value is set. This can be used to modify data _before_ it\r\n         * is stored as a field value. The returned value from the function\r\n         * will be the new value of the field.\r\n         *\r\n         * The transformation function will receive the input as it's only\r\n         * aregument. For example:\r\n         *\r\n         * ```js\r\n         * let field = new NGN.DATA.Field({\r\n         *   name: 'testfield',\r\n         *   transformer: function (input) {\r\n         *     return input + '_test'\r\n         *   }\r\n         * })\r\n         *\r\n         * field.value = 'a'\r\n         *\r\n         * console.log(field.value) // Outputs \"a_test\"\r\n         * ```\r\n         *\r\n         * **Transformations can affect performance.** In small data sets,\r\n         * transformations are typically negligible, only adding a few\r\n         * milliseconds to processing time. This may affect large data sets,\r\n         * particularly data stores using defauly bulk recod loading.\r\n         */\r\n        TRANSFORM: NGN.coalesce(cfg.transformer),\r\n\r\n        RAWDATAPLACEHOLDER: EMPTYDATA,\r\n        RAW: EMPTYDATA,\r\n        ENUMERABLE_VALUES: null,\r\n        REVERSE_ENUMERABLE_VALUES: null,\r\n        IS_NEW: true,\r\n\r\n        EVENTS: new Set([\r\n          'hidden',\r\n          'unhidden',\r\n          'update',\r\n          'invalid',\r\n          'valid',\r\n          'rule.add',\r\n          'rule.remove'\r\n        ]),\r\n\r\n        /**\r\n         * @cfg {boolean} [audit=false]\r\n         * Enable auditing to support #undo/#redo operations. This creates and\r\n         * manages a NGN.DATA.TransactionLog.\r\n         */\r\n        AUDITABLE: NGN.coalesce(cfg.audit, false),\r\n\r\n        /**\r\n         * @cfg {Number} [auditMaxEntries=20]\r\n         * The maximum number of historical records to maintain for the field.\r\n         * See NGN.DATA.TransactionLog#constructor for details.\r\n         */\r\n        AUDITLOG: NGN.coalesce(cfg.audit, false)\r\n          ? new NGN.DATA.TransactionLog(NGN.coalesce(cfg.auditMaxEntries, 10))\r\n          : null,\r\n\r\n        /**\r\n         * @cfg {NGN.DATA.Model} [model]\r\n         * Optionally specify the parent model.\r\n         */\r\n        model: null,\r\n\r\n        // Set the value using a configuration.\r\n        setValue: (value, suppressEvents = false, ignoreAudit = false) => {\r\n          // Preprocessing (transform input)\r\n          if (this.METADATA.TRANSFORM !== null && NGN.isFn(this.METADATA.TRANSFORM)) {\r\n            value = this.METADATA.TRANSFORM.call(this, value)\r\n          }\r\n\r\n          // Attempt to auto-correct input when possible.\r\n          if (this.METADATA.autocorrectInput && this.type !== NGN.typeof(value)) {\r\n            value = this.autoCorrectValue(value)\r\n          }\r\n\r\n          // Ignore changes when the value hasn't been modified.\r\n          if (value === this.value) {\r\n            return\r\n          }\r\n\r\n          let change = {\r\n            field: this,\r\n            old: typeof this.METADATA.RAW === 'symbol' ? undefined : this.METADATA.RAW,\r\n            new: value\r\n          }\r\n\r\n          let priorValueIsValid = this.valid\r\n\r\n          this.METADATA.RAW = value\r\n\r\n          // Notify when an invalid value is detected.\r\n          if (!this.valid) {\r\n            // If invalid values are explicitly prohibited, throw an error.\r\n            // The value is rolled back before throwing the error so developers may\r\n            // catch the error and continue processing.\r\n            if (!this.METADATA.allowInvalid) {\r\n              this.METADATA.RAW = change.old\r\n              throw new Error(`\"${value}\" did not pass the ${this.METADATA.violatedRule} rule.`)\r\n            } else {\r\n              change.reason = `\"${value}\" did not pass the ${this.METADATA.violatedRule} rule.`\r\n              NGN.WARN(change.reason)\r\n            }\r\n\r\n            this.emit('invalid', change)\r\n          } else if (!suppressEvents && priorValueIsValid !== null && priorValueIsValid) {\r\n            // If the field BECAME valid (compared to prior value),\r\n            // emit an event.\r\n            this.emit('valid', change)\r\n          }\r\n\r\n          if (typeof this.METADATA.lastValue === 'symbol') {\r\n            this.METADATA.lastValue = value\r\n          }\r\n\r\n          // If auditing is enabled and not explicitly ignored by an internal\r\n          // operation, commit the change.\r\n          if (!ignoreAudit && !this.virtual && this.METADATA.AUDITABLE) {\r\n            change.cursor = this.METADATA.AUDITLOG.commit(this.METADATA.RAW)\r\n          }\r\n\r\n          // Notify when the update is complete.\r\n          if (!suppressEvents) {\r\n            this.emit('update', change)\r\n          }\r\n\r\n          // Mark unnecessary code for garbage collection.\r\n          priorValueIsValid = null\r\n          change = null\r\n        },\r\n\r\n        // Submit the payload to the parent model (if applicable).\r\n        commitPayload: (payload) => {\r\n          if (this.METADATA.model) {\r\n            payload.action = 'update'\r\n            payload.join = true\r\n\r\n            this.increaseMaxListeners(3)\r\n            this.METADATA.model.emit(\r\n              [\r\n                'update',\r\n                `${payload.field}.update`,\r\n                `update.${payload.field}`\r\n              ],\r\n              payload\r\n            )\r\n\r\n            payload = null // Mark for garbage collection\r\n          }\r\n        }\r\n      })\r\n    })\r\n\r\n    // Apply common rules\r\n    if (NGN.typeof(this.METADATA.rules) !== 'array') {\r\n      this.METADATA.rules = NGN.forceArray(this.METADATA.rules)\r\n    }\r\n\r\n    if (this.METADATA.rules.length > 0) {\r\n      for (let i = 0; i < this.METADATA.rules.length; i++) {\r\n        if (NGN.isFn(this.METADATA.rules[i]) && !(this.METADATA.rules[i] instanceof NGN.DATA.Rule)) {\r\n          this.METADATA.rules[i] = new NGN.DATA.Rule(this.METADATA.rules[i], `Custom Rule #${i + 1}`)\r\n        }\r\n      }\r\n    }\r\n\r\n    // Apply pattern validation if specified.\r\n    if (this.METADATA.dataType === String) {\r\n      if (this.METADATA.pattern !== null) {\r\n        this.METADATA.rules.unshift(new NGN.DATA.Rule(cfg.pattern, `Pattern Match (${cfg.pattern.toString()})`))\r\n      }\r\n\r\n      /**\r\n       * @cfg {Boolean} [nonempty]\r\n       * @info This validation attribute applies to #String fields only.\r\n       * Validates a value is not blank, `null`, or `undefined`.\r\n       */\r\n      if (cfg.nonempty) {\r\n        this.METADATA.rules.unshift(new NGN.DATA.Rule(value => {\r\n          return value.trim().length > 0\r\n        }, `No Blanks (${cfg.pattern.toString()})`))\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @cfg {Number} [min]\r\n     * @info This validation attribute applies to #Array, #String, and #Number fields only.\r\n     * Specify a minimum value:\r\n     *\r\n     * - For string values, this is a minimum number of characters.\r\n     * - For numeric values, this is a minimum inclusive value (i.e. value must be greater than\r\n     * or equal to the minimum).\r\n     * - For arrays, this is a minimum number of items that must exist in the array.\r\n     */\r\n    /**\r\n     * @cfg {Number} [max]\r\n     * @info This validation attribute applies to #Array, #String, and #Number fields only.\r\n     * Specify a maximum value:\r\n     *\r\n     * - For string values, this is a maximum number of characters.\r\n     * - For numeric values, this is a maximum inclusive value (i.e. value must be less than\r\n     * or equal to the maximum).\r\n     * - For arrays, this is a maximum number of items that may exist in the array.\r\n     */\r\n\r\n    // Apply number-specific validations.\r\n    if (this.METADATA.dataType === Number || this.METADATA.dataType === Date || this.METADATA.dataType === String) {\r\n      // Support minimum/maximum range\r\n      if (NGN.objectHasAny(cfg, 'min', 'minimum', 'max', 'maximum')) {\r\n        cfg.range = NGN.forceArray(NGN.coalesce(cfg.range))\r\n        cfg.range.push([NGN.coalesce(cfg.min, cfg.minimum), NGN.coalesce(cfg.max, cfg.maximum)])\r\n      }\r\n\r\n      /**\r\n       * @cfg {Number} [range]\r\n       * @info This validation attribute applies to #String and #Number fields only.\r\n       * Specify a range of acceptable values:\r\n       *\r\n       * - For numbers, this implies inclusive ranges. For example, `1-10` means \"between 1 and 10, where both 1 and 10 are valid.\"\r\n       * - For strings, this implies inclusive ranges just like numbers, where the number is the character count.\r\n       */\r\n      if (cfg.hasOwnProperty('range')) {\r\n        this.METADATA.rules.unshift(new NGN.DATA.RangeRule('Numeric Range', cfg.range))\r\n      }\r\n\r\n      if (this.METADATA.dataType === Number) {\r\n        // Support numeric patterns (i.e. support for integers)\r\n        if (NGN.coalesce(cfg.pattern)) {\r\n          this.METADATA.rules.unshift(new NGN.DATA.Rule(value => {\r\n            return cfg.pattern.test(value.toString())\r\n          }, `Numeric Pattern (${cfg.pattern.toString().substr(0, 15) + (cfg.pattern.toString().length > 15 ? '...' : '')})`))\r\n        }\r\n\r\n        /**\r\n         * @cfg {Number} [multipleOf]\r\n         * @info This validation attribute applies to #Number fields only.\r\n         * Insures the field value is a multiple of this number. For example,\r\n         * if the multiple is `10` and the value is `100`, it is valid.\r\n         * If the multiple is `10` and the value is `101`, it is invalid.\r\n         */\r\n        if (NGN.typeof(cfg.multipleOf) === 'number') {\r\n          this.METADATA.rules.unshift(new NGN.DATA.Rule(value => {\r\n            return Math.abs(value % cfg.multipleOf) === 0\r\n          }, `Numeric Multiple of ${cfg.multipleOf}`))\r\n        }\r\n      }\r\n    }\r\n\r\n    // Apply array-specific native validations\r\n    if (this.METADATA.dataType === Array) {\r\n      // Enforce minimum number of array items\r\n      if (NGN.objectHasAny(cfg, 'min', 'minimum')) {\r\n        this.METADATA.rules.push(new NGN.DATA.Rule(value => value.length >= NGN.coalesce(cfg.min, cfg.minimum), `${NGN.coalesce(cfg.min, cfg.minimum)} count minimum`))\r\n      }\r\n\r\n      // Enforce maximum number of array items\r\n      if (NGN.objectHasAny(cfg, 'max', 'maximum')) {\r\n        this.METADATA.rules.push(new NGN.DATA.Rule(value => value.length <= NGN.coalesce(cfg.max, cfg.maximum), `${NGN.coalesce(cfg.max, cfg.maximum)} count maximum`))\r\n      }\r\n\r\n      /**\r\n       * @cfg {Array} [unique]\r\n       * @info This validation attribute applies to #Array fields only.\r\n       * @warning This is a computationally expensive validation when used in NGN Data Stores.\r\n       * Validates that all items are unique.\r\n       */\r\n      if (NGN.coalesce(cfg.unique, false)) {\r\n        this.METADATA.rules.push(new NGN.DATA.Rule(value => NGN.dedupe(value).length === value.length, 'Unique value constraint'))\r\n      }\r\n\r\n      /**\r\n       * @cfg {any} [listType]\r\n       * @info This validation attribute applies to #Array fields only.\r\n       * Require each element of the array to conform to the specified data\r\n       * type. For example, setting `listType: Number` will validate that\r\n       * each element of the array is a number.\r\n       *\r\n       * ```js\r\n       * [1, 2, 3, 4, 5] // Valid\r\n       * [1, 2, 'three', 4, 5] // Invalid\r\n       * ```\r\n       */\r\n      if (cfg.hasOwnProperty('listType')) {\r\n        this.METADATA.rules.push(new NGN.DATA.Rule(value => {\r\n          for (let i = 0; i < value.length; i++) {\r\n            if (NGN.typeof(value[i]) !== NGN.typeof(cfg.listType)) {\r\n              return false\r\n            }\r\n          }\r\n\r\n          return true\r\n        }, `${NGN.typeof(cfg.listType).toUpperCase()} list type constraint`))\r\n      }\r\n\r\n      // Support enumerations in array values\r\n      if (cfg.hasOwnProperty('enum')) {\r\n        this.METADATA.rules.push(new NGN.DATA.Rule(value => {\r\n          return cfg.enum.indexOf(value) >= 0\r\n        }))\r\n      }\r\n\r\n      /**\r\n       * @cfg {Array} [tuples]\r\n       * @info This validation attribute applies to #Array fields only.\r\n       * @warning This is a computationally expensive validation when used in NGN Data Stores.\r\n       * Validate each item of an array according to a unique schema.\r\n       * Each item is a key value object, which supports only the `type` and\r\n       * `enum` validations.\r\n       *\r\n       * For example:\r\n       *\r\n       * ```js\r\n       * {\r\n       *   tuples: [{\r\n       *     type: Number\r\n       *   }, {\r\n       *     type: String,\r\n       *     enum: ['a', 'b', 'c']\r\n       *   }, {\r\n       *     enum: ['d', 1]\r\n       *   }]\r\n       * }\r\n       * ```\r\n       * The configuration above will make sure the first array item is a number,\r\n       * while the second is either `a`, `b`, or `c`, and the third is either\r\n       * the letter `d` or the number `1`. Only the first three items of the\r\n       * array will be checked, but there must be at least 3 items.\r\n       */\r\n      if (cfg.hasOwnProperty('tuples')) {\r\n        this.METADATA.rules.push(new NGN.DATA.Rule(value => {\r\n          if (value.length < cfg.tuples.length) {\r\n            return false\r\n          }\r\n\r\n          for (let i = 0; i < cfg.tuples.length; i++) {\r\n            if (cfg.tuples[i].hasOwnProperty('type')) {\r\n              if (NGN.typeof(value[i]) !== NGN.typeof(cfg.tuples[i].type)) {\r\n                return false\r\n              }\r\n            }\r\n\r\n            if (cfg.tuples[i].hasOwnProperty('enum')) {\r\n              if (cfg.tuples[i].enum.indexOf(value[i]) < 0) {\r\n                return false\r\n              }\r\n            }\r\n          }\r\n\r\n          return true\r\n        }, 'Tuple constraint'))\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @cfg {Array} [enum]\r\n     * An enumeration of available values this field is allowed to have.\r\n     */\r\n    if (NGN.objectHasAny(cfg, 'enum', 'enumeration')) {\r\n      this.METADATA.ENUMERABLE_VALUES = new Set(NGN.forceArray(NGN.coalesce(cfg.enum, cfg.enumeration)))\r\n      this.METADATA.rules.push(new NGN.DATA.Rule((value) => this.METADATA.ENUMERABLE_VALUES.has(value), 'Enumerable Values'))\r\n    }\r\n\r\n    /**\r\n     * @cfg {Array} [not]\r\n     * A \"reverse\" enumeration, i.e. a list of values this field is **not** allowed to be.\r\n     */\r\n    if (NGN.objectHasAny(cfg, 'not', 'notin')) {\r\n      this.METADATA.REVERSE_ENUMERABLE_VALUES = new Set(NGN.forceArray(NGN.coalesce(cfg.not, cfg.notin)))\r\n      this.METADATA.rules.push(new NGN.DATA.Rule((value) => !this.METADATA.REVERSE_ENUMERABLE_VALUES.has(value), 'Rejected Values'))\r\n    }\r\n\r\n    // Check if the field type is an array, which indicates multiple\r\n    // data types are considered valid.\r\n    if (cfg.type instanceof Array) {\r\n      // If the array has no values, assume the user meant to create an \"Array\" data type.\r\n      // Warn them, in case this was not the intention.\r\n      if (cfg.type.length === 0) {\r\n        NGN.WARN(`No data type specified for ${this.name} field. Autoconverted to an array.`)\r\n        cfg.type = Array\r\n      } else if (cfg.type.length === 1) {\r\n        // If there is only one data type, the array is extraneous and standard\r\n        // datatype validation can be used.\r\n        cfg.type = cfg.type[0]\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @cfg {Primitive|Array} [type=String]\r\n     * The type should be a JavaScript primitive, class, or constructor.\r\n     * For example, `String`, `Number`, `Boolean`, `RegExp`, `Array`, or `Date`.\r\n     * This can also be an array of primitive values. For example, `[String, Number]`\r\n     * indicates the field could be a string or a numeric value.\r\n     */\r\n    if (cfg.type instanceof Array) {\r\n      let typeList = cfg.type.map(type => NGN.typeof(type))\r\n\r\n      this.METADATA.rules.unshift(\r\n        new NGN.DATA.Rule(\r\n          (value) => typeList.indexOf(NGN.typeof(value)) >= 0,\r\n          `${this.type.toUpperCase()} Multitype Check`\r\n        )\r\n      )\r\n    } else {\r\n      this.METADATA.rules.unshift(\r\n        new NGN.DATA.Rule(\r\n          (value) => NGN.typeof(value) === NGN.typeof(this.METADATA.dataType),\r\n          `${this.type.toUpperCase()} Type Check`\r\n        )\r\n      )\r\n    }\r\n\r\n    // Associate a model if one is defined.\r\n    if (NGN.coalesce(cfg.model) !== null) {\r\n      this.model = cfg.model\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 40,
            "column": 2
          },
          "end": {
            "line": 597,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "cfg": {
              "type": "argument",
              "label": "configuration",
              "description": "Accepts an object with all configuration objects, or a string representing\nthe name of the field.",
              "code": "cfg",
              "start": {
                "line": 40,
                "column": 15
              },
              "end": {
                "line": 40,
                "column": 18
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string|object",
              "required": true,
              "enum": null
            },
            "configuration": {
              "type": "argument",
              "label": "configuration",
              "description": "Accepts an object with all configuration objects, or a string representing\nthe name of the field.",
              "code": "cfg",
              "start": {
                "line": 40,
                "column": 15
              },
              "end": {
                "line": 40,
                "column": 18
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string|object",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "constructor",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "undo": {
          "type": "method",
          "label": "undo",
          "description": "A rollback function to undo changes. This operation affects\nthe changelog . To \"undo\" an \"undo\", use #redo.",
          "code": "undo (count = 1, suppressEvents = false) {\r\n    if (!this.METADATA.AUDITABLE) {\r\n      NGN.WARN(`The undo operation failed on the ${this.name} field because auditing is disabled.`)\r\n      return\r\n    }\r\n\r\n    let id = this.METADATA.AUDITLOG.rollback(count)\r\n\r\n    // Silently set the value to an older value.\r\n    this.METADATA.setValue(this.METADATA.AUDITLOG.getCommit(id).value, suppressEvents, true)\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 845,
            "column": 2
          },
          "end": {
            "line": 855,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "count": {
              "type": "argument",
              "label": "OperationCount",
              "description": "The number of operations to \"undo\". Defaults to a single operation.",
              "code": "count = 1",
              "start": {
                "line": 845,
                "column": 8
              },
              "end": {
                "line": 845,
                "column": 17
              },
              "flags": [],
              "authors": [],
              "default": "1",
              "datatype": "number",
              "required": false,
              "enum": null
            },
            "suppressEvents": {
              "type": "argument",
              "label": "suppressEvents",
              "description": "Set to `true` to quietly update the value (prevents `update` event from\nfiring).",
              "code": "suppressEvents = false",
              "start": {
                "line": 845,
                "column": 19
              },
              "end": {
                "line": 845,
                "column": 41
              },
              "flags": [],
              "authors": [],
              "default": "false",
              "datatype": "boolean",
              "required": false,
              "enum": null
            },
            "OperationCount": {
              "type": "argument",
              "label": "OperationCount",
              "description": "The number of operations to \"undo\". Defaults to a single operation.",
              "code": "count = 1",
              "start": {
                "line": 845,
                "column": 8
              },
              "end": {
                "line": 845,
                "column": 17
              },
              "flags": [],
              "authors": [],
              "default": "1",
              "datatype": "number",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "redo": {
          "type": "method",
          "label": "redo",
          "description": "A function to reapply known changes. This operation affects\nthe changelog .\n\nThe redo operation only works after an undo operation, but before a new\nvalue is committed to the transaction log. In other words, `undo -> redo`\nwill work, but `undo -> update -> redo` will not. For details, see how\nthe NGN.DATA.TransactionLog cursor system works.",
          "code": "redo (count = 1, suppressEvents = false) {\r\n    if (!this.METADATA.AUDITABLE) {\r\n      NGN.WARN(`The redo operation failed on the ${this.name} field because auditing is disabled.`)\r\n      return\r\n    }\r\n\r\n    let id = this.METADATA.AUDITLOG.advance(count)\r\n\r\n    // Silently set the value to a newer value.\r\n    this.METADATA.setValue(this.METADATA.AUDITLOG.getCommit(id).value, suppressEvents, true)\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 872,
            "column": 2
          },
          "end": {
            "line": 882,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "count": {
              "type": "argument",
              "label": "OperationCount",
              "description": "The number of operations to \"undo\". Defaults to a single operation.",
              "code": "count = 1",
              "start": {
                "line": 872,
                "column": 8
              },
              "end": {
                "line": 872,
                "column": 17
              },
              "flags": [],
              "authors": [],
              "default": "1",
              "datatype": "number",
              "required": false,
              "enum": null
            },
            "suppressEvents": {
              "type": "argument",
              "label": "suppressEvents",
              "description": "Set to `true` to quietly update the value (prevents `update` event from\nfiring).",
              "code": "suppressEvents = false",
              "start": {
                "line": 872,
                "column": 19
              },
              "end": {
                "line": 872,
                "column": 41
              },
              "flags": [],
              "authors": [],
              "default": "false",
              "datatype": "boolean",
              "required": false,
              "enum": null
            },
            "OperationCount": {
              "type": "argument",
              "label": "OperationCount",
              "description": "The number of operations to \"undo\". Defaults to a single operation.",
              "code": "count = 1",
              "start": {
                "line": 872,
                "column": 8
              },
              "end": {
                "line": 872,
                "column": 17
              },
              "flags": [],
              "authors": [],
              "default": "1",
              "datatype": "number",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "hide": {
          "type": "method",
          "label": "hide",
          "description": "Hide the field.",
          "code": "hide () {\r\n    this.hidden = true\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 887,
            "column": 2
          },
          "end": {
            "line": 889,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "unhide": {
          "type": "method",
          "label": "unhide",
          "description": "Unhide the field.",
          "code": "unhide () {\r\n    this.hidden = false\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 894,
            "column": 2
          },
          "end": {
            "line": 896,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "allowInvalid": {
          "type": "method",
          "label": "allowInvalid",
          "description": "Do not throw errors whan a value is marked as invalid.",
          "code": "allowInvalid () {\r\n    this.METADATA.allowInvalid = true\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 901,
            "column": 2
          },
          "end": {
            "line": 903,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "disallowInvalid": {
          "type": "method",
          "label": "disallowInvalid",
          "description": "Throw errors whan a value is marked as invalid.",
          "code": "disallowInvalid () {\r\n    this.METADATA.allowInvalid = false\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 908,
            "column": 2
          },
          "end": {
            "line": 910,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "autoCorrectValue": {
          "type": "method",
          "label": "autoCorrectValue",
          "description": "Attempt to automatically correct a value according to the\r\n  field's data type.\r\n  \r\n  The value to attempt to autocorrect.\r\n  \r\n  Returns the value after attempting to autocorrect the value.",
          "code": "autoCorrectValue (value) {\r\n    try {\r\n      switch (this.type) {\r\n        case 'number':\r\n          value = NGN.forceNumber(value)\r\n          break\r\n\r\n        case 'boolean':\r\n          value = NGN.forceBoolean(value)\r\n          break\r\n\r\n        case 'array':\r\n          value = NGN.forceArray(value)\r\n          break\r\n\r\n        case 'string':\r\n          value = value.toString()\r\n          break\r\n\r\n        case 'date':\r\n          let valueType = NGN.typeof(value)\r\n\r\n          if (valueType !== 'date') {\r\n            if (valueType === 'number') {\r\n              let dt = new Date()\r\n              dt.setTime(value)\r\n\r\n              value = dt\r\n            } else {\r\n              value = new Date(Date.parse(value))\r\n            }\r\n          }\r\n\r\n          break\r\n      }\r\n    } finally {\r\n      return value // eslint-disable-line no-unsafe-finally\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 920,
            "column": 2
          },
          "end": {
            "line": 958,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "value": {
              "type": "argument",
              "label": "value",
              "description": "The value to attempt to autocorrect.",
              "code": "value",
              "start": {
                "line": 920,
                "column": 20
              },
              "end": {
                "line": 920,
                "column": 25
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "returnType": "Any",
          "returnDescription": "null Returns the value after attempting to autocorrect the value.",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        }
      }
    },
    "NGN.DATA.FieldMap": {
      "type": "class",
      "label": "NGN.DATA.FieldMap",
      "description": "A reference to the inversed data map.",
      "code": "class NGNDataFieldMap { // eslint-disable-line\r\n  constructor (cfg = {}) {\r\n    Object.defineProperties(this, {\r\n      originalSource: NGN.privateconst(cfg),\r\n      sourceMap: NGN.private(null),\r\n      reverseMap: NGN.private(null),\r\n      applyData: NGN.privateconst((map = 'map', data) => {\r\n        if (NGN.typeof(data) !== 'object') {\r\n          return data\r\n        }\r\n\r\n        let keys = Object.keys(data)\r\n        map = map === 'map' ? this.inverse : this.map\r\n\r\n        for (let i = 0; i < keys.length; i++) {\r\n          if (map.hasOwnProperty(keys[i])) {\r\n            data[map[keys[i]]] = data[keys[i]]\r\n            delete data[keys[i]]\r\n          }\r\n        }\r\n\r\n        return data\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @property {object} map\r\n   * A reference to the data mapping object.\r\n   */\r\n  get map () {\r\n    if (this.sourceMap === null) {\r\n      let keys = Object.keys(this.originalSource)\r\n\r\n      this.sourceMap = {}\r\n\r\n      for (let i = 0; i < keys.length; i++) {\r\n        if (NGN.typeof(keys[i]) === 'string' && NGN.typeof(this.originalSource[keys[i]]) === 'string') {\r\n          this.sourceMap[keys[i]] = this.originalSource[keys[i]]\r\n        }\r\n      }\r\n    }\r\n\r\n    return this.sourceMap\r\n  }\r\n\r\n  /**\r\n   * @property {object} inverse\r\n   * A reference to the inversed data map.\r\n   */\r\n  get inverse () {\r\n    if (this.reverseMap === null) {\r\n      let keys = Object.keys(this.originalSource)\r\n\r\n      this.reverseMap = {}\r\n\r\n      for (let i = 0; i < keys.length; i++) {\r\n        if (NGN.typeof(keys[i]) === 'string' && NGN.typeof(this.originalSource[keys[i]]) === 'string') {\r\n          this.reverseMap[this.originalSource[keys[i]]] = keys[i]\r\n        }\r\n      }\r\n    }\r\n\r\n    return this.reverseMap\r\n  }\r\n\r\n  /**\r\n   * Apply the map to an object.\r\n   * @param  {object} data\r\n   * @return {object}\r\n   */\r\n  applyMap (data) {\r\n    return this.applyData('map', data)\r\n  }\r\n\r\n  /**\r\n   * Apply the inversed map to an object.\r\n   * @param  {object} data\r\n   * @return {object}\r\n   */\r\n  applyInverseMap (data) {\r\n    return this.applyData('reverse', data)\r\n  }\r\n}",
      "tags": {},
      "exceptions": {},
      "events": {},
      "start": {
        "line": 70,
        "column": 15
      },
      "end": {
        "line": 153,
        "column": 1
      },
      "flags": [],
      "authors": [],
      "sourcefile": "./\\data\\field\\FieldMap.js",
      "extends": null,
      "configuration": {},
      "properties": {
        "originalSource": {
          "type": "property",
          "label": "originalSource",
          "description": null,
          "code": "originalSource: NGN.privateconst(cfg)",
          "start": {
            "line": 73,
            "column": 6
          },
          "end": {
            "line": 73,
            "column": 43
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        },
        "sourceMap": {
          "type": "property",
          "label": "sourceMap",
          "description": null,
          "code": "sourceMap: NGN.private(null)",
          "start": {
            "line": 74,
            "column": 6
          },
          "end": {
            "line": 74,
            "column": 34
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": true
        },
        "reverseMap": {
          "type": "property",
          "label": "reverseMap",
          "description": null,
          "code": "reverseMap: NGN.private(null)",
          "start": {
            "line": 75,
            "column": 6
          },
          "end": {
            "line": 75,
            "column": 35
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": true
        },
        "applyData": {
          "type": "property",
          "label": "applyData",
          "description": null,
          "code": "applyData: NGN.privateconst((map = 'map', data) => {\r\n        if (NGN.typeof(data) !== 'object') {\r\n          return data\r\n        }\r\n\r\n        let keys = Object.keys(data)\r\n        map = map === 'map' ? this.inverse : this.map\r\n\r\n        for (let i = 0; i < keys.length; i++) {\r\n          if (map.hasOwnProperty(keys[i])) {\r\n            data[map[keys[i]]] = data[keys[i]]\r\n            delete data[keys[i]]\r\n          }\r\n        }\r\n\r\n        return data\r\n      })",
          "start": {
            "line": 76,
            "column": 6
          },
          "end": {
            "line": 92,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        },
        "map": {
          "type": "property",
          "label": "map",
          "description": null,
          "code": "get map () {\r\n    if (this.sourceMap === null) {\r\n      let keys = Object.keys(this.originalSource)\r\n\r\n      this.sourceMap = {}\r\n\r\n      for (let i = 0; i < keys.length; i++) {\r\n        if (NGN.typeof(keys[i]) === 'string' && NGN.typeof(this.originalSource[keys[i]]) === 'string') {\r\n          this.sourceMap[keys[i]] = this.originalSource[keys[i]]\r\n        }\r\n      }\r\n    }\r\n\r\n    return this.sourceMap\r\n  }",
          "start": {
            "line": 100,
            "column": 2
          },
          "end": {
            "line": 114,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "inverse": {
          "type": "property",
          "label": "inverse",
          "description": null,
          "code": "get inverse () {\r\n    if (this.reverseMap === null) {\r\n      let keys = Object.keys(this.originalSource)\r\n\r\n      this.reverseMap = {}\r\n\r\n      for (let i = 0; i < keys.length; i++) {\r\n        if (NGN.typeof(keys[i]) === 'string' && NGN.typeof(this.originalSource[keys[i]]) === 'string') {\r\n          this.reverseMap[this.originalSource[keys[i]]] = keys[i]\r\n        }\r\n      }\r\n    }\r\n\r\n    return this.reverseMap\r\n  }",
          "start": {
            "line": 120,
            "column": 2
          },
          "end": {
            "line": 134,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        }
      },
      "methods": {
        "constructor": {
          "type": "method",
          "label": "constructor",
          "description": null,
          "code": "constructor (cfg = {}) {\r\n    Object.defineProperties(this, {\r\n      originalSource: NGN.privateconst(cfg),\r\n      sourceMap: NGN.private(null),\r\n      reverseMap: NGN.private(null),\r\n      applyData: NGN.privateconst((map = 'map', data) => {\r\n        if (NGN.typeof(data) !== 'object') {\r\n          return data\r\n        }\r\n\r\n        let keys = Object.keys(data)\r\n        map = map === 'map' ? this.inverse : this.map\r\n\r\n        for (let i = 0; i < keys.length; i++) {\r\n          if (map.hasOwnProperty(keys[i])) {\r\n            data[map[keys[i]]] = data[keys[i]]\r\n            delete data[keys[i]]\r\n          }\r\n        }\r\n\r\n        return data\r\n      })\r\n    })\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 71,
            "column": 2
          },
          "end": {
            "line": 94,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "cfg": {
              "type": "argument",
              "label": "cfg",
              "description": null,
              "code": "cfg = {}",
              "start": {
                "line": 71,
                "column": 15
              },
              "end": {
                "line": 71,
                "column": 23
              },
              "flags": [],
              "authors": [],
              "default": "{}",
              "datatype": "object",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "constructor",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "applyMap": {
          "type": "method",
          "label": "applyMap",
          "description": "Apply the map to an object.",
          "code": "applyMap (data) {\r\n    return this.applyData('map', data)\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 141,
            "column": 2
          },
          "end": {
            "line": 143,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "data": {
              "type": "argument",
              "label": "data",
              "description": "",
              "code": "data",
              "start": {
                "line": 141,
                "column": 12
              },
              "end": {
                "line": 141,
                "column": 16
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "object",
              "required": true,
              "enum": null
            }
          },
          "returnType": "object",
          "returnDescription": "",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "applyInverseMap": {
          "type": "method",
          "label": "applyInverseMap",
          "description": "Apply the inversed map to an object.",
          "code": "applyInverseMap (data) {\r\n    return this.applyData('reverse', data)\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 150,
            "column": 2
          },
          "end": {
            "line": 152,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "data": {
              "type": "argument",
              "label": "data",
              "description": "",
              "code": "data",
              "start": {
                "line": 150,
                "column": 19
              },
              "end": {
                "line": 150,
                "column": 23
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "object",
              "required": true,
              "enum": null
            }
          },
          "returnType": "object",
          "returnDescription": "",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        }
      }
    },
    "NGN.DATA.Relationship": {
      "type": "class",
      "label": "NGN.DATA.Relationship",
      "description": "The manner of relationship. This can be one of 3 values: `store`\r\n  (NGN.DATA.Store), `model` (NGN.DATA.Model), or `collection`. A collection\r\n  is a special configuration shortcut used to represent a new store of models.\r\n  ```math\r\n  E = mc^2\r\n  ```\r\n  ```graph\r\n  graph LR\r\n  a-->b\r\n  ```\r\n  For example, a model may be defined as:\r\n  \n  ```js\r\n  let Pet = new NGN.DATA.Model({\r\n    fields: {\r\n      name: String,\r\n      animalType: String\r\n    }\r\n  })\r\n  \n  let Person = new NGN.DATA.Model({\r\n    fields: {\r\n      dateOfBirth: Date\r\n    },\r\n    relationships: {\r\n      pets: [Pet]        // <== Collection\r\n    }\r\n  })\r\n  ```",
      "code": "class NGNRelationshipField extends DataField { // eslint-disable-line\r\n  constructor (cfg = {}) {\r\n    let type = NGN.typeof(cfg.join)\r\n\r\n    // Assure valid configuration\r\n    if (!cfg.join) {\r\n      throw new InvalidConfigurationError('Missing \"join\" configuration property.')\r\n    } else if (\r\n      ['model', 'store'].indexOf(type) < 0 &&\r\n      (\r\n        type !== 'array' ||\r\n        NGN.typeof(cfg.join[0]) !== 'model'\r\n      )\r\n    ) {\r\n      throw new InvalidConfigurationError(`The join specified is not a valid NGN.DATA.Model, NGN.DATA.Store, or collection. It is a ${NGN.typeof(cfg.join)}\"`)\r\n    }\r\n\r\n    // Create optional cardinality validations\r\n\r\n    // Initialize\r\n    cfg.identifier = false\r\n    super(cfg)\r\n\r\n    this.METADATA.fieldType = 'join'\r\n    this.METADATA.join = Symbol('relationship')\r\n\r\n    // Apply event monitoring to the #record.\r\n    this.METADATA.applyMonitor = () => {\r\n      if (this.METADATA.manner === 'model') {\r\n        // Model Event Relay\r\n        this.METADATA.join.pool('field.', {\r\n          create: this.METADATA.commonModelEventHandler('field.create'),\r\n          update: this.METADATA.commonModelEventHandler('field.update'),\r\n          remove: this.METADATA.commonModelEventHandler('field.remove'),\r\n          invalid: (data) => {\r\n            this.emit(['invalid', `invalid.${this.METADATA.name}.${data.field}`])\r\n          },\r\n          valid: (data) => {\r\n            this.emit(['valid', `valid.${this.METADATA.name}.${data.field}`])\r\n          }\r\n        })\r\n      //   this.METADATA.join.pool('field.', {\r\n      //     create: this.METADATA.commonModelEventHandler('field.create'),\r\n      //     update: this.METADATA.commonModelEventHandler('field.update'),\r\n      //     remove: this.METADATA.commonModelEventHandler('field.remove'),\r\n      //     invalid: (data) => {\r\n      //       this.emit(['invalid', `invalid.${this.name}.${data.field}`])\r\n      //     },\r\n      //     valid: (data) => {\r\n      //       this.emit(['valid', `valid.${this.name}.${data.field}`])\r\n      //     }\r\n      //   })\r\n      // } else {\r\n      //   // Store Event Relay\r\n      //   this.METADATA.join.pool('record.', {\r\n      //     create: this.METADATA.commonStoreEventHandler('record.create'),\r\n      //     update: this.METADATA.commonStoreEventHandler('record.update'),\r\n      //     remove: this.METADATA.commonStoreEventHandler('record.remove'),\r\n      //     invalid: (data) => {\r\n      //       this.emit('invalid', `invalid.${this.name}.${data.field}`)\r\n      //     },\r\n      //     valid: (data) => {\r\n      //       this.emit('valid', `valid.${this.name}.${data.field}`)\r\n      //     }\r\n      //   })\r\n      }\r\n    }\r\n\r\n    // Event handling for nested models.\r\n    this.METADATA.commonModelEventHandler = (type) => {\r\n      const me = this\r\n\r\n      return function (change) {\r\n        me.METADATA.commitPayload({\r\n          field: `${me.name}.${change.field}`,\r\n          old: NGN.coalesce(change.old),\r\n          new: NGN.coalesce(change.new),\r\n          join: true,\r\n          originalEvent: {\r\n            event: this.event,\r\n            record: me.METADATA.record\r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n    // Event handling for nested stores.\r\n    this.METADATA.commonStoreEventHandler = (type) => {\r\n      const me = this\r\n\r\n      return function (record, change) {\r\n        let old = change ? NGN.coalesce(change.old) : me.data\r\n\r\n        if (this.event === 'record.create') {\r\n          old.pop()\r\n        } else if (this.event === 'record.delete') {\r\n          old.push(record.data)\r\n        }\r\n\r\n        me.METADATA.commitPayload({\r\n          field: me.name + (change ? `.${change.field}` : ''),\r\n          old: change ? NGN.coalesce(change.old) : old,\r\n          new: change ? NGN.coalesce(change.new) : me.data,\r\n          join: true,\r\n          originalEvent: {\r\n            event: this.event,\r\n            record: record\r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n    // const commitPayload = this.METADATA.commitPayload\r\n    //\r\n    // this.METADATA.commitPayload = (payload) => {\r\n    //   console.log('HERE')\r\n    //   commitPayload(...arguments)\r\n    // }\r\n\r\n    /**\r\n     * @cfg join {NGN.DATA.Store|NGN.DATA.Model[]}\r\n     * A relationship to another model/store is defined by a join.\r\n     * The join may be a data store or data model. It is also possible\r\n     * to specify a collection.\r\n     *\r\n     * For example, a join may be defined as:\r\n     *\r\n     * ```js\r\n     * // Use of a model\r\n     * let RelationshipField = new NGN.DATA.Relationship({\r\n     *   record: new NGN.DATA.Model(...)\r\n     * })\r\n     *\r\n     * // Use of a model collection\r\n     * let RelationshipField = new NGN.DATA.Relationship({\r\n     *   record: [new NGN.DATA.Model(...)]\r\n     * })\r\n     *\r\n     * // Use of a store\r\n     * let RelationshipField = new NGN.DATA.Relationship({\r\n     *   record: new NGN.DATA.Store(...)\r\n     * })\r\n     * ```\r\n     *\r\n     * A store and a model collection are both a group of models,\r\n     * Internally, model collections are converted to data stores.\r\n     *\r\n     * By supporting all three formats, it is possible to create complex\r\n     * data models, such as:\r\n     *\r\n     * ```js\r\n     * let Pet = new NGN.DATA.Model(...)\r\n     * let Kid = new NGN.DATA.Model(...)\r\n     * let Kids = new NGN.DATA.Store({\r\n     *   model: Kid\r\n     * })\r\n     *\r\n     * let Person = new NGN.DATA.Model({\r\n     *   fields: {\r\n     *     dateOfBirth: Date,\r\n     *     spouse: Person,  // <== Join a Model\r\n     *     kids: Kids,      // <== Join a Store\r\n     *     pets: [Pet]      // <== Join a Collection\r\n     *   }\r\n     * })\r\n     * ```\r\n     *\r\n     * The `pets` field contains a \"collection\". This shorthand notation is used\r\n     * to help understand real data relationships. In this case, it is easy to\r\n     * infer that a person may have zero or more pets.\r\n     */\r\n    this.value = NGN.coalesce(cfg.join)\r\n    this.METADATA.AUDITABLE = false\r\n    this.auditable = NGN.coalesce(cfg.audit, false)\r\n  }\r\n\r\n  /**\r\n   * @property {string} manner\r\n   * The manner of relationship. This can be one of 3 values: `store`\r\n   * (NGN.DATA.Store), `model` (NGN.DATA.Model), or `collection`. A collection\r\n   * is a special configuration shortcut used to represent a new store of models.\r\n   * ```math\r\n   * E = mc^2\r\n   * ```\r\n   * ```graph\r\n   * graph LR\r\n   * a-->b\r\n   * ```\r\n   * For example, a model may be defined as:\r\n   *\r\n   * ```js\r\n   * let Pet = new NGN.DATA.Model({\r\n   *   fields: {\r\n   *     name: String,\r\n   *     animalType: String\r\n   *   }\r\n   * })\r\n   *\r\n   * let Person = new NGN.DATA.Model({\r\n   *   fields: {\r\n   *     dateOfBirth: Date\r\n   *   },\r\n   *   relationships: {\r\n   *     pets: [Pet]        // <== Collection\r\n   *   }\r\n   * })\r\n   * ```\r\n   */\r\n  get manner () {\r\n    return NGN.coalesce(this.METADATA.manner, 'unknown')\r\n  }\r\n\r\n  get value () {\r\n    return this.METADATA.join\r\n  }\r\n\r\n  // Override the default value setter\r\n  set value (value) {\r\n    // Short-circuit if the value hasn't changed.\r\n    let currentValue = this.METADATA.join\r\n\r\n    if (currentValue === value) {\r\n      return\r\n    }\r\n\r\n    let type = NGN.typeof(value)\r\n\r\n    if (type === 'array') {\r\n      if (value.length !== 1) {\r\n        throw new Error(`${this.METADATA.name} cannot refer to an empty data store/model collection. A record must be provided.`)\r\n      }\r\n\r\n      this.METADATA.manner = 'store'\r\n      value = new NGN.DATA.Store({\r\n        model: value[0]\r\n      })\r\n    } else if (['model', 'store'].indexOf(type) >= 0) {\r\n      this.METADATA.manner = type\r\n    } else {\r\n      NGN.ERROR(`The \"${this.METADATA.name}\" relationship has an invalid record type. Only instances of NGN.DATA.Store, NGN.DATA.Model, or [NGN.DATA.Model] are supported.\" .`)\r\n      throw new InvalidConfigurationError(`Invalid record configuration for \"${this.METADATA.name}\" field.`)\r\n    }\r\n\r\n    if (this.manner === 'unknown') {\r\n      throw new Error('Cannot set a relationship field to anything other than an NGN.DATA.Store, NGN.DATA.Model, or an array of NGN.DATA.Model collections. (Unknown manner of relationship)')\r\n    }\r\n\r\n    this.METADATA.join = type === 'model' ? new value() : value // eslint-disable-line new-cap\r\n    this.auditable = this.METADATA.AUDITABLE\r\n    this.METADATA.applyMonitor()\r\n\r\n    // Notify listeners of change\r\n    if (typeof currentValue !== 'symbol') {\r\n      this.emit('update', {\r\n        old: currentValue,\r\n        new: value\r\n      })\r\n    }\r\n  }\r\n\r\n  set auditable (value) {\r\n    value = NGN.forceBoolean(value)\r\n\r\n    if (value !== this.METADATA.AUDITABLE) {\r\n      this.METADATA.AUDITABLE = value\r\n      this.METADATA.join.auditable = value\r\n    }\r\n  }\r\n\r\n  // Override the default undo\r\n  undo () {\r\n    if (this.METADATA.manner === 'model') {\r\n      this.METADATA.join.undo(...arguments)\r\n    }\r\n  }\r\n\r\n  redo () {\r\n    if (this.METADATA.manner === 'model') {\r\n      this.METADATA.join.redo(...arguments)\r\n    }\r\n  }\r\n}",
      "tags": {},
      "exceptions": {},
      "events": {},
      "start": {
        "line": 52,
        "column": 15
      },
      "end": {
        "line": 333,
        "column": 1
      },
      "flags": [],
      "authors": [],
      "sourcefile": "./\\data\\field\\Relationship.js",
      "extends": "DataField",
      "configuration": {
        "join": {
          "type": "property",
          "label": "join",
          "description": "{NGN.DATA.Store|NGN.DATA.Model[]}\nA relationship to another model/store is defined by a join.\nThe join may be a data store or data model. It is also possible\nto specify a collection.\n\nFor example, a join may be defined as:\n\n```js\n// Use of a model\nlet RelationshipField = new NGN.DATA.Relationship({\nrecord: new NGN.DATA.Model\n})\n\n// Use of a model collection\nlet RelationshipField = new NGN.DATA.Relationship({\nrecord: [new NGN.DATA.Model(...)]\n})\n\n// Use of a store\nlet RelationshipField = new NGN.DATA.Relationship({\nrecord: new NGN.DATA.Store(...)\n})\n```\n\nA store and a model collection are both a group of models,\nInternally, model collections are converted to data stores.\n\nBy supporting all three formats, it is possible to create complex\ndata models, such as:\n\n```js\nlet Pet = new NGN.DATA.Model(...)\nlet Kid = new NGN.DATA.Model(...)\nlet Kids = new NGN.DATA.Store({\nmodel: Kid\n})\n\nlet Person = new NGN.DATA.Model({\nfields: {\ndateOfBirth: Date,\nspouse: Person,  // <== Join a Model\nkids: Kids,      // <== Join a Store\npets: [Pet]      // <== Join a Collection\n}\n})\n```\n\nThe `pets` field contains a \"collection\". This shorthand notation is used\nto help understand real data relationships. In this case, it is easy to\ninfer that a person may have zero or more pets.",
          "code": "this.value = NGN.coalesce(cfg.join)",
          "start": {
            "line": 223,
            "column": 9
          },
          "end": {
            "line": 223,
            "column": 14
          },
          "flags": [],
          "authors": [],
          "default": null,
          "datatype": "any",
          "readable": false,
          "writable": false,
          "configuration": true,
          "private": false
        }
      },
      "properties": {
        "identifier": {
          "type": "property",
          "label": "identifier",
          "description": null,
          "code": "cfg.identifier = false",
          "start": {
            "line": 72,
            "column": 8
          },
          "end": {
            "line": 72,
            "column": 18
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "fieldType": {
          "type": "property",
          "label": "fieldType",
          "description": null,
          "code": "this.METADATA.fieldType = 'join'",
          "start": {
            "line": 75,
            "column": 18
          },
          "end": {
            "line": 75,
            "column": 27
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "applyMonitor": {
          "type": "property",
          "label": "applyMonitor",
          "description": null,
          "code": "this.METADATA.applyMonitor = () => {\r\n      if (this.METADATA.manner === 'model') {\r\n        // Model Event Relay\r\n        this.METADATA.join.pool('field.', {\r\n          create: this.METADATA.commonModelEventHandler('field.create'),\r\n          update: this.METADATA.commonModelEventHandler('field.update'),\r\n          remove: this.METADATA.commonModelEventHandler('field.remove'),\r\n          invalid: (data) => {\r\n            this.emit(['invalid', `invalid.${this.METADATA.name}.${data.field}`])\r\n          },\r\n          valid: (data) => {\r\n            this.emit(['valid', `valid.${this.METADATA.name}.${data.field}`])\r\n          }\r\n        })\r\n      //   this.METADATA.join.pool('field.', {\r\n      //     create: this.METADATA.commonModelEventHandler('field.create'),\r\n      //     update: this.METADATA.commonModelEventHandler('field.update'),\r\n      //     remove: this.METADATA.commonModelEventHandler('field.remove'),\r\n      //     invalid: (data) => {\r\n      //       this.emit(['invalid', `invalid.${this.name}.${data.field}`])\r\n      //     },\r\n      //     valid: (data) => {\r\n      //       this.emit(['valid', `valid.${this.name}.${data.field}`])\r\n      //     }\r\n      //   })\r\n      // } else {\r\n      //   // Store Event Relay\r\n      //   this.METADATA.join.pool('record.', {\r\n      //     create: this.METADATA.commonStoreEventHandler('record.create'),\r\n      //     update: this.METADATA.commonStoreEventHandler('record.update'),\r\n      //     remove: this.METADATA.commonStoreEventHandler('record.remove'),\r\n      //     invalid: (data) => {\r\n      //       this.emit('invalid', `invalid.${this.name}.${data.field}`)\r\n      //     },\r\n      //     valid: (data) => {\r\n      //       this.emit('valid', `valid.${this.name}.${data.field}`)\r\n      //     }\r\n      //   })\r\n      }\r\n    }",
          "start": {
            "line": 79,
            "column": 18
          },
          "end": {
            "line": 79,
            "column": 30
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "commonModelEventHandler": {
          "type": "property",
          "label": "commonModelEventHandler",
          "description": null,
          "code": "this.METADATA.commonModelEventHandler = (type) => {\r\n      const me = this\r\n\r\n      return function (change) {\r\n        me.METADATA.commitPayload({\r\n          field: `${me.name}.${change.field}`,\r\n          old: NGN.coalesce(change.old),\r\n          new: NGN.coalesce(change.new),\r\n          join: true,\r\n          originalEvent: {\r\n            event: this.event,\r\n            record: me.METADATA.record\r\n          }\r\n        })\r\n      }\r\n    }",
          "start": {
            "line": 121,
            "column": 18
          },
          "end": {
            "line": 121,
            "column": 41
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "commonStoreEventHandler": {
          "type": "property",
          "label": "commonStoreEventHandler",
          "description": null,
          "code": "this.METADATA.commonStoreEventHandler = (type) => {\r\n      const me = this\r\n\r\n      return function (record, change) {\r\n        let old = change ? NGN.coalesce(change.old) : me.data\r\n\r\n        if (this.event === 'record.create') {\r\n          old.pop()\r\n        } else if (this.event === 'record.delete') {\r\n          old.push(record.data)\r\n        }\r\n\r\n        me.METADATA.commitPayload({\r\n          field: me.name + (change ? `.${change.field}` : ''),\r\n          old: change ? NGN.coalesce(change.old) : old,\r\n          new: change ? NGN.coalesce(change.new) : me.data,\r\n          join: true,\r\n          originalEvent: {\r\n            event: this.event,\r\n            record: record\r\n          }\r\n        })\r\n      }\r\n    }",
          "start": {
            "line": 139,
            "column": 18
          },
          "end": {
            "line": 139,
            "column": 41
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "AUDITABLE": {
          "type": "property",
          "label": "AUDITABLE",
          "description": null,
          "code": "this.METADATA.AUDITABLE = false",
          "start": {
            "line": 224,
            "column": 18
          },
          "end": {
            "line": 224,
            "column": 27
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "auditable": {
          "type": "property",
          "label": "auditable",
          "description": null,
          "code": "set auditable (value) {\r\n    value = NGN.forceBoolean(value)\r\n\r\n    if (value !== this.METADATA.AUDITABLE) {\r\n      this.METADATA.AUDITABLE = value\r\n      this.METADATA.join.auditable = value\r\n    }\r\n  }",
          "start": {
            "line": 312,
            "column": 2
          },
          "end": {
            "line": 319,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": false,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "manner": {
          "type": "property",
          "label": "manner",
          "description": null,
          "code": "get manner () {\r\n    return NGN.coalesce(this.METADATA.manner, 'unknown')\r\n  }",
          "start": {
            "line": 260,
            "column": 2
          },
          "end": {
            "line": 262,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "value": {
          "type": "property",
          "label": "value",
          "description": null,
          "code": "set value (value) {\r\n    // Short-circuit if the value hasn't changed.\r\n    let currentValue = this.METADATA.join\r\n\r\n    if (currentValue === value) {\r\n      return\r\n    }\r\n\r\n    let type = NGN.typeof(value)\r\n\r\n    if (type === 'array') {\r\n      if (value.length !== 1) {\r\n        throw new Error(`${this.METADATA.name} cannot refer to an empty data store/model collection. A record must be provided.`)\r\n      }\r\n\r\n      this.METADATA.manner = 'store'\r\n      value = new NGN.DATA.Store({\r\n        model: value[0]\r\n      })\r\n    } else if (['model', 'store'].indexOf(type) >= 0) {\r\n      this.METADATA.manner = type\r\n    } else {\r\n      NGN.ERROR(`The \"${this.METADATA.name}\" relationship has an invalid record type. Only instances of NGN.DATA.Store, NGN.DATA.Model, or [NGN.DATA.Model] are supported.\" .`)\r\n      throw new InvalidConfigurationError(`Invalid record configuration for \"${this.METADATA.name}\" field.`)\r\n    }\r\n\r\n    if (this.manner === 'unknown') {\r\n      throw new Error('Cannot set a relationship field to anything other than an NGN.DATA.Store, NGN.DATA.Model, or an array of NGN.DATA.Model collections. (Unknown manner of relationship)')\r\n    }\r\n\r\n    this.METADATA.join = type === 'model' ? new value() : value // eslint-disable-line new-cap\r\n    this.auditable = this.METADATA.AUDITABLE\r\n    this.METADATA.applyMonitor()\r\n\r\n    // Notify listeners of change\r\n    if (typeof currentValue !== 'symbol') {\r\n      this.emit('update', {\r\n        old: currentValue,\r\n        new: value\r\n      })\r\n    }\r\n  }",
          "start": {
            "line": 269,
            "column": 2
          },
          "end": {
            "line": 310,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": false,
          "writable": true,
          "configuration": false,
          "private": false
        }
      },
      "methods": {
        "constructor": {
          "type": "method",
          "label": "constructor",
          "description": null,
          "code": "constructor (cfg = {}) {\r\n    let type = NGN.typeof(cfg.join)\r\n\r\n    // Assure valid configuration\r\n    if (!cfg.join) {\r\n      throw new InvalidConfigurationError('Missing \"join\" configuration property.')\r\n    } else if (\r\n      ['model', 'store'].indexOf(type) < 0 &&\r\n      (\r\n        type !== 'array' ||\r\n        NGN.typeof(cfg.join[0]) !== 'model'\r\n      )\r\n    ) {\r\n      throw new InvalidConfigurationError(`The join specified is not a valid NGN.DATA.Model, NGN.DATA.Store, or collection. It is a ${NGN.typeof(cfg.join)}\"`)\r\n    }\r\n\r\n    // Create optional cardinality validations\r\n\r\n    // Initialize\r\n    cfg.identifier = false\r\n    super(cfg)\r\n\r\n    this.METADATA.fieldType = 'join'\r\n    this.METADATA.join = Symbol('relationship')\r\n\r\n    // Apply event monitoring to the #record.\r\n    this.METADATA.applyMonitor = () => {\r\n      if (this.METADATA.manner === 'model') {\r\n        // Model Event Relay\r\n        this.METADATA.join.pool('field.', {\r\n          create: this.METADATA.commonModelEventHandler('field.create'),\r\n          update: this.METADATA.commonModelEventHandler('field.update'),\r\n          remove: this.METADATA.commonModelEventHandler('field.remove'),\r\n          invalid: (data) => {\r\n            this.emit(['invalid', `invalid.${this.METADATA.name}.${data.field}`])\r\n          },\r\n          valid: (data) => {\r\n            this.emit(['valid', `valid.${this.METADATA.name}.${data.field}`])\r\n          }\r\n        })\r\n      //   this.METADATA.join.pool('field.', {\r\n      //     create: this.METADATA.commonModelEventHandler('field.create'),\r\n      //     update: this.METADATA.commonModelEventHandler('field.update'),\r\n      //     remove: this.METADATA.commonModelEventHandler('field.remove'),\r\n      //     invalid: (data) => {\r\n      //       this.emit(['invalid', `invalid.${this.name}.${data.field}`])\r\n      //     },\r\n      //     valid: (data) => {\r\n      //       this.emit(['valid', `valid.${this.name}.${data.field}`])\r\n      //     }\r\n      //   })\r\n      // } else {\r\n      //   // Store Event Relay\r\n      //   this.METADATA.join.pool('record.', {\r\n      //     create: this.METADATA.commonStoreEventHandler('record.create'),\r\n      //     update: this.METADATA.commonStoreEventHandler('record.update'),\r\n      //     remove: this.METADATA.commonStoreEventHandler('record.remove'),\r\n      //     invalid: (data) => {\r\n      //       this.emit('invalid', `invalid.${this.name}.${data.field}`)\r\n      //     },\r\n      //     valid: (data) => {\r\n      //       this.emit('valid', `valid.${this.name}.${data.field}`)\r\n      //     }\r\n      //   })\r\n      }\r\n    }\r\n\r\n    // Event handling for nested models.\r\n    this.METADATA.commonModelEventHandler = (type) => {\r\n      const me = this\r\n\r\n      return function (change) {\r\n        me.METADATA.commitPayload({\r\n          field: `${me.name}.${change.field}`,\r\n          old: NGN.coalesce(change.old),\r\n          new: NGN.coalesce(change.new),\r\n          join: true,\r\n          originalEvent: {\r\n            event: this.event,\r\n            record: me.METADATA.record\r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n    // Event handling for nested stores.\r\n    this.METADATA.commonStoreEventHandler = (type) => {\r\n      const me = this\r\n\r\n      return function (record, change) {\r\n        let old = change ? NGN.coalesce(change.old) : me.data\r\n\r\n        if (this.event === 'record.create') {\r\n          old.pop()\r\n        } else if (this.event === 'record.delete') {\r\n          old.push(record.data)\r\n        }\r\n\r\n        me.METADATA.commitPayload({\r\n          field: me.name + (change ? `.${change.field}` : ''),\r\n          old: change ? NGN.coalesce(change.old) : old,\r\n          new: change ? NGN.coalesce(change.new) : me.data,\r\n          join: true,\r\n          originalEvent: {\r\n            event: this.event,\r\n            record: record\r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n    // const commitPayload = this.METADATA.commitPayload\r\n    //\r\n    // this.METADATA.commitPayload = (payload) => {\r\n    //   console.log('HERE')\r\n    //   commitPayload(...arguments)\r\n    // }\r\n\r\n    /**\r\n     * @cfg join {NGN.DATA.Store|NGN.DATA.Model[]}\r\n     * A relationship to another model/store is defined by a join.\r\n     * The join may be a data store or data model. It is also possible\r\n     * to specify a collection.\r\n     *\r\n     * For example, a join may be defined as:\r\n     *\r\n     * ```js\r\n     * // Use of a model\r\n     * let RelationshipField = new NGN.DATA.Relationship({\r\n     *   record: new NGN.DATA.Model(...)\r\n     * })\r\n     *\r\n     * // Use of a model collection\r\n     * let RelationshipField = new NGN.DATA.Relationship({\r\n     *   record: [new NGN.DATA.Model(...)]\r\n     * })\r\n     *\r\n     * // Use of a store\r\n     * let RelationshipField = new NGN.DATA.Relationship({\r\n     *   record: new NGN.DATA.Store(...)\r\n     * })\r\n     * ```\r\n     *\r\n     * A store and a model collection are both a group of models,\r\n     * Internally, model collections are converted to data stores.\r\n     *\r\n     * By supporting all three formats, it is possible to create complex\r\n     * data models, such as:\r\n     *\r\n     * ```js\r\n     * let Pet = new NGN.DATA.Model(...)\r\n     * let Kid = new NGN.DATA.Model(...)\r\n     * let Kids = new NGN.DATA.Store({\r\n     *   model: Kid\r\n     * })\r\n     *\r\n     * let Person = new NGN.DATA.Model({\r\n     *   fields: {\r\n     *     dateOfBirth: Date,\r\n     *     spouse: Person,  // <== Join a Model\r\n     *     kids: Kids,      // <== Join a Store\r\n     *     pets: [Pet]      // <== Join a Collection\r\n     *   }\r\n     * })\r\n     * ```\r\n     *\r\n     * The `pets` field contains a \"collection\". This shorthand notation is used\r\n     * to help understand real data relationships. In this case, it is easy to\r\n     * infer that a person may have zero or more pets.\r\n     */\r\n    this.value = NGN.coalesce(cfg.join)\r\n    this.METADATA.AUDITABLE = false\r\n    this.auditable = NGN.coalesce(cfg.audit, false)\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 53,
            "column": 2
          },
          "end": {
            "line": 226,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "cfg": {
              "type": "argument",
              "label": "cfg",
              "description": null,
              "code": "cfg = {}",
              "start": {
                "line": 53,
                "column": 15
              },
              "end": {
                "line": 53,
                "column": 23
              },
              "flags": [],
              "authors": [],
              "default": "{}",
              "datatype": "object",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "constructor",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "undo": {
          "type": "method",
          "label": "undo",
          "description": null,
          "code": "undo () {\r\n    if (this.METADATA.manner === 'model') {\r\n      this.METADATA.join.undo(...arguments)\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 322,
            "column": 2
          },
          "end": {
            "line": 326,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "redo": {
          "type": "method",
          "label": "redo",
          "description": null,
          "code": "redo () {\r\n    if (this.METADATA.manner === 'model') {\r\n      this.METADATA.join.redo(...arguments)\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 328,
            "column": 2
          },
          "end": {
            "line": 332,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        }
      }
    },
    "NGN.DATA.VirtualField": {
      "type": "class",
      "label": "NGN.DATA.VirtualField",
      "description": "This will always return the value of the virtual field, but it may only\r\n  be _set_ to a synchronous function that returns a value.",
      "code": "class NGNVirtualDataField extends DataField { // eslint-disable-line\r\n  constructor (cfg) {\r\n    cfg = cfg || {}\r\n\r\n    if (!(cfg.model instanceof NGN.DATA.Entity)) {\r\n      NGN.WARN('No model specified for the virtual field to reference.')\r\n    }\r\n\r\n    // Remove unnecessary config values\r\n    delete cfg.required\r\n    delete cfg.default\r\n    delete cfg.min\r\n    delete cfg.minimum\r\n    delete cfg.max\r\n    delete cfg.maximum\r\n    delete cfg.range\r\n    delete cfg.rule\r\n    delete cfg.rules\r\n    delete cfg.validators\r\n    delete cfg.pattern\r\n\r\n    super(cfg)\r\n\r\n    this.METADATA.AUDITABLE = false\r\n    this.METADATA.fieldType = 'virtual'\r\n\r\n    /**\r\n     * @cfg {boolean} [cache=true]\r\n     * By default, virtual fields _associated with a model_ will cache results\r\n     * to prevent unnecessary function calls. The cache is cleared whenever a\r\n     * local data field is modified.\r\n     *\r\n     * Caching can substantially reduce processing time in large data sets\r\n     * by calling methods less often. In most use cases, it will provide a\r\n     * substantial performance gain. However; since virtual fields can also\r\n     * leverage variables and methods that are not a part of the data model,\r\n     * caching may prevent the value from updating as expected. While this case\r\n     * may occur less often, it can occur. If you suspect caching is interfering\r\n     * with a virtual field value, it can be disabled by setting this to `false`.\r\n     */\r\n    this.METADATA.caching = NGN.coalesce(cfg.cache, true)\r\n\r\n    /**\r\n     * @cfg {NGN.DATA.Model|NGN.DATA.Store|Object} scope\r\n     * The model, store, or object that will be referenceable within the\r\n     * virtual field #method. The model will be available in the `this` scope.\r\n     */\r\n    this.METADATA.scope = NGN.coalesce(cfg.scope, cfg.model, this)\r\n\r\n    /**\r\n     * @cfg {Function} method\r\n     * The method used to generate a value.\r\n     * This is an asynchronous method the returns a value (of any type).\r\n     */\r\n    const me = this\r\n    const handlerFn = cfg.method\r\n\r\n    this.METADATA.virtualMethod = function () {\r\n      return handlerFn.apply(me.METADATA.scope, ...arguments)\r\n    }\r\n\r\n    // Add smart-cache support\r\n    this.METADATA.CACHEKEY = Symbol('no.cache')\r\n    this.METADATA.cachedValue = this.METADATA.CACHEKEY\r\n\r\n    // Only add caching support if a model is associated\r\n    if (this.METADATA.caching && this.model) {\r\n      // Create a method for identifying which local data fields\r\n      // need to be monitored (for caching)\r\n      const localFieldPattern = /this(\\.(.[^\\W]+)|\\[['\"]{1}(.*)+['\"]{1}\\])/g\r\n\r\n      // Returns a Set of fieldnames used in the virtual function.\r\n      let monitoredFields = new Set()\r\n      let content = handlerFn.toString()\r\n      let iterator = localFieldPattern.exec(content)\r\n\r\n      while (iterator !== null) {\r\n        let field = NGN.coalesce(iterator[2], iterator[3])\r\n\r\n        if (this.model.METADATA.knownFieldNames.has(field)) {\r\n          monitoredFields.add(field)\r\n        }\r\n\r\n        content = content.replace(localFieldPattern, '')\r\n        iterator = localFieldPattern.exec(content)\r\n      }\r\n\r\n      this.METADATA.model.pool('field.', {\r\n        update: (change) => {\r\n          if (change.field && monitoredFields.has(change.field.name)) {\r\n            this.METADATA.cachedValue = this.METADATA.CACHEKEY\r\n            this.emit('cache.clear', this)\r\n          }\r\n        },\r\n\r\n        remove: (field) => {\r\n          if (monitoredFields.has(field.name)) {\r\n            this.METADATA.cachedValue = this.METADATA.CACHEKEY\r\n            this.emit('cache.clear', this)\r\n            NGN.ERROR(`The ${this.name} virtual field uses the ${field.name} field, which was removed. This virtual field may no longer work.`)\r\n          }\r\n        },\r\n\r\n        create: (field) => {\r\n          if (monitoredFields.has(field.name)) {\r\n            this.METADATA.cachedValue = this.METADATA.CACHEKEY\r\n            this.emit('cache.clear', this)\r\n            NGN.INFO(`The ${this.name} virtual field uses the ${field.name} field, which was added.`)\r\n          }\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  get auditable () {\r\n    NGN.WARN('Virtual fields do not support the auditable property.')\r\n    return false\r\n  }\r\n\r\n  set auditable (value) {\r\n    NGN.WARN('Virtual fields do not support the auditable property.')\r\n  }\r\n\r\n  /**\r\n   * @property {any} value\r\n   * This will always return the value of the virtual field, but it may only\r\n   * be _set_ to a synchronous function that returns a value.\r\n   */\r\n  get value () {\r\n    if (this.METADATA.caching) {\r\n      if (this.METADATA.cachedValue !== this.METADATA.CACHEKEY) {\r\n        return this.METADATA.cachedValue\r\n      } else {\r\n        this.METADATA.cachedValue = this.METADATA.virtualMethod()\r\n        return this.METADATA.cachedValue\r\n      }\r\n    }\r\n\r\n    return this.METADATA.virtualMethod()\r\n  }\r\n\r\n  set value (value) {\r\n    NGN.WARN('Cannot set the value of a virtual field (read only).')\r\n  }\r\n\r\n  get required () {\r\n    NGN.WARN('Virtual fields do not support the required property.')\r\n    return false\r\n  }\r\n\r\n  set required (value) {\r\n    NGN.WARN('Virtual fields do not support the required property.')\r\n  }\r\n\r\n  get isNew () {\r\n    NGN.WARN('Virtual fields do not support the isNew property.')\r\n    return false\r\n  }\r\n\r\n  get default () {\r\n    NGN.WARN('Virtual fields do not have default values.')\r\n    return undefined\r\n  }\r\n\r\n  set default (value) {\r\n    NGN.WARN('Virtual fields do not have default values.')\r\n    return undefined\r\n  }\r\n\r\n  get violatedRule () {\r\n    return 'None'\r\n  }\r\n\r\n  get valid () {\r\n    NGN.WARN('Virtual fields are always valid.')\r\n    return true\r\n  }\r\n\r\n  get modified () {\r\n    NGN.WARN('modified attribute does nothing on virtual fields.')\r\n    return false\r\n  }\r\n\r\n  allowInvalid () {\r\n    NGN.WARN('allowInvalid() unavailable for virtual fields.')\r\n  }\r\n\r\n  disallowInvalid () {\r\n    NGN.WARN('disallowInvalid() unavailable for virtual fields.')\r\n  }\r\n\r\n  autocorrectInput () {\r\n    NGN.WARN('autocorrectInput() unavailable for virtual fields.')\r\n  }\r\n}",
      "tags": {},
      "exceptions": {},
      "events": {
        "cache.clear": {
          "type": "event",
          "label": "cache.clear",
          "description": null,
          "code": "this.emit('cache.clear', this)",
          "start": {
            "line": 148,
            "column": 12
          },
          "end": {
            "line": 148,
            "column": 42
          },
          "flags": [],
          "authors": [],
          "parameters": {
            "payload1": {
              "type": "argument",
              "label": "payload1",
              "description": null,
              "code": "this",
              "start": {
                "line": 148,
                "column": 37
              },
              "end": {
                "line": 148,
                "column": 41
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "deprecated": false,
          "deprecationReplacement": null
        }
      },
      "start": {
        "line": 42,
        "column": 15
      },
      "end": {
        "line": 236,
        "column": 1
      },
      "flags": [],
      "authors": [],
      "sourcefile": "./\\data\\field\\VirtualField.js",
      "extends": "DataField",
      "configuration": {
        "cache": {
          "type": "property",
          "label": "cache",
          "description": "By default, virtual fields _associated with a model_ will cache results\nto prevent unnecessary function calls. The cache is cleared whenever a\nlocal data field is modified.\n\nCaching can substantially reduce processing time in large data sets\nby calling methods less often. In most use cases, it will provide a\nsubstantial performance gain. However; since virtual fields can also\nleverage variables and methods that are not a part of the data model,\ncaching may prevent the value from updating as expected. While this case\nmay occur less often, it can occur. If you suspect caching is interfering\nwith a virtual field value, it can be disabled by setting this to `false`.",
          "code": "this.METADATA.caching = NGN.coalesce(cfg.cache, true)",
          "start": {
            "line": 82,
            "column": 18
          },
          "end": {
            "line": 82,
            "column": 25
          },
          "flags": [],
          "authors": [],
          "default": "true",
          "datatype": "boolean",
          "readable": false,
          "writable": false,
          "configuration": true,
          "private": false
        },
        "scope": {
          "type": "property",
          "label": "scope",
          "description": "The model, store, or object that will be referenceable within the\nvirtual field #method. The model will be available in the `this` scope.",
          "code": "this.METADATA.scope = NGN.coalesce(cfg.scope, cfg.model, this)",
          "start": {
            "line": 89,
            "column": 18
          },
          "end": {
            "line": 89,
            "column": 23
          },
          "flags": [],
          "authors": [],
          "default": null,
          "datatype": "ngn.data.model|ngn.data.store|object",
          "readable": false,
          "writable": false,
          "configuration": true,
          "private": false
        }
      },
      "properties": {
        "AUDITABLE": {
          "type": "property",
          "label": "AUDITABLE",
          "description": null,
          "code": "this.METADATA.AUDITABLE = false",
          "start": {
            "line": 65,
            "column": 18
          },
          "end": {
            "line": 65,
            "column": 27
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "fieldType": {
          "type": "property",
          "label": "fieldType",
          "description": null,
          "code": "this.METADATA.fieldType = 'virtual'",
          "start": {
            "line": 66,
            "column": 18
          },
          "end": {
            "line": 66,
            "column": 27
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "virtualMethod": {
          "type": "property",
          "label": "virtualMethod",
          "description": null,
          "code": "this.METADATA.virtualMethod = function () {\r\n      return handlerFn.apply(me.METADATA.scope, ...arguments)\r\n    }",
          "start": {
            "line": 99,
            "column": 18
          },
          "end": {
            "line": 99,
            "column": 31
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "CACHEKEY": {
          "type": "property",
          "label": "CACHEKEY",
          "description": null,
          "code": "this.METADATA.CACHEKEY = Symbol('no.cache')",
          "start": {
            "line": 104,
            "column": 18
          },
          "end": {
            "line": 104,
            "column": 26
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "cachedValue": {
          "type": "property",
          "label": "cachedValue",
          "description": null,
          "code": "this.METADATA.cachedValue = this.METADATA.CACHEKEY",
          "start": {
            "line": 105,
            "column": 18
          },
          "end": {
            "line": 105,
            "column": 29
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "auditable": {
          "type": "property",
          "label": "auditable",
          "description": null,
          "code": "set auditable (value) {\r\n    NGN.WARN('Virtual fields do not support the auditable property.')\r\n  }",
          "start": {
            "line": 161,
            "column": 2
          },
          "end": {
            "line": 163,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": false,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "value": {
          "type": "property",
          "label": "value",
          "description": null,
          "code": "set value (value) {\r\n    NGN.WARN('Cannot set the value of a virtual field (read only).')\r\n  }",
          "start": {
            "line": 183,
            "column": 2
          },
          "end": {
            "line": 185,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": false,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "required": {
          "type": "property",
          "label": "required",
          "description": null,
          "code": "set required (value) {\r\n    NGN.WARN('Virtual fields do not support the required property.')\r\n  }",
          "start": {
            "line": 192,
            "column": 2
          },
          "end": {
            "line": 194,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": false,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "isNew": {
          "type": "property",
          "label": "isNew",
          "description": null,
          "code": "get isNew () {\r\n    NGN.WARN('Virtual fields do not support the isNew property.')\r\n    return false\r\n  }",
          "start": {
            "line": 196,
            "column": 2
          },
          "end": {
            "line": 199,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "boolean",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "default": {
          "type": "property",
          "label": "default",
          "description": null,
          "code": "set default (value) {\r\n    NGN.WARN('Virtual fields do not have default values.')\r\n    return undefined\r\n  }",
          "start": {
            "line": 206,
            "column": 2
          },
          "end": {
            "line": 209,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": false,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "violatedRule": {
          "type": "property",
          "label": "violatedRule",
          "description": null,
          "code": "get violatedRule () {\r\n    return 'None'\r\n  }",
          "start": {
            "line": 211,
            "column": 2
          },
          "end": {
            "line": 213,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "string",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "valid": {
          "type": "property",
          "label": "valid",
          "description": null,
          "code": "get valid () {\r\n    NGN.WARN('Virtual fields are always valid.')\r\n    return true\r\n  }",
          "start": {
            "line": 215,
            "column": 2
          },
          "end": {
            "line": 218,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "boolean",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "modified": {
          "type": "property",
          "label": "modified",
          "description": null,
          "code": "get modified () {\r\n    NGN.WARN('modified attribute does nothing on virtual fields.')\r\n    return false\r\n  }",
          "start": {
            "line": 220,
            "column": 2
          },
          "end": {
            "line": 223,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "boolean",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        }
      },
      "methods": {
        "constructor": {
          "type": "method",
          "label": "constructor",
          "description": null,
          "code": "constructor (cfg) {\r\n    cfg = cfg || {}\r\n\r\n    if (!(cfg.model instanceof NGN.DATA.Entity)) {\r\n      NGN.WARN('No model specified for the virtual field to reference.')\r\n    }\r\n\r\n    // Remove unnecessary config values\r\n    delete cfg.required\r\n    delete cfg.default\r\n    delete cfg.min\r\n    delete cfg.minimum\r\n    delete cfg.max\r\n    delete cfg.maximum\r\n    delete cfg.range\r\n    delete cfg.rule\r\n    delete cfg.rules\r\n    delete cfg.validators\r\n    delete cfg.pattern\r\n\r\n    super(cfg)\r\n\r\n    this.METADATA.AUDITABLE = false\r\n    this.METADATA.fieldType = 'virtual'\r\n\r\n    /**\r\n     * @cfg {boolean} [cache=true]\r\n     * By default, virtual fields _associated with a model_ will cache results\r\n     * to prevent unnecessary function calls. The cache is cleared whenever a\r\n     * local data field is modified.\r\n     *\r\n     * Caching can substantially reduce processing time in large data sets\r\n     * by calling methods less often. In most use cases, it will provide a\r\n     * substantial performance gain. However; since virtual fields can also\r\n     * leverage variables and methods that are not a part of the data model,\r\n     * caching may prevent the value from updating as expected. While this case\r\n     * may occur less often, it can occur. If you suspect caching is interfering\r\n     * with a virtual field value, it can be disabled by setting this to `false`.\r\n     */\r\n    this.METADATA.caching = NGN.coalesce(cfg.cache, true)\r\n\r\n    /**\r\n     * @cfg {NGN.DATA.Model|NGN.DATA.Store|Object} scope\r\n     * The model, store, or object that will be referenceable within the\r\n     * virtual field #method. The model will be available in the `this` scope.\r\n     */\r\n    this.METADATA.scope = NGN.coalesce(cfg.scope, cfg.model, this)\r\n\r\n    /**\r\n     * @cfg {Function} method\r\n     * The method used to generate a value.\r\n     * This is an asynchronous method the returns a value (of any type).\r\n     */\r\n    const me = this\r\n    const handlerFn = cfg.method\r\n\r\n    this.METADATA.virtualMethod = function () {\r\n      return handlerFn.apply(me.METADATA.scope, ...arguments)\r\n    }\r\n\r\n    // Add smart-cache support\r\n    this.METADATA.CACHEKEY = Symbol('no.cache')\r\n    this.METADATA.cachedValue = this.METADATA.CACHEKEY\r\n\r\n    // Only add caching support if a model is associated\r\n    if (this.METADATA.caching && this.model) {\r\n      // Create a method for identifying which local data fields\r\n      // need to be monitored (for caching)\r\n      const localFieldPattern = /this(\\.(.[^\\W]+)|\\[['\"]{1}(.*)+['\"]{1}\\])/g\r\n\r\n      // Returns a Set of fieldnames used in the virtual function.\r\n      let monitoredFields = new Set()\r\n      let content = handlerFn.toString()\r\n      let iterator = localFieldPattern.exec(content)\r\n\r\n      while (iterator !== null) {\r\n        let field = NGN.coalesce(iterator[2], iterator[3])\r\n\r\n        if (this.model.METADATA.knownFieldNames.has(field)) {\r\n          monitoredFields.add(field)\r\n        }\r\n\r\n        content = content.replace(localFieldPattern, '')\r\n        iterator = localFieldPattern.exec(content)\r\n      }\r\n\r\n      this.METADATA.model.pool('field.', {\r\n        update: (change) => {\r\n          if (change.field && monitoredFields.has(change.field.name)) {\r\n            this.METADATA.cachedValue = this.METADATA.CACHEKEY\r\n            this.emit('cache.clear', this)\r\n          }\r\n        },\r\n\r\n        remove: (field) => {\r\n          if (monitoredFields.has(field.name)) {\r\n            this.METADATA.cachedValue = this.METADATA.CACHEKEY\r\n            this.emit('cache.clear', this)\r\n            NGN.ERROR(`The ${this.name} virtual field uses the ${field.name} field, which was removed. This virtual field may no longer work.`)\r\n          }\r\n        },\r\n\r\n        create: (field) => {\r\n          if (monitoredFields.has(field.name)) {\r\n            this.METADATA.cachedValue = this.METADATA.CACHEKEY\r\n            this.emit('cache.clear', this)\r\n            NGN.INFO(`The ${this.name} virtual field uses the ${field.name} field, which was added.`)\r\n          }\r\n        }\r\n      })\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 43,
            "column": 2
          },
          "end": {
            "line": 154,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "cfg": {
              "type": "argument",
              "label": "cfg",
              "description": null,
              "code": "cfg",
              "start": {
                "line": 43,
                "column": 15
              },
              "end": {
                "line": 43,
                "column": 18
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "constructor",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "allowInvalid": {
          "type": "method",
          "label": "allowInvalid",
          "description": null,
          "code": "allowInvalid () {\r\n    NGN.WARN('allowInvalid() unavailable for virtual fields.')\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 225,
            "column": 2
          },
          "end": {
            "line": 227,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "disallowInvalid": {
          "type": "method",
          "label": "disallowInvalid",
          "description": null,
          "code": "disallowInvalid () {\r\n    NGN.WARN('disallowInvalid() unavailable for virtual fields.')\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 229,
            "column": 2
          },
          "end": {
            "line": 231,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "autocorrectInput": {
          "type": "method",
          "label": "autocorrectInput",
          "description": null,
          "code": "autocorrectInput () {\r\n    NGN.WARN('autocorrectInput() unavailable for virtual fields.')\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 233,
            "column": 2
          },
          "end": {
            "line": 235,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        }
      }
    },
    "TreeNode": {
      "type": "class",
      "label": "TreeNode",
      "description": "Inspired by btree.js (c) 2013 Daniel Wirtz <dcode\r\nReleased under the Apache License, Version 2.0\r\nsee: http://github.com/dcodeIO/btree.js for details.\r\n\nConverted to ECMASCript 2016 class syntax & modified to use\r\nNGN conventions. Separated code into multiple classes.\r\nCopyright (c) 2018, Ecor Ventures LLC.",
      "code": "class TreeNode {\r\n  constructor (parent = null, leafs = [], nodes = [null]) {\r\n    Object.defineProperties(this, {\r\n      parent: NGN.private(parent),\r\n      leafs: NGN.private(leafs),\r\n      nodes: NGN.private(nodes),\r\n\r\n      METADATA: NGN.private({\r\n        order: null,\r\n        minOrder: null,\r\n\r\n        /**\r\n        * Compare two numbers\r\n        * @param  {number} firstNumber\r\n        * @param  {number} secondNumber\r\n        * @return {number}\r\n        * - Returns `-1` if first number is less than second.\r\n        * - Returns `0` if numbers are equal.\r\n        * - Returns `1` if first number is greater than second.\r\n        */\r\n        compare: (firstNumber, secondNumber) => {\r\n          return firstNumber < secondNumber ? -1 : (firstNumber > secondNumber ? 1 : 0)\r\n        }\r\n      })\r\n    })\r\n\r\n    // Associate leafs with parent\r\n    for (let i = 0; i < this.leafs.length; i++) {\r\n      this.leafs[i].parent = this\r\n      // Object.defineProperty(this.leafs[i], 'parent', NGN.get(() => this))\r\n    }\r\n\r\n    // Associate nodes with parent\r\n    for (let i = 0; i < this.nodes.length; i++) {\r\n      if (this.nodes[i] !== null) {\r\n        this.nodes[i].parent = this\r\n        // Object.defineProperty(this.nodes[i], 'parent', NGN.get(() => this))\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Search for the node that contains the specified key\r\n  * @param  {any} key\r\n  * @return {TreeLeaf|TreeNode}\r\n  */\r\n  search (key) {\r\n    if (this.leafs.length > 0) {\r\n      let a = this.leafs[0]\r\n\r\n      if (this.METADATA.compare(a.key, key) === 0) {\r\n        return {\r\n          leaf: a,\r\n          index: 0\r\n        }\r\n      }\r\n\r\n      if (this.METADATA.compare(key, a.key) < 0) {\r\n        if (this.nodes[0] !== null) {\r\n          return this.nodes[0].search(key) // Left\r\n        }\r\n\r\n        return { node: this, index: 0 }\r\n      }\r\n\r\n      let i\r\n      for (i = 1; i < this.leafs.length; i++) {\r\n        let b = this.leafs[i]\r\n\r\n        if (this.METADATA.compare(b.key, key) === 0) {\r\n          return {\r\n            leaf: b,\r\n            index: i\r\n          }\r\n        }\r\n\r\n        if (this.METADATA.compare(key, b.key) < 0) {\r\n          if (this.nodes[i] !== null) {\r\n            return this.nodes[i].search(key) // Inner\r\n          }\r\n\r\n          return { node: this, index: i }\r\n        }\r\n\r\n        a = b\r\n      }\r\n\r\n      if (this.nodes[i] !== null) {\r\n        return this.nodes[i].search(key) // Right\r\n      }\r\n\r\n      return { node: this, index: i }\r\n    }\r\n\r\n    return { node: this, index: 0 }\r\n  }\r\n\r\n  /**\r\n  * Retrieve the value of a key.\r\n  * @param {number} key\r\n  * @returns {NGNTreeLeaf}\r\n  * Returns `undefined` if no leaf is found.\r\n  */\r\n  get (key) {\r\n    let result = this.search(key)\r\n    return result.leaf ? result.leaf.value : undefined\r\n  }\r\n\r\n  /**\r\n  * Insert a key/value pair into the node.\r\n  * @param {number} key\r\n  * @param {any} value\r\n  * @param {boolean} [overwrite=true]\r\n  * Overwrite existing values.\r\n  */\r\n  put (key, value, overwrite = true) {\r\n    let result = this.search(key)\r\n\r\n    // Key already exists\r\n    if (result.leaf) {\r\n      if (!overwrite) {\r\n        return\r\n      }\r\n\r\n      result.leaf.value = value\r\n      return\r\n    }\r\n\r\n    let node = result.node\r\n    let index = result.index\r\n\r\n    node.leafs.splice(index, 0, new TreeLeaf(node, key, value))\r\n    node.nodes.splice(index + 1, 0, null)\r\n\r\n    if (node.leafs.length > this.METADATA.order) {\r\n      node.split()\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Delete key.\r\n  * @param {number} key\r\n  */\r\n  delete (key) {\r\n    var result = this.search(key)\r\n\r\n    if (!result.leaf) {\r\n      return\r\n    }\r\n\r\n    let leaf = result.leaf\r\n    let node = leaf.parent\r\n    let index = result.index\r\n    let left = node.nodes[index]\r\n\r\n    if (left === null) {\r\n      node.leafs.splice(index, 1)\r\n      node.nodes.splice(index, 1)\r\n      node.balance()\r\n    } else {\r\n      let max = left.leafs[left.leafs.length - 1]\r\n\r\n      left.delete(max.key)\r\n\r\n      max.parent = node\r\n\r\n      node.leafs.splice(index, 1, max)\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  /**\r\n  * Balance the tree.\r\n  * @private\r\n  */\r\n  balance () {\r\n    if (this.parent instanceof Tree) {\r\n      // Root has a single child and no leafs\r\n      if (this.leafs.length === 0 && this.nodes[0] !== null) {\r\n        this.parent.root = this.nodes[0]\r\n        this.parent.root.parent = this.parent\r\n      }\r\n\r\n      return\r\n    }\r\n\r\n    if (this.leafs.length >= this.METADATA.minOrder) {\r\n      return\r\n    }\r\n\r\n    let index = this.parent.nodes.indexOf(this)\r\n    let left = index > 0 ? this.parent.nodes[index - 1] : null\r\n    let right = this.parent.nodes.length > index + 1 ? this.parent.nodes[index + 1] : null\r\n    let sep\r\n    let leaf\r\n    let rest\r\n\r\n    if (right !== null && right.leafs.length > this.METADATA.minOrder) {\r\n      // Append the parent separator\r\n      sep = this.parent.leafs[index]\r\n      sep.parent = this\r\n\r\n      this.leafs.push(sep)\r\n\r\n      // Replace blank with the first right leaf\r\n      leaf = right.leafs.shift()\r\n      leaf.parent = this.parent\r\n\r\n      this.parent.leafs[index] = leaf\r\n\r\n      // Append the right rest\r\n      rest = right.nodes.shift()\r\n\r\n      if (rest !== null) {\r\n        rest.parent = this\r\n      }\r\n\r\n      this.nodes.push(rest)\r\n    } else if (left !== null && left.leafs.length > this.METADATA.minOrder) {\r\n      // Prepend the parent seperator\r\n      sep = this.parent.leafs[index - 1]\r\n      sep.parent = this\r\n\r\n      this.leafs.unshift(sep)\r\n\r\n      // Replace the blank with the last left leaf\r\n      leaf = left.leafs.pop()\r\n      leaf.parent = this.parent\r\n\r\n      this.parent.leafs[index - 1] = leaf\r\n\r\n      // Prepend the left rest to this\r\n      rest = left.nodes.pop()\r\n\r\n      if (rest !== null) {\r\n        rest.parent = this\r\n      }\r\n\r\n      this.nodes.unshift(rest)\r\n    } else {\r\n      let subst\r\n\r\n      if (right !== null) {\r\n        // Combine this + seperator from the parent + right\r\n        sep = this.parent.leafs[index]\r\n        subst = new TreeNode(this.parent, this.leafs.concat([sep], right.leafs), this.nodes.concat(right.nodes))\r\n        subst.METADATA.order = this.METADATA.order\r\n        subst.METADATA.minOrder = this.METADATA.minOrder\r\n\r\n        // Remove the seperator from the parent\r\n        this.parent.leafs.splice(index, 1)\r\n\r\n        // And replace the nodes it seperated with subst\r\n        this.parent.nodes.splice(index, 2, subst)\r\n      } else if (left !== null) {\r\n        // Combine left + seperator from parent + this\r\n        sep = this.parent.leafs[index - 1]\r\n        subst = new TreeNode(\r\n          this.parent,\r\n          left.leafs.concat([sep], this.leafs),\r\n          left.nodes.concat(this.nodes)\r\n        )\r\n\r\n        subst.METADATA.minOrder = this.METADATA.minOrder\r\n        subst.METADATA.order = this.METADATA.order\r\n\r\n        // Remove the seperator from the parent\r\n        this.parent.leafs.splice(index - 1, 1)\r\n\r\n        // Replace seperated nodes with subst\r\n        this.parent.nodes.splice(index - 1, 2, subst)\r\n      } else {\r\n        throw new Error(`Internal error: ${this.toString(true)} has neither a left nor a right sibling`)\r\n      }\r\n\r\n      this.parent.balance()\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Split the node.\r\n  */\r\n  split () {\r\n    let index = Math.floor(this.leafs.length / 2)\r\n\r\n    if (this.parent instanceof Tree) {\r\n      this.nodes = [\r\n        new TreeNode(this, this.leafs.slice(0, index), this.nodes.slice(0, index + 1)),\r\n        new TreeNode(this, this.leafs.slice(index + 1), this.nodes.slice(index + 1))\r\n      ]\r\n\r\n      this.leafs = [this.leafs[index]]\r\n    } else {\r\n      let leaf = this.leafs[index]\r\n      let rest = new TreeNode(\r\n        this.parent,\r\n        this.leafs.slice(index + 1),\r\n        this.nodes.slice(index + 1)\r\n      )\r\n\r\n      this.leafs = this.leafs.slice(0, index)\r\n      this.nodes = this.nodes.slice(0, index + 1)\r\n\r\n      this.parent.unsplit(leaf, rest)\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Unsplits a child.\r\n  * @param {NGNTreeLeaf} leaf\r\n  * @param {NGNTreeNode} rest\r\n  * @param {number} [order=52]\r\n  * @private\r\n  */\r\n  unsplit (leaf, rest) {\r\n    leaf.parent = this\r\n    rest.parent = this\r\n\r\n    let a = this.leafs[0]\r\n\r\n    if (this.METADATA.compare(leaf.key, a.key) < 0) {\r\n      this.leafs.unshift(leaf)\r\n      this.nodes.splice(1, 0, rest)\r\n    } else {\r\n      let i\r\n      for (i = 1; i < this.leafs.length; i++) {\r\n        let b = this.leafs[i]\r\n\r\n        if (this.METADATA.compare(leaf.key, b.key) < 0) {\r\n          this.leafs.splice(i, 0, leaf)\r\n          this.nodes.splice(i + 1, 0, rest)\r\n          break\r\n        }\r\n      }\r\n\r\n      if (i === this.leafs.length) {\r\n        this.leafs.push(leaf)\r\n        this.nodes.push(rest)\r\n      }\r\n    }\r\n\r\n    if (this.leafs.length > this.METADATA.order) {\r\n      this.split()\r\n    }\r\n  }\r\n\r\n  /**\r\n  * A string representation of the node.\r\n  * @param {boolean} [includeNodes=false]\r\n  * Include sub-nodes\r\n  * @returns {string}\r\n  * @private\r\n  */\r\n  toString (includeNodes = false) {\r\n    let value = []\r\n    let i\r\n\r\n    for (i = 0; i < this.leafs.length; i++) {\r\n      value.push(this.leafs[i].key)\r\n    }\r\n\r\n    let s = `[${value.toString()}]${(this.parent instanceof Tree ? ':*' : ':')}${this.parent}`\r\n\r\n    if (includeNodes) {\r\n      for (i = 0; i < this.nodes.length; i++) {\r\n        s += ` -> ${this.nodes[i]}`\r\n      }\r\n    }\r\n\r\n    return s\r\n  }\r\n}",
      "tags": {},
      "exceptions": {},
      "events": {},
      "start": {
        "line": 13,
        "column": 0
      },
      "end": {
        "line": 385,
        "column": 1
      },
      "flags": [],
      "authors": [],
      "sourcefile": "./\\data\\index\\BTree.js",
      "extends": null,
      "configuration": {},
      "properties": {
        "parent": {
          "type": "property",
          "label": "parent",
          "description": null,
          "code": "parent: NGN.private(parent)",
          "start": {
            "line": 16,
            "column": 6
          },
          "end": {
            "line": 16,
            "column": 33
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": true
        },
        "leafs": {
          "type": "property",
          "label": "leafs",
          "description": null,
          "code": "leafs: NGN.private(leafs)",
          "start": {
            "line": 17,
            "column": 6
          },
          "end": {
            "line": 17,
            "column": 31
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": true
        },
        "nodes": {
          "type": "property",
          "label": "nodes",
          "description": null,
          "code": "nodes: NGN.private(nodes)",
          "start": {
            "line": 18,
            "column": 6
          },
          "end": {
            "line": 18,
            "column": 31
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": true
        },
        "METADATA": {
          "type": "property",
          "label": "METADATA",
          "description": null,
          "code": "METADATA: NGN.private({\r\n        order: null,\r\n        minOrder: null,\r\n\r\n        /**\r\n        * Compare two numbers\r\n        * @param  {number} firstNumber\r\n        * @param  {number} secondNumber\r\n        * @return {number}\r\n        * - Returns `-1` if first number is less than second.\r\n        * - Returns `0` if numbers are equal.\r\n        * - Returns `1` if first number is greater than second.\r\n        */\r\n        compare: (firstNumber, secondNumber) => {\r\n          return firstNumber < secondNumber ? -1 : (firstNumber > secondNumber ? 1 : 0)\r\n        }\r\n      })",
          "start": {
            "line": 20,
            "column": 6
          },
          "end": {
            "line": 36,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": true
        }
      },
      "methods": {
        "constructor": {
          "type": "method",
          "label": "constructor",
          "description": null,
          "code": "constructor (parent = null, leafs = [], nodes = [null]) {\r\n    Object.defineProperties(this, {\r\n      parent: NGN.private(parent),\r\n      leafs: NGN.private(leafs),\r\n      nodes: NGN.private(nodes),\r\n\r\n      METADATA: NGN.private({\r\n        order: null,\r\n        minOrder: null,\r\n\r\n        /**\r\n        * Compare two numbers\r\n        * @param  {number} firstNumber\r\n        * @param  {number} secondNumber\r\n        * @return {number}\r\n        * - Returns `-1` if first number is less than second.\r\n        * - Returns `0` if numbers are equal.\r\n        * - Returns `1` if first number is greater than second.\r\n        */\r\n        compare: (firstNumber, secondNumber) => {\r\n          return firstNumber < secondNumber ? -1 : (firstNumber > secondNumber ? 1 : 0)\r\n        }\r\n      })\r\n    })\r\n\r\n    // Associate leafs with parent\r\n    for (let i = 0; i < this.leafs.length; i++) {\r\n      this.leafs[i].parent = this\r\n      // Object.defineProperty(this.leafs[i], 'parent', NGN.get(() => this))\r\n    }\r\n\r\n    // Associate nodes with parent\r\n    for (let i = 0; i < this.nodes.length; i++) {\r\n      if (this.nodes[i] !== null) {\r\n        this.nodes[i].parent = this\r\n        // Object.defineProperty(this.nodes[i], 'parent', NGN.get(() => this))\r\n      }\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 14,
            "column": 2
          },
          "end": {
            "line": 52,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "parent": {
              "type": "argument",
              "label": "parent",
              "description": null,
              "code": "parent = null",
              "start": {
                "line": 14,
                "column": 15
              },
              "end": {
                "line": 14,
                "column": 28
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "object",
              "required": false,
              "enum": null
            },
            "leafs": {
              "type": "argument",
              "label": "leafs",
              "description": null,
              "code": "leafs = []",
              "start": {
                "line": 14,
                "column": 30
              },
              "end": {
                "line": 14,
                "column": 40
              },
              "flags": [],
              "authors": [],
              "default": "[]",
              "datatype": "object",
              "required": false,
              "enum": null
            },
            "nodes": {
              "type": "argument",
              "label": "nodes",
              "description": null,
              "code": "nodes = [null]",
              "start": {
                "line": 14,
                "column": 42
              },
              "end": {
                "line": 14,
                "column": 56
              },
              "flags": [],
              "authors": [],
              "default": "[null]",
              "datatype": "object",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "constructor",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "search": {
          "type": "method",
          "label": "search",
          "description": "Search for the node that contains the specified key",
          "code": "search (key) {\r\n    if (this.leafs.length > 0) {\r\n      let a = this.leafs[0]\r\n\r\n      if (this.METADATA.compare(a.key, key) === 0) {\r\n        return {\r\n          leaf: a,\r\n          index: 0\r\n        }\r\n      }\r\n\r\n      if (this.METADATA.compare(key, a.key) < 0) {\r\n        if (this.nodes[0] !== null) {\r\n          return this.nodes[0].search(key) // Left\r\n        }\r\n\r\n        return { node: this, index: 0 }\r\n      }\r\n\r\n      let i\r\n      for (i = 1; i < this.leafs.length; i++) {\r\n        let b = this.leafs[i]\r\n\r\n        if (this.METADATA.compare(b.key, key) === 0) {\r\n          return {\r\n            leaf: b,\r\n            index: i\r\n          }\r\n        }\r\n\r\n        if (this.METADATA.compare(key, b.key) < 0) {\r\n          if (this.nodes[i] !== null) {\r\n            return this.nodes[i].search(key) // Inner\r\n          }\r\n\r\n          return { node: this, index: i }\r\n        }\r\n\r\n        a = b\r\n      }\r\n\r\n      if (this.nodes[i] !== null) {\r\n        return this.nodes[i].search(key) // Right\r\n      }\r\n\r\n      return { node: this, index: i }\r\n    }\r\n\r\n    return { node: this, index: 0 }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 59,
            "column": 2
          },
          "end": {
            "line": 108,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "key": {
              "type": "argument",
              "label": "key",
              "description": "",
              "code": "key",
              "start": {
                "line": 59,
                "column": 10
              },
              "end": {
                "line": 59,
                "column": 13
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "returnType": "TreeLeaf|TreeNode",
          "returnDescription": "",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "get": {
          "type": "method",
          "label": "get",
          "description": "Retrieve the value of a key.\r\n \r\n \r\n Returns `undefined` if no leaf is found.",
          "code": "get (key) {\r\n    let result = this.search(key)\r\n    return result.leaf ? result.leaf.value : undefined\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 116,
            "column": 2
          },
          "end": {
            "line": 119,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "key": {
              "type": "argument",
              "label": "key",
              "description": "",
              "code": "key",
              "start": {
                "line": 116,
                "column": 7
              },
              "end": {
                "line": 116,
                "column": 10
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "number",
              "required": true,
              "enum": null
            }
          },
          "returnType": "NGNTreeLeaf",
          "returnDescription": "null Returns `undefined` if no leaf is found.",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "put": {
          "type": "method",
          "label": "put",
          "description": "Insert a key/value pair into the node.\r\n \r\n \r\n \r\n Overwrite existing values.",
          "code": "put (key, value, overwrite = true) {\r\n    let result = this.search(key)\r\n\r\n    // Key already exists\r\n    if (result.leaf) {\r\n      if (!overwrite) {\r\n        return\r\n      }\r\n\r\n      result.leaf.value = value\r\n      return\r\n    }\r\n\r\n    let node = result.node\r\n    let index = result.index\r\n\r\n    node.leafs.splice(index, 0, new TreeLeaf(node, key, value))\r\n    node.nodes.splice(index + 1, 0, null)\r\n\r\n    if (node.leafs.length > this.METADATA.order) {\r\n      node.split()\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 128,
            "column": 2
          },
          "end": {
            "line": 150,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "key": {
              "type": "argument",
              "label": "key",
              "description": "",
              "code": "key",
              "start": {
                "line": 128,
                "column": 7
              },
              "end": {
                "line": 128,
                "column": 10
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "number",
              "required": true,
              "enum": null
            },
            "value": {
              "type": "argument",
              "label": "value",
              "description": "",
              "code": "value",
              "start": {
                "line": 128,
                "column": 12
              },
              "end": {
                "line": 128,
                "column": 17
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "any",
              "required": true,
              "enum": null
            },
            "overwrite": {
              "type": "argument",
              "label": "overwrite",
              "description": "Overwrite existing values.",
              "code": "overwrite = true",
              "start": {
                "line": 128,
                "column": 19
              },
              "end": {
                "line": 128,
                "column": 35
              },
              "flags": [],
              "authors": [],
              "default": "true",
              "datatype": "boolean",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "delete": {
          "type": "method",
          "label": "delete",
          "description": "Delete key.",
          "code": "delete (key) {\r\n    var result = this.search(key)\r\n\r\n    if (!result.leaf) {\r\n      return\r\n    }\r\n\r\n    let leaf = result.leaf\r\n    let node = leaf.parent\r\n    let index = result.index\r\n    let left = node.nodes[index]\r\n\r\n    if (left === null) {\r\n      node.leafs.splice(index, 1)\r\n      node.nodes.splice(index, 1)\r\n      node.balance()\r\n    } else {\r\n      let max = left.leafs[left.leafs.length - 1]\r\n\r\n      left.delete(max.key)\r\n\r\n      max.parent = node\r\n\r\n      node.leafs.splice(index, 1, max)\r\n    }\r\n\r\n    return true\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 156,
            "column": 2
          },
          "end": {
            "line": 183,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "key": {
              "type": "argument",
              "label": "key",
              "description": "",
              "code": "key",
              "start": {
                "line": 156,
                "column": 10
              },
              "end": {
                "line": 156,
                "column": 13
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "number",
              "required": true,
              "enum": null
            }
          },
          "returnType": "boolean",
          "returnDescription": "",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "balance": {
          "type": "method",
          "label": "balance",
          "description": "Balance the tree.",
          "code": "balance () {\r\n    if (this.parent instanceof Tree) {\r\n      // Root has a single child and no leafs\r\n      if (this.leafs.length === 0 && this.nodes[0] !== null) {\r\n        this.parent.root = this.nodes[0]\r\n        this.parent.root.parent = this.parent\r\n      }\r\n\r\n      return\r\n    }\r\n\r\n    if (this.leafs.length >= this.METADATA.minOrder) {\r\n      return\r\n    }\r\n\r\n    let index = this.parent.nodes.indexOf(this)\r\n    let left = index > 0 ? this.parent.nodes[index - 1] : null\r\n    let right = this.parent.nodes.length > index + 1 ? this.parent.nodes[index + 1] : null\r\n    let sep\r\n    let leaf\r\n    let rest\r\n\r\n    if (right !== null && right.leafs.length > this.METADATA.minOrder) {\r\n      // Append the parent separator\r\n      sep = this.parent.leafs[index]\r\n      sep.parent = this\r\n\r\n      this.leafs.push(sep)\r\n\r\n      // Replace blank with the first right leaf\r\n      leaf = right.leafs.shift()\r\n      leaf.parent = this.parent\r\n\r\n      this.parent.leafs[index] = leaf\r\n\r\n      // Append the right rest\r\n      rest = right.nodes.shift()\r\n\r\n      if (rest !== null) {\r\n        rest.parent = this\r\n      }\r\n\r\n      this.nodes.push(rest)\r\n    } else if (left !== null && left.leafs.length > this.METADATA.minOrder) {\r\n      // Prepend the parent seperator\r\n      sep = this.parent.leafs[index - 1]\r\n      sep.parent = this\r\n\r\n      this.leafs.unshift(sep)\r\n\r\n      // Replace the blank with the last left leaf\r\n      leaf = left.leafs.pop()\r\n      leaf.parent = this.parent\r\n\r\n      this.parent.leafs[index - 1] = leaf\r\n\r\n      // Prepend the left rest to this\r\n      rest = left.nodes.pop()\r\n\r\n      if (rest !== null) {\r\n        rest.parent = this\r\n      }\r\n\r\n      this.nodes.unshift(rest)\r\n    } else {\r\n      let subst\r\n\r\n      if (right !== null) {\r\n        // Combine this + seperator from the parent + right\r\n        sep = this.parent.leafs[index]\r\n        subst = new TreeNode(this.parent, this.leafs.concat([sep], right.leafs), this.nodes.concat(right.nodes))\r\n        subst.METADATA.order = this.METADATA.order\r\n        subst.METADATA.minOrder = this.METADATA.minOrder\r\n\r\n        // Remove the seperator from the parent\r\n        this.parent.leafs.splice(index, 1)\r\n\r\n        // And replace the nodes it seperated with subst\r\n        this.parent.nodes.splice(index, 2, subst)\r\n      } else if (left !== null) {\r\n        // Combine left + seperator from parent + this\r\n        sep = this.parent.leafs[index - 1]\r\n        subst = new TreeNode(\r\n          this.parent,\r\n          left.leafs.concat([sep], this.leafs),\r\n          left.nodes.concat(this.nodes)\r\n        )\r\n\r\n        subst.METADATA.minOrder = this.METADATA.minOrder\r\n        subst.METADATA.order = this.METADATA.order\r\n\r\n        // Remove the seperator from the parent\r\n        this.parent.leafs.splice(index - 1, 1)\r\n\r\n        // Replace seperated nodes with subst\r\n        this.parent.nodes.splice(index - 1, 2, subst)\r\n      } else {\r\n        throw new Error(`Internal error: ${this.toString(true)} has neither a left nor a right sibling`)\r\n      }\r\n\r\n      this.parent.balance()\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 189,
            "column": 2
          },
          "end": {
            "line": 291,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": true
        },
        "split": {
          "type": "method",
          "label": "split",
          "description": "Split the node.",
          "code": "split () {\r\n    let index = Math.floor(this.leafs.length / 2)\r\n\r\n    if (this.parent instanceof Tree) {\r\n      this.nodes = [\r\n        new TreeNode(this, this.leafs.slice(0, index), this.nodes.slice(0, index + 1)),\r\n        new TreeNode(this, this.leafs.slice(index + 1), this.nodes.slice(index + 1))\r\n      ]\r\n\r\n      this.leafs = [this.leafs[index]]\r\n    } else {\r\n      let leaf = this.leafs[index]\r\n      let rest = new TreeNode(\r\n        this.parent,\r\n        this.leafs.slice(index + 1),\r\n        this.nodes.slice(index + 1)\r\n      )\r\n\r\n      this.leafs = this.leafs.slice(0, index)\r\n      this.nodes = this.nodes.slice(0, index + 1)\r\n\r\n      this.parent.unsplit(leaf, rest)\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 296,
            "column": 2
          },
          "end": {
            "line": 319,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "unsplit": {
          "type": "method",
          "label": "unsplit",
          "description": "Unsplits a child.",
          "code": "unsplit (leaf, rest) {\r\n    leaf.parent = this\r\n    rest.parent = this\r\n\r\n    let a = this.leafs[0]\r\n\r\n    if (this.METADATA.compare(leaf.key, a.key) < 0) {\r\n      this.leafs.unshift(leaf)\r\n      this.nodes.splice(1, 0, rest)\r\n    } else {\r\n      let i\r\n      for (i = 1; i < this.leafs.length; i++) {\r\n        let b = this.leafs[i]\r\n\r\n        if (this.METADATA.compare(leaf.key, b.key) < 0) {\r\n          this.leafs.splice(i, 0, leaf)\r\n          this.nodes.splice(i + 1, 0, rest)\r\n          break\r\n        }\r\n      }\r\n\r\n      if (i === this.leafs.length) {\r\n        this.leafs.push(leaf)\r\n        this.nodes.push(rest)\r\n      }\r\n    }\r\n\r\n    if (this.leafs.length > this.METADATA.order) {\r\n      this.split()\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 328,
            "column": 2
          },
          "end": {
            "line": 358,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "leaf": {
              "type": "argument",
              "label": "leaf",
              "description": "",
              "code": "leaf",
              "start": {
                "line": 328,
                "column": 11
              },
              "end": {
                "line": 328,
                "column": 15
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "ngntreeleaf",
              "required": true,
              "enum": null
            },
            "rest": {
              "type": "argument",
              "label": "rest",
              "description": "",
              "code": "rest",
              "start": {
                "line": 328,
                "column": 17
              },
              "end": {
                "line": 328,
                "column": 21
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "ngntreenode",
              "required": true,
              "enum": null
            },
            "order": {
              "type": "argument",
              "label": "order",
              "description": "",
              "code": "unsplit (leaf, rest) {\r\n    leaf.parent = this\r\n    rest.parent = this\r\n\r\n    let a = this.leafs[0]\r\n\r\n    if (this.METADATA.compare(leaf.key, a.key) < 0) {\r\n      this.leafs.unshift(leaf)\r\n      this.nodes.splice(1, 0, rest)\r\n    } else {\r\n      let i\r\n      for (i = 1; i < this.leafs.length; i++) {\r\n        let b = this.leafs[i]\r\n\r\n        if (this.METADATA.compare(leaf.key, b.key) < 0) {\r\n          this.leafs.splice(i, 0, leaf)\r\n          this.nodes.splice(i + 1, 0, rest)\r\n          break\r\n        }\r\n      }\r\n\r\n      if (i === this.leafs.length) {\r\n        this.leafs.push(leaf)\r\n        this.nodes.push(rest)\r\n      }\r\n    }\r\n\r\n    if (this.leafs.length > this.METADATA.order) {\r\n      this.split()\r\n    }\r\n  }",
              "start": {
                "line": 328,
                "column": 2
              },
              "end": {
                "line": 358,
                "column": 3
              },
              "flags": [],
              "authors": [],
              "default": "52",
              "datatype": "number",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": true
        },
        "toString": {
          "type": "method",
          "label": "toString",
          "description": "A string representation of the node.\r\n \r\n Include sub-nodes",
          "code": "toString (includeNodes = false) {\r\n    let value = []\r\n    let i\r\n\r\n    for (i = 0; i < this.leafs.length; i++) {\r\n      value.push(this.leafs[i].key)\r\n    }\r\n\r\n    let s = `[${value.toString()}]${(this.parent instanceof Tree ? ':*' : ':')}${this.parent}`\r\n\r\n    if (includeNodes) {\r\n      for (i = 0; i < this.nodes.length; i++) {\r\n        s += ` -> ${this.nodes[i]}`\r\n      }\r\n    }\r\n\r\n    return s\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 367,
            "column": 2
          },
          "end": {
            "line": 384,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "includeNodes": {
              "type": "argument",
              "label": "includeNodes",
              "description": "Include sub-nodes",
              "code": "includeNodes = false",
              "start": {
                "line": 367,
                "column": 12
              },
              "end": {
                "line": 367,
                "column": 32
              },
              "flags": [],
              "authors": [],
              "default": "false",
              "datatype": "boolean",
              "required": false,
              "enum": null
            }
          },
          "returnType": "string",
          "returnDescription": "",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": true
        }
      }
    },
    "TreeLeaf": {
      "type": "class",
      "label": "TreeLeaf",
      "description": null,
      "code": "class TreeLeaf {\r\n  /**\r\n   * Constructs a new Leaf containing a value.\r\n   * @param {NGNTreeNode} parent\r\n   * @param {number} key\r\n   * @param {any} value\r\n   */\r\n  constructor (parent, key, value) {\r\n    Object.defineProperties(this, {\r\n      parent: NGN.private(parent),\r\n      key: NGN.private(key),\r\n      value: NGN.private(value)\r\n    })\r\n  }\r\n\r\n  toString () {\r\n    return this.key.toString()\r\n  }\r\n}",
      "tags": {},
      "exceptions": {},
      "events": {},
      "start": {
        "line": 390,
        "column": 0
      },
      "end": {
        "line": 408,
        "column": 1
      },
      "flags": [],
      "authors": [],
      "sourcefile": "./\\data\\index\\BTree.js",
      "extends": null,
      "configuration": {},
      "properties": {
        "parent": {
          "type": "property",
          "label": "parent",
          "description": null,
          "code": "parent: NGN.private(parent)",
          "start": {
            "line": 399,
            "column": 6
          },
          "end": {
            "line": 399,
            "column": 33
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": true
        },
        "key": {
          "type": "property",
          "label": "key",
          "description": null,
          "code": "key: NGN.private(key)",
          "start": {
            "line": 400,
            "column": 6
          },
          "end": {
            "line": 400,
            "column": 27
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": true
        },
        "value": {
          "type": "property",
          "label": "value",
          "description": null,
          "code": "value: NGN.private(value)",
          "start": {
            "line": 401,
            "column": 6
          },
          "end": {
            "line": 401,
            "column": 31
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": true
        }
      },
      "methods": {
        "constructor": {
          "type": "method",
          "label": "constructor",
          "description": "Constructs a new Leaf containing a value.",
          "code": "constructor (parent, key, value) {\r\n    Object.defineProperties(this, {\r\n      parent: NGN.private(parent),\r\n      key: NGN.private(key),\r\n      value: NGN.private(value)\r\n    })\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 397,
            "column": 2
          },
          "end": {
            "line": 403,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "parent": {
              "type": "argument",
              "label": "parent",
              "description": "",
              "code": "parent",
              "start": {
                "line": 397,
                "column": 15
              },
              "end": {
                "line": 397,
                "column": 21
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "ngntreenode",
              "required": true,
              "enum": null
            },
            "key": {
              "type": "argument",
              "label": "key",
              "description": "",
              "code": "key",
              "start": {
                "line": 397,
                "column": 23
              },
              "end": {
                "line": 397,
                "column": 26
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "number",
              "required": true,
              "enum": null
            },
            "value": {
              "type": "argument",
              "label": "value",
              "description": "",
              "code": "value",
              "start": {
                "line": 397,
                "column": 28
              },
              "end": {
                "line": 397,
                "column": 33
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "constructor",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "toString": {
          "type": "method",
          "label": "toString",
          "description": null,
          "code": "toString () {\r\n    return this.key.toString()\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 405,
            "column": 2
          },
          "end": {
            "line": 407,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        }
      }
    },
    "NGN.DATA.BTree": {
      "type": "class",
      "label": "NGN.DATA.BTree",
      "description": "Compare two numbers\r\n       \r\n       \r\n       \r\n       - Returns `-1` if first number is less than second.\r\n       - Returns `0` if numbers are equal.\r\n       - Returns `1` if first number is greater than second.",
      "code": "class Tree extends EventEmitter {\r\n  constructor (order = 52) {\r\n    super()\r\n\r\n    // Sanitize input\r\n    order = order < 1 ? 1 : order\r\n\r\n    Object.defineProperties(this, {\r\n      root: NGN.private(new TreeNode(this)),\r\n\r\n      BTREE: NGN.private({}),\r\n\r\n      METADATA: NGN.private({\r\n        order: order,\r\n\r\n        minOrder: order > 1 ? Math.floor(order / 2) : 1,\r\n\r\n        compare: (firstNumber, secondNumber) => {\r\n          return firstNumber < secondNumber ? -1 : (firstNumber > secondNumber ? 1 : 0)\r\n        }\r\n      })\r\n    })\r\n\r\n    this.root.METADATA.minOrder = this.METADATA.minOrder\r\n    this.root.METADATA.order = this.METADATA.order\r\n  }\r\n\r\n  /**\r\n   * Validates a node and prints debugging info if something went wrong.\r\n   * @param {!TreeNode|!Tree} node\r\n   * @private\r\n   */\r\n  validate (node) {\r\n    if (node instanceof Tree) {\r\n      return\r\n    }\r\n\r\n    if (node.leafs.length + 1 !== node.nodes.length) {\r\n      NGN.ERROR(`Illegal leaf/node count in ${node}: ${node.leafs.length}/${node.nodes.length}`)\r\n    }\r\n\r\n    let i\r\n\r\n    for (i = 0; i < node.leafs.length; i++) {\r\n      if (!node.leafs[i]) {\r\n        NGN.ERROR(`Illegal leaf in ${node} at ${i}: ${node.leafs[i]}`)\r\n      }\r\n    }\r\n\r\n    for (i = 0; i < node.nodes.length; i++) {\r\n      if (NGN.typeof(node.nodes[i]) === 'undefined') {\r\n        NGN.ERROR(`Illegal node in ${node} at ${i}: undefined`)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Insert a key/value pair into the tree.\r\n   * @param {number} key\r\n   * @param {any} value\r\n   * @param {boolean} [overwrite=true]\r\n   * Overwrite existing values\r\n   */\r\n  put (key, value, overwrite = true) {\r\n    if (NGN.typeof(key) !== 'number') {\r\n      throw new Error(`Illegal key: ${key}`)\r\n    }\r\n\r\n    if (value === undefined) {\r\n      throw new Error(`Illegal value: ${value}`)\r\n    }\r\n\r\n    return this.root.put(key, value, overwrite)\r\n  }\r\n\r\n  /**\r\n   * Retrieve the value for the specified key.\r\n   * @param {number} key\r\n   * @returns {any}\r\n   * If there is no such key, `undefined` is returned.\r\n   */\r\n  get (key) {\r\n    if (NGN.typeof(key) !== 'number') {\r\n      throw new Error(`Illegal key: ${key}`)\r\n    }\r\n\r\n    return this.root.get(key)\r\n  }\r\n\r\n  /**\r\n   * Delete a key from the tree.\r\n   * @param {number} key\r\n   */\r\n  delete (key) {\r\n    if (NGN.typeof(key) !== 'number') {\r\n      throw new Error(`Illegal key: ${key}`)\r\n    }\r\n\r\n    return this.root.delete(key)\r\n  }\r\n\r\n  /**\r\n   * Walk through all keys in ascending order.\r\n   * @param {number} minKey\r\n   * If omitted or NULL, starts at the beginning\r\n   * @param {number} maxKey\r\n   * If omitted or NULL, walks till the end\r\n   * @param {function} callback\r\n   * @param {number} callback.key\r\n   * The key\r\n   * @param {any} callback.value\r\n   * The value.\r\n   */\r\n  walk (minKey, maxKey, callback) {\r\n    if (this.root.leafs.length === 0) {\r\n      return\r\n    }\r\n\r\n    if (NGN.isFn(minKey)) {\r\n      callback = minKey\r\n      minKey = maxKey = null\r\n    } else if (NGN.isFn(maxKey)) {\r\n      callback = maxKey\r\n      maxKey = null\r\n    }\r\n\r\n    minKey = NGN.coalesce(minKey)\r\n    maxKey = NGN.coalesce(maxKey)\r\n\r\n    let ptr\r\n    let index\r\n\r\n    if (minKey === null) {\r\n      // No minimum limit\r\n      ptr = this.root\r\n\r\n      while (ptr.nodes[0] !== null) {\r\n        ptr = ptr.nodes[0]\r\n      }\r\n\r\n      index = 0\r\n    } else {\r\n      // lookup\r\n      let result = this.root.search(minKey)\r\n\r\n      if (result.leaf) {\r\n        // Minimum key itself exists\r\n        ptr = result.leaf.parent\r\n        index = ptr.leafs.indexOf(result.leaf)\r\n      } else {\r\n        // Key does not exist\r\n        ptr = result.node\r\n        index = result.index\r\n\r\n        if (index >= ptr.leafs.length) {\r\n          // begin at parent separator in overrun\r\n          if (ptr.parent instanceof Tree || ptr.parent.nodes.indexOf(ptr) >= ptr.parent.leafs.length) {\r\n            return\r\n          }\r\n\r\n          ptr = ptr.parent\r\n        }\r\n      }\r\n    }\r\n\r\n    // ptr/index points to first result\r\n    while (true) {\r\n      if (maxKey !== null && this.METADATA.compare(ptr.leafs[index].key, maxKey) > 0) {\r\n        break\r\n      }\r\n      if (ptr.leafs.length === 0) {\r\n        break\r\n      }\r\n\r\n      if (callback(ptr.leafs[index].key, ptr.leafs[index].value)) {\r\n        break\r\n      }\r\n\r\n      if (ptr.nodes[index + 1] !== null) {\r\n        // Descend Tree\r\n        ptr = ptr.nodes[index + 1]\r\n        index = 0\r\n\r\n        while (ptr.nodes[0] !== null) {\r\n          ptr = ptr.nodes[0]\r\n        }\r\n      } else if (ptr.leafs.length > index + 1) {\r\n        // Next\r\n        index++\r\n      } else {\r\n        // Ascend Tree\r\n        do {\r\n          if ((ptr.parent instanceof Tree)) {\r\n            return\r\n          }\r\n\r\n          index = ptr.parent.nodes.indexOf(ptr)\r\n          ptr = ptr.parent\r\n        } while (index >= ptr.leafs.length)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Walks through all keys in descending order.\r\n   * @param {number} minKey\r\n   * If omitted or NULL, starts at the beginning\r\n   * @param {number} maxKey\r\n   * If omitted or NULL, walks till the end\r\n   * @param {function} callback\r\n   * @param {number} callback.key\r\n   * The key\r\n   * @param {any} callback.value\r\n   * The value.\r\n   */\r\n  walkDesc (minKey, maxKey, callback) {\r\n    if (NGN.isFn(minKey)) {\r\n      callback = minKey\r\n      minKey = maxKey = null\r\n    } else if (NGN.isFn(maxKey)) {\r\n      callback = maxKey\r\n      maxKey = null\r\n    }\r\n\r\n    minKey = NGN.coalesce(minKey)\r\n    maxKey = NGN.coalesce(maxKey)\r\n\r\n    let ptr\r\n    let index\r\n    if (maxKey === null) {\r\n      // No maximum\r\n      ptr = this.root\r\n\r\n      while (ptr.nodes[ptr.nodes.length - 1] !== null) {\r\n        ptr = ptr.nodes[ptr.nodes.length - 1]\r\n      }\r\n\r\n      index = ptr.leafs.length - 1\r\n    } else {\r\n      // Lookup\r\n      let result = this.root.search(maxKey)\r\n\r\n      if (result.leaf) {\r\n        // Maximum key exists\r\n        ptr = result.leaf.parent\r\n        index = ptr.leafs.indexOf(result.leaf)\r\n      } else {\r\n        // Key does not exist\r\n        ptr = result.node\r\n        index = result.index - 1\r\n\r\n        while (index < 0) {\r\n          // Begin at parent separator on underrun\r\n          if (ptr.parent instanceof Tree) {\r\n            return\r\n          }\r\n\r\n          index = ptr.parent.nodes.indexOf(ptr) - 1\r\n\r\n          if (index < 0) {\r\n            return\r\n          }\r\n\r\n          ptr = ptr.parent\r\n        }\r\n      }\r\n    }\r\n\r\n    // ptr/index points to first result\r\n    while (true) {\r\n      if (minKey !== null && this.METADATA.compare(ptr.leafs[index].key, minKey) < 0) {\r\n        break\r\n      }\r\n\r\n      if (callback(ptr.leafs[index].key, ptr.leafs[index].value)) {\r\n        break\r\n      }\r\n\r\n      if (ptr.nodes[index] !== null) {\r\n        // Descend Tree\r\n        ptr = ptr.nodes[index]\r\n\r\n        while (ptr.nodes[ptr.nodes.length - 1] !== null) {\r\n          ptr = ptr.nodes[ptr.nodes.length - 1]\r\n        }\r\n\r\n        index = ptr.leafs.length - 1\r\n      } else if (index > 0) {\r\n        // Next\r\n        index--\r\n      } else {\r\n        // Ascend Tree\r\n        do {\r\n          if ((ptr.parent instanceof Tree)) {\r\n            return\r\n          }\r\n\r\n          index = ptr.parent.nodes.indexOf(ptr) - 1\r\n\r\n          ptr = ptr.parent\r\n        } while (index < 0)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The number of keys between minKey and maxKey (both inclusive).\r\n   * @param {number} minKey\r\n   * If omitted, counts from the start\r\n   * @param {number} maxKey\r\n   * If omitted, counts till the end\r\n   * @returns {number}\r\n   */\r\n  count (minKey, maxKey) {\r\n    let n = 0\r\n\r\n    this.walk(\r\n      minKey !== undefined ? minKey : null,\r\n      maxKey !== undefined ? maxKey : null,\r\n      (key, value) => { n++ }\r\n    )\r\n\r\n    return n\r\n  };\r\n\r\n  /**\r\n   * A string representation of the tree.\r\n   * @returns {string}\r\n   */\r\n  toString () {\r\n    return `Tree(${this.METADATA.order}) ${this.root.toString()}`\r\n  }\r\n\r\n  get length () {\r\n    return this.count()\r\n  }\r\n}",
      "tags": {},
      "exceptions": {},
      "events": {},
      "start": {
        "line": 415,
        "column": 15
      },
      "end": {
        "line": 751,
        "column": 1
      },
      "flags": [],
      "authors": [],
      "sourcefile": "./\\data\\index\\BTree.js",
      "extends": "EventEmitter",
      "configuration": {},
      "properties": {
        "root": {
          "type": "property",
          "label": "root",
          "description": null,
          "code": "root: NGN.private(new TreeNode(this))",
          "start": {
            "line": 423,
            "column": 6
          },
          "end": {
            "line": 423,
            "column": 43
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": true
        },
        "BTREE": {
          "type": "property",
          "label": "BTREE",
          "description": null,
          "code": "BTREE: NGN.private({})",
          "start": {
            "line": 425,
            "column": 6
          },
          "end": {
            "line": 425,
            "column": 28
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": true
        },
        "METADATA": {
          "type": "property",
          "label": "METADATA",
          "description": null,
          "code": "METADATA: NGN.private({\r\n        order: order,\r\n\r\n        minOrder: order > 1 ? Math.floor(order / 2) : 1,\r\n\r\n        compare: (firstNumber, secondNumber) => {\r\n          return firstNumber < secondNumber ? -1 : (firstNumber > secondNumber ? 1 : 0)\r\n        }\r\n      })",
          "start": {
            "line": 427,
            "column": 6
          },
          "end": {
            "line": 435,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": true
        },
        "minOrder": {
          "type": "property",
          "label": "minOrder",
          "description": null,
          "code": "this.root.METADATA.minOrder = this.METADATA.minOrder",
          "start": {
            "line": 438,
            "column": 23
          },
          "end": {
            "line": 438,
            "column": 31
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "order": {
          "type": "property",
          "label": "order",
          "description": null,
          "code": "this.root.METADATA.order = this.METADATA.order",
          "start": {
            "line": 439,
            "column": 23
          },
          "end": {
            "line": 439,
            "column": 28
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "length": {
          "type": "property",
          "label": "length",
          "description": null,
          "code": "get length () {\r\n    return this.count()\r\n  }",
          "start": {
            "line": 748,
            "column": 2
          },
          "end": {
            "line": 750,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        }
      },
      "methods": {
        "constructor": {
          "type": "method",
          "label": "constructor",
          "description": null,
          "code": "constructor (order = 52) {\r\n    super()\r\n\r\n    // Sanitize input\r\n    order = order < 1 ? 1 : order\r\n\r\n    Object.defineProperties(this, {\r\n      root: NGN.private(new TreeNode(this)),\r\n\r\n      BTREE: NGN.private({}),\r\n\r\n      METADATA: NGN.private({\r\n        order: order,\r\n\r\n        minOrder: order > 1 ? Math.floor(order / 2) : 1,\r\n\r\n        compare: (firstNumber, secondNumber) => {\r\n          return firstNumber < secondNumber ? -1 : (firstNumber > secondNumber ? 1 : 0)\r\n        }\r\n      })\r\n    })\r\n\r\n    this.root.METADATA.minOrder = this.METADATA.minOrder\r\n    this.root.METADATA.order = this.METADATA.order\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 416,
            "column": 2
          },
          "end": {
            "line": 440,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "order": {
              "type": "argument",
              "label": "order",
              "description": null,
              "code": "order = 52",
              "start": {
                "line": 416,
                "column": 15
              },
              "end": {
                "line": 416,
                "column": 25
              },
              "flags": [],
              "authors": [],
              "default": 52,
              "datatype": "number",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "constructor",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "validate": {
          "type": "method",
          "label": "validate",
          "description": "Validates a node and prints debugging info if something went wrong.",
          "code": "validate (node) {\r\n    if (node instanceof Tree) {\r\n      return\r\n    }\r\n\r\n    if (node.leafs.length + 1 !== node.nodes.length) {\r\n      NGN.ERROR(`Illegal leaf/node count in ${node}: ${node.leafs.length}/${node.nodes.length}`)\r\n    }\r\n\r\n    let i\r\n\r\n    for (i = 0; i < node.leafs.length; i++) {\r\n      if (!node.leafs[i]) {\r\n        NGN.ERROR(`Illegal leaf in ${node} at ${i}: ${node.leafs[i]}`)\r\n      }\r\n    }\r\n\r\n    for (i = 0; i < node.nodes.length; i++) {\r\n      if (NGN.typeof(node.nodes[i]) === 'undefined') {\r\n        NGN.ERROR(`Illegal node in ${node} at ${i}: undefined`)\r\n      }\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 447,
            "column": 2
          },
          "end": {
            "line": 469,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "node": {
              "type": "argument",
              "label": "node",
              "description": "",
              "code": "node",
              "start": {
                "line": 447,
                "column": 12
              },
              "end": {
                "line": 447,
                "column": 16
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "!treenode|!tree",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": true
        },
        "put": {
          "type": "method",
          "label": "put",
          "description": "Insert a key/value pair into the tree.\r\n  \r\n  \r\n  \r\n  Overwrite existing values",
          "code": "put (key, value, overwrite = true) {\r\n    if (NGN.typeof(key) !== 'number') {\r\n      throw new Error(`Illegal key: ${key}`)\r\n    }\r\n\r\n    if (value === undefined) {\r\n      throw new Error(`Illegal value: ${value}`)\r\n    }\r\n\r\n    return this.root.put(key, value, overwrite)\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 478,
            "column": 2
          },
          "end": {
            "line": 488,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "key": {
              "type": "argument",
              "label": "key",
              "description": "",
              "code": "key",
              "start": {
                "line": 478,
                "column": 7
              },
              "end": {
                "line": 478,
                "column": 10
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "number",
              "required": true,
              "enum": null
            },
            "value": {
              "type": "argument",
              "label": "value",
              "description": "",
              "code": "value",
              "start": {
                "line": 478,
                "column": 12
              },
              "end": {
                "line": 478,
                "column": 17
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "any",
              "required": true,
              "enum": null
            },
            "overwrite": {
              "type": "argument",
              "label": "overwrite",
              "description": "Overwrite existing values",
              "code": "overwrite = true",
              "start": {
                "line": 478,
                "column": 19
              },
              "end": {
                "line": 478,
                "column": 35
              },
              "flags": [],
              "authors": [],
              "default": "true",
              "datatype": "boolean",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "get": {
          "type": "method",
          "label": "get",
          "description": "Retrieve the value for the specified key.\r\n  \r\n  \r\n  If there is no such key, `undefined` is returned.",
          "code": "get (key) {\r\n    if (NGN.typeof(key) !== 'number') {\r\n      throw new Error(`Illegal key: ${key}`)\r\n    }\r\n\r\n    return this.root.get(key)\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 496,
            "column": 2
          },
          "end": {
            "line": 502,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "key": {
              "type": "argument",
              "label": "key",
              "description": "",
              "code": "key",
              "start": {
                "line": 496,
                "column": 7
              },
              "end": {
                "line": 496,
                "column": 10
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "number",
              "required": true,
              "enum": null
            }
          },
          "returnType": "any",
          "returnDescription": "null If there is no such key, `undefined` is returned.",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "delete": {
          "type": "method",
          "label": "delete",
          "description": "Delete a key from the tree.",
          "code": "delete (key) {\r\n    if (NGN.typeof(key) !== 'number') {\r\n      throw new Error(`Illegal key: ${key}`)\r\n    }\r\n\r\n    return this.root.delete(key)\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 508,
            "column": 2
          },
          "end": {
            "line": 514,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "key": {
              "type": "argument",
              "label": "key",
              "description": "",
              "code": "key",
              "start": {
                "line": 508,
                "column": 10
              },
              "end": {
                "line": 508,
                "column": 13
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "number",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "walk": {
          "type": "method",
          "label": "walk",
          "description": "Walk through all keys in ascending order.\r\n  \r\n  If omitted or NULL, starts at the beginning\r\n  \r\n  If omitted or NULL, walks till the end\r\n  \r\n  \r\n  The key\r\n  \r\n  The value.",
          "code": "walk (minKey, maxKey, callback) {\r\n    if (this.root.leafs.length === 0) {\r\n      return\r\n    }\r\n\r\n    if (NGN.isFn(minKey)) {\r\n      callback = minKey\r\n      minKey = maxKey = null\r\n    } else if (NGN.isFn(maxKey)) {\r\n      callback = maxKey\r\n      maxKey = null\r\n    }\r\n\r\n    minKey = NGN.coalesce(minKey)\r\n    maxKey = NGN.coalesce(maxKey)\r\n\r\n    let ptr\r\n    let index\r\n\r\n    if (minKey === null) {\r\n      // No minimum limit\r\n      ptr = this.root\r\n\r\n      while (ptr.nodes[0] !== null) {\r\n        ptr = ptr.nodes[0]\r\n      }\r\n\r\n      index = 0\r\n    } else {\r\n      // lookup\r\n      let result = this.root.search(minKey)\r\n\r\n      if (result.leaf) {\r\n        // Minimum key itself exists\r\n        ptr = result.leaf.parent\r\n        index = ptr.leafs.indexOf(result.leaf)\r\n      } else {\r\n        // Key does not exist\r\n        ptr = result.node\r\n        index = result.index\r\n\r\n        if (index >= ptr.leafs.length) {\r\n          // begin at parent separator in overrun\r\n          if (ptr.parent instanceof Tree || ptr.parent.nodes.indexOf(ptr) >= ptr.parent.leafs.length) {\r\n            return\r\n          }\r\n\r\n          ptr = ptr.parent\r\n        }\r\n      }\r\n    }\r\n\r\n    // ptr/index points to first result\r\n    while (true) {\r\n      if (maxKey !== null && this.METADATA.compare(ptr.leafs[index].key, maxKey) > 0) {\r\n        break\r\n      }\r\n      if (ptr.leafs.length === 0) {\r\n        break\r\n      }\r\n\r\n      if (callback(ptr.leafs[index].key, ptr.leafs[index].value)) {\r\n        break\r\n      }\r\n\r\n      if (ptr.nodes[index + 1] !== null) {\r\n        // Descend Tree\r\n        ptr = ptr.nodes[index + 1]\r\n        index = 0\r\n\r\n        while (ptr.nodes[0] !== null) {\r\n          ptr = ptr.nodes[0]\r\n        }\r\n      } else if (ptr.leafs.length > index + 1) {\r\n        // Next\r\n        index++\r\n      } else {\r\n        // Ascend Tree\r\n        do {\r\n          if ((ptr.parent instanceof Tree)) {\r\n            return\r\n          }\r\n\r\n          index = ptr.parent.nodes.indexOf(ptr)\r\n          ptr = ptr.parent\r\n        } while (index >= ptr.leafs.length)\r\n      }\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 528,
            "column": 2
          },
          "end": {
            "line": 616,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "minKey": {
              "type": "argument",
              "label": "minKey",
              "description": "If omitted or NULL, starts at the beginning",
              "code": "minKey",
              "start": {
                "line": 528,
                "column": 8
              },
              "end": {
                "line": 528,
                "column": 14
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "number",
              "required": true,
              "enum": null
            },
            "maxKey": {
              "type": "argument",
              "label": "maxKey",
              "description": "If omitted or NULL, walks till the end",
              "code": "maxKey",
              "start": {
                "line": 528,
                "column": 16
              },
              "end": {
                "line": 528,
                "column": 22
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "number",
              "required": true,
              "enum": null
            },
            "callback": {
              "type": "method",
              "label": "callback",
              "description": "",
              "code": "@param {function} callback",
              "start": {
                "line": 528,
                "column": 2
              },
              "end": {
                "line": 616,
                "column": 3
              },
              "flags": [],
              "authors": [],
              "arguments": {
                "key": {
                  "type": "argument",
                  "label": "key",
                  "description": "The key",
                  "code": "@param {number} callback.key\nThe key",
                  "start": {
                    "line": 528,
                    "column": 24
                  },
                  "end": {
                    "line": 528,
                    "column": 32
                  },
                  "flags": [],
                  "authors": [],
                  "default": null,
                  "datatype": "number",
                  "required": true,
                  "enum": null
                },
                "value": {
                  "type": "argument",
                  "label": "value",
                  "description": "The value.",
                  "code": "@param {any} callback.value\nThe value.",
                  "start": {
                    "line": 528,
                    "column": 24
                  },
                  "end": {
                    "line": 528,
                    "column": 32
                  },
                  "flags": [],
                  "authors": [],
                  "default": null,
                  "datatype": "any",
                  "required": true,
                  "enum": null
                }
              },
              "returnType": "void",
              "returnDescription": "void",
              "kind": null,
              "generator": false,
              "static": false,
              "computed": false,
              "async": false,
              "super": null,
              "override": false,
              "private": false
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "walkDesc": {
          "type": "method",
          "label": "walkDesc",
          "description": "Walks through all keys in descending order.\r\n  \r\n  If omitted or NULL, starts at the beginning\r\n  \r\n  If omitted or NULL, walks till the end\r\n  \r\n  \r\n  The key\r\n  \r\n  The value.",
          "code": "walkDesc (minKey, maxKey, callback) {\r\n    if (NGN.isFn(minKey)) {\r\n      callback = minKey\r\n      minKey = maxKey = null\r\n    } else if (NGN.isFn(maxKey)) {\r\n      callback = maxKey\r\n      maxKey = null\r\n    }\r\n\r\n    minKey = NGN.coalesce(minKey)\r\n    maxKey = NGN.coalesce(maxKey)\r\n\r\n    let ptr\r\n    let index\r\n    if (maxKey === null) {\r\n      // No maximum\r\n      ptr = this.root\r\n\r\n      while (ptr.nodes[ptr.nodes.length - 1] !== null) {\r\n        ptr = ptr.nodes[ptr.nodes.length - 1]\r\n      }\r\n\r\n      index = ptr.leafs.length - 1\r\n    } else {\r\n      // Lookup\r\n      let result = this.root.search(maxKey)\r\n\r\n      if (result.leaf) {\r\n        // Maximum key exists\r\n        ptr = result.leaf.parent\r\n        index = ptr.leafs.indexOf(result.leaf)\r\n      } else {\r\n        // Key does not exist\r\n        ptr = result.node\r\n        index = result.index - 1\r\n\r\n        while (index < 0) {\r\n          // Begin at parent separator on underrun\r\n          if (ptr.parent instanceof Tree) {\r\n            return\r\n          }\r\n\r\n          index = ptr.parent.nodes.indexOf(ptr) - 1\r\n\r\n          if (index < 0) {\r\n            return\r\n          }\r\n\r\n          ptr = ptr.parent\r\n        }\r\n      }\r\n    }\r\n\r\n    // ptr/index points to first result\r\n    while (true) {\r\n      if (minKey !== null && this.METADATA.compare(ptr.leafs[index].key, minKey) < 0) {\r\n        break\r\n      }\r\n\r\n      if (callback(ptr.leafs[index].key, ptr.leafs[index].value)) {\r\n        break\r\n      }\r\n\r\n      if (ptr.nodes[index] !== null) {\r\n        // Descend Tree\r\n        ptr = ptr.nodes[index]\r\n\r\n        while (ptr.nodes[ptr.nodes.length - 1] !== null) {\r\n          ptr = ptr.nodes[ptr.nodes.length - 1]\r\n        }\r\n\r\n        index = ptr.leafs.length - 1\r\n      } else if (index > 0) {\r\n        // Next\r\n        index--\r\n      } else {\r\n        // Ascend Tree\r\n        do {\r\n          if ((ptr.parent instanceof Tree)) {\r\n            return\r\n          }\r\n\r\n          index = ptr.parent.nodes.indexOf(ptr) - 1\r\n\r\n          ptr = ptr.parent\r\n        } while (index < 0)\r\n      }\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 630,
            "column": 2
          },
          "end": {
            "line": 718,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "minKey": {
              "type": "argument",
              "label": "minKey",
              "description": "If omitted or NULL, starts at the beginning",
              "code": "minKey",
              "start": {
                "line": 630,
                "column": 12
              },
              "end": {
                "line": 630,
                "column": 18
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "number",
              "required": true,
              "enum": null
            },
            "maxKey": {
              "type": "argument",
              "label": "maxKey",
              "description": "If omitted or NULL, walks till the end",
              "code": "maxKey",
              "start": {
                "line": 630,
                "column": 20
              },
              "end": {
                "line": 630,
                "column": 26
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "number",
              "required": true,
              "enum": null
            },
            "callback": {
              "type": "method",
              "label": "callback",
              "description": "",
              "code": "@param {function} callback",
              "start": {
                "line": 630,
                "column": 2
              },
              "end": {
                "line": 718,
                "column": 3
              },
              "flags": [],
              "authors": [],
              "arguments": {
                "key": {
                  "type": "argument",
                  "label": "key",
                  "description": "The key",
                  "code": "@param {number} callback.key\nThe key",
                  "start": {
                    "line": 630,
                    "column": 28
                  },
                  "end": {
                    "line": 630,
                    "column": 36
                  },
                  "flags": [],
                  "authors": [],
                  "default": null,
                  "datatype": "number",
                  "required": true,
                  "enum": null
                },
                "value": {
                  "type": "argument",
                  "label": "value",
                  "description": "The value.",
                  "code": "@param {any} callback.value\nThe value.",
                  "start": {
                    "line": 630,
                    "column": 28
                  },
                  "end": {
                    "line": 630,
                    "column": 36
                  },
                  "flags": [],
                  "authors": [],
                  "default": null,
                  "datatype": "any",
                  "required": true,
                  "enum": null
                }
              },
              "returnType": "void",
              "returnDescription": "void",
              "kind": null,
              "generator": false,
              "static": false,
              "computed": false,
              "async": false,
              "super": null,
              "override": false,
              "private": false
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "count": {
          "type": "method",
          "label": "count",
          "description": "The number of keys between minKey and maxKey (both inclusive).\r\n  \r\n  If omitted, counts from the start\r\n  \r\n  If omitted, counts till the end",
          "code": "count (minKey, maxKey) {\r\n    let n = 0\r\n\r\n    this.walk(\r\n      minKey !== undefined ? minKey : null,\r\n      maxKey !== undefined ? maxKey : null,\r\n      (key, value) => { n++ }\r\n    )\r\n\r\n    return n\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 728,
            "column": 2
          },
          "end": {
            "line": 738,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "minKey": {
              "type": "argument",
              "label": "minKey",
              "description": "If omitted, counts from the start",
              "code": "minKey",
              "start": {
                "line": 728,
                "column": 9
              },
              "end": {
                "line": 728,
                "column": 15
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "number",
              "required": true,
              "enum": null
            },
            "maxKey": {
              "type": "argument",
              "label": "maxKey",
              "description": "If omitted, counts till the end",
              "code": "maxKey",
              "start": {
                "line": 728,
                "column": 17
              },
              "end": {
                "line": 728,
                "column": 23
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "number",
              "required": true,
              "enum": null
            }
          },
          "returnType": "number",
          "returnDescription": "",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "toString": {
          "type": "method",
          "label": "toString",
          "description": "A string representation of the tree.",
          "code": "toString () {\r\n    return `Tree(${this.METADATA.order}) ${this.root.toString()}`\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 744,
            "column": 2
          },
          "end": {
            "line": 746,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "string",
          "returnDescription": "",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        }
      }
    },
    "NGN.DATA.Index": {
      "type": "class",
      "label": "NGN.DATA.Index",
      "description": "Data indexes are a data structure that improves the speed\nof data retrieval from an NGN.DATA.Store, at the cost of\nadditional memory usage. Even though memory usage is increased\nfor each index applied to a store, it tends to be a very small\nfraction of the memory required for storing data.\n\nIndexes help locate data within a store without having to read\nevery record. They will, in the overwhelming majority of cases,\nspeed up queries. However; if overused or misused, they may\nmarginally _increase_ query processing time.\n\nNGN data indexes were designed to be used the same way relational\ndata indexes and graph data vertices are used.",
      "code": "class NGNDataIndex extends EventEmitter { // eslint-disable-line\r\n  /**\r\n   * Create a new data index.\r\n   * @param {Boolean} [BTree=false]\r\n   * Use a B-Tree index. This is only available for numeric values and dates.\r\n   * @param {String} [name='Untitled Index']\r\n   * Optional name for index. This is useful for debugging when multiple\r\n   * indexes exist.\r\n   */\r\n  constructor (btree = false, name = 'Untitled Index') {\r\n    super()\r\n\r\n    Object.defineProperties(this, {\r\n      // Private constants\r\n      CREATE_EVENT: NGN.privateconst(Symbol('create')),\r\n      REMOVE_EVENT: NGN.privateconst(Symbol('delete')),\r\n      UPDATE_EVENT: NGN.privateconst(Symbol('update')),\r\n\r\n      // Private data attributes\r\n      uniqueValues: NGN.privateconst(new Set()),\r\n      knownRecords: NGN.privateconst([]), // Linked list of Sets\r\n      name: NGN.const(name),\r\n      isBTree: NGN.privateconst(btree)\r\n    })\r\n\r\n    // Bubble up private events when applicable\r\n    const me = this\r\n    this.on([\r\n      this.CREATE_EVENT,\r\n      this.REMOVE_EVENT,\r\n      this.UPDATE_EVENT\r\n    ], function (oid, value, suppressEvent = false) {\r\n      if (!suppressEvent) {\r\n        me.emit(this.event.toString().replace(/^Symbol\\(|\\)$/g, ''), oid)\r\n      }\r\n    })\r\n\r\n    // When all known records for a given value are removed,\r\n    // clear the unique value index.\r\n    this.on(this.REMOVE_EVENT, (oid, value) => {\r\n      if (this.recordsFor(value).length === 0) {\r\n        let index = this.indexOf(value)\r\n\r\n        if (index >= 0) {\r\n          this.knownRecords.splice(index, 1)\r\n          this.uniqueValues.delete(value)\r\n        }\r\n      }\r\n    })\r\n\r\n    // Support BTree Indexing\r\n    if (this.isBTree) {\r\n      Object.defineProperty(this, 'BTREE', NGN.privateconst(new NGN.DATA.BTree(2, name)))\r\n    }\r\n  }\r\n\r\n  get keys () {\r\n    if (this.uniqueValues.size === 0) {\r\n      return []\r\n    }\r\n\r\n    return Array.from(this.uniqueValues.values())\r\n  }\r\n\r\n  /**\r\n   * Add a field/value to the index.\r\n   * @param {any} value\r\n   * The value of the model/record indexed field.\r\n   * @param {Symbol} oid\r\n   * The record's object ID (NGN.DATA.Model#OID)\r\n   */\r\n  add (value, oid, suppressEvent = false) {\r\n    let valueIndex = -1\r\n\r\n    // Create or identify the index of the unique value\r\n    if (!this.uniqueValues.has(value)) {\r\n      this.uniqueValues.add(value)\r\n      this.knownRecords.push(new Set())\r\n      valueIndex += this.uniqueValues.size\r\n    } else {\r\n      valueIndex = this.indexOf(value)\r\n    }\r\n\r\n    this.knownRecords[valueIndex].add(oid)\r\n\r\n    // Add BTree indexing\r\n    if (this.isBTree) {\r\n      let btreeValue = value instanceof Date ? value.getTime() : value\r\n\r\n      if (this.BTREE.get(btreeValue) === undefined) {\r\n        this.BTREE.put(btreeValue, valueIndex)\r\n      }\r\n    }\r\n\r\n    this.emit(this.CREATE_EVENT, oid, value, suppressEvent)\r\n  }\r\n\r\n  /**\r\n   * Remove a record from the index.\r\n   * @param  {Symbol} oid\r\n   * The record's object ID (NGN.DATA.Model#OID)\r\n   * @param  {any} [value=undefined]\r\n   * When specified, the field value will be used to identify\r\n   * the index value. Specifying this value will make the remove\r\n   * operation faster (uses introspection).\r\n   */\r\n  remove (oid, value, suppressEvent = false) {\r\n    // If a value is specified, attempt to lookup the OID by value.\r\n    if (value !== undefined) {\r\n      let index = this.recordsOf(value)\r\n\r\n      // If a value index is found, remove the OID\r\n      if (index) {\r\n        if (index.delete(oid)) { // Returns false if nothing is actually deleted.\r\n          if (this.isBTree && (!index || index.size === 0)) {\r\n            this.BTREE.delete(value instanceof Date ? value.getTime() : value)\r\n          }\r\n\r\n          this.emit(this.REMOVE_EVENT, oid, value, suppressEvent)\r\n\r\n          return\r\n        }\r\n      }\r\n\r\n      NGN.WARN(`Index value \"${value}\" not found in index.`)\r\n    }\r\n\r\n    // Iterate through all index values to remove the OID (slow)\r\n    let removed = false\r\n    for (let i = 0; i < this.knownRecords.length; i++) {\r\n      if (this.knownRecords[i].delete(oid) && !removed) {\r\n        removed = true\r\n        value = Array.from(this.uniqueValues.values())[i]\r\n\r\n        if (this.isBTree) {\r\n          this.BTREE.delete(value instanceof Date ? value.getTime() : value)\r\n        }\r\n\r\n        break\r\n      }\r\n    }\r\n\r\n    if (removed) {\r\n      this.emit(this.REMOVE_EVENT, oid, value, suppressEvent)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update an index to reflect an updated value.\r\n   * @param  {[type]} oid      [description]\r\n   * @param  {[type]} oldvalue [description]\r\n   * @param  {[type]} newvalue [description]\r\n   * @return {[type]}          [description]\r\n   */\r\n  update (oid, oldValue, newValue, suppressEvent = false) {\r\n    if (oldValue !== newValue) {\r\n      this.remove(oid, oldValue, true)\r\n      this.add(newValue, oid, true)\r\n      this.emit(this.UPDATE_EVENT, oid, null, suppressEvent)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Forcibly reset the index (clears everything).\r\n   */\r\n  reset () {\r\n    this.uniqueValues.clear()\r\n    this.knownRecords.splice(0)\r\n\r\n    if (this.isBTree) {\r\n      this.BTREE.reset()\r\n    }\r\n\r\n    this.emit('reset')\r\n  }\r\n\r\n  /**\r\n   * Retrieve the index number of known records for the\r\n   * specified value.\r\n   * @private\r\n   * @param  {any} value\r\n   * The unique value for which records are known.\r\n   * @return {[numeric]}\r\n   * The 0-based index of known records. Returns `-1` if no\r\n   * index exists.\r\n   */\r\n  indexOf (value) {\r\n    return Array.from(this.uniqueValues.keys()).indexOf(value)\r\n  }\r\n\r\n  /**\r\n   * The records of a particular value.\r\n   * @private\r\n   * @param  {any} value\r\n   * The index field value to use as a lookup.\r\n   * @return {Set}\r\n   * An set of object ID's or `null` if none exist.\r\n   */\r\n  recordsOf (value) {\r\n    let valueIndex = this.indexOf(value)\r\n\r\n    return valueIndex < 0 ? null : this.knownRecords[valueIndex]\r\n  }\r\n\r\n  /**\r\n   * Get the list of records for the given value.\r\n   * @param  {any} value\r\n   * The value of the index to lookup.\r\n   * @return {array}\r\n   * The array contains OID reference values (records).\r\n   */\r\n  recordsFor (value) {\r\n    let index = this.recordsOf(value)\r\n\r\n    if (index === null || index.size === 0) {\r\n      return []\r\n    }\r\n\r\n    return Array.from(index.values())\r\n  }\r\n}",
      "tags": {},
      "exceptions": {},
      "events": {
        "create": {
          "type": "event",
          "label": "create",
          "description": "{Symbol}\nTriggered when a new record is indexed. The payload \nrepresents the NGN.DATA.Model#oid.",
          "code": "@fires create {Symbol}\nTriggered when a new record is indexed. The payload (Symbol)\nrepresents the NGN.DATA.Model#oid.",
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "parameters": {
            "payload": {
              "type": "argument",
              "label": "payload",
              "description": null,
              "code": null,
              "start": {
                "line": 0,
                "column": 0
              },
              "end": {
                "line": 0,
                "column": 0
              },
              "flags": [],
              "authors": [],
              "datatype": "",
              "required": false,
              "enum": null
            }
          },
          "deprecated": false,
          "deprecationReplacement": null
        },
        "delete": {
          "type": "event",
          "label": "delete",
          "description": "{Symbol}\nTriggered when a record is de-indexed. The payload \nrepresents the NGN.DATA.Model#oid.",
          "code": "@fires delete {Symbol}\nTriggered when a record is de-indexed. The payload (Symbol)\nrepresents the NGN.DATA.Model#oid.",
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "parameters": {
            "payload": {
              "type": "argument",
              "label": "payload",
              "description": null,
              "code": null,
              "start": {
                "line": 0,
                "column": 0
              },
              "end": {
                "line": 0,
                "column": 0
              },
              "flags": [],
              "authors": [],
              "datatype": "",
              "required": false,
              "enum": null
            }
          },
          "deprecated": false,
          "deprecationReplacement": null
        },
        "update": {
          "type": "event",
          "label": "update",
          "description": "{Symbol}\nTriggered when a record is re-indexed \nrepresents the NGN.DATA.Model#oid.",
          "code": "@fires update {Symbol}\nTriggered when a record is re-indexed (updated). The payload (Symbol)\nrepresents the NGN.DATA.Model#oid.",
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "parameters": {
            "payload": {
              "type": "argument",
              "label": "payload",
              "description": null,
              "code": null,
              "start": {
                "line": 0,
                "column": 0
              },
              "end": {
                "line": 0,
                "column": 0
              },
              "flags": [],
              "authors": [],
              "datatype": "",
              "required": false,
              "enum": null
            }
          },
          "deprecated": false,
          "deprecationReplacement": null
        },
        "reset": {
          "type": "event",
          "label": "reset",
          "description": null,
          "code": "this.emit('reset')",
          "start": {
            "line": 204,
            "column": 4
          },
          "end": {
            "line": 204,
            "column": 22
          },
          "flags": [],
          "authors": [],
          "parameters": {},
          "deprecated": false,
          "deprecationReplacement": null
        }
      },
      "start": {
        "line": 31,
        "column": 15
      },
      "end": {
        "line": 251,
        "column": 1
      },
      "flags": [],
      "authors": [],
      "sourcefile": "./\\data\\index\\Index.js",
      "extends": "EventEmitter",
      "configuration": {},
      "properties": {
        "CREATE_EVENT": {
          "type": "property",
          "label": "CREATE_EVENT",
          "description": null,
          "code": "CREATE_EVENT: NGN.privateconst(Symbol('create'))",
          "start": {
            "line": 45,
            "column": 6
          },
          "end": {
            "line": 45,
            "column": 54
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        },
        "REMOVE_EVENT": {
          "type": "property",
          "label": "REMOVE_EVENT",
          "description": null,
          "code": "REMOVE_EVENT: NGN.privateconst(Symbol('delete'))",
          "start": {
            "line": 46,
            "column": 6
          },
          "end": {
            "line": 46,
            "column": 54
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        },
        "UPDATE_EVENT": {
          "type": "property",
          "label": "UPDATE_EVENT",
          "description": null,
          "code": "UPDATE_EVENT: NGN.privateconst(Symbol('update'))",
          "start": {
            "line": 47,
            "column": 6
          },
          "end": {
            "line": 47,
            "column": 54
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        },
        "uniqueValues": {
          "type": "property",
          "label": "uniqueValues",
          "description": null,
          "code": "uniqueValues: NGN.privateconst(new Set())",
          "start": {
            "line": 50,
            "column": 6
          },
          "end": {
            "line": 50,
            "column": 47
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        },
        "knownRecords": {
          "type": "property",
          "label": "knownRecords",
          "description": null,
          "code": "knownRecords: NGN.privateconst([])",
          "start": {
            "line": 51,
            "column": 6
          },
          "end": {
            "line": 51,
            "column": 40
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        },
        "name": {
          "type": "property",
          "label": "name",
          "description": null,
          "code": "name: NGN.const(name)",
          "start": {
            "line": 52,
            "column": 6
          },
          "end": {
            "line": 52,
            "column": 27
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "isBTree": {
          "type": "property",
          "label": "isBTree",
          "description": null,
          "code": "isBTree: NGN.privateconst(btree)",
          "start": {
            "line": 53,
            "column": 6
          },
          "end": {
            "line": 53,
            "column": 38
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        },
        "keys": {
          "type": "property",
          "label": "keys",
          "description": null,
          "code": "get keys () {\r\n    if (this.uniqueValues.size === 0) {\r\n      return []\r\n    }\r\n\r\n    return Array.from(this.uniqueValues.values())\r\n  }",
          "start": {
            "line": 87,
            "column": 2
          },
          "end": {
            "line": 93,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        }
      },
      "methods": {
        "constructor": {
          "type": "method",
          "label": "constructor",
          "description": "Create a new data index.\r\n  \r\n  Use a B-Tree index. This is only available for numeric values and dates.\r\n  \r\n  Optional name for index. This is useful for debugging when multiple\r\n  indexes exist.",
          "code": "constructor (btree = false, name = 'Untitled Index') {\r\n    super()\r\n\r\n    Object.defineProperties(this, {\r\n      // Private constants\r\n      CREATE_EVENT: NGN.privateconst(Symbol('create')),\r\n      REMOVE_EVENT: NGN.privateconst(Symbol('delete')),\r\n      UPDATE_EVENT: NGN.privateconst(Symbol('update')),\r\n\r\n      // Private data attributes\r\n      uniqueValues: NGN.privateconst(new Set()),\r\n      knownRecords: NGN.privateconst([]), // Linked list of Sets\r\n      name: NGN.const(name),\r\n      isBTree: NGN.privateconst(btree)\r\n    })\r\n\r\n    // Bubble up private events when applicable\r\n    const me = this\r\n    this.on([\r\n      this.CREATE_EVENT,\r\n      this.REMOVE_EVENT,\r\n      this.UPDATE_EVENT\r\n    ], function (oid, value, suppressEvent = false) {\r\n      if (!suppressEvent) {\r\n        me.emit(this.event.toString().replace(/^Symbol\\(|\\)$/g, ''), oid)\r\n      }\r\n    })\r\n\r\n    // When all known records for a given value are removed,\r\n    // clear the unique value index.\r\n    this.on(this.REMOVE_EVENT, (oid, value) => {\r\n      if (this.recordsFor(value).length === 0) {\r\n        let index = this.indexOf(value)\r\n\r\n        if (index >= 0) {\r\n          this.knownRecords.splice(index, 1)\r\n          this.uniqueValues.delete(value)\r\n        }\r\n      }\r\n    })\r\n\r\n    // Support BTree Indexing\r\n    if (this.isBTree) {\r\n      Object.defineProperty(this, 'BTREE', NGN.privateconst(new NGN.DATA.BTree(2, name)))\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 40,
            "column": 2
          },
          "end": {
            "line": 85,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "btree": {
              "type": "argument",
              "label": "BTree",
              "description": "Use a B-Tree index. This is only available for numeric values and dates.",
              "code": "btree = false",
              "start": {
                "line": 40,
                "column": 15
              },
              "end": {
                "line": 40,
                "column": 28
              },
              "flags": [],
              "authors": [],
              "default": "false",
              "datatype": "boolean",
              "required": false,
              "enum": null
            },
            "name": {
              "type": "argument",
              "label": "name",
              "description": "Optional name for index. This is useful for debugging when multiple\nindexes exist.",
              "code": "name = 'Untitled Index'",
              "start": {
                "line": 40,
                "column": 30
              },
              "end": {
                "line": 40,
                "column": 53
              },
              "flags": [],
              "authors": [],
              "default": "Untitled Index",
              "datatype": "string",
              "required": false,
              "enum": null
            },
            "BTree": {
              "type": "argument",
              "label": "BTree",
              "description": "Use a B-Tree index. This is only available for numeric values and dates.",
              "code": "btree = false",
              "start": {
                "line": 40,
                "column": 15
              },
              "end": {
                "line": 40,
                "column": 28
              },
              "flags": [],
              "authors": [],
              "default": "false",
              "datatype": "boolean",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "constructor",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "add": {
          "type": "method",
          "label": "add",
          "description": "Add a field/value to the index.\r\n  \r\n  The value of the model/record indexed field.\r\n  \r\n  The record's object ID (NGN.DATA.Model#OID)",
          "code": "add (value, oid, suppressEvent = false) {\r\n    let valueIndex = -1\r\n\r\n    // Create or identify the index of the unique value\r\n    if (!this.uniqueValues.has(value)) {\r\n      this.uniqueValues.add(value)\r\n      this.knownRecords.push(new Set())\r\n      valueIndex += this.uniqueValues.size\r\n    } else {\r\n      valueIndex = this.indexOf(value)\r\n    }\r\n\r\n    this.knownRecords[valueIndex].add(oid)\r\n\r\n    // Add BTree indexing\r\n    if (this.isBTree) {\r\n      let btreeValue = value instanceof Date ? value.getTime() : value\r\n\r\n      if (this.BTREE.get(btreeValue) === undefined) {\r\n        this.BTREE.put(btreeValue, valueIndex)\r\n      }\r\n    }\r\n\r\n    this.emit(this.CREATE_EVENT, oid, value, suppressEvent)\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 102,
            "column": 2
          },
          "end": {
            "line": 126,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "value": {
              "type": "argument",
              "label": "value",
              "description": "The value of the model/record indexed field.",
              "code": "value",
              "start": {
                "line": 102,
                "column": 7
              },
              "end": {
                "line": 102,
                "column": 12
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "any",
              "required": true,
              "enum": null
            },
            "oid": {
              "type": "argument",
              "label": "oid",
              "description": "The record's object ID",
              "code": "oid",
              "start": {
                "line": 102,
                "column": 14
              },
              "end": {
                "line": 102,
                "column": 17
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "symbol",
              "required": true,
              "enum": [
                "NGN.DATA.Model#OID"
              ]
            },
            "suppressEvent": {
              "type": "argument",
              "label": "suppressEvent",
              "description": null,
              "code": "suppressEvent = false",
              "start": {
                "line": 102,
                "column": 19
              },
              "end": {
                "line": 102,
                "column": 40
              },
              "flags": [],
              "authors": [],
              "default": false,
              "datatype": "boolean",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "remove": {
          "type": "method",
          "label": "remove",
          "description": "Remove a record from the index.\r\n  \r\n  The record's object ID (NGN.DATA.Model#OID)\r\n  \r\n  When specified, the field value will be used to identify\r\n  the index value. Specifying this value will make the remove\r\n  operation faster (uses introspection).",
          "code": "remove (oid, value, suppressEvent = false) {\r\n    // If a value is specified, attempt to lookup the OID by value.\r\n    if (value !== undefined) {\r\n      let index = this.recordsOf(value)\r\n\r\n      // If a value index is found, remove the OID\r\n      if (index) {\r\n        if (index.delete(oid)) { // Returns false if nothing is actually deleted.\r\n          if (this.isBTree && (!index || index.size === 0)) {\r\n            this.BTREE.delete(value instanceof Date ? value.getTime() : value)\r\n          }\r\n\r\n          this.emit(this.REMOVE_EVENT, oid, value, suppressEvent)\r\n\r\n          return\r\n        }\r\n      }\r\n\r\n      NGN.WARN(`Index value \"${value}\" not found in index.`)\r\n    }\r\n\r\n    // Iterate through all index values to remove the OID (slow)\r\n    let removed = false\r\n    for (let i = 0; i < this.knownRecords.length; i++) {\r\n      if (this.knownRecords[i].delete(oid) && !removed) {\r\n        removed = true\r\n        value = Array.from(this.uniqueValues.values())[i]\r\n\r\n        if (this.isBTree) {\r\n          this.BTREE.delete(value instanceof Date ? value.getTime() : value)\r\n        }\r\n\r\n        break\r\n      }\r\n    }\r\n\r\n    if (removed) {\r\n      this.emit(this.REMOVE_EVENT, oid, value, suppressEvent)\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 137,
            "column": 2
          },
          "end": {
            "line": 176,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "oid": {
              "type": "argument",
              "label": "oid",
              "description": "The record's object ID",
              "code": "oid",
              "start": {
                "line": 137,
                "column": 10
              },
              "end": {
                "line": 137,
                "column": 13
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "symbol",
              "required": true,
              "enum": [
                "NGN.DATA.Model#OID"
              ]
            },
            "value": {
              "type": "argument",
              "label": "value",
              "description": "When specified, the field value will be used to identify\nthe index value. Specifying this value will make the remove\noperation faster .",
              "code": "value",
              "start": {
                "line": 137,
                "column": 15
              },
              "end": {
                "line": 137,
                "column": 20
              },
              "flags": [],
              "authors": [],
              "default": "undefined",
              "datatype": "any",
              "required": false,
              "enum": [
                "uses introspection"
              ]
            },
            "suppressEvent": {
              "type": "argument",
              "label": "suppressEvent",
              "description": null,
              "code": "suppressEvent = false",
              "start": {
                "line": 137,
                "column": 22
              },
              "end": {
                "line": 137,
                "column": 43
              },
              "flags": [],
              "authors": [],
              "default": false,
              "datatype": "boolean",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "update": {
          "type": "method",
          "label": "update",
          "description": "Update an index to reflect an updated value.",
          "code": "update (oid, oldValue, newValue, suppressEvent = false) {\r\n    if (oldValue !== newValue) {\r\n      this.remove(oid, oldValue, true)\r\n      this.add(newValue, oid, true)\r\n      this.emit(this.UPDATE_EVENT, oid, null, suppressEvent)\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 185,
            "column": 2
          },
          "end": {
            "line": 191,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "oid": {
              "type": "argument",
              "label": "oid",
              "description": "[description]",
              "code": "oid",
              "start": {
                "line": 185,
                "column": 10
              },
              "end": {
                "line": 185,
                "column": 13
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "[type]",
              "required": true,
              "enum": null
            },
            "oldValue": {
              "type": "argument",
              "label": "oldvalue",
              "description": "[description]",
              "code": "oldValue",
              "start": {
                "line": 185,
                "column": 15
              },
              "end": {
                "line": 185,
                "column": 23
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "[type]",
              "required": true,
              "enum": null
            },
            "newValue": {
              "type": "argument",
              "label": "newvalue",
              "description": "[description]",
              "code": "newValue",
              "start": {
                "line": 185,
                "column": 25
              },
              "end": {
                "line": 185,
                "column": 33
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "[type]",
              "required": true,
              "enum": null
            },
            "suppressEvent": {
              "type": "argument",
              "label": "suppressEvent",
              "description": null,
              "code": "suppressEvent = false",
              "start": {
                "line": 185,
                "column": 35
              },
              "end": {
                "line": 185,
                "column": 56
              },
              "flags": [],
              "authors": [],
              "default": false,
              "datatype": "boolean",
              "required": false,
              "enum": null
            },
            "oldvalue": {
              "type": "argument",
              "label": "oldvalue",
              "description": "[description]",
              "code": "oldValue",
              "start": {
                "line": 185,
                "column": 15
              },
              "end": {
                "line": 185,
                "column": 23
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "[type]",
              "required": true,
              "enum": null
            },
            "newvalue": {
              "type": "argument",
              "label": "newvalue",
              "description": "[description]",
              "code": "newValue",
              "start": {
                "line": 185,
                "column": 25
              },
              "end": {
                "line": 185,
                "column": 33
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "[type]",
              "required": true,
              "enum": null
            }
          },
          "returnType": "[type]",
          "returnDescription": "description",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "reset": {
          "type": "method",
          "label": "reset",
          "description": "Forcibly reset the index (clears everything).",
          "code": "reset () {\r\n    this.uniqueValues.clear()\r\n    this.knownRecords.splice(0)\r\n\r\n    if (this.isBTree) {\r\n      this.BTREE.reset()\r\n    }\r\n\r\n    this.emit('reset')\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 196,
            "column": 2
          },
          "end": {
            "line": 205,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "indexOf": {
          "type": "method",
          "label": "indexOf",
          "description": "Retrieve the index number of known records for the\r\n  specified value.\r\n  \r\n  \r\n  The unique value for which records are known.\r\n  \r\n  The 0-based index of known records. Returns `-1` if no\r\n  index exists.",
          "code": "indexOf (value) {\r\n    return Array.from(this.uniqueValues.keys()).indexOf(value)\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 217,
            "column": 2
          },
          "end": {
            "line": 219,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "value": {
              "type": "argument",
              "label": "value",
              "description": "The unique value for which records are known.",
              "code": "value",
              "start": {
                "line": 217,
                "column": 11
              },
              "end": {
                "line": 217,
                "column": 16
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "returnType": "[numeric]",
          "returnDescription": "null The 0-based index of known records. Returns `-1` if no\nindex exists.",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": true
        },
        "recordsOf": {
          "type": "method",
          "label": "recordsOf",
          "description": "The records of a particular value.\r\n  \r\n  \r\n  The index field value to use as a lookup.\r\n  \r\n  An set of object ID's or `null` if none exist.",
          "code": "recordsOf (value) {\r\n    let valueIndex = this.indexOf(value)\r\n\r\n    return valueIndex < 0 ? null : this.knownRecords[valueIndex]\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 229,
            "column": 2
          },
          "end": {
            "line": 233,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "value": {
              "type": "argument",
              "label": "value",
              "description": "The index field value to use as a lookup.",
              "code": "value",
              "start": {
                "line": 229,
                "column": 13
              },
              "end": {
                "line": 229,
                "column": 18
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "returnType": "Set",
          "returnDescription": "null An set of object ID's or `null` if none exist.",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": true
        },
        "recordsFor": {
          "type": "method",
          "label": "recordsFor",
          "description": "Get the list of records for the given value.\r\n  \r\n  The value of the index to lookup.\r\n  \r\n  The array contains OID reference values (records).",
          "code": "recordsFor (value) {\r\n    let index = this.recordsOf(value)\r\n\r\n    if (index === null || index.size === 0) {\r\n      return []\r\n    }\r\n\r\n    return Array.from(index.values())\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 242,
            "column": 2
          },
          "end": {
            "line": 250,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "value": {
              "type": "argument",
              "label": "value",
              "description": "The value of the index to lookup.",
              "code": "value",
              "start": {
                "line": 242,
                "column": 14
              },
              "end": {
                "line": 242,
                "column": 19
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "returnType": "array",
          "returnDescription": "null The array contains OID reference values .",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        }
      }
    },
    "NGN.DATA.Model": {
      "type": "class",
      "label": "NGN.DATA.Model",
      "description": "The date/time when the record expires. This may be set to\r\n  a future date, or a numeric value. Numeric values\r\n  represent the number of milliseconds from the current time\r\n  before the record expires. For example, set this to `3000`\r\n  to force the record to expire 3 seconds from now.\r\n  \n  Set this to `0` to immediately expire the record. Set this to\r\n  `-1` or `null` to prevent the record from expiring.",
      "code": "class NGNDataEntity extends EventEmitter { // eslint-disable-line\r\n  constructor (cfg) {\r\n    cfg = NGN.coalesce(cfg, {})\r\n\r\n    super()\r\n\r\n    if (cfg.dataMap) {\r\n      cfg.fieldmap = cfg.dataMap\r\n      NGN.WARN('\"dataMap\" is deprecated. Use \"map\" instead.')\r\n    }\r\n\r\n    if (cfg.idAttribute) {\r\n      cfg.IdentificationField = cfg.idAttribute\r\n      NGN.WARN('\"idAttribute\" is deprecated. Use \"IdentificationField\" instead.')\r\n    }\r\n\r\n    const me = this\r\n\r\n    // Create private attributes & data placeholders\r\n    Object.defineProperties(this, {\r\n      /**\r\n       * @property {Symbol} OID\r\n       * A unique object ID assigned to the model. This is an\r\n       * internal readon-only reference.\r\n       * @private\r\n       */\r\n      OID: NGN.private(Symbol('model.id')),\r\n\r\n      METADATA: NGN.privateconst({\r\n        /**\r\n         * @cfg {string} [name]\r\n         * A descriptive name for the model. This is typically used for\r\n         * debugging, logging, schema defintions, and (sometimes) data proxies.\r\n         */\r\n        name: NGN.coalesce(cfg.name, 'Untitled Model'),\r\n\r\n        /**\r\n         * @cfg {string} [description]\r\n         * A description of the model. This is typically used for\r\n         * debugging, logging, schema definitions, and (sometimes) data proxies.\r\n         */\r\n        description: NGN.coalesce(cfg.description, cfg.name, 'Generic Data Model'),\r\n\r\n        /**\r\n         * @cfg {object} fields\r\n         * A private object containing the data fields of the model.\r\n         * Each key contains the field name, while each value can be one of\r\n         * the following:\r\n         *\r\n         * - Primitive (String, Number, RegExp, Boolean)\r\n         * - Standard Type (Array, Object, Date)\r\n         * - Custom Class\r\n         * - NGN.DATA.Field\r\n         * - An NGN.DATA.Field configuration\r\n         * - `null` (Defaults to String primitive)\r\n         *\r\n         * ```js\r\n         * fields: {\r\n         *   a: String,\r\n         *   b: Date,\r\n         *   c: MyCustomClass,\r\n         *   d: new NGN.DATA.Field({\r\n         *     required: true,\r\n         *     type: String,\r\n         *     default: 'some default value'\r\n         *   }),\r\n         *   e: {\r\n         *     required: true,\r\n         *     type: String,\r\n         *     default: 'some default value'\r\n         *   },\r\n         *   f: null // Uses default field config (String)\r\n         * }\r\n         * ```\r\n         *\r\n         * Extensions of the NGN.DATA.Field are also supported,\r\n         * such as NGN.DATA.VirtualField and NGN.DATA.Relationship.\r\n         */\r\n        fields: Object.assign({}, NGN.coalesce(cfg.fields, {})),\r\n        knownFieldNames: new Set(),\r\n        invalidFieldNames: new Set(),\r\n        auditFieldNames: NGN.coalesce(cfg.audit, false) ? new Set() : null,\r\n\r\n        /**\r\n         * @property {[NGN.DATA.Rule]|Object}\r\n         * Custom validation rules used to verify the integrity of the entire\r\n         * model. This only applies to the full model. Individual data fields\r\n         * may have their own validators.\r\n         *\r\n         * If an object is specified, it should contain simple key/value pairs,\r\n         * where the key is the descriptive name of the rule and the value is\r\n         * a synchronous callback function that returns a `true`/`false` value.\r\n         * For instance, assume the fields called `price`, `items`, and `tax` exist\r\n         * in the example model below. :\r\n         *\r\n         * ```js\r\n         * {\r\n         *   'Positive Sale': function () {\r\n         *      return (this.price * this.items) > 0\r\n         *   },\r\n         *   'Taxes Applied': function () {\r\n         *      return this.tax > 0\r\n         *   }\r\n         * }\r\n         * ```\r\n         *\r\n         * Alternatively, an array of NGN.DATA.Rule instances may be provided.\r\n         */\r\n        validators: NGN.coalesce(cfg.rules, cfg.rule, cfg.validators),\r\n\r\n        /**\r\n         * @cfgproperty {boolean} [validation=true]\r\n         * Toggle data validation using this.\r\n         */\r\n        validation: NGN.coalesce(cfg.validation, true),\r\n\r\n        /**\r\n         * @cfg {boolean} [autoid=false]\r\n         * If the NGN.DATA.Model#IdentificationField/id is not provided for a record,\r\n         * a unique ID will be automatically generated for it.\r\n         *\r\n         * An NGN.DATA.Store using a model with this set to `true` will never\r\n         * have a duplicate record, since the #id or #IdentificationField will always\r\n         * be unique.\r\n         */\r\n        autoid: NGN.coalesce(cfg.autoid, false),\r\n\r\n        /**\r\n         * @cfg {String} [IdentificationField='id']\r\n         * Setting this allows an attribute of the object to be used as the ID.\r\n         * For example, if an email is the ID of a user, this would be set to\r\n         * `email`.\r\n         */\r\n        IdentificationField: NGN.coalesce(cfg.IdentificationField, cfg.idField, 'id'),\r\n\r\n        /**\r\n         * @cfgproperty {Date|Number} [expires]\r\n         * When this is set to a date/time, the model record will be marked\r\n         * as expired at the specified time/date. If a number is specified\r\n         * (milliseconds), the record will be marked as expired after the\r\n         * specified time period has elapsed. When a record/model is marked as\r\n         * \"expired\", it triggers the `expired` event. By default, expired\r\n         * records/models within an NGN.DATA.Store will be removed from the store.\r\n         *\r\n         * Setting this to any value less than `0` disables expiration.\r\n         * @fires expired\r\n         * Triggered when the model/record expires.\r\n         */\r\n        expiration: null,\r\n\r\n        // Holds a setTimeout method for expiration events.\r\n        expirationTimeout: null,\r\n\r\n        created: Date.now(),\r\n        store: null,\r\n\r\n        /**\r\n         * @cfg {boolean} [audit=false]\r\n         * Enable auditing to support #undo/#redo operations. This creates and\r\n         * manages a NGN.DATA.TransactionLog.\r\n         */\r\n        AUDITABLE: false,\r\n        AUDITLOG: NGN.coalesce(cfg.audit, false) ? new NGN.DATA.TransactionLog() : null,\r\n        AUDIT_HANDLER: function (change) {\r\n          if (change.hasOwnProperty('cursor')) {\r\n            me.METADATA.AUDITLOG.commit(me.METADATA.getAuditMap())\r\n          }\r\n        },\r\n\r\n        EVENTS: new Set([\r\n          'field.update',\r\n          'field.create',\r\n          'field.remove',\r\n          'field.invalid',\r\n          'field.valid',\r\n          'field.hidden',\r\n          'field.unhidden',\r\n          'field.rule.add',\r\n          'field.rule.remove',\r\n          'rule.add',\r\n          'rule.remove',\r\n          'relationship.create',\r\n          'relationship.remove',\r\n          'expired',\r\n          'deleted',\r\n          'reset',\r\n          'load'\r\n        ]),\r\n\r\n        /**\r\n         * An internal method used to apply field definitions to the model.\r\n         * @param  {string} fieldname\r\n         * Name of the field (as applied to the model).\r\n         * @param  {NGN.DATA.Field|Object|Primitive} [fieldConfiguration=null]\r\n         * The configuration to apply. See #addField for details.\r\n         * @param  {Boolean} [suppressEvents=false]\r\n         * Optionally suppress the `field.create` event.\r\n         * @private\r\n         */\r\n        applyField: (field, fieldcfg = null, suppressEvents = false) => {\r\n          // Prevent duplicate fields\r\n          if (this.METADATA.knownFieldNames.has(field)) {\r\n            return NGN.WARN(`Duplicate field \"${field}\" detected.`)\r\n          }\r\n\r\n          // Prevent reserved words\r\n          if (this.hasOwnProperty(field) && field.toLowerCase() !== 'id') {\r\n            throw new ReservedWordError(`\"${field}\" cannot be used as a field name (reserved word).`)\r\n          }\r\n\r\n          // If the field config isn't already an NGN.DATA.Field, create it.\r\n          if (!(fieldcfg instanceof NGN.DATA.Field)) {\r\n            if (fieldcfg instanceof NGN.DATA.Store || fieldcfg instanceof NGN.DATA.Model) {\r\n              if (this.METADATA.IdentificationField === field) {\r\n                throw new InvalidConfigurationError(`\"${field}\" cannot be an ID. Relationship fields cannot be an identification field/attribute.`)\r\n              }\r\n\r\n              this.METADATA.fields[field] = new NGN.DATA.Relationship({\r\n                name: field,\r\n                record: fieldcfg,\r\n                model: this\r\n              })\r\n            } else {\r\n              switch (NGN.typeof(fieldcfg)) {\r\n                // Custom config\r\n                case 'object':\r\n                  fieldcfg.model = this\r\n                  fieldcfg.identifier = NGN.coalesce(fieldcfg.identifier, this.METADATA.IdentificationField === field)\r\n                  fieldcfg.name = field\r\n\r\n                  this.METADATA.fields[field] = new NGN.DATA.Field(fieldcfg)\r\n\r\n                  break\r\n\r\n                // Collection of models\r\n                case 'array':\r\n                  return this.METADATA.applyField(field, fieldcfg[0], suppressEvents)\r\n\r\n                // Type-based cfg.\r\n                default:\r\n                  if (NGN.isFn(fieldcfg) || fieldcfg === null) {\r\n                    if (NGN.isFn(fieldcfg) && ['string', 'number', 'boolean', 'number', 'symbol', 'regexp', 'date', 'array', 'object'].indexOf(NGN.typeof(fieldcfg)) < 0) {\r\n                      this.METADATA.fields[field] = new NGN.DATA.VirtualField({\r\n                        name: field,\r\n                        identifier: this.METADATA.IdentificationField === field,\r\n                        model: this,\r\n                        method: fieldcfg\r\n                      })\r\n\r\n                      break\r\n                    }\r\n\r\n                    this.METADATA.fields[field] = new NGN.DATA.Field({\r\n                      name: field,\r\n                      type: fieldcfg,\r\n                      identifier: this.METADATA.IdentificationField === field,\r\n                      model: this\r\n                    })\r\n\r\n                    break\r\n                  }\r\n\r\n                  this.METADATA.fields[field] = new NGN.DATA.Field({\r\n                    name: field,\r\n                    type: NGN.isFn(fieldcfg) ? fieldcfg : String,\r\n                    identifier: NGN.isFn(fieldcfg)\r\n                      ? false\r\n                      : NGN.coalesce(fieldcfg.identifier, this.METADATA.IdentificationField === field),\r\n                    model: this\r\n                  })\r\n\r\n                  break\r\n              }\r\n            }\r\n          } else if (fieldcfg.model === null) {\r\n            fieldcfg.name = field\r\n            fieldcfg.identifier = fieldcfg.identifier = NGN.coalesce(fieldcfg.identifier, this.METADATA.IdentificationField === field)\r\n\r\n            this.METADATA.fields[field] = fieldcfg\r\n            this.METADATA.fields[field].model = this\r\n          } else if (fieldcfg.model === this) {\r\n            fieldcfg.identifier = NGN.coalesce(fieldcfg.identifier, this.METADATA.IdentificationField === field)\r\n\r\n            this.METADATA.fields[field] = fieldcfg\r\n          } else if (!(fieldcfg instanceof NGN.DATA.Field)) {\r\n            return NGN.WARN(`The \"${fieldcfg.name}\" field cannot be applied because model is already specified.`)\r\n          }\r\n\r\n          // Add a direct reference to the model.\r\n          Object.defineProperty(this, field, {\r\n            enumerable: true,\r\n            configurable: true,\r\n            get: () => this.get(field),\r\n            set: (value) => this.set(field, value)\r\n          })\r\n\r\n          // Enable auditing if necessary.\r\n          if (this.METADATA.AUDITABLE) {\r\n            if (this.METADATA.fields[field].fieldType !== 'virtual') {\r\n              this.METADATA.fields[field].auditable = true\r\n              this.METADATA.auditFieldNames.add(field)\r\n            }\r\n          }\r\n\r\n          // Add the field to the list\r\n          this.METADATA.knownFieldNames.add(field)\r\n\r\n          this.METADATA.fields[field].relay('*', this, 'field.')\r\n\r\n          if (!suppressEvents) {\r\n            this.emit('field.create', this.METADATA.fields[field])\r\n          }\r\n\r\n          return this.METADATA.fields[field]\r\n        },\r\n\r\n        /**\r\n         * An internal helper method for applying changes to the model.\r\n         * @param  {String} [type='undo']\r\n         * This can be `undo` or `redo`.\r\n         * @param  {Number} [count=1]\r\n         * The number of cursor indexes to shift\r\n         * @param  {Boolean} [suppressEvents=false]\r\n         * Indicates events should be suppressed.\r\n         * @private\r\n         */\r\n        applyChange: (type = 'undo', count = 1, suppressEvents = false) => {\r\n          if (!this.METADATA.AUDITABLE) {\r\n            NGN.WARN(`The ${type} operation failed on the ${this.name} model because auditing is disabled.`)\r\n            return\r\n          }\r\n\r\n          this.METADATA.AUDITLOG[type === 'undo' ? 'rollback' : 'advance'](count)\r\n\r\n          let data = this.METADATA.AUDITLOG.currentValue\r\n\r\n          if (data) {\r\n            this.METADATA.auditFieldNames.forEach(fieldname => {\r\n              let field = this.METADATA.fields[fieldname]\r\n              let log = field.METADATA.AUDITLOG\r\n\r\n              if (log.cursor !== data[fieldname]) {\r\n                if (typeof data[fieldname] === 'symbol') {\r\n                  log.cursor = data[fieldname]\r\n                } else {\r\n                  log.cursor = null\r\n                }\r\n\r\n                field.METADATA.setValue(NGN.coalesce(log.currentValue, field.default), suppressEvents, true)\r\n              }\r\n            })\r\n          }\r\n        },\r\n\r\n        /**\r\n         * Generates a key/value representation of the model where\r\n         * each key represents an auditable field and each value is the\r\n         * transaction cursor ID.\r\n         * @return {Object}\r\n         * @private\r\n         */\r\n        getAuditMap: () => {\r\n          let map = {}\r\n\r\n          this.METADATA.auditFieldNames.forEach(field => {\r\n            map[field] = this.METADATA.fields[field].METADATA.AUDITLOG.cursor\r\n          })\r\n\r\n          return map\r\n        },\r\n\r\n        /**\r\n         * Restore the model to a specific audit map (i.e. historical state\r\n         * of multiple fields).\r\n         * @param {Object} map\r\n         * The audit map to restore.\r\n         */\r\n        // restore: (map) => {\r\n        //   let keys = Object.keys(map)\r\n        //\r\n        //   for (let i = 0; i < keys.length; i++) {\r\n        //     if (this.METADATA.knownFieldNames.has(keys[i]) && typeof map[keys[i]] === 'symbol') {\r\n        //       console.log('Has', keys[i])\r\n        //\r\n        //     }\r\n        //   }\r\n        // },\r\n\r\n        // Deprecations\r\n        setSilent: NGN.deprecate(this.setSilentFieldValue, 'setSilent has been deprecated. Use setSilentFieldValue instead.'),\r\n\r\n        /**\r\n         * @cfgproperty {object} fieldmap\r\n         * An object mapping model attribute names to data storage field names.\r\n         *\r\n         * _Example_\r\n         * ```\r\n         * {\r\n         *   ModelFieldName: 'inputName',\r\n         *   father: 'dad',\r\n         *   email: 'eml',\r\n         *   image: 'img',\r\n         *   displayName: 'dn',\r\n         *   firstName: 'gn',\r\n         *   lastName: 'sn',\r\n         *   middleName: 'mn',\r\n         *   gender: 'sex',\r\n         *   dob: 'bd'\r\n         * }\r\n         * ```\r\n         */\r\n        DATAMAP: null\r\n      }),\r\n\r\n      MAP: NGN.get(() => {\r\n        return NGN.coalesce(\r\n          this.METADATA.DATAMAP,\r\n          this.METADATA.store instanceof NGN.DATA.Store\r\n            ? this.METADATA.store.map\r\n            : null\r\n        )\r\n      })\r\n    })\r\n\r\n    if (cfg.fieldmap instanceof NGN.DATA.FieldMap) {\r\n      this.METADATA.DATAMAP = cfg.fieldmap\r\n    } else if (NGN.typeof(cfg.fieldmap) === 'object') {\r\n      this.METADATA.DATAMAP = new NGN.DATA.FieldMap(cfg.fieldmap)\r\n    }\r\n\r\n    // Bubble events to the BUS\r\n    // this.relay('*', NGN.BUS, 'record.')\r\n\r\n    // Add data fields.\r\n    let fields = Object.keys(this.METADATA.fields)\r\n    for (let i = 0; i < fields.length; i++) {\r\n      let name = fields[i]\r\n\r\n      if (this.METADATA.knownFieldNames.has(name)) {\r\n        NGN.WARN(`Duplicate field \"${name}\" detected.`)\r\n      } else {\r\n        // Configure a data field for each configuration.\r\n        this.METADATA.applyField(name, this.METADATA.fields[name], true)\r\n      }\r\n    }\r\n\r\n    // Apply automatic ID's when applicable\r\n    if (this.METADATA.autoid) {\r\n      let autoIdValue = null\r\n\r\n      Object.defineProperty(this.METADATA, 'IdentificationValue', NGN.get(() => {\r\n        if (autoIdValue === null) {\r\n          autoIdValue = NGN.DATA.UTILITY.UUID()\r\n        }\r\n\r\n        return autoIdValue\r\n      }))\r\n    }\r\n\r\n    // Apply auditing if configured\r\n    this.auditable = NGN.coalesce(cfg.audit, false)\r\n\r\n    // Clear any cached checksums when the model changes.\r\n    this.on(['field.update', 'field.create', 'field.delete', 'field.hidden', 'field.unhidden'], () => {\r\n      if (this.METADATA.checksum) {\r\n        this.METADATA.checksum = null\r\n      }\r\n    })\r\n\r\n    // Configure TTL/Expiration\r\n    if (cfg.expires) {\r\n      this.expires = cfg.expires\r\n    }\r\n\r\n    // Configure model-level validation rules\r\n    if (this.METADATA.validators !== null) {\r\n      switch (NGN.typeof(this.METADATA.validators)) {\r\n        // Support key/value objects where the key is the name and value is a function.\r\n        case 'object':\r\n          let keys = Object.keys(this.METADATA.validators)\r\n          let rules = []\r\n\r\n          for (let i = 0; i < keys.length; i++) {\r\n            rules.push(new NGN.DATA.Rule(this.METADATA.validators[keys[i]], keys[i], this))\r\n          }\r\n\r\n          break\r\n\r\n        // Support an array of existing data rules.\r\n        case 'array':\r\n          for (let i = 0; i < this.METADATA.validators.length; i++) {\r\n            if (this.METADATA.validators[i].hasOwnProperty('RULE')) {\r\n              this.METADATA.validators[i].RULE.scope = this\r\n            } else {\r\n              throw new Error(`Invalid data rule configuration for ${this.name} model. Rule #${i} is not a valid NGN.DATA.Rule instance.`)\r\n            }\r\n          }\r\n\r\n          break\r\n\r\n        // Diasllow any other kinds of rules.\r\n        default:\r\n          throw new Error(`Invalid data rule configuration for ${this.name} model. Expected an object or array of NGN.DATA.Rule instances. Received \"${NGN.typeof(this.METADATA.validators)}\"`)\r\n      }\r\n    }\r\n  }\r\n\r\n  get name () {\r\n    return this.METADATA.name\r\n  }\r\n\r\n  set auditable (value) {\r\n    value = NGN.forceBoolean(value)\r\n\r\n    if (value !== this.METADATA.AUDITABLE) {\r\n      this.METADATA.AUDITABLE = value\r\n      this.METADATA.AUDITLOG = value ? new NGN.DATA.TransactionLog() : null\r\n      this.METADATA.auditFieldNames = value ? new Set() : null\r\n\r\n      // Set each field to an auditable state (or not).\r\n      this.METADATA.knownFieldNames.forEach(fieldname => {\r\n        if (!this.METADATA.fields[fieldname].virtual) {\r\n          this.METADATA.fields[fieldname].auditable = value\r\n\r\n          if (value) {\r\n            this.METADATA.auditFieldNames.add(fieldname)\r\n          }\r\n        }\r\n      })\r\n\r\n      if (value) {\r\n        // Track Changes (if auditing enabled)\r\n        this.on('field.transaction.*', (id) => {\r\n          this.METADATA.AUDIT_HANDLER({ cursor: id })\r\n        })\r\n      } else {\r\n        this.METADATA.auditFieldNames.clear()\r\n\r\n        this.off('field.transaction.*')\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The unique ID assigned to the model.\r\n   * @return {string}\r\n   */\r\n  get id () {\r\n    return this.get(this.METADATA.IdentificationField)\r\n  }\r\n\r\n  set id (value) {\r\n    this.set('id', value)\r\n  }\r\n\r\n  /**\r\n   * @property ID\r\n   * An alias for #id.\r\n   */\r\n  get ID () {\r\n    return this.id\r\n  }\r\n\r\n  set ID (value) {\r\n    this.set('id', value)\r\n  }\r\n\r\n  /**\r\n   * @property {Array} changelog\r\n   * The changelog returns the underlying NGN.DATA.TransactionLog#log if\r\n   * auditing is available. The array will be empty if auditing is disabled.\r\n   */\r\n  get changelog () {\r\n    return this.METADATA.AUDITLOG.log.map(entry => {\r\n      let result = {\r\n        timestamp: entry.timestamp,\r\n        activeCursor: entry.activeCursor,\r\n        value: {}\r\n      }\r\n\r\n      let data = entry.value\r\n      let field = Object.keys(data)\r\n\r\n      for (let i = 0; i < field.length; i++) {\r\n        if (typeof data[field[i]] === 'symbol') {\r\n          result.value[field[i]] = NGN.coalesce(\r\n            this.METADATA.fields[field[i]].METADATA.AUDITLOG.getCommit(data[field[i]]).value,\r\n            this.METADATA.fields[field[i]].default\r\n          )\r\n        } else {\r\n          result.value[field[i]] = NGN.coalesce(this.METADATA.fields[field[i]].default)\r\n        }\r\n      }\r\n\r\n      return result\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @property {Number} createDate\r\n   * The date/time when the model is created.\r\n   */\r\n  get createDate () {\r\n    return this.METADATA.created\r\n  }\r\n\r\n  /**\r\n   * @property {object} data\r\n   * A serialized version of the data represented by the model. This\r\n   * only includes non-virtual fields. See #representation to use\r\n   * a representation of data containing virtual fields.\r\n   */\r\n  get data () {\r\n    if (this.MAP) {\r\n      return this.MAP.applyInverseMap(this.serializeFields())\r\n    }\r\n\r\n    return this.serializeFields()\r\n  }\r\n\r\n  /**\r\n   * @property {object} unmappedData\r\n   * Returns #data _without applying_ the data #map.\r\n   */\r\n  get unmappedData () {\r\n    return this.serializeFields()\r\n  }\r\n\r\n  /**\r\n   * @property {object} representation\r\n   * A serialized version of the data represented by the model. This\r\n   * includes virtual fields. See #data to use just the raw values.\r\n   */\r\n  get representation () {\r\n    if (this.MAP) {\r\n      return this.MAP.applyInverseMap(this.serializeFields(false, false))\r\n    }\r\n\r\n    return this.serializeFields(false, false)\r\n  }\r\n\r\n  /**\r\n   * @property {object} unmappedRepresentation\r\n   * Returns #representation _without applying_ the data #map.\r\n   */\r\n  get unmappedRepresentation () {\r\n    return this.serializeFields(false, false)\r\n  }\r\n\r\n  /**\r\n   * @property {string} checksum\r\n   * The checksum is a unique \"fingerprint\" of the data stored in the model.\r\n   * Please note that generating a checksum for an individual record is\r\n   * usually a quick operation, but generating large quantities of checksums\r\n   * simultaneously/sequentially can be computationally expensive. On average,\r\n   * a checksum takes 3-125ms to generate.\r\n   */\r\n  get checksum () {\r\n    this.METADATA.checksum = NGN.coalesce(this.METADATA.checksum, NGN.DATA.UTILITY.checksum(JSON.stringify(this.data)))\r\n\r\n    return this.METADATA.checksum\r\n  }\r\n\r\n  /**\r\n   * @property {Date} expires\r\n   * The date/time when the record expires. This may be set to\r\n   * a future date, or a numeric value. Numeric values\r\n   * represent the number of milliseconds from the current time\r\n   * before the record expires. For example, set this to `3000`\r\n   * to force the record to expire 3 seconds from now.\r\n   *\r\n   * Set this to `0` to immediately expire the record. Set this to\r\n   * `-1` or `null` to prevent the record from expiring.\r\n   */\r\n  get expires () {\r\n    return this.METADATA.expiration\r\n  }\r\n\r\n  set expires (value) {\r\n    if (value === null) {\r\n      clearTimeout(this.METADATA.expirationTimeout)\r\n      this.METADATA.expiration = null\r\n      return\r\n    }\r\n\r\n    let now = new Date()\r\n\r\n    if (!isNaN(value) && !(value instanceof Date)) {\r\n      // Handle numeric (millisecond) expiration\r\n      if (value < 0) {\r\n        this.METADATA.expiration = null\r\n\r\n        return\r\n      }\r\n\r\n      if (value === 0) {\r\n        this.METADATA.expiration = now\r\n        this.emit('expire')\r\n\r\n        return\r\n      }\r\n\r\n      this.METADATA.expiration = new Date()\r\n      this.METADATA.expiration.setTime(now.getTime() + value)\r\n    } else if (!(value instanceof Date) || value <= now) {\r\n      throw new Error(`${this.name} expiration (TTL) value must be a positive number (milliseconds) or future date.`)\r\n    } else {\r\n      // Handle date-based expiration\r\n      this.METADATA.expiration = value\r\n    }\r\n\r\n    clearTimeout(this.METADATA.expirationTimeout)\r\n\r\n    this.METADATA.expirationTimeout = setTimeout(() => this.emit('expire'), this.METADATA.expiration.getTime() - now.getTime())\r\n  }\r\n\r\n  get expired () {\r\n    if (this.METADATA.expiration === null) {\r\n      return false\r\n    }\r\n\r\n    return this.METADATA.expiration <= (new Date())\r\n  }\r\n\r\n  get fieldDefinitions () {\r\n    return this.METADATA.fields\r\n    // if (this.METADATA.knownFieldNames.size === 0) {\r\n    //   return {}\r\n    // }\r\n    //\r\n    // let fields = this.METADATA.knownFieldNames.keys()\r\n    // let result = {}\r\n    // let fieldname = fields.next()\r\n    //\r\n    // while (!fieldname.done) {\r\n    //   let field = this.METADATA.fields[fieldname.value]\r\n    //\r\n    //   if ((\r\n    //     field.value === undefined ||\r\n    //     (ignoreID && fieldname.value === this.IdentificationField) ||\r\n    //     (!field.virtual || (!ignoreVirtualFields && field.virtual))\r\n    //   )) {\r\n    //     // Do not serialize hidden values or virtuals\r\n    //     if (!field.hidden) {\r\n    //       switch (NGN.typeof(field.value)) {\r\n    //         case 'array':\r\n    //         case 'object':\r\n    //           result[fieldname.value] = NGN.DATA.UTILITY.serialize(field.value)\r\n    //           break\r\n    //\r\n    //         default:\r\n    //           result[fieldname.value] = field.value\r\n    //       }\r\n    //     }\r\n    //   }\r\n    // }\r\n  }\r\n\r\n  serializeFields (ignoreID = false, ignoreVirtualFields = true) {\r\n    if (this.METADATA.knownFieldNames.size === 0) {\r\n      return {}\r\n    }\r\n\r\n    let fields = this.METADATA.knownFieldNames.keys()\r\n    let result = {}\r\n    let fieldname = fields.next()\r\n\r\n    while (!fieldname.done) {\r\n      let field = this.METADATA.fields[fieldname.value]\r\n\r\n      // Ignore unserializable fields\r\n      if ((\r\n        field.value === undefined ||\r\n        (ignoreID && fieldname.value === this.IdentificationField) ||\r\n        (!field.virtual || (!ignoreVirtualFields && field.virtual))\r\n      )) {\r\n        // Do not serialize hidden values or virtuals\r\n        if (!field.hidden) {\r\n          switch (NGN.typeof(field.value)) {\r\n            case 'array':\r\n            case 'object':\r\n              result[fieldname.value] = NGN.DATA.UTILITY.serialize(field.value)\r\n              break\r\n\r\n            default:\r\n              result[fieldname.value] = field.value\r\n          }\r\n        }\r\n      }\r\n\r\n      fieldname = fields.next()\r\n    }\r\n\r\n    return result\r\n  }\r\n\r\n  serialize () {\r\n    return NGN.deprecate(this.serializeFields, 'serialize is now serializeFields. Use NGN.DATA.UTILITY.serialize for generic object serialization.')\r\n  }\r\n\r\n  /**\r\n   * Determines whether a field exists in the model or not.\r\n   * @param  {string} field\r\n   * Name of the field to check for.\r\n   * @return {boolean}\r\n   */\r\n  fieldExists (field) {\r\n    return this.METADATA.knownFieldNames.has(field)\r\n  }\r\n\r\n  /**\r\n   * Retrieve the value of the specified field.\r\n   * @param  {string} field\r\n   * Name of the field whose value should be returned.\r\n   * @return {any}\r\n   * Returns the value of the field.\r\n   */\r\n  get (field) {\r\n    if (field === 'id' || field === 'ID' || field === this.METADATA.IdentificationField) {\r\n      field = this.METADATA.IdentificationField\r\n\r\n      if (this.METADATA.autoid) {\r\n        if (!this.METADATA.knownFieldNames.has(field)) {\r\n          return this.METADATA.IdentificationValue\r\n        } else {\r\n          return NGN.coalesce(this.METADATA.fields[field].value, this.METADATA.IdentificationValue)\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.METADATA.knownFieldNames.has(field)) {\r\n      return this.METADATA.fields[field].value\r\n    } else {\r\n      NGN.WARN(`Cannot get \"${field}\". The field is not part of the model.`)\r\n      return undefined\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set a new value for the specified field.\r\n   * @param {string} field\r\n   * Name of the field whose value will be changed.\r\n   * @param {any} value\r\n   * The new value of the field.\r\n   */\r\n  set (field, value) {\r\n    if (field === 'id' || field === 'ID') {\r\n      field = this.METADATA.IdentificationField\r\n    }\r\n\r\n    if (this.METADATA.knownFieldNames.has(field)) {\r\n      this.METADATA.fields[field].value = value\r\n    } else {\r\n      NGN.WARN(`Cannot set \"${field}\". Unrecognized field name.`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a data field after the initial model definition.\r\n   * @param {string} fieldname\r\n   * The name of the field.\r\n   * @param {NGN.DATA.Field|Object|Primitive} [fieldConfiguration=null]\r\n   * The field configuration (see cfg#fields for syntax).\r\n   * @param {boolean} [suppressEvents=false]\r\n   * Set to `true` to prevent events from firing when the field is added.\r\n   */\r\n  addField (name, fieldConfiguration = null, suppressEvents = false) {\r\n    if (name instanceof NGN.DATA.Field) {\r\n      fieldConfiguration = name\r\n      name = fieldConfiguration.name\r\n    } else if (typeof name !== 'string') {\r\n      throw new Error('Cannot add a non-string based field.')\r\n    }\r\n\r\n    this.METADATA.applyField(name, fieldConfiguration, suppressEvents)\r\n  }\r\n\r\n  /**\r\n   * @method removeField\r\n   * Remove a field from the data model.\r\n   * @param {string} name\r\n   * Name of the field to remove.\r\n   * @param {boolean} [suppressEvents=false]\r\n   * Set to `true` to prevent events from firing when the field is removed.\r\n   */\r\n  removeField (name, suppressEvents = false) {\r\n    if (this.METADATA.knownFieldNames.has(name)) {\r\n      this.METADATA.knownFieldNames.delete(name)\r\n      this.METADATA.invalidFieldNames.delete(name)\r\n\r\n      const field = this.METADATA.fields[name]\r\n\r\n      delete this[name]\r\n      delete this.METADATA.fields[name] // eslint-disable-line no-undef\r\n\r\n      // let change = {\r\n      //   action: 'delete',\r\n      //   field: field.name,\r\n      //   value: field,\r\n      //   join: field instanceof NGN.DATA.Relationship\r\n      // }\r\n\r\n      if (!suppressEvents) {\r\n        this.emit('field.remove', field)\r\n      }\r\n\r\n      if (this.METADATA.store !== null) {\r\n        this.METADATA.store.emit(this.METADATA.store.PRIVATE.EVENT.DELETE_RECORD_FIELD, {\r\n          record: this,\r\n          field\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the NGN.DATA.Field object for the specified field.\r\n   * @param  {string} fieldName\r\n   * Name of the field to retrieve.\r\n   * @return {NGN.DATA.Field}\r\n   * The raw field.\r\n   */\r\n  getField (name) {\r\n    if (name.toLowerCase() === 'id' && !this.METADATA.fields.hasOwnProperty(name) && this.METADATA.fields.hasOwnProperty(this.METADATA.IdentificationField)) {\r\n      return this.METADATA.fields[this.METADATA.IdentificationField]\r\n    }\r\n\r\n    return this.METADATA.fields[name]\r\n  }\r\n\r\n  /**\r\n   * @method setSilent\r\n   * A method to set a field value without triggering an update event.\r\n   * This is designed primarily for use with live update proxies to prevent\r\n   * endless event loops.\r\n   * @param {string} fieldname\r\n   * The name of the #field to update.\r\n   * @param {any} value\r\n   * The new value of the field.\r\n   * @private\r\n   */\r\n  setSilentFieldValue (field, value) {\r\n    this.METADATA.fields[field].silentValue = value\r\n  }\r\n\r\n  /**\r\n   * @method undo\r\n   * A rollback function to undo changes. This operation affects\r\n   * the changelog (transaction log). To \"undo\" an \"undo\", use #redo.\r\n   * @param {number} [OperationCount=1]\r\n   * The number of operations to \"undo\". Defaults to a single operation.\r\n   * @param {boolean} [suppressEvents=false]\r\n   * Set to `true` to quietly update the value (prevents `update` event from\r\n   * firing).\r\n   */\r\n  undo (count = 1, suppressEvents = false) {\r\n    this.METADATA.applyChange('undo', ...arguments)\r\n  }\r\n\r\n  /**\r\n   * @method redo\r\n   * A function to reapply known changes. This operation affects\r\n   * the changelog (transaction log).\r\n   *\r\n   * The redo operation only works after an undo operation, but before a new\r\n   * value is committed to the transaction log. In other words, `undo -> redo`\r\n   * will work, but `undo -> update -> redo` will not. For details, see how\r\n   * the NGN.DATA.TransactionLog cursor system works.\r\n   * @param {number} [OperationCount=1]\r\n   * The number of operations to \"undo\". Defaults to a single operation.\r\n   * @param {boolean} [suppressEvents=false]\r\n   * Set to `true` to quietly update the value (prevents `update` event from\r\n   * firing).\r\n   */\r\n  redo (count = 1, suppressEvents = false) {\r\n    this.METADATA.applyChange('redo', ...arguments)\r\n  }\r\n\r\n  /**\r\n   * @method load\r\n   * Load a data record.\r\n   * @param {object} data\r\n   * The data to apply to the model.\r\n   * @param {boolean} [suppressEvents=false]\r\n   * Do not emit a change event when the data is loaded.\r\n   */\r\n  load (data, suppressEvents = false) {\r\n    if (this.MAP) {\r\n      data = this.MAP.applyMap(data)\r\n    }\r\n\r\n    let keys = Object.keys(data)\r\n\r\n    for (let i = 0; i < keys.length; i++) {\r\n      if (this.METADATA.knownFieldNames.has(keys[i])) {\r\n        this.METADATA.fields[keys[i]].METADATA.setValue(data[keys[i]], suppressEvents)\r\n      } else {\r\n        NGN.WARN(`Failed to load ${keys[i]} field of ${this.name} model. \"${keys[i]}\" is not a recognized field.`)\r\n      }\r\n    }\r\n\r\n    if (!suppressEvents) {\r\n      this.emit('load')\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * @info This method only works on records within a store. If this method is\r\n   * called on a model that is not part of a store, the model itself will be\r\n   * returned.\r\n   *\r\n   * Retrieve the next record (after this one) from the store.\r\n   * This can be used to iterate through a store by calling `model.next()`.\r\n   * This is operation acts as a linked list iterator.\r\n   * @param  {Number}  [count=1]\r\n   * The number of records to retrieve. For example, `1` retrieves the next record.\r\n   * `2` retrieves the second record after this one. A negative number will\r\n   * automatically use the #previous method to retrieve prior records. Setting this\r\n   * to `0` will return the current record (i.e. no change).\r\n   * @param  {Boolean}  [cycle=false] [description]\r\n   * If this `next` is called on the last record, it will fail. Setting `cycle` to\r\n   * `true` will automatically restart the iteration, returning the first record in\r\n   * the store.\r\n   * @return {NGN.DATA.Model}\r\n   * Returns the next model in the store (after this one.)\r\n   */\r\n  next (count = 1, cycle = false) {\r\n    if (count === 0) {\r\n      return this\r\n    }\r\n\r\n    if (this.METADATA.store) {\r\n      if (typeof count === 'boolean') {\r\n        cycle = count\r\n        count = 1\r\n      }\r\n\r\n      return this.METADATA.store.getRecordSibling(this, count, cycle)\r\n    } else {\r\n      NGN.WARN('Attempted to call next() on a model that does not belong to a store.')\r\n      return this\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieve the previous record (before this one) from the store.\r\n   * This can be used to iterate through a store in reverse by calling\r\n   * `model.previous()`. This is operation acts as a doubly linked list iterator.\r\n   *\r\n   * @info This method only works on records within a store. If this method is\r\n   * called on a model that is not part of a store, the model itself will be\r\n   * returned.\r\n   * @param  {Number}  [count=1]\r\n   * The number of records to retrieve. For example, `1` retrieves the prior record.\r\n   * `2` retrieves the second record before this one. A negative number will\r\n   * automatically use the #next method to retrieve forward records. Setting this\r\n   * to `0` will return the current record (i.e. no change).\r\n   * @param  {Boolean}  [cycle=false]\r\n   * If this `next` is called on the first record, it will fail. Setting `cycle` to\r\n   * `true` will automatically restart the iteration, returning the last record in\r\n   * the store.\r\n   * @return {NGN.DATA.Model}\r\n   * Returns the previous model in the store (before this one.)\r\n   */\r\n  previous (count = 1, cycle = false) {\r\n    if (count === 0) {\r\n      return this\r\n    }\r\n\r\n    if (this.METADATA.store) {\r\n      if (typeof count === 'boolean') {\r\n        cycle = count\r\n        count = 1\r\n      }\r\n\r\n      return this.METADATA.store.getRecordSibling(this, 0 - count, cycle)\r\n    } else {\r\n      NGN.WARN('Attempted to call previous() on a model that does not belong to a store.')\r\n      return this\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove this model from the NGN.DATA.Store it is a part of.\r\n   *\r\n   * @info This method only works on records within a store. If this method is\r\n   * called on a model that is not part of a store, nothing will happen.\r\n   */\r\n  destroy () {\r\n    if (this.METADATA.store) {\r\n      this.METADATA.store.remove(this.OID)\r\n    } else {\r\n      NGN.WARN('Attempted to call remove() on a model that does not belong to a store.')\r\n    }\r\n  }\r\n}",
      "tags": {},
      "exceptions": {},
      "events": {
        "field.update": {
          "type": "event",
          "label": "field.update",
          "description": "Fired when a datafield value is changed.",
          "code": "@fires field.update\nFired when a datafield value is changed.",
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "parameters": {
            "payload": {
              "type": "argument",
              "label": "payload",
              "description": null,
              "code": null,
              "start": {
                "line": 0,
                "column": 0
              },
              "end": {
                "line": 0,
                "column": 0
              },
              "flags": [],
              "authors": [],
              "datatype": "",
              "required": false,
              "enum": null
            }
          },
          "deprecated": false,
          "deprecationReplacement": null
        },
        "field.create": {
          "type": "event",
          "label": "field.create",
          "description": null,
          "code": "this.emit('field.create', this.METADATA.fields[field])",
          "start": {
            "line": 326,
            "column": 12
          },
          "end": {
            "line": 326,
            "column": 66
          },
          "flags": [],
          "authors": [],
          "parameters": {
            "undefined.METADATA.fields.field": {
              "type": "argument",
              "label": "undefined.METADATA.fields.field",
              "description": null,
              "code": "this.METADATA.fields[field]",
              "start": {
                "line": 326,
                "column": 38
              },
              "end": {
                "line": 326,
                "column": 65
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "deprecated": false,
          "deprecationReplacement": null
        },
        "field.remove": {
          "type": "event",
          "label": "field.remove",
          "description": null,
          "code": "this.emit('field.remove', field)",
          "start": {
            "line": 919,
            "column": 8
          },
          "end": {
            "line": 919,
            "column": 40
          },
          "flags": [],
          "authors": [],
          "parameters": {
            "field": {
              "type": "argument",
              "label": "field",
              "description": null,
              "code": "field",
              "start": {
                "line": 919,
                "column": 34
              },
              "end": {
                "line": 919,
                "column": 39
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "deprecated": false,
          "deprecationReplacement": null
        },
        "field.invalid": {
          "type": "event",
          "label": "field.invalid",
          "description": "Fired when an invalid value is detected in an data field.",
          "code": "@fires field.invalid\nFired when an invalid value is detected in an data field.",
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "parameters": {
            "payload": {
              "type": "argument",
              "label": "payload",
              "description": null,
              "code": null,
              "start": {
                "line": 0,
                "column": 0
              },
              "end": {
                "line": 0,
                "column": 0
              },
              "flags": [],
              "authors": [],
              "datatype": "",
              "required": false,
              "enum": null
            }
          },
          "deprecated": false,
          "deprecationReplacement": null
        },
        "load": {
          "type": "event",
          "label": "load",
          "description": null,
          "code": "this.emit('load')",
          "start": {
            "line": 1018,
            "column": 6
          },
          "end": {
            "line": 1018,
            "column": 23
          },
          "flags": [],
          "authors": [],
          "parameters": {},
          "deprecated": false,
          "deprecationReplacement": null
        }
      },
      "start": {
        "line": 16,
        "column": 15
      },
      "end": {
        "line": 1113,
        "column": 1
      },
      "flags": [],
      "authors": [],
      "sourcefile": "./\\data\\Model.js",
      "extends": "NGN.EventEmitter",
      "configuration": {},
      "properties": {
        "OID": {
          "type": "property",
          "label": "OID",
          "description": "A unique object ID assigned to the model. This is an\ninternal readon-only reference.",
          "code": "OID: NGN.private(Symbol('model.id'))",
          "start": {
            "line": 42,
            "column": 6
          },
          "end": {
            "line": 42,
            "column": 42
          },
          "flags": [],
          "authors": [],
          "default": null,
          "datatype": "symbol",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": true
        },
        "METADATA": {
          "type": "property",
          "label": "METADATA",
          "description": null,
          "code": "METADATA: NGN.privateconst({\r\n        /**\r\n         * @cfg {string} [name]\r\n         * A descriptive name for the model. This is typically used for\r\n         * debugging, logging, schema defintions, and (sometimes) data proxies.\r\n         */\r\n        name: NGN.coalesce(cfg.name, 'Untitled Model'),\r\n\r\n        /**\r\n         * @cfg {string} [description]\r\n         * A description of the model. This is typically used for\r\n         * debugging, logging, schema definitions, and (sometimes) data proxies.\r\n         */\r\n        description: NGN.coalesce(cfg.description, cfg.name, 'Generic Data Model'),\r\n\r\n        /**\r\n         * @cfg {object} fields\r\n         * A private object containing the data fields of the model.\r\n         * Each key contains the field name, while each value can be one of\r\n         * the following:\r\n         *\r\n         * - Primitive (String, Number, RegExp, Boolean)\r\n         * - Standard Type (Array, Object, Date)\r\n         * - Custom Class\r\n         * - NGN.DATA.Field\r\n         * - An NGN.DATA.Field configuration\r\n         * - `null` (Defaults to String primitive)\r\n         *\r\n         * ```js\r\n         * fields: {\r\n         *   a: String,\r\n         *   b: Date,\r\n         *   c: MyCustomClass,\r\n         *   d: new NGN.DATA.Field({\r\n         *     required: true,\r\n         *     type: String,\r\n         *     default: 'some default value'\r\n         *   }),\r\n         *   e: {\r\n         *     required: true,\r\n         *     type: String,\r\n         *     default: 'some default value'\r\n         *   },\r\n         *   f: null // Uses default field config (String)\r\n         * }\r\n         * ```\r\n         *\r\n         * Extensions of the NGN.DATA.Field are also supported,\r\n         * such as NGN.DATA.VirtualField and NGN.DATA.Relationship.\r\n         */\r\n        fields: Object.assign({}, NGN.coalesce(cfg.fields, {})),\r\n        knownFieldNames: new Set(),\r\n        invalidFieldNames: new Set(),\r\n        auditFieldNames: NGN.coalesce(cfg.audit, false) ? new Set() : null,\r\n\r\n        /**\r\n         * @property {[NGN.DATA.Rule]|Object}\r\n         * Custom validation rules used to verify the integrity of the entire\r\n         * model. This only applies to the full model. Individual data fields\r\n         * may have their own validators.\r\n         *\r\n         * If an object is specified, it should contain simple key/value pairs,\r\n         * where the key is the descriptive name of the rule and the value is\r\n         * a synchronous callback function that returns a `true`/`false` value.\r\n         * For instance, assume the fields called `price`, `items`, and `tax` exist\r\n         * in the example model below. :\r\n         *\r\n         * ```js\r\n         * {\r\n         *   'Positive Sale': function () {\r\n         *      return (this.price * this.items) > 0\r\n         *   },\r\n         *   'Taxes Applied': function () {\r\n         *      return this.tax > 0\r\n         *   }\r\n         * }\r\n         * ```\r\n         *\r\n         * Alternatively, an array of NGN.DATA.Rule instances may be provided.\r\n         */\r\n        validators: NGN.coalesce(cfg.rules, cfg.rule, cfg.validators),\r\n\r\n        /**\r\n         * @cfgproperty {boolean} [validation=true]\r\n         * Toggle data validation using this.\r\n         */\r\n        validation: NGN.coalesce(cfg.validation, true),\r\n\r\n        /**\r\n         * @cfg {boolean} [autoid=false]\r\n         * If the NGN.DATA.Model#IdentificationField/id is not provided for a record,\r\n         * a unique ID will be automatically generated for it.\r\n         *\r\n         * An NGN.DATA.Store using a model with this set to `true` will never\r\n         * have a duplicate record, since the #id or #IdentificationField will always\r\n         * be unique.\r\n         */\r\n        autoid: NGN.coalesce(cfg.autoid, false),\r\n\r\n        /**\r\n         * @cfg {String} [IdentificationField='id']\r\n         * Setting this allows an attribute of the object to be used as the ID.\r\n         * For example, if an email is the ID of a user, this would be set to\r\n         * `email`.\r\n         */\r\n        IdentificationField: NGN.coalesce(cfg.IdentificationField, cfg.idField, 'id'),\r\n\r\n        /**\r\n         * @cfgproperty {Date|Number} [expires]\r\n         * When this is set to a date/time, the model record will be marked\r\n         * as expired at the specified time/date. If a number is specified\r\n         * (milliseconds), the record will be marked as expired after the\r\n         * specified time period has elapsed. When a record/model is marked as\r\n         * \"expired\", it triggers the `expired` event. By default, expired\r\n         * records/models within an NGN.DATA.Store will be removed from the store.\r\n         *\r\n         * Setting this to any value less than `0` disables expiration.\r\n         * @fires expired\r\n         * Triggered when the model/record expires.\r\n         */\r\n        expiration: null,\r\n\r\n        // Holds a setTimeout method for expiration events.\r\n        expirationTimeout: null,\r\n\r\n        created: Date.now(),\r\n        store: null,\r\n\r\n        /**\r\n         * @cfg {boolean} [audit=false]\r\n         * Enable auditing to support #undo/#redo operations. This creates and\r\n         * manages a NGN.DATA.TransactionLog.\r\n         */\r\n        AUDITABLE: false,\r\n        AUDITLOG: NGN.coalesce(cfg.audit, false) ? new NGN.DATA.TransactionLog() : null,\r\n        AUDIT_HANDLER: function (change) {\r\n          if (change.hasOwnProperty('cursor')) {\r\n            me.METADATA.AUDITLOG.commit(me.METADATA.getAuditMap())\r\n          }\r\n        },\r\n\r\n        EVENTS: new Set([\r\n          'field.update',\r\n          'field.create',\r\n          'field.remove',\r\n          'field.invalid',\r\n          'field.valid',\r\n          'field.hidden',\r\n          'field.unhidden',\r\n          'field.rule.add',\r\n          'field.rule.remove',\r\n          'rule.add',\r\n          'rule.remove',\r\n          'relationship.create',\r\n          'relationship.remove',\r\n          'expired',\r\n          'deleted',\r\n          'reset',\r\n          'load'\r\n        ]),\r\n\r\n        /**\r\n         * An internal method used to apply field definitions to the model.\r\n         * @param  {string} fieldname\r\n         * Name of the field (as applied to the model).\r\n         * @param  {NGN.DATA.Field|Object|Primitive} [fieldConfiguration=null]\r\n         * The configuration to apply. See #addField for details.\r\n         * @param  {Boolean} [suppressEvents=false]\r\n         * Optionally suppress the `field.create` event.\r\n         * @private\r\n         */\r\n        applyField: (field, fieldcfg = null, suppressEvents = false) => {\r\n          // Prevent duplicate fields\r\n          if (this.METADATA.knownFieldNames.has(field)) {\r\n            return NGN.WARN(`Duplicate field \"${field}\" detected.`)\r\n          }\r\n\r\n          // Prevent reserved words\r\n          if (this.hasOwnProperty(field) && field.toLowerCase() !== 'id') {\r\n            throw new ReservedWordError(`\"${field}\" cannot be used as a field name (reserved word).`)\r\n          }\r\n\r\n          // If the field config isn't already an NGN.DATA.Field, create it.\r\n          if (!(fieldcfg instanceof NGN.DATA.Field)) {\r\n            if (fieldcfg instanceof NGN.DATA.Store || fieldcfg instanceof NGN.DATA.Model) {\r\n              if (this.METADATA.IdentificationField === field) {\r\n                throw new InvalidConfigurationError(`\"${field}\" cannot be an ID. Relationship fields cannot be an identification field/attribute.`)\r\n              }\r\n\r\n              this.METADATA.fields[field] = new NGN.DATA.Relationship({\r\n                name: field,\r\n                record: fieldcfg,\r\n                model: this\r\n              })\r\n            } else {\r\n              switch (NGN.typeof(fieldcfg)) {\r\n                // Custom config\r\n                case 'object':\r\n                  fieldcfg.model = this\r\n                  fieldcfg.identifier = NGN.coalesce(fieldcfg.identifier, this.METADATA.IdentificationField === field)\r\n                  fieldcfg.name = field\r\n\r\n                  this.METADATA.fields[field] = new NGN.DATA.Field(fieldcfg)\r\n\r\n                  break\r\n\r\n                // Collection of models\r\n                case 'array':\r\n                  return this.METADATA.applyField(field, fieldcfg[0], suppressEvents)\r\n\r\n                // Type-based cfg.\r\n                default:\r\n                  if (NGN.isFn(fieldcfg) || fieldcfg === null) {\r\n                    if (NGN.isFn(fieldcfg) && ['string', 'number', 'boolean', 'number', 'symbol', 'regexp', 'date', 'array', 'object'].indexOf(NGN.typeof(fieldcfg)) < 0) {\r\n                      this.METADATA.fields[field] = new NGN.DATA.VirtualField({\r\n                        name: field,\r\n                        identifier: this.METADATA.IdentificationField === field,\r\n                        model: this,\r\n                        method: fieldcfg\r\n                      })\r\n\r\n                      break\r\n                    }\r\n\r\n                    this.METADATA.fields[field] = new NGN.DATA.Field({\r\n                      name: field,\r\n                      type: fieldcfg,\r\n                      identifier: this.METADATA.IdentificationField === field,\r\n                      model: this\r\n                    })\r\n\r\n                    break\r\n                  }\r\n\r\n                  this.METADATA.fields[field] = new NGN.DATA.Field({\r\n                    name: field,\r\n                    type: NGN.isFn(fieldcfg) ? fieldcfg : String,\r\n                    identifier: NGN.isFn(fieldcfg)\r\n                      ? false\r\n                      : NGN.coalesce(fieldcfg.identifier, this.METADATA.IdentificationField === field),\r\n                    model: this\r\n                  })\r\n\r\n                  break\r\n              }\r\n            }\r\n          } else if (fieldcfg.model === null) {\r\n            fieldcfg.name = field\r\n            fieldcfg.identifier = fieldcfg.identifier = NGN.coalesce(fieldcfg.identifier, this.METADATA.IdentificationField === field)\r\n\r\n            this.METADATA.fields[field] = fieldcfg\r\n            this.METADATA.fields[field].model = this\r\n          } else if (fieldcfg.model === this) {\r\n            fieldcfg.identifier = NGN.coalesce(fieldcfg.identifier, this.METADATA.IdentificationField === field)\r\n\r\n            this.METADATA.fields[field] = fieldcfg\r\n          } else if (!(fieldcfg instanceof NGN.DATA.Field)) {\r\n            return NGN.WARN(`The \"${fieldcfg.name}\" field cannot be applied because model is already specified.`)\r\n          }\r\n\r\n          // Add a direct reference to the model.\r\n          Object.defineProperty(this, field, {\r\n            enumerable: true,\r\n            configurable: true,\r\n            get: () => this.get(field),\r\n            set: (value) => this.set(field, value)\r\n          })\r\n\r\n          // Enable auditing if necessary.\r\n          if (this.METADATA.AUDITABLE) {\r\n            if (this.METADATA.fields[field].fieldType !== 'virtual') {\r\n              this.METADATA.fields[field].auditable = true\r\n              this.METADATA.auditFieldNames.add(field)\r\n            }\r\n          }\r\n\r\n          // Add the field to the list\r\n          this.METADATA.knownFieldNames.add(field)\r\n\r\n          this.METADATA.fields[field].relay('*', this, 'field.')\r\n\r\n          if (!suppressEvents) {\r\n            this.emit('field.create', this.METADATA.fields[field])\r\n          }\r\n\r\n          return this.METADATA.fields[field]\r\n        },\r\n\r\n        /**\r\n         * An internal helper method for applying changes to the model.\r\n         * @param  {String} [type='undo']\r\n         * This can be `undo` or `redo`.\r\n         * @param  {Number} [count=1]\r\n         * The number of cursor indexes to shift\r\n         * @param  {Boolean} [suppressEvents=false]\r\n         * Indicates events should be suppressed.\r\n         * @private\r\n         */\r\n        applyChange: (type = 'undo', count = 1, suppressEvents = false) => {\r\n          if (!this.METADATA.AUDITABLE) {\r\n            NGN.WARN(`The ${type} operation failed on the ${this.name} model because auditing is disabled.`)\r\n            return\r\n          }\r\n\r\n          this.METADATA.AUDITLOG[type === 'undo' ? 'rollback' : 'advance'](count)\r\n\r\n          let data = this.METADATA.AUDITLOG.currentValue\r\n\r\n          if (data) {\r\n            this.METADATA.auditFieldNames.forEach(fieldname => {\r\n              let field = this.METADATA.fields[fieldname]\r\n              let log = field.METADATA.AUDITLOG\r\n\r\n              if (log.cursor !== data[fieldname]) {\r\n                if (typeof data[fieldname] === 'symbol') {\r\n                  log.cursor = data[fieldname]\r\n                } else {\r\n                  log.cursor = null\r\n                }\r\n\r\n                field.METADATA.setValue(NGN.coalesce(log.currentValue, field.default), suppressEvents, true)\r\n              }\r\n            })\r\n          }\r\n        },\r\n\r\n        /**\r\n         * Generates a key/value representation of the model where\r\n         * each key represents an auditable field and each value is the\r\n         * transaction cursor ID.\r\n         * @return {Object}\r\n         * @private\r\n         */\r\n        getAuditMap: () => {\r\n          let map = {}\r\n\r\n          this.METADATA.auditFieldNames.forEach(field => {\r\n            map[field] = this.METADATA.fields[field].METADATA.AUDITLOG.cursor\r\n          })\r\n\r\n          return map\r\n        },\r\n\r\n        /**\r\n         * Restore the model to a specific audit map (i.e. historical state\r\n         * of multiple fields).\r\n         * @param {Object} map\r\n         * The audit map to restore.\r\n         */\r\n        // restore: (map) => {\r\n        //   let keys = Object.keys(map)\r\n        //\r\n        //   for (let i = 0; i < keys.length; i++) {\r\n        //     if (this.METADATA.knownFieldNames.has(keys[i]) && typeof map[keys[i]] === 'symbol') {\r\n        //       console.log('Has', keys[i])\r\n        //\r\n        //     }\r\n        //   }\r\n        // },\r\n\r\n        // Deprecations\r\n        setSilent: NGN.deprecate(this.setSilentFieldValue, 'setSilent has been deprecated. Use setSilentFieldValue instead.'),\r\n\r\n        /**\r\n         * @cfgproperty {object} fieldmap\r\n         * An object mapping model attribute names to data storage field names.\r\n         *\r\n         * _Example_\r\n         * ```\r\n         * {\r\n         *   ModelFieldName: 'inputName',\r\n         *   father: 'dad',\r\n         *   email: 'eml',\r\n         *   image: 'img',\r\n         *   displayName: 'dn',\r\n         *   firstName: 'gn',\r\n         *   lastName: 'sn',\r\n         *   middleName: 'mn',\r\n         *   gender: 'sex',\r\n         *   dob: 'bd'\r\n         * }\r\n         * ```\r\n         */\r\n        DATAMAP: null\r\n      })",
          "start": {
            "line": 44,
            "column": 6
          },
          "end": {
            "line": 428,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        },
        "MAP": {
          "type": "property",
          "label": "MAP",
          "description": null,
          "code": "MAP: NGN.get(() => {\r\n        return NGN.coalesce(\r\n          this.METADATA.DATAMAP,\r\n          this.METADATA.store instanceof NGN.DATA.Store\r\n            ? this.METADATA.store.map\r\n            : null\r\n        )\r\n      })",
          "start": {
            "line": 430,
            "column": 6
          },
          "end": {
            "line": 437,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "auditable": {
          "type": "property",
          "label": "auditable",
          "description": null,
          "code": "set auditable (value) {\r\n    value = NGN.forceBoolean(value)\r\n\r\n    if (value !== this.METADATA.AUDITABLE) {\r\n      this.METADATA.AUDITABLE = value\r\n      this.METADATA.AUDITLOG = value ? new NGN.DATA.TransactionLog() : null\r\n      this.METADATA.auditFieldNames = value ? new Set() : null\r\n\r\n      // Set each field to an auditable state (or not).\r\n      this.METADATA.knownFieldNames.forEach(fieldname => {\r\n        if (!this.METADATA.fields[fieldname].virtual) {\r\n          this.METADATA.fields[fieldname].auditable = value\r\n\r\n          if (value) {\r\n            this.METADATA.auditFieldNames.add(fieldname)\r\n          }\r\n        }\r\n      })\r\n\r\n      if (value) {\r\n        // Track Changes (if auditing enabled)\r\n        this.on('field.transaction.*', (id) => {\r\n          this.METADATA.AUDIT_HANDLER({ cursor: id })\r\n        })\r\n      } else {\r\n        this.METADATA.auditFieldNames.clear()\r\n\r\n        this.off('field.transaction.*')\r\n      }\r\n    }\r\n  }",
          "start": {
            "line": 527,
            "column": 2
          },
          "end": {
            "line": 557,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": false,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "name": {
          "type": "property",
          "label": "name",
          "description": null,
          "code": "get name () {\r\n    return this.METADATA.name\r\n  }",
          "start": {
            "line": 523,
            "column": 2
          },
          "end": {
            "line": 525,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "id": {
          "type": "property",
          "label": "id",
          "description": null,
          "code": "set id (value) {\r\n    this.set('id', value)\r\n  }",
          "start": {
            "line": 567,
            "column": 2
          },
          "end": {
            "line": 569,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": false,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "ID": {
          "type": "property",
          "label": "ID",
          "description": null,
          "code": "set ID (value) {\r\n    this.set('id', value)\r\n  }",
          "start": {
            "line": 579,
            "column": 2
          },
          "end": {
            "line": 581,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": false,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "changelog": {
          "type": "property",
          "label": "changelog",
          "description": null,
          "code": "get changelog () {\r\n    return this.METADATA.AUDITLOG.log.map(entry => {\r\n      let result = {\r\n        timestamp: entry.timestamp,\r\n        activeCursor: entry.activeCursor,\r\n        value: {}\r\n      }\r\n\r\n      let data = entry.value\r\n      let field = Object.keys(data)\r\n\r\n      for (let i = 0; i < field.length; i++) {\r\n        if (typeof data[field[i]] === 'symbol') {\r\n          result.value[field[i]] = NGN.coalesce(\r\n            this.METADATA.fields[field[i]].METADATA.AUDITLOG.getCommit(data[field[i]]).value,\r\n            this.METADATA.fields[field[i]].default\r\n          )\r\n        } else {\r\n          result.value[field[i]] = NGN.coalesce(this.METADATA.fields[field[i]].default)\r\n        }\r\n      }\r\n\r\n      return result\r\n    })\r\n  }",
          "start": {
            "line": 588,
            "column": 2
          },
          "end": {
            "line": 612,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "createDate": {
          "type": "property",
          "label": "createDate",
          "description": null,
          "code": "get createDate () {\r\n    return this.METADATA.created\r\n  }",
          "start": {
            "line": 618,
            "column": 2
          },
          "end": {
            "line": 620,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "data": {
          "type": "property",
          "label": "data",
          "description": null,
          "code": "get data () {\r\n    if (this.MAP) {\r\n      return this.MAP.applyInverseMap(this.serializeFields())\r\n    }\r\n\r\n    return this.serializeFields()\r\n  }",
          "start": {
            "line": 628,
            "column": 2
          },
          "end": {
            "line": 634,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "unmappedData": {
          "type": "property",
          "label": "unmappedData",
          "description": null,
          "code": "get unmappedData () {\r\n    return this.serializeFields()\r\n  }",
          "start": {
            "line": 640,
            "column": 2
          },
          "end": {
            "line": 642,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "representation": {
          "type": "property",
          "label": "representation",
          "description": null,
          "code": "get representation () {\r\n    if (this.MAP) {\r\n      return this.MAP.applyInverseMap(this.serializeFields(false, false))\r\n    }\r\n\r\n    return this.serializeFields(false, false)\r\n  }",
          "start": {
            "line": 649,
            "column": 2
          },
          "end": {
            "line": 655,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "unmappedRepresentation": {
          "type": "property",
          "label": "unmappedRepresentation",
          "description": null,
          "code": "get unmappedRepresentation () {\r\n    return this.serializeFields(false, false)\r\n  }",
          "start": {
            "line": 661,
            "column": 2
          },
          "end": {
            "line": 663,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "checksum": {
          "type": "property",
          "label": "checksum",
          "description": null,
          "code": "get checksum () {\r\n    this.METADATA.checksum = NGN.coalesce(this.METADATA.checksum, NGN.DATA.UTILITY.checksum(JSON.stringify(this.data)))\r\n\r\n    return this.METADATA.checksum\r\n  }",
          "start": {
            "line": 673,
            "column": 2
          },
          "end": {
            "line": 677,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "expires": {
          "type": "property",
          "label": "expires",
          "description": null,
          "code": "set expires (value) {\r\n    if (value === null) {\r\n      clearTimeout(this.METADATA.expirationTimeout)\r\n      this.METADATA.expiration = null\r\n      return\r\n    }\r\n\r\n    let now = new Date()\r\n\r\n    if (!isNaN(value) && !(value instanceof Date)) {\r\n      // Handle numeric (millisecond) expiration\r\n      if (value < 0) {\r\n        this.METADATA.expiration = null\r\n\r\n        return\r\n      }\r\n\r\n      if (value === 0) {\r\n        this.METADATA.expiration = now\r\n        this.emit('expire')\r\n\r\n        return\r\n      }\r\n\r\n      this.METADATA.expiration = new Date()\r\n      this.METADATA.expiration.setTime(now.getTime() + value)\r\n    } else if (!(value instanceof Date) || value <= now) {\r\n      throw new Error(`${this.name} expiration (TTL) value must be a positive number (milliseconds) or future date.`)\r\n    } else {\r\n      // Handle date-based expiration\r\n      this.METADATA.expiration = value\r\n    }\r\n\r\n    clearTimeout(this.METADATA.expirationTimeout)\r\n\r\n    this.METADATA.expirationTimeout = setTimeout(() => this.emit('expire'), this.METADATA.expiration.getTime() - now.getTime())\r\n  }",
          "start": {
            "line": 694,
            "column": 2
          },
          "end": {
            "line": 730,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": false,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "expired": {
          "type": "property",
          "label": "expired",
          "description": null,
          "code": "get expired () {\r\n    if (this.METADATA.expiration === null) {\r\n      return false\r\n    }\r\n\r\n    return this.METADATA.expiration <= (new Date())\r\n  }",
          "start": {
            "line": 732,
            "column": 2
          },
          "end": {
            "line": 738,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "fieldDefinitions": {
          "type": "property",
          "label": "fieldDefinitions",
          "description": null,
          "code": "get fieldDefinitions () {\r\n    return this.METADATA.fields\r\n    // if (this.METADATA.knownFieldNames.size === 0) {\r\n    //   return {}\r\n    // }\r\n    //\r\n    // let fields = this.METADATA.knownFieldNames.keys()\r\n    // let result = {}\r\n    // let fieldname = fields.next()\r\n    //\r\n    // while (!fieldname.done) {\r\n    //   let field = this.METADATA.fields[fieldname.value]\r\n    //\r\n    //   if ((\r\n    //     field.value === undefined ||\r\n    //     (ignoreID && fieldname.value === this.IdentificationField) ||\r\n    //     (!field.virtual || (!ignoreVirtualFields && field.virtual))\r\n    //   )) {\r\n    //     // Do not serialize hidden values or virtuals\r\n    //     if (!field.hidden) {\r\n    //       switch (NGN.typeof(field.value)) {\r\n    //         case 'array':\r\n    //         case 'object':\r\n    //           result[fieldname.value] = NGN.DATA.UTILITY.serialize(field.value)\r\n    //           break\r\n    //\r\n    //         default:\r\n    //           result[fieldname.value] = field.value\r\n    //       }\r\n    //     }\r\n    //   }\r\n    // }\r\n  }",
          "start": {
            "line": 740,
            "column": 2
          },
          "end": {
            "line": 772,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "META": {
          "type": "property",
          "label": "META",
          "description": null,
          "code": "META: NGN.private({\r\n        queued: {},\r\n        collectionQueue: {},\r\n        thresholdQueue: {},\r\n        defaultTTL: -1,\r\n        wildcardEvents: new Set()\r\n      })",
          "start": {
            "line": 33,
            "column": 6
          },
          "end": {
            "line": 39,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": true
        },
        "setTTL": {
          "type": "property",
          "label": "setTTL",
          "description": "Set a default time-to-live for event handlers (in milliseconds).\r\n      After the TTL period elapses, event handlers are removed.\r\n      By default, there is no TTL (`-1`).\r\n      \r\n      The number of milliseconds before an event handler is automatically\r\n      removed. This value may be `-1` (no TTL/never expires) or a value\r\n      greater than `0`.",
          "code": "setTTL: NGN.const((ttl = -1) => {\r\n        if (ttl === 0) {\r\n          NGN.WARN('NGN.EventEmitter#TTL cannot be 0.')\r\n          return\r\n        }\r\n\r\n        this.META.defaultTTL = ttl\r\n      })",
          "start": {
            "line": 51,
            "column": 6
          },
          "end": {
            "line": 58,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "off": {
          "type": "property",
          "label": "off",
          "description": "Remove an event handler. If no handler is specified, all handlers for\r\n      the specified event will be removed.\r\n      This is a shortcut for #removeListener.\r\n      \r\n      Name of the event to remove.\r\n      \r\n      The handler function to remove from the event handlers.",
          "code": "off: NGN.public((eventName, handlerFn) => {\r\n        if (NGN.typeof(eventName) === 'array') {\r\n          for (let i = 0; i < eventName.length; i++) {\r\n            this.off(eventName[i], handlerFn)\r\n          }\r\n\r\n          return\r\n        }\r\n\r\n        let l = this.listeners(eventName)\r\n\r\n        if (!NGN.isFn(handlerFn)) {\r\n          return this.clear(eventName)\r\n        }\r\n\r\n        let wrappedHandlerFn = this.wrapEventHandlerWithScope(eventName, handlerFn)\r\n\r\n        if (l.indexOf(wrappedHandlerFn) < 0) {\r\n          for (let i = 0; i < l.length; i++) {\r\n            if (l[i].toString() === wrappedHandlerFn.toString()) {\r\n              this.META.wildcardEvents.delete(eventName)\r\n              // this.removeListener(eventName, handlerFn)\r\n              this.removeListener(eventName, l[i], false)\r\n              break\r\n            }\r\n          }\r\n        } else {\r\n          this.META.wildcardEvents.delete(eventName)\r\n          this.removeListener(eventName, handlerFn)\r\n        }\r\n      })",
          "start": {
            "line": 70,
            "column": 6
          },
          "end": {
            "line": 100,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "deprecate": {
          "type": "property",
          "label": "deprecate",
          "description": "Provides a deprecation notice for the specified event.\r\n      Automatically emits the appropriate \"replacement\" event\r\n      if a replacement event is configured. If no replacement\r\n      event is configured, the deprecation notice will be written\r\n      to the console but no replacement event will be triggered.\r\n      \r\n      The name of the deprecated event.\r\n      \r\n      The name of the new event.",
          "code": "deprecate: NGN.const((deprecatedEventName, replacementEventName) => {\r\n        const me = this\r\n\r\n        this.on(deprecatedEventName, function () {\r\n          NGN.WARN(`${deprecatedEventName} is deprecated. ` + (!replacementEventName ? '' : `Use ${replacementEventName} instead.`))\r\n\r\n          if (replacementEventName) {\r\n            let args = NGN.slice(arguments)\r\n\r\n            args.shift()\r\n            args.unshift(replacementEventName)\r\n\r\n            me.emit.apply(me, args)\r\n          }\r\n        })\r\n      })",
          "start": {
            "line": 114,
            "column": 6
          },
          "end": {
            "line": 129,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "subscriberObject": {
          "type": "property",
          "label": "subscriberObject",
          "description": "A key:value object where the key is the name of the\nunprefixed event and the key is the handler function.\nA value can be an object, allowing for nesting events. For example:\n\n```js\nNGN.BUS.pool('prefix.', {\ndeep: {\nnested: {\neventName: function  {\nconsole.log('event triggered')\n}\n}\n}\n})\n\nNGN.BUS.emit('prefix.deep.nested.eventName') // <-- Outputs \"event triggered\"\n```",
          "code": "pool: NGN.privateconst(function (prefix, group) {\r\n        if (typeof prefix !== 'string') {\r\n          group = prefix\r\n          prefix = ''\r\n        }\r\n\r\n        let pool = {}\r\n\r\n        for (let eventName in group) {\r\n          let topic = `${NGN.coalesce(prefix, '')}${eventName}`\r\n\r\n          if (NGN.isFn(group[eventName])) {\r\n            this.increaseMaxListeners()\r\n\r\n            pool[eventName] = this.on(topic, group[eventName])\r\n          } else if (typeof group[eventName] === 'object') {\r\n            this.pool(`${topic}.`, group[eventName])\r\n          } else {\r\n            NGN.WARN(`${topic} could not be pooled in the event emitter because it's value is not a function.`)\r\n          }\r\n        }\r\n      })",
          "start": {
            "line": 158,
            "column": 6
          },
          "end": {
            "line": 179,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "default": null,
          "datatype": "object",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        },
        "attach": {
          "type": "property",
          "label": "attach",
          "description": "Attach a function to a topic. This can be used\r\n      to forward events in response to asynchronous functions.\r\n      \n      For example:\r\n      \n      ```js\r\n      myAsyncDataFetch(NGN.BUS.attach('topicName'))\r\n      ```\r\n      \n      This is the same as:\r\n      \n      ```js\r\n      myAsyncCall(function(data){\r\n       NGN.BUS.emit('topicName', data)\r\n      })\r\n      ```\r\n      \r\n      The name of the event to attach a handler method to.\r\n      \r\n      Setting this to `true` will execute a `event.preventDefault()` before\r\n      attaching the handler.\r\n      \r\n      Returns a function that will automatically be associated with an event.",
          "code": "attach: NGN.const(function (eventName, preventDefaultAction) {\r\n        preventDefaultAction = NGN.coalesce(preventDefaultAction, false)\r\n\r\n        return (e) => {\r\n          if (preventDefaultAction && !NGN.nodelike) {\r\n            e.preventDefault()\r\n          }\r\n\r\n          this.emit(eventName, ...arguments)\r\n        }\r\n      })",
          "start": {
            "line": 207,
            "column": 6
          },
          "end": {
            "line": 217,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "increaseMaxListeners": {
          "type": "property",
          "label": "increaseMaxListeners",
          "description": "Increase the number of maximum listeners.\r\n      \r\n      The number of events the max listener account will be increased by.",
          "code": "increaseMaxListeners: NGN.private((count = 1) => {\r\n        this.setMaxListeners(this.getMaxListeners() + count)\r\n      })",
          "start": {
            "line": 226,
            "column": 6
          },
          "end": {
            "line": 228,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": true
        },
        "decreaseMaxListeners": {
          "type": "property",
          "label": "decreaseMaxListeners",
          "description": "Decrease the number of maximum listeners.\r\n      \r\n      The number of events the max listener account will be decreased by.",
          "code": "decreaseMaxListeners: NGN.private((count = 1) => {\r\n        this.setMaxListeners(this.getMaxListeners() - count)\r\n      })",
          "start": {
            "line": 237,
            "column": 6
          },
          "end": {
            "line": 239,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": true
        },
        "forward": {
          "type": "property",
          "label": "forward",
          "description": "A special subscriber that fires one or more event in response to\r\n      to an event. This is used to bubble events up/down an event chain.\r\n      \n      For example:\r\n      \n      ```js\r\n      NGN.BUS.forward('sourceEvent', ['someEvent','anotherEvent'], {payload:true})\r\n      ```\r\n      When `sourceEvent` is published, the bind method triggers `someEvent` and\r\n      `anotherEvent`, passing the payload object to `someEvent` and\r\n      `anotherEvent` subscribers simultaneously.\r\n      \n      To forward an event to another EventEmitter, see #relay.\r\n      \r\n      The event to subscribe to.\r\n      \r\n      An event or array of events to fire in response to the sourceEvent.\r\n      \r\n      Optional data to pass to each bound event handler.\r\n      \r\n      Returns an object with a single `remove()` method.",
          "code": "forward: NGN.const(function (eventName, triggers, payload) {\r\n        triggers = NGN.forceArray(triggers)\r\n\r\n        let me = this\r\n        let listener = function () {\r\n          let args = NGN.slice(arguments)\r\n\r\n          if (payload) {\r\n            args.push(payload)\r\n          }\r\n\r\n          me.emit(triggers, ...args)\r\n        }\r\n\r\n        this.increaseMaxListeners()\r\n        this.on(eventName, listener)\r\n\r\n        // Provide handle back for removal of topic\r\n        return {\r\n          remove: () => {\r\n            this.decreaseMaxListeners()\r\n            this.off(eventName, listener)\r\n          }\r\n        }\r\n      })",
          "start": {
            "line": 265,
            "column": 6
          },
          "end": {
            "line": 289,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "relay": {
          "type": "property",
          "label": "relay",
          "description": "This relays an entire event to a different event emitter.\r\n      For example:\r\n      \n      ```js\r\n      let emitterA = new NGN.EventEmitter()\r\n      let emitterB = new NGN.EventEmitter()\r\n      \n      emitterA.relay('my.event', emitterB)\r\n      \n      emitterB.on('my.event', () => { console.log('Emitter B heard the event!') })\r\n      \n      emitterA.emit('my.event') // Outputs \"Emitter B heard the event!\"\r\n      ```\r\n      \r\n      The name of the event to listen for.\r\n      \r\n      The emitter to relay the event to.\r\n      \r\n      An optional prefix to prepend to the eventName.\r\n      \r\n      An optional postfix to append to the eventName.",
          "code": "relay: NGN.const(function (eventName, targetEmitter, prefix = null, postfix = null) {\r\n        let eventNameList = NGN.forceArray(eventName)\r\n\r\n        for (let i = 0; i < eventNameList.length; i++) {\r\n          let eventName = eventNameList[i]\r\n\r\n          this.on(eventName, function () {\r\n            if (NGN.typeof(this.event) === 'symbol') {\r\n              if (prefix !== null || postfix !== null) {\r\n                NGN.INFO('Cannot relay a symbol-based event with a prefix/postfix.')\r\n              }\r\n\r\n              targetEmitter.emit(...arguments)\r\n            } else {\r\n              targetEmitter.emit(`${NGN.coalesce(prefix, '')}${this.event}${NGN.coalesce(postfix, '')}`, ...arguments)\r\n            }\r\n          })\r\n        }\r\n      })",
          "start": {
            "line": 314,
            "column": 6
          },
          "end": {
            "line": 332,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "relayOnce": {
          "type": "property",
          "label": "relayOnce",
          "description": "This relays an entire event to a different event emitter. This is\r\n      the same as #relay, but the event handler is removed after the\r\n      first invocation of the event.\r\n      \n      For example:\r\n      \n      ```js\r\n      let emitterA = new NGN.EventEmitter()\r\n      let emitterB = new NGN.EventEmitter()\r\n      \n      emitterA.relayOnce('my.event', emitterB)\r\n      \n      emitterB.on('my.event', () => { console.log('Emitter B heard the event!') })\r\n      \n      emitterA.emit('my.event') // Outputs \"Emitter B heard the event!\"\r\n      emitterA.emit('my.event') // Does nothing\r\n      ```\r\n      \r\n      The name of the event to listen for.\r\n      \r\n      The emitter to relay the event to.\r\n      \r\n      An optional prefix to prepend to the eventName.\r\n      \r\n      An optional postfix to append to the eventName.",
          "code": "relayOnce: NGN.const(function (eventName, targetEmitter, prefix = null, postfix = null) {\r\n        let eventNameList = NGN.forceArray(eventName)\r\n\r\n        for (let i = 0; i < eventNameList.length; i++) {\r\n          let eventName = eventNameList[i]\r\n\r\n          this.once(eventName, function () {\r\n            if (NGN.typeof(this.event) === 'symbol') {\r\n              if (prefix !== null || postfix !== null) {\r\n                NGN.INFO('Cannot relay a symbol-based event with a prefix/postfix.')\r\n              }\r\n\r\n              targetEmitter.emit(...arguments)\r\n            } else {\r\n              targetEmitter.emit(`${NGN.coalesce(prefix, '')}${this.event}${NGN.coalesce(postfix, '')}`, ...arguments)\r\n            }\r\n          })\r\n        }\r\n      })",
          "start": {
            "line": 361,
            "column": 6
          },
          "end": {
            "line": 379,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "delayEmit": {
          "type": "property",
          "label": "delayEmit",
          "description": "This method waits for the specified duration, then publishes an\r\n      event once. This will publish the event only once at the end of the\r\n      wait period, even if the event is triggered multiple times. This can\r\n      be useful when working with many events triggered in rapid succession.\r\n      \n      For example, an NGN.DATA.Model representing a person may be used to\r\n      track a user profile. The NGN.DATA.Model fires an event called `field.update`\r\n      every time a data field is modified. In many cases, a user may update\r\n      multiple fields of their profile using a form with a \"Save\" button.\r\n      Instead of generating a new \"save\" (to disk, to memory, to an API, etc)\r\n      operation for each field, the publishOnce event can wait until all\r\n      changes are made before running the save operation.\r\n      \n      ```js\r\n      // Create a data model representing a person.\r\n      var Person = new NGN.DATA.Model({....})\r\n      \n      // Create a new person record for a user.\r\n      var user = new Person()\r\n      \n      // When the user is modified, save the data.\r\n      user.on('field.update', function () {\r\n        // Wait 300 milliseconds to trigger the save event\r\n        NGN.BUS.delayEmit('user.save', 300)\r\n      })\r\n      \n      // Save the user using an API\r\n      NGN.BUS.on('user.save', function () {\r\n        NGN.NET.put({\r\n          url: 'https://my.api.com/user',\r\n          json: user.data\r\n        })\r\n      })\r\n      \n      // Modify the record attributes (which are blank by default)\r\n      user.firstname = 'John'\r\n      user.lastname = 'Doe'\r\n      user.age = 42\r\n      \n      // Make another update 1 second later\r\n      setTimeout(function () {\r\n        user.age = 32\r\n      }, 1000)\r\n      ```\r\n      \n      The code above sets up a model and record. Then it listens to the record\r\n      for field updates. Each time it recognizes an update, it queues the \"save\"\r\n      event. When the queue matures, it fires the `user.save` event.\r\n      \n      The first `field.update` is triggered when `user.firstname = 'John'` runs.\r\n      This initiates a queue for `user.save`, set to mature in 300 millisenconds.\r\n      Next, a `field.update` is triggered when `user.lastname = 'Doe'` runs.\r\n      This time, since the queue for `user.save` is already initiated, notthing\r\n      new happens. Finally, a `field.update` is triggered when `user.age = 42`\r\n      runs. Just like the last one, nothing happens since the `user.save` queue\r\n      is already active.\r\n      \n      The `user.save` queue \"matures\" after 300 milliseconds. This means after\r\n      300 milliseconds have elapsed, the `user.save` event is triggered. In this\r\n      example, it means the `NGN.NET.put()` code will be executed. As a result,\r\n      all 3 change (firstname, lastname, and age) will be complete before the\r\n      API request is executed. The queue is cleared immediately.\r\n      \n      The final update occurs 1 second later (700 milliseconds after the queue\r\n      matures). This triggers a `field.update`, but since the queue is no\r\n      longer active, it is re-initiated. 300 milliseconds later, the `user.save`\r\n      event is fired again, thus executing the API request again (1.3 seconds\r\n      in total).\r\n      \r\n      The event/topic to publish/emit.\r\n      \r\n      The number of milliseconds to wait before firing the event.\r\n      \r\n      An optional payload, such as data to be passed to an event handler.",
          "code": "delayEmit: NGN.const(function (eventName, delay) {\r\n        if (!this.META.queued.hasOwnProperty(eventName)) {\r\n          let args = NGN.slice(arguments)\r\n          args.splice(1, 1)\r\n\r\n          this.META.queued[eventName] = setTimeout(() => {\r\n            delete this.META.queued[eventName]\r\n            this.emit(...args)\r\n          }, delay)\r\n        }\r\n      })",
          "start": {
            "line": 458,
            "column": 6
          },
          "end": {
            "line": 468,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "getInternalCollectionId": {
          "type": "property",
          "label": "getInternalCollectionId",
          "description": "Returns a unique ID for special collections.\r\n      \r\n      The collection to generate an ID for.",
          "code": "getInternalCollectionId: NGN.privateconst(function (collection) {\r\n        return Symbol(collection)\r\n        // let time = (new Date()).getTime().toString()\r\n        // let rand = Math.random().toString()\r\n        // let key = Object.keys(collection).length + 1\r\n        //\r\n        // while (collection.hasOwnProperty(`${key.toString()}${time}${rand}`)) {\r\n        //   key++\r\n        // }\r\n        //\r\n        // return `${key.toString()}${time}${rand}`\r\n      })",
          "start": {
            "line": 477,
            "column": 6
          },
          "end": {
            "line": 488,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        },
        "handleCollectionTrigger": {
          "type": "property",
          "label": "handleCollectionTrigger",
          "description": "A method to manage #chain event handlers.",
          "code": "handleCollectionTrigger: NGN.privateconst(function (eventName, key) {\r\n        let me = this\r\n\r\n        return function () {\r\n          // Use setTimeout to simulate nextTick\r\n          setTimeout(() => {\r\n            let cq = me.META.collectionQueue\r\n\r\n            if (cq[key]) {\r\n              cq[key].remainingqueue.delete(eventName)\r\n\r\n              if (cq[key].remainingqueue.size === 0) {\r\n                cq[key].remainingqueue = cq[key].masterqueue\r\n\r\n                if (NGN.isFn(cq[key].eventName)) {\r\n                  cq[key].eventName(cq[key].payload)\r\n                } else {\r\n                  me.emit(cq[key].eventName, cq[key].payload)\r\n                }\r\n              }\r\n            }\r\n          }, 0)\r\n        }\r\n      })",
          "start": {
            "line": 495,
            "column": 6
          },
          "end": {
            "line": 518,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        },
        "funnel": {
          "type": "property",
          "label": "funnel",
          "description": "Emit an event after a collection of unique events have all fired.\r\n      This can be useful in situations where multiple asynchronous actions\r\n      must complete before another begins. For example, blending 3\r\n      remote data sources from different API's into a single resultset\r\n      can be achieved with this.\r\n      \n      Example\n      ```js\r\n      let collection = NGN.BUS.funnel(['download1done', 'download2done', 'download3done'], 'make.results')\r\n      \n      let allData = []\r\n      \n      // When all of the downloads are done, log them.\r\n      NGN.BUS.on('make.results', () => {\r\n        console.log(allData)\r\n      })\r\n      \n      // Download the first set of data asynchronously\r\n      NGN.NET.json('http:/download1.com/data.json', (data) => {\r\n        allData.push(data)\r\n        NGN.BUS.emit('download1done')\r\n      })\r\n      \n      // Download the second set of data asynchronously\r\n      NGN.NET.json('http:/download2.com/data.json', (data) => {\r\n        allData.push(data)\r\n        NGN.BUS.emit('download2done')\r\n      })\r\n      \n      // Download the third set of data asynchronously\r\n      NGN.NET.json('http:/download3.com/data.json', (data) => {\r\n        allData.push(data)\r\n        NGN.BUS.emit('download3done')\r\n      })\r\n      \n      // The handler can be removed with the special method:\r\n      collection.remove()\r\n      ```\r\n      \r\n      An array of events. Once _all_ of these events have fired,\r\n      the triggerEventName will be fired.\r\n      \r\n      The name of the event triggered after the collection has completed.\r\n      This can also be a callback function. If a callback function is provided,\r\n      it will receive the payload as the only argument when it is triggered.\r\n      \r\n      An optional payload delivered to the #triggerEventName.\r\n      \r\n      Provides the key/value configuration of the collection.\r\n      ```js\r\n      {\r\n        masterqueue: ['event1', 'event2', 'etc'], // The original event array (non-editable)\r\n        remainingqueue: [...], // The events the BUS is still waiting for before firing the trigger event.\r\n        eventName: 'triggeredEventName', // Name of the event triggered after the remaining elements are flushed.\r\n        payload: 'anything', // OPTIONAL\r\n        remove: [Function]\r\n      }\r\n      ```",
          "code": "funnel: NGN.const((eventCollection, triggerEventName, payload = null) => {\r\n        if (NGN.typeof(eventCollection) !== 'array') {\r\n          throw new Error(`NGN.BUS.funnel expected an array of events, but received a(n) ${NGN.typeof(eventCollection)}`)\r\n        }\r\n\r\n        let collection = new Set(eventCollection)\r\n        let key = this.getInternalCollectionId(this.META.collectionQueue)\r\n\r\n        this.META.collectionQueue[key] = {}\r\n\r\n        Object.defineProperties(this.META.collectionQueue[key], {\r\n          masterqueue: NGN.const(new Set(eventCollection)),\r\n          remainingqueue: NGN.private(collection),\r\n          eventName: NGN.const(triggerEventName),\r\n          remove: NGN.const(() => {\r\n            this.META.collectionQueue[key].masterqueue.forEach(event => {\r\n              this.off(event, this.handleCollectionTrigger(event, key))\r\n            })\r\n\r\n            this.decreaseMaxListeners(this.META.collectionQueue[key].masterqueue.size)\r\n\r\n            delete this.META.collectionQueue[key]\r\n          }),\r\n          payload: NGN.const(payload)\r\n        })\r\n\r\n        this.increaseMaxListeners(collection.size)\r\n\r\n        collection.forEach(event => {\r\n          this.on(event, this.handleCollectionTrigger(event, key))\r\n        })\r\n\r\n        return this.META.collectionQueue[key]\r\n      })",
          "start": {
            "line": 581,
            "column": 6
          },
          "end": {
            "line": 614,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "funnelOnce": {
          "type": "property",
          "label": "funnelOnce",
          "description": "This provides the same functionality as #funnel, but\r\n      removes the listener after the resultant event has fired.\r\n      See #funnel for detailed usage.\r\n      \r\n      An array of events. Once _all_ of these events have fired,\r\n      the triggerEventName will be fired.\r\n      \r\n      The name of the event triggered after the collection has completed.\r\n      \r\n      An optional payload delivered to the #triggerEventName.\r\n      \r\n      Provides the key/value configuration of the collection.",
          "code": "funnelOnce: NGN.const((eventCollection, triggerEventName, payload = null) => {\r\n        let funnelClosureEvent = `::NGNFUNNEL::${(new Date()).getTime()}::${triggerEventName}`\r\n        // let funnelClosureEvent = Symbol(triggerEventName)\r\n        let collection = this.funnel(eventCollection, funnelClosureEvent, payload)\r\n\r\n        this.increaseMaxListeners()\r\n        this.once(funnelClosureEvent, () => {\r\n          collection.remove()\r\n          collection = null\r\n          this.emit(triggerEventName, payload)\r\n        })\r\n      })",
          "start": {
            "line": 631,
            "column": 6
          },
          "end": {
            "line": 642,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "threshold": {
          "type": "property",
          "label": "threshold",
          "description": "After an event is fired a predetermined number of times (the threshold),\r\n      trigger another event or function.\r\n      \n      For example:\r\n      \n      ```js\r\n      NGN.BUS.threshold('push.my.button', 3, 'annoyed')\r\n      \n      NGN.BUS.on('annoyed', function () {\r\n        console.log('We apologize for the slow response, but excessive clicking will not speed up the process.')\r\n      })\r\n      \n      document.getElementById('#myButton').addEventListener('click', NGN.BUS.attach('push.my.button'))\r\n      ```\r\n      \n      Once the threshold is exceeded, the final event will be triggered and\r\n      the threshold will be reset. Using the example above, this means\r\n      clicking 3 times on `#myButton` would trigger the `annoyed` event ONCE,\r\n      6 times triggers `annoyed` TWICE, 9 times triggers `annoyed` THREE times, etc.\r\n      \r\n      The name of the event to count.\r\n      \r\n      The number of occurrances allowed until the final event is triggered.\r\n      The event will be triggered at the threshold. For example, if the limit\r\n      is `3`, the finalEvent will be triggered the 3rd time thresholdEventName is\r\n      fired.\r\n      \r\n      This can be an event or callback function triggered when the threshold is crossed.\r\n      If a callback function is specified, the payload is passed as the only argument.\r\n      \r\n      An optional payload to send to the finalEvent handler(s).\r\n      \r\n      Returns an object that can be used to remove the threshold.",
          "code": "threshold: NGN.const(function (thresholdEventName, limit, finalEventName, payload = null) {\r\n        if (typeof thresholdEventName !== 'string') {\r\n          throw new Error('The threshold event name must be a string (received ' + (typeof thresholdEventName) + ')')\r\n        }\r\n\r\n        // let key = `${this.getInternalCollectionId(this.META.thresholdQueue)}${limit.toString()}`\r\n        let key = this.getInternalCollectionId(this.META.thresholdQueue)\r\n\r\n        this.META.thresholdQueue[key] = {}\r\n\r\n        Object.defineProperties(this.META.thresholdQueue[key], {\r\n          key: NGN.const(key),\r\n          eventName: NGN.const(thresholdEventName),\r\n          limit: NGN.const(limit),\r\n          count: NGN.private(0),\r\n          finalEventName: NGN.const(finalEventName),\r\n          remove: NGN.const(() => {\r\n            let event = this.META.thresholdQueue[key].eventName\r\n\r\n            delete this.META.thresholdQueue[key]\r\n\r\n            this.decreaseMaxListeners()\r\n            this.off(event, this.handleThresholdTrigger(key))\r\n          }),\r\n          payload: NGN.const(payload)\r\n        })\r\n\r\n        this.increaseMaxListeners()\r\n        this.on(thresholdEventName, this.handleThresholdTrigger(key))\r\n\r\n        return this.META.thresholdQueue[key]\r\n      })",
          "start": {
            "line": 681,
            "column": 6
          },
          "end": {
            "line": 712,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "thresholdOnce": {
          "type": "property",
          "label": "thresholdOnce",
          "description": null,
          "code": "thresholdOnce: NGN.const(function (thresholdEventName, limit, finalEventName, payload = null) {\r\n        let thresholdClosureEvent = `::NGNTHRESHOLD::${(new Date()).getTime()}::${finalEventName}`\r\n        let threshold = this.threshold(thresholdEventName, limit, thresholdClosureEvent, payload)\r\n\r\n        this.once(thresholdClosureEvent, () => {\r\n          threshold.remove()\r\n          threshold = null\r\n          this.emit(finalEventName, payload)\r\n        })\r\n      })",
          "start": {
            "line": 714,
            "column": 6
          },
          "end": {
            "line": 723,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "handleThresholdTrigger": {
          "type": "property",
          "label": "handleThresholdTrigger",
          "description": "A method to manage #threshold event handlers.",
          "code": "handleThresholdTrigger: NGN.const(function (key) {\r\n        let me = this\r\n        return function () {\r\n          // Use setTimeout to simulate nextTick\r\n          setTimeout(() => {\r\n            if (me.META.thresholdQueue.hasOwnProperty(key)) {\r\n              me.META.thresholdQueue[key].count++\r\n              if (me.META.thresholdQueue[key].count === me.META.thresholdQueue[key].limit) {\r\n                if (NGN.isFn(me.META.thresholdQueue[key].finalEventName)) {\r\n                  me.META.thresholdQueue[key].finalEventName(me.META.thresholdQueue[key].payload)\r\n                } else {\r\n                  me.emit(me.META.thresholdQueue[key].finalEventName, me.META.thresholdQueue[key].payload)\r\n                }\r\n\r\n                // This if statement is required in case the event is removed\r\n                // during the reset process.\r\n                if (me.META.thresholdQueue.hasOwnProperty(key)) {\r\n                  me.META.thresholdQueue[key].count = 0\r\n                }\r\n              }\r\n            }\r\n          }, 0)\r\n        }\r\n      })",
          "start": {
            "line": 730,
            "column": 6
          },
          "end": {
            "line": 753,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        },
        "wrapEventHandlerWithScope": {
          "type": "property",
          "label": "wrapEventHandlerWithScope",
          "description": "An internal method to wrap node-based event handlers\r\n      with the proper scope.\r\n      \r\n      The name of the event being handled.\r\n      \r\n      The handler function.",
          "code": "wrapEventHandlerWithScope: NGN.privateconst((name, fn) => {\r\n        if (!NGN.nodelike) {\r\n          return fn\r\n        }\r\n\r\n        const handlerFn = fn\r\n\r\n        return function () {\r\n          let args = arguments\r\n\r\n          if (typeof args[args.length - 1] === 'symbol') {\r\n            name = args[args.length - 1].toString().replace(/Symbol\\(|\\)/gi, '')\r\n            args = NGN.slice(args)\r\n            args.pop()\r\n          }\r\n\r\n          handlerFn.apply({ event: name }, args)\r\n        }\r\n      })",
          "start": {
            "line": 763,
            "column": 6
          },
          "end": {
            "line": 781,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        },
        "applyScope": {
          "type": "property",
          "label": "applyScope",
          "description": "An internal method to apply scope based on whether the handler\r\n      is a Node-like \"once\" emitter or not.\r\n      \r\n      The name of the event being scoped.\r\n      \r\n      The handler function.",
          "code": "applyScope: NGN.privateconst((args) => {\r\n        if (NGN.nodelike && args.length > 1) {\r\n          if (args[args.length - 1].listener) {\r\n            args[args.length - 1].listener = this.wrapEventHandlerWithScope(\r\n              args[0],\r\n              args[args.length - 1].listener\r\n            )\r\n          } else {\r\n            args[args.length - 1] = this.wrapEventHandlerWithScope(\r\n              args[0],\r\n              args[args.length - 1]\r\n            )\r\n          }\r\n        }\r\n      })",
          "start": {
            "line": 791,
            "column": 6
          },
          "end": {
            "line": 805,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        }
      },
      "methods": {
        "constructor": {
          "type": "method",
          "label": "constructor",
          "description": null,
          "code": "constructor (cfg) {\r\n    cfg = NGN.coalesce(cfg, {})\r\n\r\n    super()\r\n\r\n    if (cfg.dataMap) {\r\n      cfg.fieldmap = cfg.dataMap\r\n      NGN.WARN('\"dataMap\" is deprecated. Use \"map\" instead.')\r\n    }\r\n\r\n    if (cfg.idAttribute) {\r\n      cfg.IdentificationField = cfg.idAttribute\r\n      NGN.WARN('\"idAttribute\" is deprecated. Use \"IdentificationField\" instead.')\r\n    }\r\n\r\n    const me = this\r\n\r\n    // Create private attributes & data placeholders\r\n    Object.defineProperties(this, {\r\n      /**\r\n       * @property {Symbol} OID\r\n       * A unique object ID assigned to the model. This is an\r\n       * internal readon-only reference.\r\n       * @private\r\n       */\r\n      OID: NGN.private(Symbol('model.id')),\r\n\r\n      METADATA: NGN.privateconst({\r\n        /**\r\n         * @cfg {string} [name]\r\n         * A descriptive name for the model. This is typically used for\r\n         * debugging, logging, schema defintions, and (sometimes) data proxies.\r\n         */\r\n        name: NGN.coalesce(cfg.name, 'Untitled Model'),\r\n\r\n        /**\r\n         * @cfg {string} [description]\r\n         * A description of the model. This is typically used for\r\n         * debugging, logging, schema definitions, and (sometimes) data proxies.\r\n         */\r\n        description: NGN.coalesce(cfg.description, cfg.name, 'Generic Data Model'),\r\n\r\n        /**\r\n         * @cfg {object} fields\r\n         * A private object containing the data fields of the model.\r\n         * Each key contains the field name, while each value can be one of\r\n         * the following:\r\n         *\r\n         * - Primitive (String, Number, RegExp, Boolean)\r\n         * - Standard Type (Array, Object, Date)\r\n         * - Custom Class\r\n         * - NGN.DATA.Field\r\n         * - An NGN.DATA.Field configuration\r\n         * - `null` (Defaults to String primitive)\r\n         *\r\n         * ```js\r\n         * fields: {\r\n         *   a: String,\r\n         *   b: Date,\r\n         *   c: MyCustomClass,\r\n         *   d: new NGN.DATA.Field({\r\n         *     required: true,\r\n         *     type: String,\r\n         *     default: 'some default value'\r\n         *   }),\r\n         *   e: {\r\n         *     required: true,\r\n         *     type: String,\r\n         *     default: 'some default value'\r\n         *   },\r\n         *   f: null // Uses default field config (String)\r\n         * }\r\n         * ```\r\n         *\r\n         * Extensions of the NGN.DATA.Field are also supported,\r\n         * such as NGN.DATA.VirtualField and NGN.DATA.Relationship.\r\n         */\r\n        fields: Object.assign({}, NGN.coalesce(cfg.fields, {})),\r\n        knownFieldNames: new Set(),\r\n        invalidFieldNames: new Set(),\r\n        auditFieldNames: NGN.coalesce(cfg.audit, false) ? new Set() : null,\r\n\r\n        /**\r\n         * @property {[NGN.DATA.Rule]|Object}\r\n         * Custom validation rules used to verify the integrity of the entire\r\n         * model. This only applies to the full model. Individual data fields\r\n         * may have their own validators.\r\n         *\r\n         * If an object is specified, it should contain simple key/value pairs,\r\n         * where the key is the descriptive name of the rule and the value is\r\n         * a synchronous callback function that returns a `true`/`false` value.\r\n         * For instance, assume the fields called `price`, `items`, and `tax` exist\r\n         * in the example model below. :\r\n         *\r\n         * ```js\r\n         * {\r\n         *   'Positive Sale': function () {\r\n         *      return (this.price * this.items) > 0\r\n         *   },\r\n         *   'Taxes Applied': function () {\r\n         *      return this.tax > 0\r\n         *   }\r\n         * }\r\n         * ```\r\n         *\r\n         * Alternatively, an array of NGN.DATA.Rule instances may be provided.\r\n         */\r\n        validators: NGN.coalesce(cfg.rules, cfg.rule, cfg.validators),\r\n\r\n        /**\r\n         * @cfgproperty {boolean} [validation=true]\r\n         * Toggle data validation using this.\r\n         */\r\n        validation: NGN.coalesce(cfg.validation, true),\r\n\r\n        /**\r\n         * @cfg {boolean} [autoid=false]\r\n         * If the NGN.DATA.Model#IdentificationField/id is not provided for a record,\r\n         * a unique ID will be automatically generated for it.\r\n         *\r\n         * An NGN.DATA.Store using a model with this set to `true` will never\r\n         * have a duplicate record, since the #id or #IdentificationField will always\r\n         * be unique.\r\n         */\r\n        autoid: NGN.coalesce(cfg.autoid, false),\r\n\r\n        /**\r\n         * @cfg {String} [IdentificationField='id']\r\n         * Setting this allows an attribute of the object to be used as the ID.\r\n         * For example, if an email is the ID of a user, this would be set to\r\n         * `email`.\r\n         */\r\n        IdentificationField: NGN.coalesce(cfg.IdentificationField, cfg.idField, 'id'),\r\n\r\n        /**\r\n         * @cfgproperty {Date|Number} [expires]\r\n         * When this is set to a date/time, the model record will be marked\r\n         * as expired at the specified time/date. If a number is specified\r\n         * (milliseconds), the record will be marked as expired after the\r\n         * specified time period has elapsed. When a record/model is marked as\r\n         * \"expired\", it triggers the `expired` event. By default, expired\r\n         * records/models within an NGN.DATA.Store will be removed from the store.\r\n         *\r\n         * Setting this to any value less than `0` disables expiration.\r\n         * @fires expired\r\n         * Triggered when the model/record expires.\r\n         */\r\n        expiration: null,\r\n\r\n        // Holds a setTimeout method for expiration events.\r\n        expirationTimeout: null,\r\n\r\n        created: Date.now(),\r\n        store: null,\r\n\r\n        /**\r\n         * @cfg {boolean} [audit=false]\r\n         * Enable auditing to support #undo/#redo operations. This creates and\r\n         * manages a NGN.DATA.TransactionLog.\r\n         */\r\n        AUDITABLE: false,\r\n        AUDITLOG: NGN.coalesce(cfg.audit, false) ? new NGN.DATA.TransactionLog() : null,\r\n        AUDIT_HANDLER: function (change) {\r\n          if (change.hasOwnProperty('cursor')) {\r\n            me.METADATA.AUDITLOG.commit(me.METADATA.getAuditMap())\r\n          }\r\n        },\r\n\r\n        EVENTS: new Set([\r\n          'field.update',\r\n          'field.create',\r\n          'field.remove',\r\n          'field.invalid',\r\n          'field.valid',\r\n          'field.hidden',\r\n          'field.unhidden',\r\n          'field.rule.add',\r\n          'field.rule.remove',\r\n          'rule.add',\r\n          'rule.remove',\r\n          'relationship.create',\r\n          'relationship.remove',\r\n          'expired',\r\n          'deleted',\r\n          'reset',\r\n          'load'\r\n        ]),\r\n\r\n        /**\r\n         * An internal method used to apply field definitions to the model.\r\n         * @param  {string} fieldname\r\n         * Name of the field (as applied to the model).\r\n         * @param  {NGN.DATA.Field|Object|Primitive} [fieldConfiguration=null]\r\n         * The configuration to apply. See #addField for details.\r\n         * @param  {Boolean} [suppressEvents=false]\r\n         * Optionally suppress the `field.create` event.\r\n         * @private\r\n         */\r\n        applyField: (field, fieldcfg = null, suppressEvents = false) => {\r\n          // Prevent duplicate fields\r\n          if (this.METADATA.knownFieldNames.has(field)) {\r\n            return NGN.WARN(`Duplicate field \"${field}\" detected.`)\r\n          }\r\n\r\n          // Prevent reserved words\r\n          if (this.hasOwnProperty(field) && field.toLowerCase() !== 'id') {\r\n            throw new ReservedWordError(`\"${field}\" cannot be used as a field name (reserved word).`)\r\n          }\r\n\r\n          // If the field config isn't already an NGN.DATA.Field, create it.\r\n          if (!(fieldcfg instanceof NGN.DATA.Field)) {\r\n            if (fieldcfg instanceof NGN.DATA.Store || fieldcfg instanceof NGN.DATA.Model) {\r\n              if (this.METADATA.IdentificationField === field) {\r\n                throw new InvalidConfigurationError(`\"${field}\" cannot be an ID. Relationship fields cannot be an identification field/attribute.`)\r\n              }\r\n\r\n              this.METADATA.fields[field] = new NGN.DATA.Relationship({\r\n                name: field,\r\n                record: fieldcfg,\r\n                model: this\r\n              })\r\n            } else {\r\n              switch (NGN.typeof(fieldcfg)) {\r\n                // Custom config\r\n                case 'object':\r\n                  fieldcfg.model = this\r\n                  fieldcfg.identifier = NGN.coalesce(fieldcfg.identifier, this.METADATA.IdentificationField === field)\r\n                  fieldcfg.name = field\r\n\r\n                  this.METADATA.fields[field] = new NGN.DATA.Field(fieldcfg)\r\n\r\n                  break\r\n\r\n                // Collection of models\r\n                case 'array':\r\n                  return this.METADATA.applyField(field, fieldcfg[0], suppressEvents)\r\n\r\n                // Type-based cfg.\r\n                default:\r\n                  if (NGN.isFn(fieldcfg) || fieldcfg === null) {\r\n                    if (NGN.isFn(fieldcfg) && ['string', 'number', 'boolean', 'number', 'symbol', 'regexp', 'date', 'array', 'object'].indexOf(NGN.typeof(fieldcfg)) < 0) {\r\n                      this.METADATA.fields[field] = new NGN.DATA.VirtualField({\r\n                        name: field,\r\n                        identifier: this.METADATA.IdentificationField === field,\r\n                        model: this,\r\n                        method: fieldcfg\r\n                      })\r\n\r\n                      break\r\n                    }\r\n\r\n                    this.METADATA.fields[field] = new NGN.DATA.Field({\r\n                      name: field,\r\n                      type: fieldcfg,\r\n                      identifier: this.METADATA.IdentificationField === field,\r\n                      model: this\r\n                    })\r\n\r\n                    break\r\n                  }\r\n\r\n                  this.METADATA.fields[field] = new NGN.DATA.Field({\r\n                    name: field,\r\n                    type: NGN.isFn(fieldcfg) ? fieldcfg : String,\r\n                    identifier: NGN.isFn(fieldcfg)\r\n                      ? false\r\n                      : NGN.coalesce(fieldcfg.identifier, this.METADATA.IdentificationField === field),\r\n                    model: this\r\n                  })\r\n\r\n                  break\r\n              }\r\n            }\r\n          } else if (fieldcfg.model === null) {\r\n            fieldcfg.name = field\r\n            fieldcfg.identifier = fieldcfg.identifier = NGN.coalesce(fieldcfg.identifier, this.METADATA.IdentificationField === field)\r\n\r\n            this.METADATA.fields[field] = fieldcfg\r\n            this.METADATA.fields[field].model = this\r\n          } else if (fieldcfg.model === this) {\r\n            fieldcfg.identifier = NGN.coalesce(fieldcfg.identifier, this.METADATA.IdentificationField === field)\r\n\r\n            this.METADATA.fields[field] = fieldcfg\r\n          } else if (!(fieldcfg instanceof NGN.DATA.Field)) {\r\n            return NGN.WARN(`The \"${fieldcfg.name}\" field cannot be applied because model is already specified.`)\r\n          }\r\n\r\n          // Add a direct reference to the model.\r\n          Object.defineProperty(this, field, {\r\n            enumerable: true,\r\n            configurable: true,\r\n            get: () => this.get(field),\r\n            set: (value) => this.set(field, value)\r\n          })\r\n\r\n          // Enable auditing if necessary.\r\n          if (this.METADATA.AUDITABLE) {\r\n            if (this.METADATA.fields[field].fieldType !== 'virtual') {\r\n              this.METADATA.fields[field].auditable = true\r\n              this.METADATA.auditFieldNames.add(field)\r\n            }\r\n          }\r\n\r\n          // Add the field to the list\r\n          this.METADATA.knownFieldNames.add(field)\r\n\r\n          this.METADATA.fields[field].relay('*', this, 'field.')\r\n\r\n          if (!suppressEvents) {\r\n            this.emit('field.create', this.METADATA.fields[field])\r\n          }\r\n\r\n          return this.METADATA.fields[field]\r\n        },\r\n\r\n        /**\r\n         * An internal helper method for applying changes to the model.\r\n         * @param  {String} [type='undo']\r\n         * This can be `undo` or `redo`.\r\n         * @param  {Number} [count=1]\r\n         * The number of cursor indexes to shift\r\n         * @param  {Boolean} [suppressEvents=false]\r\n         * Indicates events should be suppressed.\r\n         * @private\r\n         */\r\n        applyChange: (type = 'undo', count = 1, suppressEvents = false) => {\r\n          if (!this.METADATA.AUDITABLE) {\r\n            NGN.WARN(`The ${type} operation failed on the ${this.name} model because auditing is disabled.`)\r\n            return\r\n          }\r\n\r\n          this.METADATA.AUDITLOG[type === 'undo' ? 'rollback' : 'advance'](count)\r\n\r\n          let data = this.METADATA.AUDITLOG.currentValue\r\n\r\n          if (data) {\r\n            this.METADATA.auditFieldNames.forEach(fieldname => {\r\n              let field = this.METADATA.fields[fieldname]\r\n              let log = field.METADATA.AUDITLOG\r\n\r\n              if (log.cursor !== data[fieldname]) {\r\n                if (typeof data[fieldname] === 'symbol') {\r\n                  log.cursor = data[fieldname]\r\n                } else {\r\n                  log.cursor = null\r\n                }\r\n\r\n                field.METADATA.setValue(NGN.coalesce(log.currentValue, field.default), suppressEvents, true)\r\n              }\r\n            })\r\n          }\r\n        },\r\n\r\n        /**\r\n         * Generates a key/value representation of the model where\r\n         * each key represents an auditable field and each value is the\r\n         * transaction cursor ID.\r\n         * @return {Object}\r\n         * @private\r\n         */\r\n        getAuditMap: () => {\r\n          let map = {}\r\n\r\n          this.METADATA.auditFieldNames.forEach(field => {\r\n            map[field] = this.METADATA.fields[field].METADATA.AUDITLOG.cursor\r\n          })\r\n\r\n          return map\r\n        },\r\n\r\n        /**\r\n         * Restore the model to a specific audit map (i.e. historical state\r\n         * of multiple fields).\r\n         * @param {Object} map\r\n         * The audit map to restore.\r\n         */\r\n        // restore: (map) => {\r\n        //   let keys = Object.keys(map)\r\n        //\r\n        //   for (let i = 0; i < keys.length; i++) {\r\n        //     if (this.METADATA.knownFieldNames.has(keys[i]) && typeof map[keys[i]] === 'symbol') {\r\n        //       console.log('Has', keys[i])\r\n        //\r\n        //     }\r\n        //   }\r\n        // },\r\n\r\n        // Deprecations\r\n        setSilent: NGN.deprecate(this.setSilentFieldValue, 'setSilent has been deprecated. Use setSilentFieldValue instead.'),\r\n\r\n        /**\r\n         * @cfgproperty {object} fieldmap\r\n         * An object mapping model attribute names to data storage field names.\r\n         *\r\n         * _Example_\r\n         * ```\r\n         * {\r\n         *   ModelFieldName: 'inputName',\r\n         *   father: 'dad',\r\n         *   email: 'eml',\r\n         *   image: 'img',\r\n         *   displayName: 'dn',\r\n         *   firstName: 'gn',\r\n         *   lastName: 'sn',\r\n         *   middleName: 'mn',\r\n         *   gender: 'sex',\r\n         *   dob: 'bd'\r\n         * }\r\n         * ```\r\n         */\r\n        DATAMAP: null\r\n      }),\r\n\r\n      MAP: NGN.get(() => {\r\n        return NGN.coalesce(\r\n          this.METADATA.DATAMAP,\r\n          this.METADATA.store instanceof NGN.DATA.Store\r\n            ? this.METADATA.store.map\r\n            : null\r\n        )\r\n      })\r\n    })\r\n\r\n    if (cfg.fieldmap instanceof NGN.DATA.FieldMap) {\r\n      this.METADATA.DATAMAP = cfg.fieldmap\r\n    } else if (NGN.typeof(cfg.fieldmap) === 'object') {\r\n      this.METADATA.DATAMAP = new NGN.DATA.FieldMap(cfg.fieldmap)\r\n    }\r\n\r\n    // Bubble events to the BUS\r\n    // this.relay('*', NGN.BUS, 'record.')\r\n\r\n    // Add data fields.\r\n    let fields = Object.keys(this.METADATA.fields)\r\n    for (let i = 0; i < fields.length; i++) {\r\n      let name = fields[i]\r\n\r\n      if (this.METADATA.knownFieldNames.has(name)) {\r\n        NGN.WARN(`Duplicate field \"${name}\" detected.`)\r\n      } else {\r\n        // Configure a data field for each configuration.\r\n        this.METADATA.applyField(name, this.METADATA.fields[name], true)\r\n      }\r\n    }\r\n\r\n    // Apply automatic ID's when applicable\r\n    if (this.METADATA.autoid) {\r\n      let autoIdValue = null\r\n\r\n      Object.defineProperty(this.METADATA, 'IdentificationValue', NGN.get(() => {\r\n        if (autoIdValue === null) {\r\n          autoIdValue = NGN.DATA.UTILITY.UUID()\r\n        }\r\n\r\n        return autoIdValue\r\n      }))\r\n    }\r\n\r\n    // Apply auditing if configured\r\n    this.auditable = NGN.coalesce(cfg.audit, false)\r\n\r\n    // Clear any cached checksums when the model changes.\r\n    this.on(['field.update', 'field.create', 'field.delete', 'field.hidden', 'field.unhidden'], () => {\r\n      if (this.METADATA.checksum) {\r\n        this.METADATA.checksum = null\r\n      }\r\n    })\r\n\r\n    // Configure TTL/Expiration\r\n    if (cfg.expires) {\r\n      this.expires = cfg.expires\r\n    }\r\n\r\n    // Configure model-level validation rules\r\n    if (this.METADATA.validators !== null) {\r\n      switch (NGN.typeof(this.METADATA.validators)) {\r\n        // Support key/value objects where the key is the name and value is a function.\r\n        case 'object':\r\n          let keys = Object.keys(this.METADATA.validators)\r\n          let rules = []\r\n\r\n          for (let i = 0; i < keys.length; i++) {\r\n            rules.push(new NGN.DATA.Rule(this.METADATA.validators[keys[i]], keys[i], this))\r\n          }\r\n\r\n          break\r\n\r\n        // Support an array of existing data rules.\r\n        case 'array':\r\n          for (let i = 0; i < this.METADATA.validators.length; i++) {\r\n            if (this.METADATA.validators[i].hasOwnProperty('RULE')) {\r\n              this.METADATA.validators[i].RULE.scope = this\r\n            } else {\r\n              throw new Error(`Invalid data rule configuration for ${this.name} model. Rule #${i} is not a valid NGN.DATA.Rule instance.`)\r\n            }\r\n          }\r\n\r\n          break\r\n\r\n        // Diasllow any other kinds of rules.\r\n        default:\r\n          throw new Error(`Invalid data rule configuration for ${this.name} model. Expected an object or array of NGN.DATA.Rule instances. Received \"${NGN.typeof(this.METADATA.validators)}\"`)\r\n      }\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 17,
            "column": 2
          },
          "end": {
            "line": 521,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "cfg": {
              "type": "argument",
              "label": "cfg",
              "description": null,
              "code": "cfg",
              "start": {
                "line": 17,
                "column": 15
              },
              "end": {
                "line": 17,
                "column": 18
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "constructor",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "serializeFields": {
          "type": "method",
          "label": "serializeFields",
          "description": null,
          "code": "serializeFields (ignoreID = false, ignoreVirtualFields = true) {\r\n    if (this.METADATA.knownFieldNames.size === 0) {\r\n      return {}\r\n    }\r\n\r\n    let fields = this.METADATA.knownFieldNames.keys()\r\n    let result = {}\r\n    let fieldname = fields.next()\r\n\r\n    while (!fieldname.done) {\r\n      let field = this.METADATA.fields[fieldname.value]\r\n\r\n      // Ignore unserializable fields\r\n      if ((\r\n        field.value === undefined ||\r\n        (ignoreID && fieldname.value === this.IdentificationField) ||\r\n        (!field.virtual || (!ignoreVirtualFields && field.virtual))\r\n      )) {\r\n        // Do not serialize hidden values or virtuals\r\n        if (!field.hidden) {\r\n          switch (NGN.typeof(field.value)) {\r\n            case 'array':\r\n            case 'object':\r\n              result[fieldname.value] = NGN.DATA.UTILITY.serialize(field.value)\r\n              break\r\n\r\n            default:\r\n              result[fieldname.value] = field.value\r\n          }\r\n        }\r\n      }\r\n\r\n      fieldname = fields.next()\r\n    }\r\n\r\n    return result\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 774,
            "column": 2
          },
          "end": {
            "line": 810,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "ignoreID": {
              "type": "argument",
              "label": "ignoreID",
              "description": null,
              "code": "ignoreID = false",
              "start": {
                "line": 774,
                "column": 19
              },
              "end": {
                "line": 774,
                "column": 35
              },
              "flags": [],
              "authors": [],
              "default": false,
              "datatype": "boolean",
              "required": false,
              "enum": null
            },
            "ignoreVirtualFields": {
              "type": "argument",
              "label": "ignoreVirtualFields",
              "description": null,
              "code": "ignoreVirtualFields = true",
              "start": {
                "line": 774,
                "column": 37
              },
              "end": {
                "line": 774,
                "column": 63
              },
              "flags": [],
              "authors": [],
              "default": true,
              "datatype": "boolean",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "serialize": {
          "type": "method",
          "label": "serialize",
          "description": null,
          "code": "serialize () {\r\n    return NGN.deprecate(this.serializeFields, 'serialize is now serializeFields. Use NGN.DATA.UTILITY.serialize for generic object serialization.')\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 812,
            "column": 2
          },
          "end": {
            "line": 814,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "fieldExists": {
          "type": "method",
          "label": "fieldExists",
          "description": "Determines whether a field exists in the model or not.\r\n  \r\n  Name of the field to check for.",
          "code": "fieldExists (field) {\r\n    return this.METADATA.knownFieldNames.has(field)\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 822,
            "column": 2
          },
          "end": {
            "line": 824,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "field": {
              "type": "argument",
              "label": "field",
              "description": "Name of the field to check for.",
              "code": "field",
              "start": {
                "line": 822,
                "column": 15
              },
              "end": {
                "line": 822,
                "column": 20
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            }
          },
          "returnType": "boolean",
          "returnDescription": "",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "get": {
          "type": "method",
          "label": "get",
          "description": "Retrieve the value of the specified field.\r\n  \r\n  Name of the field whose value should be returned.\r\n  \r\n  Returns the value of the field.",
          "code": "get (field) {\r\n    if (field === 'id' || field === 'ID' || field === this.METADATA.IdentificationField) {\r\n      field = this.METADATA.IdentificationField\r\n\r\n      if (this.METADATA.autoid) {\r\n        if (!this.METADATA.knownFieldNames.has(field)) {\r\n          return this.METADATA.IdentificationValue\r\n        } else {\r\n          return NGN.coalesce(this.METADATA.fields[field].value, this.METADATA.IdentificationValue)\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.METADATA.knownFieldNames.has(field)) {\r\n      return this.METADATA.fields[field].value\r\n    } else {\r\n      NGN.WARN(`Cannot get \"${field}\". The field is not part of the model.`)\r\n      return undefined\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 833,
            "column": 2
          },
          "end": {
            "line": 852,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "field": {
              "type": "argument",
              "label": "field",
              "description": "Name of the field whose value should be returned.",
              "code": "field",
              "start": {
                "line": 833,
                "column": 7
              },
              "end": {
                "line": 833,
                "column": 12
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            }
          },
          "returnType": "any",
          "returnDescription": "null Returns the value of the field.",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "set": {
          "type": "method",
          "label": "set",
          "description": "Set a new value for the specified field.\r\n  \r\n  Name of the field whose value will be changed.\r\n  \r\n  The new value of the field.",
          "code": "set (field, value) {\r\n    if (field === 'id' || field === 'ID') {\r\n      field = this.METADATA.IdentificationField\r\n    }\r\n\r\n    if (this.METADATA.knownFieldNames.has(field)) {\r\n      this.METADATA.fields[field].value = value\r\n    } else {\r\n      NGN.WARN(`Cannot set \"${field}\". Unrecognized field name.`)\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 861,
            "column": 2
          },
          "end": {
            "line": 871,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "field": {
              "type": "argument",
              "label": "field",
              "description": "Name of the field whose value will be changed.",
              "code": "field",
              "start": {
                "line": 861,
                "column": 7
              },
              "end": {
                "line": 861,
                "column": 12
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "value": {
              "type": "argument",
              "label": "value",
              "description": "The new value of the field.",
              "code": "value",
              "start": {
                "line": 861,
                "column": 14
              },
              "end": {
                "line": 861,
                "column": 19
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "addField": {
          "type": "method",
          "label": "addField",
          "description": "Add a data field after the initial model definition.\r\n  \r\n  The name of the field.\r\n  \r\n  The field configuration (see cfg#fields for syntax).\r\n  \r\n  Set to `true` to prevent events from firing when the field is added.",
          "code": "addField (name, fieldConfiguration = null, suppressEvents = false) {\r\n    if (name instanceof NGN.DATA.Field) {\r\n      fieldConfiguration = name\r\n      name = fieldConfiguration.name\r\n    } else if (typeof name !== 'string') {\r\n      throw new Error('Cannot add a non-string based field.')\r\n    }\r\n\r\n    this.METADATA.applyField(name, fieldConfiguration, suppressEvents)\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 882,
            "column": 2
          },
          "end": {
            "line": 891,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "name": {
              "type": "argument",
              "label": "fieldname",
              "description": "The name of the field.",
              "code": "name",
              "start": {
                "line": 882,
                "column": 12
              },
              "end": {
                "line": 882,
                "column": 16
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "fieldConfiguration": {
              "type": "argument",
              "label": "fieldConfiguration",
              "description": "The field configuration .",
              "code": "fieldConfiguration = null",
              "start": {
                "line": 882,
                "column": 18
              },
              "end": {
                "line": 882,
                "column": 43
              },
              "flags": [],
              "authors": [],
              "default": "null",
              "datatype": "ngn.data.field|object|primitive",
              "required": false,
              "enum": [
                "see cfg#fields for syntax"
              ]
            },
            "suppressEvents": {
              "type": "argument",
              "label": "suppressEvents",
              "description": "Set to `true` to prevent events from firing when the field is added.",
              "code": "suppressEvents = false",
              "start": {
                "line": 882,
                "column": 45
              },
              "end": {
                "line": 882,
                "column": 67
              },
              "flags": [],
              "authors": [],
              "default": "false",
              "datatype": "boolean",
              "required": false,
              "enum": null
            },
            "fieldname": {
              "type": "argument",
              "label": "fieldname",
              "description": "The name of the field.",
              "code": "name",
              "start": {
                "line": 882,
                "column": 12
              },
              "end": {
                "line": 882,
                "column": 16
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "removeField": {
          "type": "method",
          "label": "removeField",
          "description": "Remove a field from the data model.",
          "code": "removeField (name, suppressEvents = false) {\r\n    if (this.METADATA.knownFieldNames.has(name)) {\r\n      this.METADATA.knownFieldNames.delete(name)\r\n      this.METADATA.invalidFieldNames.delete(name)\r\n\r\n      const field = this.METADATA.fields[name]\r\n\r\n      delete this[name]\r\n      delete this.METADATA.fields[name] // eslint-disable-line no-undef\r\n\r\n      // let change = {\r\n      //   action: 'delete',\r\n      //   field: field.name,\r\n      //   value: field,\r\n      //   join: field instanceof NGN.DATA.Relationship\r\n      // }\r\n\r\n      if (!suppressEvents) {\r\n        this.emit('field.remove', field)\r\n      }\r\n\r\n      if (this.METADATA.store !== null) {\r\n        this.METADATA.store.emit(this.METADATA.store.PRIVATE.EVENT.DELETE_RECORD_FIELD, {\r\n          record: this,\r\n          field\r\n        })\r\n      }\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 901,
            "column": 2
          },
          "end": {
            "line": 929,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "name": {
              "type": "argument",
              "label": "name",
              "description": "Name of the field to remove.",
              "code": "name",
              "start": {
                "line": 901,
                "column": 15
              },
              "end": {
                "line": 901,
                "column": 19
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "suppressEvents": {
              "type": "argument",
              "label": "suppressEvents",
              "description": "Set to `true` to prevent events from firing when the field is removed.",
              "code": "suppressEvents = false",
              "start": {
                "line": 901,
                "column": 21
              },
              "end": {
                "line": 901,
                "column": 43
              },
              "flags": [],
              "authors": [],
              "default": "false",
              "datatype": "boolean",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "getField": {
          "type": "method",
          "label": "getField",
          "description": "Returns the NGN.DATA.Field object for the specified field.\r\n  \r\n  Name of the field to retrieve.\r\n  \r\n  The raw field.",
          "code": "getField (name) {\r\n    if (name.toLowerCase() === 'id' && !this.METADATA.fields.hasOwnProperty(name) && this.METADATA.fields.hasOwnProperty(this.METADATA.IdentificationField)) {\r\n      return this.METADATA.fields[this.METADATA.IdentificationField]\r\n    }\r\n\r\n    return this.METADATA.fields[name]\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 938,
            "column": 2
          },
          "end": {
            "line": 944,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "name": {
              "type": "argument",
              "label": "fieldName",
              "description": "Name of the field to retrieve.",
              "code": "name",
              "start": {
                "line": 938,
                "column": 12
              },
              "end": {
                "line": 938,
                "column": 16
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "fieldName": {
              "type": "argument",
              "label": "fieldName",
              "description": "Name of the field to retrieve.",
              "code": "name",
              "start": {
                "line": 938,
                "column": 12
              },
              "end": {
                "line": 938,
                "column": 16
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            }
          },
          "returnType": "NGN.DATA.Field",
          "returnDescription": "null The raw field.",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "setSilentFieldValue": {
          "type": "method",
          "label": "setSilentFieldValue",
          "description": "A method to set a field value without triggering an update event.\nThis is designed primarily for use with live update proxies to prevent\nendless event loops.",
          "code": "setSilentFieldValue (field, value) {\r\n    this.METADATA.fields[field].silentValue = value\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 957,
            "column": 2
          },
          "end": {
            "line": 959,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "field": {
              "type": "argument",
              "label": "fieldname",
              "description": "The name of the #field to update.",
              "code": "field",
              "start": {
                "line": 957,
                "column": 23
              },
              "end": {
                "line": 957,
                "column": 28
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "value": {
              "type": "argument",
              "label": "value",
              "description": "The new value of the field.",
              "code": "value",
              "start": {
                "line": 957,
                "column": 30
              },
              "end": {
                "line": 957,
                "column": 35
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "any",
              "required": true,
              "enum": null
            },
            "fieldname": {
              "type": "argument",
              "label": "fieldname",
              "description": "The name of the #field to update.",
              "code": "field",
              "start": {
                "line": 957,
                "column": 23
              },
              "end": {
                "line": 957,
                "column": 28
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": true
        },
        "undo": {
          "type": "method",
          "label": "undo",
          "description": "A rollback function to undo changes. This operation affects\nthe changelog . To \"undo\" an \"undo\", use #redo.",
          "code": "undo (count = 1, suppressEvents = false) {\r\n    this.METADATA.applyChange('undo', ...arguments)\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 971,
            "column": 2
          },
          "end": {
            "line": 973,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "count": {
              "type": "argument",
              "label": "OperationCount",
              "description": "The number of operations to \"undo\". Defaults to a single operation.",
              "code": "count = 1",
              "start": {
                "line": 971,
                "column": 8
              },
              "end": {
                "line": 971,
                "column": 17
              },
              "flags": [],
              "authors": [],
              "default": "1",
              "datatype": "number",
              "required": false,
              "enum": null
            },
            "suppressEvents": {
              "type": "argument",
              "label": "suppressEvents",
              "description": "Set to `true` to quietly update the value (prevents `update` event from\nfiring).",
              "code": "suppressEvents = false",
              "start": {
                "line": 971,
                "column": 19
              },
              "end": {
                "line": 971,
                "column": 41
              },
              "flags": [],
              "authors": [],
              "default": "false",
              "datatype": "boolean",
              "required": false,
              "enum": null
            },
            "OperationCount": {
              "type": "argument",
              "label": "OperationCount",
              "description": "The number of operations to \"undo\". Defaults to a single operation.",
              "code": "count = 1",
              "start": {
                "line": 971,
                "column": 8
              },
              "end": {
                "line": 971,
                "column": 17
              },
              "flags": [],
              "authors": [],
              "default": "1",
              "datatype": "number",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "redo": {
          "type": "method",
          "label": "redo",
          "description": "A function to reapply known changes. This operation affects\nthe changelog .\n\nThe redo operation only works after an undo operation, but before a new\nvalue is committed to the transaction log. In other words, `undo -> redo`\nwill work, but `undo -> update -> redo` will not. For details, see how\nthe NGN.DATA.TransactionLog cursor system works.",
          "code": "redo (count = 1, suppressEvents = false) {\r\n    this.METADATA.applyChange('redo', ...arguments)\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 990,
            "column": 2
          },
          "end": {
            "line": 992,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "count": {
              "type": "argument",
              "label": "OperationCount",
              "description": "The number of operations to \"undo\". Defaults to a single operation.",
              "code": "count = 1",
              "start": {
                "line": 990,
                "column": 8
              },
              "end": {
                "line": 990,
                "column": 17
              },
              "flags": [],
              "authors": [],
              "default": "1",
              "datatype": "number",
              "required": false,
              "enum": null
            },
            "suppressEvents": {
              "type": "argument",
              "label": "suppressEvents",
              "description": "Set to `true` to quietly update the value (prevents `update` event from\nfiring).",
              "code": "suppressEvents = false",
              "start": {
                "line": 990,
                "column": 19
              },
              "end": {
                "line": 990,
                "column": 41
              },
              "flags": [],
              "authors": [],
              "default": "false",
              "datatype": "boolean",
              "required": false,
              "enum": null
            },
            "OperationCount": {
              "type": "argument",
              "label": "OperationCount",
              "description": "The number of operations to \"undo\". Defaults to a single operation.",
              "code": "count = 1",
              "start": {
                "line": 990,
                "column": 8
              },
              "end": {
                "line": 990,
                "column": 17
              },
              "flags": [],
              "authors": [],
              "default": "1",
              "datatype": "number",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "load": {
          "type": "method",
          "label": "load",
          "description": "Load a data record.",
          "code": "load (data, suppressEvents = false) {\r\n    if (this.MAP) {\r\n      data = this.MAP.applyMap(data)\r\n    }\r\n\r\n    let keys = Object.keys(data)\r\n\r\n    for (let i = 0; i < keys.length; i++) {\r\n      if (this.METADATA.knownFieldNames.has(keys[i])) {\r\n        this.METADATA.fields[keys[i]].METADATA.setValue(data[keys[i]], suppressEvents)\r\n      } else {\r\n        NGN.WARN(`Failed to load ${keys[i]} field of ${this.name} model. \"${keys[i]}\" is not a recognized field.`)\r\n      }\r\n    }\r\n\r\n    if (!suppressEvents) {\r\n      this.emit('load')\r\n    }\r\n\r\n    return this\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 1002,
            "column": 2
          },
          "end": {
            "line": 1022,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "data": {
              "type": "argument",
              "label": "data",
              "description": "The data to apply to the model.",
              "code": "data",
              "start": {
                "line": 1002,
                "column": 8
              },
              "end": {
                "line": 1002,
                "column": 12
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "object",
              "required": true,
              "enum": null
            },
            "suppressEvents": {
              "type": "argument",
              "label": "suppressEvents",
              "description": "Do not emit a change event when the data is loaded.",
              "code": "suppressEvents = false",
              "start": {
                "line": 1002,
                "column": 14
              },
              "end": {
                "line": 1002,
                "column": 36
              },
              "flags": [],
              "authors": [],
              "default": "false",
              "datatype": "boolean",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "next": {
          "type": "method",
          "label": "next",
          "description": "called on a model that is not part of a store, the model itself will be\r\n  returned.\r\n  \n  Retrieve the next record (after this one) from the store.\r\n  This can be used to iterate through a store by calling `model.next()`.\r\n  This is operation acts as a linked list iterator.\r\n  \r\n  The number of records to retrieve. For example, `1` retrieves the next record.\r\n  `2` retrieves the second record after this one. A negative number will\r\n  automatically use the #previous method to retrieve prior records. Setting this\r\n  to `0` will return the current record (i.e. no change).\r\n  \r\n  If this `next` is called on the last record, it will fail. Setting `cycle` to\r\n  `true` will automatically restart the iteration, returning the first record in\r\n  the store.\r\n  \r\n  Returns the next model in the store (after this one.)",
          "code": "next (count = 1, cycle = false) {\r\n    if (count === 0) {\r\n      return this\r\n    }\r\n\r\n    if (this.METADATA.store) {\r\n      if (typeof count === 'boolean') {\r\n        cycle = count\r\n        count = 1\r\n      }\r\n\r\n      return this.METADATA.store.getRecordSibling(this, count, cycle)\r\n    } else {\r\n      NGN.WARN('Attempted to call next() on a model that does not belong to a store.')\r\n      return this\r\n    }\r\n  }",
          "tags": {
            "info": [
              "This method only works on records within a store. If this method is\ncalled on a model that is not part of a store, the model itself will be\nreturned.\n\nRetrieve the next record (after this one) from the store.\nThis can be used to iterate through a store by calling `model.next()`.\nThis is operation acts as a linked list iterator."
            ]
          },
          "exceptions": {},
          "start": {
            "line": 1044,
            "column": 2
          },
          "end": {
            "line": 1060,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "count": {
              "type": "argument",
              "label": "count",
              "description": "The number of records to retrieve. For example, `1` retrieves the next record.\n`2` retrieves the second record after this one. A negative number will\nautomatically use the #previous method to retrieve prior records. Setting this\nto `0` will return the current record .",
              "code": "count = 1",
              "start": {
                "line": 1044,
                "column": 8
              },
              "end": {
                "line": 1044,
                "column": 17
              },
              "flags": [],
              "authors": [],
              "default": "1",
              "datatype": "number",
              "required": false,
              "enum": [
                "i.e. no change"
              ]
            },
            "cycle": {
              "type": "argument",
              "label": "cycle",
              "description": "[description]\nIf this `next` is called on the last record, it will fail. Setting `cycle` to\n`true` will automatically restart the iteration, returning the first record in\nthe store.",
              "code": "cycle = false",
              "start": {
                "line": 1044,
                "column": 19
              },
              "end": {
                "line": 1044,
                "column": 32
              },
              "flags": [],
              "authors": [],
              "default": "false",
              "datatype": "boolean",
              "required": false,
              "enum": null
            }
          },
          "returnType": "NGN.DATA.Model",
          "returnDescription": "null Returns the next model in the store",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "previous": {
          "type": "method",
          "label": "previous",
          "description": "Retrieve the previous record (before this one) from the store.\r\n  This can be used to iterate through a store in reverse by calling\r\n  `model.previous()`. This is operation acts as a doubly linked list iterator.\r\n  \n  \r\n  called on a model that is not part of a store, the model itself will be\r\n  returned.\r\n  \r\n  The number of records to retrieve. For example, `1` retrieves the prior record.\r\n  `2` retrieves the second record before this one. A negative number will\r\n  automatically use the #next method to retrieve forward records. Setting this\r\n  to `0` will return the current record (i.e. no change).\r\n  \r\n  If this `next` is called on the first record, it will fail. Setting `cycle` to\r\n  `true` will automatically restart the iteration, returning the last record in\r\n  the store.\r\n  \r\n  Returns the previous model in the store (before this one.)",
          "code": "previous (count = 1, cycle = false) {\r\n    if (count === 0) {\r\n      return this\r\n    }\r\n\r\n    if (this.METADATA.store) {\r\n      if (typeof count === 'boolean') {\r\n        cycle = count\r\n        count = 1\r\n      }\r\n\r\n      return this.METADATA.store.getRecordSibling(this, 0 - count, cycle)\r\n    } else {\r\n      NGN.WARN('Attempted to call previous() on a model that does not belong to a store.')\r\n      return this\r\n    }\r\n  }",
          "tags": {
            "info": [
              "This method only works on records within a store. If this method is\ncalled on a model that is not part of a store, the model itself will be\nreturned."
            ]
          },
          "exceptions": {},
          "start": {
            "line": 1082,
            "column": 2
          },
          "end": {
            "line": 1098,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "count": {
              "type": "argument",
              "label": "count",
              "description": "The number of records to retrieve. For example, `1` retrieves the prior record.\n`2` retrieves the second record before this one. A negative number will\nautomatically use the #next method to retrieve forward records. Setting this\nto `0` will return the current record .",
              "code": "count = 1",
              "start": {
                "line": 1082,
                "column": 12
              },
              "end": {
                "line": 1082,
                "column": 21
              },
              "flags": [],
              "authors": [],
              "default": "1",
              "datatype": "number",
              "required": false,
              "enum": [
                "i.e. no change"
              ]
            },
            "cycle": {
              "type": "argument",
              "label": "cycle",
              "description": "If this `next` is called on the first record, it will fail. Setting `cycle` to\n`true` will automatically restart the iteration, returning the last record in\nthe store.",
              "code": "cycle = false",
              "start": {
                "line": 1082,
                "column": 23
              },
              "end": {
                "line": 1082,
                "column": 36
              },
              "flags": [],
              "authors": [],
              "default": "false",
              "datatype": "boolean",
              "required": false,
              "enum": null
            }
          },
          "returnType": "NGN.DATA.Model",
          "returnDescription": "null Returns the previous model in the store",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "destroy": {
          "type": "method",
          "label": "destroy",
          "description": "Remove this model from the NGN.DATA.Store it is a part of.\r\n  \n  \r\n  called on a model that is not part of a store, nothing will happen.",
          "code": "destroy () {\r\n    if (this.METADATA.store) {\r\n      this.METADATA.store.remove(this.OID)\r\n    } else {\r\n      NGN.WARN('Attempted to call remove() on a model that does not belong to a store.')\r\n    }\r\n  }",
          "tags": {
            "info": [
              "This method only works on records within a store. If this method is\ncalled on a model that is not part of a store, nothing will happen."
            ]
          },
          "exceptions": {},
          "start": {
            "line": 1106,
            "column": 2
          },
          "end": {
            "line": 1112,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "setTTL": {
          "type": "method",
          "label": "setTTL",
          "description": "Set a default time-to-live for event handlers .\nAfter the TTL period elapses, event handlers are removed.\nBy default, there is no TTL (`-1`).",
          "code": "setTTL: NGN.const((ttl = -1) => {\r\n        if (ttl === 0) {\r\n          NGN.WARN('NGN.EventEmitter#TTL cannot be 0.')\r\n          return\r\n        }\r\n\r\n        this.META.defaultTTL = ttl\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 51,
            "column": 6
          },
          "end": {
            "line": 58,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "ttl": {
              "type": "argument",
              "label": "ttl",
              "description": "The number of milliseconds before an event handler is automatically\nremoved. This value may be `-1`  or a value\ngreater than `0`.",
              "code": "setTTL: NGN.const((ttl = -1) => {\r\n        if (ttl === 0) {\r\n          NGN.WARN('NGN.EventEmitter#TTL cannot be 0.')\r\n          return\r\n        }\r\n\r\n        this.META.defaultTTL = ttl\r\n      })",
              "start": {
                "line": 51,
                "column": 6
              },
              "end": {
                "line": 58,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "number",
              "required": true,
              "enum": [
                "no TTL/never expires"
              ]
            },
            "eventName": {
              "type": "argument",
              "label": "eventName",
              "description": "Name of the event to remove.",
              "code": "off: NGN.public((eventName, handlerFn) => {\r\n        if (NGN.typeof(eventName) === 'array') {\r\n          for (let i = 0; i < eventName.length; i++) {\r\n            this.off(eventName[i], handlerFn)\r\n          }\r\n\r\n          return\r\n        }\r\n\r\n        let l = this.listeners(eventName)\r\n\r\n        if (!NGN.isFn(handlerFn)) {\r\n          return this.clear(eventName)\r\n        }\r\n\r\n        let wrappedHandlerFn = this.wrapEventHandlerWithScope(eventName, handlerFn)\r\n\r\n        if (l.indexOf(wrappedHandlerFn) < 0) {\r\n          for (let i = 0; i < l.length; i++) {\r\n            if (l[i].toString() === wrappedHandlerFn.toString()) {\r\n              this.META.wildcardEvents.delete(eventName)\r\n              // this.removeListener(eventName, handlerFn)\r\n              this.removeListener(eventName, l[i], false)\r\n              break\r\n            }\r\n          }\r\n        } else {\r\n          this.META.wildcardEvents.delete(eventName)\r\n          this.removeListener(eventName, handlerFn)\r\n        }\r\n      })",
              "start": {
                "line": 70,
                "column": 6
              },
              "end": {
                "line": 100,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "handlerFn": {
              "type": "method",
              "label": "handlerFn",
              "description": "The handler function to remove from the event handlers.",
              "code": "@param {function} [handlerFn]\nThe handler function to remove from the event handlers.",
              "start": {
                "line": 70,
                "column": 6
              },
              "end": {
                "line": 100,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "arguments": {},
              "returnType": "void",
              "returnDescription": "void",
              "kind": null,
              "generator": false,
              "static": false,
              "computed": false,
              "async": false,
              "super": null,
              "override": false,
              "private": false
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "init",
          "computed": false,
          "super": "NGN.EventEmitter#setTTL",
          "override": false,
          "private": false
        },
        "deprecate": {
          "type": "method",
          "label": "deprecate",
          "description": "Provides a deprecation notice for the specified event.\nAutomatically emits the appropriate \"replacement\" event\nif a replacement event is configured. If no replacement\nevent is configured, the deprecation notice will be written\nto the console but no replacement event will be triggered.",
          "code": "deprecate: NGN.const((deprecatedEventName, replacementEventName) => {\r\n        const me = this\r\n\r\n        this.on(deprecatedEventName, function () {\r\n          NGN.WARN(`${deprecatedEventName} is deprecated. ` + (!replacementEventName ? '' : `Use ${replacementEventName} instead.`))\r\n\r\n          if (replacementEventName) {\r\n            let args = NGN.slice(arguments)\r\n\r\n            args.shift()\r\n            args.unshift(replacementEventName)\r\n\r\n            me.emit.apply(me, args)\r\n          }\r\n        })\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 114,
            "column": 6
          },
          "end": {
            "line": 129,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "deprecatedEventName": {
              "type": "argument",
              "label": "deprecatedEventName",
              "description": "The name of the deprecated event.",
              "code": "deprecate: NGN.const((deprecatedEventName, replacementEventName) => {\r\n        const me = this\r\n\r\n        this.on(deprecatedEventName, function () {\r\n          NGN.WARN(`${deprecatedEventName} is deprecated. ` + (!replacementEventName ? '' : `Use ${replacementEventName} instead.`))\r\n\r\n          if (replacementEventName) {\r\n            let args = NGN.slice(arguments)\r\n\r\n            args.shift()\r\n            args.unshift(replacementEventName)\r\n\r\n            me.emit.apply(me, args)\r\n          }\r\n        })\r\n      })",
              "start": {
                "line": 114,
                "column": 6
              },
              "end": {
                "line": 129,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "replacementEventName": {
              "type": "argument",
              "label": "replacementEventName",
              "description": "The name of the new event.",
              "code": "deprecate: NGN.const((deprecatedEventName, replacementEventName) => {\r\n        const me = this\r\n\r\n        this.on(deprecatedEventName, function () {\r\n          NGN.WARN(`${deprecatedEventName} is deprecated. ` + (!replacementEventName ? '' : `Use ${replacementEventName} instead.`))\r\n\r\n          if (replacementEventName) {\r\n            let args = NGN.slice(arguments)\r\n\r\n            args.shift()\r\n            args.unshift(replacementEventName)\r\n\r\n            me.emit.apply(me, args)\r\n          }\r\n        })\r\n      })",
              "start": {
                "line": 114,
                "column": 6
              },
              "end": {
                "line": 129,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "init",
          "computed": false,
          "super": "NGN.EventEmitter#deprecate",
          "override": false,
          "private": false
        },
        "pool": {
          "type": "method",
          "label": "pool",
          "description": "A helper command to create multiple related subscribers\nall at once. This is a convenience function.",
          "code": "pool: NGN.privateconst(function (prefix, group) {\r\n        if (typeof prefix !== 'string') {\r\n          group = prefix\r\n          prefix = ''\r\n        }\r\n\r\n        let pool = {}\r\n\r\n        for (let eventName in group) {\r\n          let topic = `${NGN.coalesce(prefix, '')}${eventName}`\r\n\r\n          if (NGN.isFn(group[eventName])) {\r\n            this.increaseMaxListeners()\r\n\r\n            pool[eventName] = this.on(topic, group[eventName])\r\n          } else if (typeof group[eventName] === 'object') {\r\n            this.pool(`${topic}.`, group[eventName])\r\n          } else {\r\n            NGN.WARN(`${topic} could not be pooled in the event emitter because it's value is not a function.`)\r\n          }\r\n        }\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 158,
            "column": 6
          },
          "end": {
            "line": 179,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "prefix": {
              "type": "argument",
              "label": "prefix",
              "description": null,
              "code": "prefix",
              "start": {
                "line": 158,
                "column": 39
              },
              "end": {
                "line": 158,
                "column": 45
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            },
            "group": {
              "type": "argument",
              "label": "group",
              "description": null,
              "code": "group",
              "start": {
                "line": 158,
                "column": 47
              },
              "end": {
                "line": 158,
                "column": 52
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "init",
          "computed": false,
          "super": "NGN.EventEmitter#pool",
          "override": false,
          "private": true
        },
        "attach": {
          "type": "method",
          "label": "attach",
          "description": "Attach a function to a topic. This can be used\nto forward events in response to asynchronous functions.\n\nFor example:\n\n```js\nmyAsyncDataFetch\n```\n\nThis is the same as:\n\n```js\nmyAsyncCall(function(data){\nNGN.BUS.emit('topicName', data)\n})\n```",
          "code": "attach: NGN.const(function (eventName, preventDefaultAction) {\r\n        preventDefaultAction = NGN.coalesce(preventDefaultAction, false)\r\n\r\n        return (e) => {\r\n          if (preventDefaultAction && !NGN.nodelike) {\r\n            e.preventDefault()\r\n          }\r\n\r\n          this.emit(eventName, ...arguments)\r\n        }\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 207,
            "column": 6
          },
          "end": {
            "line": 217,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "eventName": {
              "type": "argument",
              "label": "eventName",
              "description": "The name of the event to attach a handler method to.",
              "code": "attach: NGN.const(function (eventName, preventDefaultAction) {\r\n        preventDefaultAction = NGN.coalesce(preventDefaultAction, false)\r\n\r\n        return (e) => {\r\n          if (preventDefaultAction && !NGN.nodelike) {\r\n            e.preventDefault()\r\n          }\r\n\r\n          this.emit(eventName, ...arguments)\r\n        }\r\n      })",
              "start": {
                "line": 207,
                "column": 6
              },
              "end": {
                "line": 217,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "preventDefaultAction": {
              "type": "argument",
              "label": "preventDefaultAction",
              "description": "Setting this to `true` will execute a `event.preventDefault` before\nattaching the handler.",
              "code": "attach: NGN.const(function (eventName, preventDefaultAction) {\r\n        preventDefaultAction = NGN.coalesce(preventDefaultAction, false)\r\n\r\n        return (e) => {\r\n          if (preventDefaultAction && !NGN.nodelike) {\r\n            e.preventDefault()\r\n          }\r\n\r\n          this.emit(eventName, ...arguments)\r\n        }\r\n      })",
              "start": {
                "line": 207,
                "column": 6
              },
              "end": {
                "line": 217,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": "false",
              "datatype": "boolean",
              "required": false,
              "enum": [
                ""
              ]
            }
          },
          "returnType": "function",
          "returnDescription": "null Returns a function that will automatically be associated with an event.",
          "kind": "init",
          "computed": false,
          "super": "NGN.EventEmitter#attach",
          "override": false,
          "private": false
        },
        "increaseMaxListeners": {
          "type": "method",
          "label": "increaseMaxListeners",
          "description": "Increase the number of maximum listeners.",
          "code": "increaseMaxListeners: NGN.private((count = 1) => {\r\n        this.setMaxListeners(this.getMaxListeners() + count)\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 226,
            "column": 6
          },
          "end": {
            "line": 228,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "count": {
              "type": "argument",
              "label": "value ",
              "description": "The number of events the max listener account will be increased by.",
              "code": "count = 1",
              "start": {
                "line": 226,
                "column": 41
              },
              "end": {
                "line": 226,
                "column": 50
              },
              "flags": [],
              "authors": [],
              "default": " 1",
              "datatype": "number",
              "required": false,
              "enum": null
            },
            "value ": {
              "type": "argument",
              "label": "value ",
              "description": "The number of events the max listener account will be increased by.",
              "code": "increaseMaxListeners: NGN.private((count = 1) => {\r\n        this.setMaxListeners(this.getMaxListeners() + count)\r\n      })",
              "start": {
                "line": 226,
                "column": 6
              },
              "end": {
                "line": 228,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": " 1",
              "datatype": "number",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "init",
          "computed": false,
          "super": "NGN.EventEmitter#increaseMaxListeners",
          "override": false,
          "private": true
        },
        "decreaseMaxListeners": {
          "type": "method",
          "label": "decreaseMaxListeners",
          "description": "Decrease the number of maximum listeners.",
          "code": "decreaseMaxListeners: NGN.private((count = 1) => {\r\n        this.setMaxListeners(this.getMaxListeners() - count)\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 237,
            "column": 6
          },
          "end": {
            "line": 239,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "count": {
              "type": "argument",
              "label": "value ",
              "description": "The number of events the max listener account will be decreased by.",
              "code": "count = 1",
              "start": {
                "line": 237,
                "column": 41
              },
              "end": {
                "line": 237,
                "column": 50
              },
              "flags": [],
              "authors": [],
              "default": " 1",
              "datatype": "number",
              "required": false,
              "enum": null
            },
            "value ": {
              "type": "argument",
              "label": "value ",
              "description": "The number of events the max listener account will be decreased by.",
              "code": "decreaseMaxListeners: NGN.private((count = 1) => {\r\n        this.setMaxListeners(this.getMaxListeners() - count)\r\n      })",
              "start": {
                "line": 237,
                "column": 6
              },
              "end": {
                "line": 239,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": " 1",
              "datatype": "number",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "init",
          "computed": false,
          "super": "NGN.EventEmitter#decreaseMaxListeners",
          "override": false,
          "private": true
        },
        "forward": {
          "type": "method",
          "label": "forward",
          "description": "A special subscriber that fires one or more event in response to\nto an event. This is used to bubble events up/down an event chain.\n\nFor example:\n\n```js\nNGN.BUS.forward\n```\nWhen `sourceEvent` is published, the bind method triggers `someEvent` and\n`anotherEvent`, passing the payload object to `someEvent` and\n`anotherEvent` subscribers simultaneously.\n\nTo forward an event to another EventEmitter, see #relay.",
          "code": "forward: NGN.const(function (eventName, triggers, payload) {\r\n        triggers = NGN.forceArray(triggers)\r\n\r\n        let me = this\r\n        let listener = function () {\r\n          let args = NGN.slice(arguments)\r\n\r\n          if (payload) {\r\n            args.push(payload)\r\n          }\r\n\r\n          me.emit(triggers, ...args)\r\n        }\r\n\r\n        this.increaseMaxListeners()\r\n        this.on(eventName, listener)\r\n\r\n        // Provide handle back for removal of topic\r\n        return {\r\n          remove: () => {\r\n            this.decreaseMaxListeners()\r\n            this.off(eventName, listener)\r\n          }\r\n        }\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 265,
            "column": 6
          },
          "end": {
            "line": 289,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "eventName": {
              "type": "argument",
              "label": "eventName",
              "description": "The name of the event to listen for.",
              "code": "relayOnce: NGN.const(function (eventName, targetEmitter, prefix = null, postfix = null) {\r\n        let eventNameList = NGN.forceArray(eventName)\r\n\r\n        for (let i = 0; i < eventNameList.length; i++) {\r\n          let eventName = eventNameList[i]\r\n\r\n          this.once(eventName, function () {\r\n            if (NGN.typeof(this.event) === 'symbol') {\r\n              if (prefix !== null || postfix !== null) {\r\n                NGN.INFO('Cannot relay a symbol-based event with a prefix/postfix.')\r\n              }\r\n\r\n              targetEmitter.emit(...arguments)\r\n            } else {\r\n              targetEmitter.emit(`${NGN.coalesce(prefix, '')}${this.event}${NGN.coalesce(postfix, '')}`, ...arguments)\r\n            }\r\n          })\r\n        }\r\n      })",
              "start": {
                "line": 361,
                "column": 6
              },
              "end": {
                "line": 379,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "triggers": {
              "type": "argument",
              "label": "triggeredEvent",
              "description": "An event or array of events to fire in response to the sourceEvent.",
              "code": "triggers",
              "start": {
                "line": 265,
                "column": 46
              },
              "end": {
                "line": 265,
                "column": 54
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string|array",
              "required": true,
              "enum": null
            },
            "payload": {
              "type": "argument",
              "label": "data",
              "description": "Optional data to pass to each bound event handler.",
              "code": "payload",
              "start": {
                "line": 265,
                "column": 56
              },
              "end": {
                "line": 265,
                "column": 63
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "any",
              "required": true,
              "enum": null
            },
            "sourceEvent": {
              "type": "argument",
              "label": "sourceEvent",
              "description": "The event to subscribe to.",
              "code": "forward: NGN.const(function (eventName, triggers, payload) {\r\n        triggers = NGN.forceArray(triggers)\r\n\r\n        let me = this\r\n        let listener = function () {\r\n          let args = NGN.slice(arguments)\r\n\r\n          if (payload) {\r\n            args.push(payload)\r\n          }\r\n\r\n          me.emit(triggers, ...args)\r\n        }\r\n\r\n        this.increaseMaxListeners()\r\n        this.on(eventName, listener)\r\n\r\n        // Provide handle back for removal of topic\r\n        return {\r\n          remove: () => {\r\n            this.decreaseMaxListeners()\r\n            this.off(eventName, listener)\r\n          }\r\n        }\r\n      })",
              "start": {
                "line": 265,
                "column": 6
              },
              "end": {
                "line": 289,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "triggeredEvent": {
              "type": "argument",
              "label": "triggeredEvent",
              "description": "An event or array of events to fire in response to the sourceEvent.",
              "code": "forward: NGN.const(function (eventName, triggers, payload) {\r\n        triggers = NGN.forceArray(triggers)\r\n\r\n        let me = this\r\n        let listener = function () {\r\n          let args = NGN.slice(arguments)\r\n\r\n          if (payload) {\r\n            args.push(payload)\r\n          }\r\n\r\n          me.emit(triggers, ...args)\r\n        }\r\n\r\n        this.increaseMaxListeners()\r\n        this.on(eventName, listener)\r\n\r\n        // Provide handle back for removal of topic\r\n        return {\r\n          remove: () => {\r\n            this.decreaseMaxListeners()\r\n            this.off(eventName, listener)\r\n          }\r\n        }\r\n      })",
              "start": {
                "line": 265,
                "column": 6
              },
              "end": {
                "line": 289,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string|array",
              "required": true,
              "enum": null
            },
            "data": {
              "type": "argument",
              "label": "data",
              "description": "Optional data to pass to each bound event handler.",
              "code": "forward: NGN.const(function (eventName, triggers, payload) {\r\n        triggers = NGN.forceArray(triggers)\r\n\r\n        let me = this\r\n        let listener = function () {\r\n          let args = NGN.slice(arguments)\r\n\r\n          if (payload) {\r\n            args.push(payload)\r\n          }\r\n\r\n          me.emit(triggers, ...args)\r\n        }\r\n\r\n        this.increaseMaxListeners()\r\n        this.on(eventName, listener)\r\n\r\n        // Provide handle back for removal of topic\r\n        return {\r\n          remove: () => {\r\n            this.decreaseMaxListeners()\r\n            this.off(eventName, listener)\r\n          }\r\n        }\r\n      })",
              "start": {
                "line": 265,
                "column": 6
              },
              "end": {
                "line": 289,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "any",
              "required": true,
              "enum": null
            },
            "targetEmitter": {
              "type": "argument",
              "label": "targetEmitter",
              "description": "The emitter to relay the event to.",
              "code": "relayOnce: NGN.const(function (eventName, targetEmitter, prefix = null, postfix = null) {\r\n        let eventNameList = NGN.forceArray(eventName)\r\n\r\n        for (let i = 0; i < eventNameList.length; i++) {\r\n          let eventName = eventNameList[i]\r\n\r\n          this.once(eventName, function () {\r\n            if (NGN.typeof(this.event) === 'symbol') {\r\n              if (prefix !== null || postfix !== null) {\r\n                NGN.INFO('Cannot relay a symbol-based event with a prefix/postfix.')\r\n              }\r\n\r\n              targetEmitter.emit(...arguments)\r\n            } else {\r\n              targetEmitter.emit(`${NGN.coalesce(prefix, '')}${this.event}${NGN.coalesce(postfix, '')}`, ...arguments)\r\n            }\r\n          })\r\n        }\r\n      })",
              "start": {
                "line": 361,
                "column": 6
              },
              "end": {
                "line": 379,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "ngn.eventemitter",
              "required": true,
              "enum": null
            },
            "prefix": {
              "type": "argument",
              "label": "prefix",
              "description": "An optional prefix to prepend to the eventName.",
              "code": "relayOnce: NGN.const(function (eventName, targetEmitter, prefix = null, postfix = null) {\r\n        let eventNameList = NGN.forceArray(eventName)\r\n\r\n        for (let i = 0; i < eventNameList.length; i++) {\r\n          let eventName = eventNameList[i]\r\n\r\n          this.once(eventName, function () {\r\n            if (NGN.typeof(this.event) === 'symbol') {\r\n              if (prefix !== null || postfix !== null) {\r\n                NGN.INFO('Cannot relay a symbol-based event with a prefix/postfix.')\r\n              }\r\n\r\n              targetEmitter.emit(...arguments)\r\n            } else {\r\n              targetEmitter.emit(`${NGN.coalesce(prefix, '')}${this.event}${NGN.coalesce(postfix, '')}`, ...arguments)\r\n            }\r\n          })\r\n        }\r\n      })",
              "start": {
                "line": 361,
                "column": 6
              },
              "end": {
                "line": 379,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": false,
              "enum": null
            },
            "postfix": {
              "type": "argument",
              "label": "postfix",
              "description": "An optional postfix to append to the eventName.",
              "code": "relayOnce: NGN.const(function (eventName, targetEmitter, prefix = null, postfix = null) {\r\n        let eventNameList = NGN.forceArray(eventName)\r\n\r\n        for (let i = 0; i < eventNameList.length; i++) {\r\n          let eventName = eventNameList[i]\r\n\r\n          this.once(eventName, function () {\r\n            if (NGN.typeof(this.event) === 'symbol') {\r\n              if (prefix !== null || postfix !== null) {\r\n                NGN.INFO('Cannot relay a symbol-based event with a prefix/postfix.')\r\n              }\r\n\r\n              targetEmitter.emit(...arguments)\r\n            } else {\r\n              targetEmitter.emit(`${NGN.coalesce(prefix, '')}${this.event}${NGN.coalesce(postfix, '')}`, ...arguments)\r\n            }\r\n          })\r\n        }\r\n      })",
              "start": {
                "line": 361,
                "column": 6
              },
              "end": {
                "line": 379,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": false,
              "enum": null
            }
          },
          "returnType": "Object",
          "returnDescription": "null Returns an object with a single `remove` method.",
          "kind": "init",
          "computed": false,
          "super": "NGN.EventEmitter#forward",
          "override": false,
          "private": false
        },
        "delayEmit": {
          "type": "method",
          "label": "delayEmit",
          "description": "This method waits for the specified duration, then publishes an\nevent once. This will publish the event only once at the end of the\nwait period, even if the event is triggered multiple times. This can\nbe useful when working with many events triggered in rapid succession.\n\nFor example, an NGN.DATA.Model representing a person may be used to\ntrack a user profile. The NGN.DATA.Model fires an event called `field.update`\nevery time a data field is modified. In many cases, a user may update\nmultiple fields of their profile using a form with a \"Save\" button.\nInstead of generating a new \"save\" \noperation for each field, the publishOnce event can wait until all\nchanges are made before running the save operation.\n\n```js\n// Create a data model representing a person.\nvar Person = new NGN.DATA.Model({....})\n\n// Create a new person record for a user.\nvar user = new Person()\n\n// When the user is modified, save the data.\nuser.on('field.update', function () {\n// Wait 300 milliseconds to trigger the save event\nNGN.BUS.delayEmit('user.save', 300)\n})\n\n// Save the user using an API\nNGN.BUS.on('user.save', function () {\nNGN.NET.put({\nurl: 'https://my.api.com/user',\njson: user.data\n})\n})\n\n// Modify the record attributes (which are blank by default)\nuser.firstname = 'John'\nuser.lastname = 'Doe'\nuser.age = 42\n\n// Make another update 1 second later\nsetTimeout(function () {\nuser.age = 32\n}, 1000)\n```\n\nThe code above sets up a model and record. Then it listens to the record\nfor field updates. Each time it recognizes an update, it queues the \"save\"\nevent. When the queue matures, it fires the `user.save` event.\n\nThe first `field.update` is triggered when `user.firstname = 'John'` runs.\nThis initiates a queue for `user.save`, set to mature in 300 millisenconds.\nNext, a `field.update` is triggered when `user.lastname = 'Doe'` runs.\nThis time, since the queue for `user.save` is already initiated, notthing\nnew happens. Finally, a `field.update` is triggered when `user.age = 42`\nruns. Just like the last one, nothing happens since the `user.save` queue\nis already active.\n\nThe `user.save` queue \"matures\" after 300 milliseconds. This means after\n300 milliseconds have elapsed, the `user.save` event is triggered. In this\nexample, it means the `NGN.NET.put()` code will be executed. As a result,\nall 3 change (firstname, lastname, and age) will be complete before the\nAPI request is executed. The queue is cleared immediately.\n\nThe final update occurs 1 second later (700 milliseconds after the queue\nmatures). This triggers a `field.update`, but since the queue is no\nlonger active, it is re-initiated. 300 milliseconds later, the `user.save`\nevent is fired again, thus executing the API request again (1.3 seconds\nin total).",
          "code": "delayEmit: NGN.const(function (eventName, delay) {\r\n        if (!this.META.queued.hasOwnProperty(eventName)) {\r\n          let args = NGN.slice(arguments)\r\n          args.splice(1, 1)\r\n\r\n          this.META.queued[eventName] = setTimeout(() => {\r\n            delete this.META.queued[eventName]\r\n            this.emit(...args)\r\n          }, delay)\r\n        }\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 458,
            "column": 6
          },
          "end": {
            "line": 468,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "eventName": {
              "type": "argument",
              "label": "eventName",
              "description": "The event/topic to publish/emit.",
              "code": "delayEmit: NGN.const(function (eventName, delay) {\r\n        if (!this.META.queued.hasOwnProperty(eventName)) {\r\n          let args = NGN.slice(arguments)\r\n          args.splice(1, 1)\r\n\r\n          this.META.queued[eventName] = setTimeout(() => {\r\n            delete this.META.queued[eventName]\r\n            this.emit(...args)\r\n          }, delay)\r\n        }\r\n      })",
              "start": {
                "line": 458,
                "column": 6
              },
              "end": {
                "line": 468,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "delay": {
              "type": "argument",
              "label": "delay",
              "description": "The number of milliseconds to wait before firing the event.",
              "code": "delayEmit: NGN.const(function (eventName, delay) {\r\n        if (!this.META.queued.hasOwnProperty(eventName)) {\r\n          let args = NGN.slice(arguments)\r\n          args.splice(1, 1)\r\n\r\n          this.META.queued[eventName] = setTimeout(() => {\r\n            delete this.META.queued[eventName]\r\n            this.emit(...args)\r\n          }, delay)\r\n        }\r\n      })",
              "start": {
                "line": 458,
                "column": 6
              },
              "end": {
                "line": 468,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": "300",
              "datatype": "number",
              "required": false,
              "enum": null
            },
            "payload": {
              "type": "argument",
              "label": "payload",
              "description": "An optional payload, such as data to be passed to an event handler.",
              "code": "delayEmit: NGN.const(function (eventName, delay) {\r\n        if (!this.META.queued.hasOwnProperty(eventName)) {\r\n          let args = NGN.slice(arguments)\r\n          args.splice(1, 1)\r\n\r\n          this.META.queued[eventName] = setTimeout(() => {\r\n            delete this.META.queued[eventName]\r\n            this.emit(...args)\r\n          }, delay)\r\n        }\r\n      })",
              "start": {
                "line": 458,
                "column": 6
              },
              "end": {
                "line": 468,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "any",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "init",
          "computed": false,
          "super": "NGN.EventEmitter#delayEmit",
          "override": false,
          "private": false
        },
        "getInternalCollectionId": {
          "type": "method",
          "label": "getInternalCollectionId",
          "description": "Returns a unique ID for special collections.",
          "code": "getInternalCollectionId: NGN.privateconst(function (collection) {\r\n        return Symbol(collection)\r\n        // let time = (new Date()).getTime().toString()\r\n        // let rand = Math.random().toString()\r\n        // let key = Object.keys(collection).length + 1\r\n        //\r\n        // while (collection.hasOwnProperty(`${key.toString()}${time}${rand}`)) {\r\n        //   key++\r\n        // }\r\n        //\r\n        // return `${key.toString()}${time}${rand}`\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 477,
            "column": 6
          },
          "end": {
            "line": 488,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "collection": {
              "type": "argument",
              "label": "collection",
              "description": "The collection to generate an ID for.",
              "code": "getInternalCollectionId: NGN.privateconst(function (collection) {\r\n        return Symbol(collection)\r\n        // let time = (new Date()).getTime().toString()\r\n        // let rand = Math.random().toString()\r\n        // let key = Object.keys(collection).length + 1\r\n        //\r\n        // while (collection.hasOwnProperty(`${key.toString()}${time}${rand}`)) {\r\n        //   key++\r\n        // }\r\n        //\r\n        // return `${key.toString()}${time}${rand}`\r\n      })",
              "start": {
                "line": 477,
                "column": 6
              },
              "end": {
                "line": 488,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "object",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "init",
          "computed": false,
          "super": "NGN.EventEmitter#getInternalCollectionId",
          "override": false,
          "private": true
        },
        "handleCollectionTrigger": {
          "type": "method",
          "label": "handleCollectionTrigger",
          "description": "A method to manage #chain event handlers.",
          "code": "handleCollectionTrigger: NGN.privateconst(function (eventName, key) {\r\n        let me = this\r\n\r\n        return function () {\r\n          // Use setTimeout to simulate nextTick\r\n          setTimeout(() => {\r\n            let cq = me.META.collectionQueue\r\n\r\n            if (cq[key]) {\r\n              cq[key].remainingqueue.delete(eventName)\r\n\r\n              if (cq[key].remainingqueue.size === 0) {\r\n                cq[key].remainingqueue = cq[key].masterqueue\r\n\r\n                if (NGN.isFn(cq[key].eventName)) {\r\n                  cq[key].eventName(cq[key].payload)\r\n                } else {\r\n                  me.emit(cq[key].eventName, cq[key].payload)\r\n                }\r\n              }\r\n            }\r\n          }, 0)\r\n        }\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 495,
            "column": 6
          },
          "end": {
            "line": 518,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "eventName": {
              "type": "argument",
              "label": "eventName",
              "description": null,
              "code": "eventName",
              "start": {
                "line": 495,
                "column": 58
              },
              "end": {
                "line": 495,
                "column": 67
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            },
            "key": {
              "type": "argument",
              "label": "key",
              "description": null,
              "code": "key",
              "start": {
                "line": 495,
                "column": 69
              },
              "end": {
                "line": 495,
                "column": 72
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "init",
          "computed": false,
          "super": "NGN.EventEmitter#handleCollectionTrigger",
          "override": false,
          "private": true
        },
        "funnel": {
          "type": "method",
          "label": "funnel",
          "description": "Emit an event after a collection of unique events have all fired.\nThis can be useful in situations where multiple asynchronous actions\nmust complete before another begins. For example, blending 3\nremote data sources from different API's into a single resultset\ncan be achieved with this.\n\n**Example**\n```js\nlet collection = NGN.BUS.funnel\n\nlet allData = []\n\n// When all of the downloads are done, log them.\nNGN.BUS.on('make.results', () => {\nconsole.log(allData)\n})\n\n// Download the first set of data asynchronously\nNGN.NET.json('http:/download1.com/data.json', (data) => {\nallData.push(data)\nNGN.BUS.emit('download1done')\n})\n\n// Download the second set of data asynchronously\nNGN.NET.json('http:/download2.com/data.json', (data) => {\nallData.push(data)\nNGN.BUS.emit('download2done')\n})\n\n// Download the third set of data asynchronously\nNGN.NET.json('http:/download3.com/data.json', (data) => {\nallData.push(data)\nNGN.BUS.emit('download3done')\n})\n\n// The handler can be removed with the special method:\ncollection.remove()\n```",
          "code": "funnel: NGN.const((eventCollection, triggerEventName, payload = null) => {\r\n        if (NGN.typeof(eventCollection) !== 'array') {\r\n          throw new Error(`NGN.BUS.funnel expected an array of events, but received a(n) ${NGN.typeof(eventCollection)}`)\r\n        }\r\n\r\n        let collection = new Set(eventCollection)\r\n        let key = this.getInternalCollectionId(this.META.collectionQueue)\r\n\r\n        this.META.collectionQueue[key] = {}\r\n\r\n        Object.defineProperties(this.META.collectionQueue[key], {\r\n          masterqueue: NGN.const(new Set(eventCollection)),\r\n          remainingqueue: NGN.private(collection),\r\n          eventName: NGN.const(triggerEventName),\r\n          remove: NGN.const(() => {\r\n            this.META.collectionQueue[key].masterqueue.forEach(event => {\r\n              this.off(event, this.handleCollectionTrigger(event, key))\r\n            })\r\n\r\n            this.decreaseMaxListeners(this.META.collectionQueue[key].masterqueue.size)\r\n\r\n            delete this.META.collectionQueue[key]\r\n          }),\r\n          payload: NGN.const(payload)\r\n        })\r\n\r\n        this.increaseMaxListeners(collection.size)\r\n\r\n        collection.forEach(event => {\r\n          this.on(event, this.handleCollectionTrigger(event, key))\r\n        })\r\n\r\n        return this.META.collectionQueue[key]\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 581,
            "column": 6
          },
          "end": {
            "line": 614,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "triggerEventName": {
              "type": "argument",
              "label": "payload",
              "description": "An optional payload delivered to the #triggerEventName.",
              "code": "triggerEventName",
              "start": {
                "line": 581,
                "column": 25
              },
              "end": {
                "line": 581,
                "column": 40
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "any",
              "required": false,
              "enum": null
            },
            "payload": {
              "type": "argument",
              "label": "payload",
              "description": "An optional payload delivered to the #triggerEventName.",
              "code": "funnel: NGN.const((eventCollection, triggerEventName, payload = null) => {\r\n        if (NGN.typeof(eventCollection) !== 'array') {\r\n          throw new Error(`NGN.BUS.funnel expected an array of events, but received a(n) ${NGN.typeof(eventCollection)}`)\r\n        }\r\n\r\n        let collection = new Set(eventCollection)\r\n        let key = this.getInternalCollectionId(this.META.collectionQueue)\r\n\r\n        this.META.collectionQueue[key] = {}\r\n\r\n        Object.defineProperties(this.META.collectionQueue[key], {\r\n          masterqueue: NGN.const(new Set(eventCollection)),\r\n          remainingqueue: NGN.private(collection),\r\n          eventName: NGN.const(triggerEventName),\r\n          remove: NGN.const(() => {\r\n            this.META.collectionQueue[key].masterqueue.forEach(event => {\r\n              this.off(event, this.handleCollectionTrigger(event, key))\r\n            })\r\n\r\n            this.decreaseMaxListeners(this.META.collectionQueue[key].masterqueue.size)\r\n\r\n            delete this.META.collectionQueue[key]\r\n          }),\r\n          payload: NGN.const(payload)\r\n        })\r\n\r\n        this.increaseMaxListeners(collection.size)\r\n\r\n        collection.forEach(event => {\r\n          this.on(event, this.handleCollectionTrigger(event, key))\r\n        })\r\n\r\n        return this.META.collectionQueue[key]\r\n      })",
              "start": {
                "line": 581,
                "column": 6
              },
              "end": {
                "line": 614,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "any",
              "required": false,
              "enum": null
            },
            "eventCollection": {
              "type": "argument",
              "label": "eventCollection",
              "description": "An array of events. Once _all_ of these events have fired,\nthe triggerEventName will be fired.",
              "code": "funnel: NGN.const((eventCollection, triggerEventName, payload = null) => {\r\n        if (NGN.typeof(eventCollection) !== 'array') {\r\n          throw new Error(`NGN.BUS.funnel expected an array of events, but received a(n) ${NGN.typeof(eventCollection)}`)\r\n        }\r\n\r\n        let collection = new Set(eventCollection)\r\n        let key = this.getInternalCollectionId(this.META.collectionQueue)\r\n\r\n        this.META.collectionQueue[key] = {}\r\n\r\n        Object.defineProperties(this.META.collectionQueue[key], {\r\n          masterqueue: NGN.const(new Set(eventCollection)),\r\n          remainingqueue: NGN.private(collection),\r\n          eventName: NGN.const(triggerEventName),\r\n          remove: NGN.const(() => {\r\n            this.META.collectionQueue[key].masterqueue.forEach(event => {\r\n              this.off(event, this.handleCollectionTrigger(event, key))\r\n            })\r\n\r\n            this.decreaseMaxListeners(this.META.collectionQueue[key].masterqueue.size)\r\n\r\n            delete this.META.collectionQueue[key]\r\n          }),\r\n          payload: NGN.const(payload)\r\n        })\r\n\r\n        this.increaseMaxListeners(collection.size)\r\n\r\n        collection.forEach(event => {\r\n          this.on(event, this.handleCollectionTrigger(event, key))\r\n        })\r\n\r\n        return this.META.collectionQueue[key]\r\n      })",
              "start": {
                "line": 581,
                "column": 6
              },
              "end": {
                "line": 614,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "array",
              "required": true,
              "enum": null
            }
          },
          "returnType": "object",
          "returnDescription": "collection Provides the key/value configuration of the collection.\n```js\n{\nmasterqueue: ['event1', 'event2', 'etc'], // The original event array \nremainingqueue: [...], // The events the BUS is still waiting for before firing the trigger event.\neventName: 'triggeredEventName', // Name of the event triggered after the remaining elements are flushed.\npayload: 'anything', // OPTIONAL\nremove: [Function]\n}\n```",
          "kind": "init",
          "computed": false,
          "super": "NGN.EventEmitter#funnel",
          "override": false,
          "private": false
        },
        "funnelOnce": {
          "type": "method",
          "label": "funnelOnce",
          "description": "This provides the same functionality as #funnel, but\nremoves the listener after the resultant event has fired.\nSee #funnel for detailed usage.",
          "code": "funnelOnce: NGN.const((eventCollection, triggerEventName, payload = null) => {\r\n        let funnelClosureEvent = `::NGNFUNNEL::${(new Date()).getTime()}::${triggerEventName}`\r\n        // let funnelClosureEvent = Symbol(triggerEventName)\r\n        let collection = this.funnel(eventCollection, funnelClosureEvent, payload)\r\n\r\n        this.increaseMaxListeners()\r\n        this.once(funnelClosureEvent, () => {\r\n          collection.remove()\r\n          collection = null\r\n          this.emit(triggerEventName, payload)\r\n        })\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 631,
            "column": 6
          },
          "end": {
            "line": 642,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "eventCollection": {
              "type": "argument",
              "label": "eventCollection",
              "description": "An array of events. Once _all_ of these events have fired,\nthe triggerEventName will be fired.",
              "code": "funnelOnce: NGN.const((eventCollection, triggerEventName, payload = null) => {\r\n        let funnelClosureEvent = `::NGNFUNNEL::${(new Date()).getTime()}::${triggerEventName}`\r\n        // let funnelClosureEvent = Symbol(triggerEventName)\r\n        let collection = this.funnel(eventCollection, funnelClosureEvent, payload)\r\n\r\n        this.increaseMaxListeners()\r\n        this.once(funnelClosureEvent, () => {\r\n          collection.remove()\r\n          collection = null\r\n          this.emit(triggerEventName, payload)\r\n        })\r\n      })",
              "start": {
                "line": 631,
                "column": 6
              },
              "end": {
                "line": 642,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "array",
              "required": true,
              "enum": null
            },
            "triggerEventName": {
              "type": "argument",
              "label": "triggerEventName",
              "description": "The name of the event triggered after the collection has completed.",
              "code": "funnelOnce: NGN.const((eventCollection, triggerEventName, payload = null) => {\r\n        let funnelClosureEvent = `::NGNFUNNEL::${(new Date()).getTime()}::${triggerEventName}`\r\n        // let funnelClosureEvent = Symbol(triggerEventName)\r\n        let collection = this.funnel(eventCollection, funnelClosureEvent, payload)\r\n\r\n        this.increaseMaxListeners()\r\n        this.once(funnelClosureEvent, () => {\r\n          collection.remove()\r\n          collection = null\r\n          this.emit(triggerEventName, payload)\r\n        })\r\n      })",
              "start": {
                "line": 631,
                "column": 6
              },
              "end": {
                "line": 642,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "payload": {
              "type": "argument",
              "label": "payload",
              "description": "An optional payload delivered to the #triggerEventName.",
              "code": "funnelOnce: NGN.const((eventCollection, triggerEventName, payload = null) => {\r\n        let funnelClosureEvent = `::NGNFUNNEL::${(new Date()).getTime()}::${triggerEventName}`\r\n        // let funnelClosureEvent = Symbol(triggerEventName)\r\n        let collection = this.funnel(eventCollection, funnelClosureEvent, payload)\r\n\r\n        this.increaseMaxListeners()\r\n        this.once(funnelClosureEvent, () => {\r\n          collection.remove()\r\n          collection = null\r\n          this.emit(triggerEventName, payload)\r\n        })\r\n      })",
              "start": {
                "line": 631,
                "column": 6
              },
              "end": {
                "line": 642,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "any",
              "required": false,
              "enum": null
            }
          },
          "returnType": "object",
          "returnDescription": "collection Provides the key/value configuration of the collection.",
          "kind": "init",
          "computed": false,
          "super": "NGN.EventEmitter#funnelOnce",
          "override": false,
          "private": false
        },
        "threshold": {
          "type": "method",
          "label": "threshold",
          "description": "After an event is fired a predetermined number of times ,\ntrigger another event or function.\n\nFor example:\n\n```js\nNGN.BUS.threshold('push.my.button', 3, 'annoyed')\n\nNGN.BUS.on('annoyed', function () {\nconsole.log('We apologize for the slow response, but excessive clicking will not speed up the process.')\n})\n\ndocument.getElementById('#myButton').addEventListener('click', NGN.BUS.attach('push.my.button'))\n```\n\nOnce the threshold is exceeded, the final event will be triggered and\nthe threshold will be reset. Using the example above, this means\nclicking 3 times on `#myButton` would trigger the `annoyed` event ONCE,\n6 times triggers `annoyed` TWICE, 9 times triggers `annoyed` THREE times, etc.",
          "code": "threshold: NGN.const(function (thresholdEventName, limit, finalEventName, payload = null) {\r\n        if (typeof thresholdEventName !== 'string') {\r\n          throw new Error('The threshold event name must be a string (received ' + (typeof thresholdEventName) + ')')\r\n        }\r\n\r\n        // let key = `${this.getInternalCollectionId(this.META.thresholdQueue)}${limit.toString()}`\r\n        let key = this.getInternalCollectionId(this.META.thresholdQueue)\r\n\r\n        this.META.thresholdQueue[key] = {}\r\n\r\n        Object.defineProperties(this.META.thresholdQueue[key], {\r\n          key: NGN.const(key),\r\n          eventName: NGN.const(thresholdEventName),\r\n          limit: NGN.const(limit),\r\n          count: NGN.private(0),\r\n          finalEventName: NGN.const(finalEventName),\r\n          remove: NGN.const(() => {\r\n            let event = this.META.thresholdQueue[key].eventName\r\n\r\n            delete this.META.thresholdQueue[key]\r\n\r\n            this.decreaseMaxListeners()\r\n            this.off(event, this.handleThresholdTrigger(key))\r\n          }),\r\n          payload: NGN.const(payload)\r\n        })\r\n\r\n        this.increaseMaxListeners()\r\n        this.on(thresholdEventName, this.handleThresholdTrigger(key))\r\n\r\n        return this.META.thresholdQueue[key]\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 681,
            "column": 6
          },
          "end": {
            "line": 712,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "thresholdEventName": {
              "type": "argument",
              "label": "thresholdEventName",
              "description": "The name of the event to count.",
              "code": "threshold: NGN.const(function (thresholdEventName, limit, finalEventName, payload = null) {\r\n        if (typeof thresholdEventName !== 'string') {\r\n          throw new Error('The threshold event name must be a string (received ' + (typeof thresholdEventName) + ')')\r\n        }\r\n\r\n        // let key = `${this.getInternalCollectionId(this.META.thresholdQueue)}${limit.toString()}`\r\n        let key = this.getInternalCollectionId(this.META.thresholdQueue)\r\n\r\n        this.META.thresholdQueue[key] = {}\r\n\r\n        Object.defineProperties(this.META.thresholdQueue[key], {\r\n          key: NGN.const(key),\r\n          eventName: NGN.const(thresholdEventName),\r\n          limit: NGN.const(limit),\r\n          count: NGN.private(0),\r\n          finalEventName: NGN.const(finalEventName),\r\n          remove: NGN.const(() => {\r\n            let event = this.META.thresholdQueue[key].eventName\r\n\r\n            delete this.META.thresholdQueue[key]\r\n\r\n            this.decreaseMaxListeners()\r\n            this.off(event, this.handleThresholdTrigger(key))\r\n          }),\r\n          payload: NGN.const(payload)\r\n        })\r\n\r\n        this.increaseMaxListeners()\r\n        this.on(thresholdEventName, this.handleThresholdTrigger(key))\r\n\r\n        return this.META.thresholdQueue[key]\r\n      })",
              "start": {
                "line": 681,
                "column": 6
              },
              "end": {
                "line": 712,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "finalEventName": {
              "type": "argument",
              "label": "payload",
              "description": "An optional payload to send to the finalEvent handler.",
              "code": "finalEventName",
              "start": {
                "line": 681,
                "column": 57
              },
              "end": {
                "line": 681,
                "column": 62
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "any",
              "required": false,
              "enum": [
                "s"
              ]
            },
            "payload": {
              "type": "argument",
              "label": "payload",
              "description": "An optional payload to send to the finalEvent handler.",
              "code": "threshold: NGN.const(function (thresholdEventName, limit, finalEventName, payload = null) {\r\n        if (typeof thresholdEventName !== 'string') {\r\n          throw new Error('The threshold event name must be a string (received ' + (typeof thresholdEventName) + ')')\r\n        }\r\n\r\n        // let key = `${this.getInternalCollectionId(this.META.thresholdQueue)}${limit.toString()}`\r\n        let key = this.getInternalCollectionId(this.META.thresholdQueue)\r\n\r\n        this.META.thresholdQueue[key] = {}\r\n\r\n        Object.defineProperties(this.META.thresholdQueue[key], {\r\n          key: NGN.const(key),\r\n          eventName: NGN.const(thresholdEventName),\r\n          limit: NGN.const(limit),\r\n          count: NGN.private(0),\r\n          finalEventName: NGN.const(finalEventName),\r\n          remove: NGN.const(() => {\r\n            let event = this.META.thresholdQueue[key].eventName\r\n\r\n            delete this.META.thresholdQueue[key]\r\n\r\n            this.decreaseMaxListeners()\r\n            this.off(event, this.handleThresholdTrigger(key))\r\n          }),\r\n          payload: NGN.const(payload)\r\n        })\r\n\r\n        this.increaseMaxListeners()\r\n        this.on(thresholdEventName, this.handleThresholdTrigger(key))\r\n\r\n        return this.META.thresholdQueue[key]\r\n      })",
              "start": {
                "line": 681,
                "column": 6
              },
              "end": {
                "line": 712,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "any",
              "required": false,
              "enum": [
                "s"
              ]
            },
            "limit": {
              "type": "argument",
              "label": "limit",
              "description": "The number of occurrances allowed until the final event is triggered.\nThe event will be triggered at the threshold. For example, if the limit\nis `3`, the finalEvent will be triggered the 3rd time thresholdEventName is\nfired.",
              "code": "threshold: NGN.const(function (thresholdEventName, limit, finalEventName, payload = null) {\r\n        if (typeof thresholdEventName !== 'string') {\r\n          throw new Error('The threshold event name must be a string (received ' + (typeof thresholdEventName) + ')')\r\n        }\r\n\r\n        // let key = `${this.getInternalCollectionId(this.META.thresholdQueue)}${limit.toString()}`\r\n        let key = this.getInternalCollectionId(this.META.thresholdQueue)\r\n\r\n        this.META.thresholdQueue[key] = {}\r\n\r\n        Object.defineProperties(this.META.thresholdQueue[key], {\r\n          key: NGN.const(key),\r\n          eventName: NGN.const(thresholdEventName),\r\n          limit: NGN.const(limit),\r\n          count: NGN.private(0),\r\n          finalEventName: NGN.const(finalEventName),\r\n          remove: NGN.const(() => {\r\n            let event = this.META.thresholdQueue[key].eventName\r\n\r\n            delete this.META.thresholdQueue[key]\r\n\r\n            this.decreaseMaxListeners()\r\n            this.off(event, this.handleThresholdTrigger(key))\r\n          }),\r\n          payload: NGN.const(payload)\r\n        })\r\n\r\n        this.increaseMaxListeners()\r\n        this.on(thresholdEventName, this.handleThresholdTrigger(key))\r\n\r\n        return this.META.thresholdQueue[key]\r\n      })",
              "start": {
                "line": 681,
                "column": 6
              },
              "end": {
                "line": 712,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "number",
              "required": true,
              "enum": null
            }
          },
          "returnType": "object",
          "returnDescription": "null Returns an object that can be used to remove the threshold.",
          "kind": "init",
          "computed": false,
          "super": "NGN.EventEmitter#threshold",
          "override": false,
          "private": false
        },
        "handleThresholdTrigger": {
          "type": "method",
          "label": "handleThresholdTrigger",
          "description": "A method to manage #threshold event handlers.",
          "code": "handleThresholdTrigger: NGN.const(function (key) {\r\n        let me = this\r\n        return function () {\r\n          // Use setTimeout to simulate nextTick\r\n          setTimeout(() => {\r\n            if (me.META.thresholdQueue.hasOwnProperty(key)) {\r\n              me.META.thresholdQueue[key].count++\r\n              if (me.META.thresholdQueue[key].count === me.META.thresholdQueue[key].limit) {\r\n                if (NGN.isFn(me.META.thresholdQueue[key].finalEventName)) {\r\n                  me.META.thresholdQueue[key].finalEventName(me.META.thresholdQueue[key].payload)\r\n                } else {\r\n                  me.emit(me.META.thresholdQueue[key].finalEventName, me.META.thresholdQueue[key].payload)\r\n                }\r\n\r\n                // This if statement is required in case the event is removed\r\n                // during the reset process.\r\n                if (me.META.thresholdQueue.hasOwnProperty(key)) {\r\n                  me.META.thresholdQueue[key].count = 0\r\n                }\r\n              }\r\n            }\r\n          }, 0)\r\n        }\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 730,
            "column": 6
          },
          "end": {
            "line": 753,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "key": {
              "type": "argument",
              "label": "key",
              "description": null,
              "code": "key",
              "start": {
                "line": 730,
                "column": 50
              },
              "end": {
                "line": 730,
                "column": 53
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            },
            "eventName": {
              "type": "argument",
              "label": "eventName",
              "description": "The name of the event being scoped.",
              "code": "applyScope: NGN.privateconst((args) => {\r\n        if (NGN.nodelike && args.length > 1) {\r\n          if (args[args.length - 1].listener) {\r\n            args[args.length - 1].listener = this.wrapEventHandlerWithScope(\r\n              args[0],\r\n              args[args.length - 1].listener\r\n            )\r\n          } else {\r\n            args[args.length - 1] = this.wrapEventHandlerWithScope(\r\n              args[0],\r\n              args[args.length - 1]\r\n            )\r\n          }\r\n        }\r\n      })",
              "start": {
                "line": 791,
                "column": 6
              },
              "end": {
                "line": 805,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "handlerFn": {
              "type": "method",
              "label": "handlerFn",
              "description": "The handler function.",
              "code": "@param {function} handlerFn\nThe handler function.",
              "start": {
                "line": 763,
                "column": 6
              },
              "end": {
                "line": 781,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "arguments": {},
              "returnType": "void",
              "returnDescription": "void",
              "kind": null,
              "generator": false,
              "static": false,
              "computed": false,
              "async": false,
              "super": null,
              "override": false,
              "private": false
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "init",
          "computed": false,
          "super": "NGN.EventEmitter#handleThresholdTrigger",
          "override": false,
          "private": false
        },
        "clear": {
          "type": "method",
          "label": "clear",
          "description": "Remove all event handlers from the EventEmitter (both regular and adhoc).\r\n  This is a shortcut for #removeAllListeners.",
          "code": "clear () {\r\n    let events = NGN.slice(arguments)\r\n\r\n    if (events.length === 0) {\r\n      this.META.wildcardEvents.clear()\r\n\r\n      let symbolEvents = []\r\n\r\n      if (NGN.nodelike) {\r\n        symbolEvents = Object.getOwnPropertySymbols(this._events)\r\n      } else {\r\n        symbolEvents = Object.getOwnPropertySymbols(this.adhoc)\r\n        symbolEvents = symbolEvents.concat(Object.getOwnPropertySymbols(this.handlers))\r\n      }\r\n\r\n      for (let i = 0; i < symbolEvents.length; i++) {\r\n        this.removeAllListeners(symbolEvents[i])\r\n      }\r\n\r\n      return this.removeAllListeners()\r\n    }\r\n\r\n    for (let i = 0; i < events.length; i++) {\r\n      this.META.wildcardEvents.delete(events[i])\r\n      this.removeAllListeners(events[i])\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 813,
            "column": 2
          },
          "end": {
            "line": 839,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": "NGN.EventEmitter#clear",
          "override": false,
          "private": false
        },
        "eventHandler": {
          "type": "method",
          "label": "eventHandler",
          "description": "Internal method used to handle TTL and wildcard management.",
          "code": "eventHandler (eventName, callback, ttl, prepend = false) {\r\n    if (NGN.typeof(ttl) === 'boolean') {\r\n      prepend = ttl\r\n      ttl = this.META.defaultTTL\r\n    }\r\n\r\n    if (ttl === undefined) {\r\n      ttl = this.META.defaultTTL\r\n    }\r\n\r\n    if (ttl > 0) {\r\n      setTimeout(() => this.off(eventName, callback), ttl)\r\n    }\r\n\r\n    if (typeof eventName === 'string' && eventName.indexOf('*') >= 0) {\r\n      this.META.wildcardEvents.add(eventName)\r\n    }\r\n\r\n    return prepend\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 845,
            "column": 2
          },
          "end": {
            "line": 864,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "eventName": {
              "type": "argument",
              "label": "eventName",
              "description": null,
              "code": "eventName",
              "start": {
                "line": 845,
                "column": 16
              },
              "end": {
                "line": 845,
                "column": 25
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            },
            "callback": {
              "type": "argument",
              "label": "callback",
              "description": null,
              "code": "callback",
              "start": {
                "line": 845,
                "column": 27
              },
              "end": {
                "line": 845,
                "column": 35
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            },
            "ttl": {
              "type": "argument",
              "label": "ttl",
              "description": null,
              "code": "ttl",
              "start": {
                "line": 845,
                "column": 37
              },
              "end": {
                "line": 845,
                "column": 40
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            },
            "prepend": {
              "type": "argument",
              "label": "prepend",
              "description": null,
              "code": "prepend = false",
              "start": {
                "line": 845,
                "column": 42
              },
              "end": {
                "line": 845,
                "column": 57
              },
              "flags": [],
              "authors": [],
              "default": false,
              "datatype": "boolean",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": "NGN.EventEmitter#eventHandler",
          "override": false,
          "private": true
        },
        "on": {
          "type": "method",
          "label": "on",
          "description": "Create a new event handler for the specified event.",
          "code": "on (eventName, callback, ttl, prepend = false) {\r\n    if (NGN.typeof(eventName) === 'array') {\r\n      for (let i = 0; i < eventName.length; i++) {\r\n        this.on(eventName[i], callback, ttl, prepend)\r\n      }\r\n\r\n      return\r\n    }\r\n\r\n    if (this.eventHandler(...arguments)) {\r\n      this.prependListener(eventName, callback)\r\n    } else {\r\n      this.addListener(eventName, callback)\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 884,
            "column": 2
          },
          "end": {
            "line": 898,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "eventName": {
              "type": "argument",
              "label": "eventName",
              "description": "Name of the event to listen for.\nIf an object is passed, this method will automatically setup a #pool.",
              "code": "eventName",
              "start": {
                "line": 884,
                "column": 6
              },
              "end": {
                "line": 884,
                "column": 15
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string|string[]|object",
              "required": true,
              "enum": null
            },
            "handler": {
              "type": "method",
              "label": "handler",
              "description": "The method responsible for responding to the event.\nThis is ignored if eventName is an object.",
              "code": "@param {function} handler\nThe method responsible for responding to the event.\nThis is ignored if eventName is an object.",
              "start": {
                "line": 884,
                "column": 2
              },
              "end": {
                "line": 898,
                "column": 3
              },
              "flags": [],
              "authors": [],
              "arguments": {},
              "returnType": "void",
              "returnDescription": "void",
              "kind": null,
              "generator": false,
              "static": false,
              "computed": false,
              "async": false,
              "super": null,
              "override": false,
              "private": false
            },
            "ttl": {
              "type": "argument",
              "label": "TTL",
              "description": "Time-To-Live is the number of milliseconds before the event handler\nis automatically removed. This is useful for automatically cleaning\nup limited-life event handlers.",
              "code": "ttl",
              "start": {
                "line": 884,
                "column": 27
              },
              "end": {
                "line": 884,
                "column": 30
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "number",
              "required": false,
              "enum": null
            },
            "prepend": {
              "type": "argument",
              "label": "prepend",
              "description": "When set to `true`, the event is added to the beginning of\nthe processing list instead of the end.\nThis is ignored if eventName is an object.",
              "code": "prepend = false",
              "start": {
                "line": 884,
                "column": 32
              },
              "end": {
                "line": 884,
                "column": 47
              },
              "flags": [],
              "authors": [],
              "default": "false",
              "datatype": "boolean",
              "required": false,
              "enum": null
            },
            "TTL": {
              "type": "argument",
              "label": "TTL",
              "description": "Time-To-Live is the number of milliseconds before the event handler\nis automatically removed. This is useful for automatically cleaning\nup limited-life event handlers.",
              "code": "ttl",
              "start": {
                "line": 884,
                "column": 27
              },
              "end": {
                "line": 884,
                "column": 30
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "number",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": "NGN.EventEmitter#on",
          "override": false,
          "private": false
        },
        "once": {
          "type": "method",
          "label": "once",
          "description": "Create a new event handler for the specified event. The\nhandler will be removed immediately after it is executed. This\neffectively listens for an event to happen once and only once\nbefore the handler is destroyed.",
          "code": "once (eventName, callback, ttl, prepend = false) {\r\n    if (NGN.typeof(eventName) === 'array') {\r\n      for (let i = 0; i < eventName.length; i++) {\r\n        this.once(eventName[i], callback, ttl, prepend)\r\n      }\r\n\r\n      return\r\n    }\r\n\r\n    if (this.eventHandler(...arguments)) {\r\n      this.prependOnceListener(eventName, callback)\r\n    } else {\r\n      super.once(eventName, this.wrapEventHandlerWithScope(eventName, callback))\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 914,
            "column": 2
          },
          "end": {
            "line": 928,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "eventName": {
              "type": "argument",
              "label": "eventName",
              "description": "Name of the event to listen for.",
              "code": "eventName",
              "start": {
                "line": 914,
                "column": 8
              },
              "end": {
                "line": 914,
                "column": 17
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "callback": {
              "type": "argument",
              "label": "handler",
              "description": "The method responsible for responding to the event.",
              "code": "callback",
              "start": {
                "line": 914,
                "column": 19
              },
              "end": {
                "line": 914,
                "column": 27
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "function",
              "required": true,
              "enum": null
            },
            "ttl": {
              "type": "argument",
              "label": "prepend",
              "description": "When set to `true`, the event is added to the beginning of\nthe processing list instead of the end.",
              "code": "ttl",
              "start": {
                "line": 914,
                "column": 29
              },
              "end": {
                "line": 914,
                "column": 32
              },
              "flags": [],
              "authors": [],
              "default": "false",
              "datatype": "boolean",
              "required": false,
              "enum": null
            },
            "prepend": {
              "type": "argument",
              "label": "prepend",
              "description": "When set to `true`, the event is added to the beginning of\nthe processing list instead of the end.",
              "code": "ttl",
              "start": {
                "line": 914,
                "column": 29
              },
              "end": {
                "line": 914,
                "column": 32
              },
              "flags": [],
              "authors": [],
              "default": "false",
              "datatype": "boolean",
              "required": false,
              "enum": null
            },
            "handler": {
              "type": "argument",
              "label": "handler",
              "description": "The method responsible for responding to the event.",
              "code": "callback",
              "start": {
                "line": 914,
                "column": 19
              },
              "end": {
                "line": 914,
                "column": 27
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "function",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": "NGN.EventEmitter#once",
          "override": false,
          "private": false
        },
        "prependListener": {
          "type": "method",
          "label": "prependListener",
          "description": null,
          "code": "prependListener () {\r\n    this.applyScope(arguments)\r\n    super.prependListener(...arguments)\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 931,
            "column": 2
          },
          "end": {
            "line": 934,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": "NGN.EventEmitter#prependListener",
          "override": false,
          "private": false
        },
        "prependOnceListener": {
          "type": "method",
          "label": "prependOnceListener",
          "description": null,
          "code": "prependOnceListener () {\r\n    this.applyScope(arguments)\r\n    super.prependOnceListener(...arguments)\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 936,
            "column": 2
          },
          "end": {
            "line": 939,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": "NGN.EventEmitter#prependOnceListener",
          "override": false,
          "private": false
        },
        "addListener": {
          "type": "method",
          "label": "addListener",
          "description": null,
          "code": "addListener () {\r\n    this.applyScope(arguments)\r\n    super.addListener(...arguments)\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 941,
            "column": 2
          },
          "end": {
            "line": 944,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": "NGN.EventEmitter#addListener",
          "override": false,
          "private": false
        },
        "removeListener": {
          "type": "method",
          "label": "removeListener",
          "description": null,
          "code": "removeListener () {\r\n    if (arguments[arguments.length - 1] !== true) {\r\n      this.applyScope(arguments)\r\n    }\r\n\r\n    super.removeListener(...arguments)\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 946,
            "column": 2
          },
          "end": {
            "line": 952,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": "NGN.EventEmitter#removeListener",
          "override": false,
          "private": false
        },
        "emit": {
          "type": "method",
          "label": "emit",
          "description": "Emits an event.",
          "code": "emit () {\r\n    if (NGN.typeof(arguments[0]) === 'array') {\r\n      let args = NGN.slice(arguments)\r\n      let eventNames = args.shift()\r\n\r\n      for (let i = 0; i < eventNames.length; i++) {\r\n        this.emit(eventNames[i], ...args)\r\n      }\r\n\r\n      return\r\n    }\r\n\r\n    // This catches non-string event names. NGN internally uses Symbols\r\n    // for the NGN.WARN/INFO/ERROR event names to prevent name collisions.\r\n    // This check provides support for these special events. These types\r\n    // of events will never have wildcards.\r\n    if (!NGN.nodelike || !arguments[0] || this.META.wildcardEvents.size === 0) {\r\n      super.emit(...arguments)\r\n      return\r\n    }\r\n\r\n    if (NGN.nodelike && typeof arguments[0] === 'symbol') {\r\n      super.emit(...arguments)\r\n      return\r\n    }\r\n\r\n    /**\r\n     * The NGN browser-based event emitter supports wildcards natively, but\r\n     * Node.js does not. This adds simple wildcard support for Node. The\r\n     * only wildcard character supported at this time is `*`. This feature\r\n     * will check the event name for the existance of a wildcard. If a\r\n     * wilcard character is present, the internally-maintained list of\r\n     * wildcard events is checked to see if it's a known event. If none\r\n     * of these checks pass, the standard event emitter is used, otherwise\r\n     * special wildcard handling is used.\r\n     */\r\n    let iterator = this.META.wildcardEvents.values()\r\n    let currentEvent = null\r\n    let args = NGN.slice(arguments)\r\n\r\n    args.shift()\r\n\r\n    while (currentEvent === null || !currentEvent.done) {\r\n      if (currentEvent !== null && currentEvent.value !== arguments[0]) {\r\n        let pattern = new RegExp(currentEvent.value.replace(/\\./g, '\\\\.').replace(/\\*/g, '.*'), 'g')\r\n\r\n        if (pattern.test(arguments[0])) {\r\n          super.emit(currentEvent.value, ...args, typeof arguments[0] !== 'symbol' ? Symbol(arguments[0]) : arguments[0])\r\n          break\r\n        }\r\n      }\r\n\r\n      currentEvent = iterator.next()\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 964,
            "column": 2
          },
          "end": {
            "line": 1018,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "eventName": {
              "type": "argument",
              "label": "eventName",
              "description": "The event name can be a string or an array of strings. If an array\nof strings is specified, an event will be fired for each event name\nwithin the array.",
              "code": "emit () {\r\n    if (NGN.typeof(arguments[0]) === 'array') {\r\n      let args = NGN.slice(arguments)\r\n      let eventNames = args.shift()\r\n\r\n      for (let i = 0; i < eventNames.length; i++) {\r\n        this.emit(eventNames[i], ...args)\r\n      }\r\n\r\n      return\r\n    }\r\n\r\n    // This catches non-string event names. NGN internally uses Symbols\r\n    // for the NGN.WARN/INFO/ERROR event names to prevent name collisions.\r\n    // This check provides support for these special events. These types\r\n    // of events will never have wildcards.\r\n    if (!NGN.nodelike || !arguments[0] || this.META.wildcardEvents.size === 0) {\r\n      super.emit(...arguments)\r\n      return\r\n    }\r\n\r\n    if (NGN.nodelike && typeof arguments[0] === 'symbol') {\r\n      super.emit(...arguments)\r\n      return\r\n    }\r\n\r\n    /**\r\n     * The NGN browser-based event emitter supports wildcards natively, but\r\n     * Node.js does not. This adds simple wildcard support for Node. The\r\n     * only wildcard character supported at this time is `*`. This feature\r\n     * will check the event name for the existance of a wildcard. If a\r\n     * wilcard character is present, the internally-maintained list of\r\n     * wildcard events is checked to see if it's a known event. If none\r\n     * of these checks pass, the standard event emitter is used, otherwise\r\n     * special wildcard handling is used.\r\n     */\r\n    let iterator = this.META.wildcardEvents.values()\r\n    let currentEvent = null\r\n    let args = NGN.slice(arguments)\r\n\r\n    args.shift()\r\n\r\n    while (currentEvent === null || !currentEvent.done) {\r\n      if (currentEvent !== null && currentEvent.value !== arguments[0]) {\r\n        let pattern = new RegExp(currentEvent.value.replace(/\\./g, '\\\\.').replace(/\\*/g, '.*'), 'g')\r\n\r\n        if (pattern.test(arguments[0])) {\r\n          super.emit(currentEvent.value, ...args, typeof arguments[0] !== 'symbol' ? Symbol(arguments[0]) : arguments[0])\r\n          break\r\n        }\r\n      }\r\n\r\n      currentEvent = iterator.next()\r\n    }\r\n  }",
              "start": {
                "line": 964,
                "column": 2
              },
              "end": {
                "line": 1018,
                "column": 3
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string[]",
              "required": true,
              "enum": null
            },
            "payload": {
              "type": "argument",
              "label": "payload",
              "description": "An optional payload. This can be any number of additional arguments.",
              "code": "emit () {\r\n    if (NGN.typeof(arguments[0]) === 'array') {\r\n      let args = NGN.slice(arguments)\r\n      let eventNames = args.shift()\r\n\r\n      for (let i = 0; i < eventNames.length; i++) {\r\n        this.emit(eventNames[i], ...args)\r\n      }\r\n\r\n      return\r\n    }\r\n\r\n    // This catches non-string event names. NGN internally uses Symbols\r\n    // for the NGN.WARN/INFO/ERROR event names to prevent name collisions.\r\n    // This check provides support for these special events. These types\r\n    // of events will never have wildcards.\r\n    if (!NGN.nodelike || !arguments[0] || this.META.wildcardEvents.size === 0) {\r\n      super.emit(...arguments)\r\n      return\r\n    }\r\n\r\n    if (NGN.nodelike && typeof arguments[0] === 'symbol') {\r\n      super.emit(...arguments)\r\n      return\r\n    }\r\n\r\n    /**\r\n     * The NGN browser-based event emitter supports wildcards natively, but\r\n     * Node.js does not. This adds simple wildcard support for Node. The\r\n     * only wildcard character supported at this time is `*`. This feature\r\n     * will check the event name for the existance of a wildcard. If a\r\n     * wilcard character is present, the internally-maintained list of\r\n     * wildcard events is checked to see if it's a known event. If none\r\n     * of these checks pass, the standard event emitter is used, otherwise\r\n     * special wildcard handling is used.\r\n     */\r\n    let iterator = this.META.wildcardEvents.values()\r\n    let currentEvent = null\r\n    let args = NGN.slice(arguments)\r\n\r\n    args.shift()\r\n\r\n    while (currentEvent === null || !currentEvent.done) {\r\n      if (currentEvent !== null && currentEvent.value !== arguments[0]) {\r\n        let pattern = new RegExp(currentEvent.value.replace(/\\./g, '\\\\.').replace(/\\*/g, '.*'), 'g')\r\n\r\n        if (pattern.test(arguments[0])) {\r\n          super.emit(currentEvent.value, ...args, typeof arguments[0] !== 'symbol' ? Symbol(arguments[0]) : arguments[0])\r\n          break\r\n        }\r\n      }\r\n\r\n      currentEvent = iterator.next()\r\n    }\r\n  }",
              "start": {
                "line": 964,
                "column": 2
              },
              "end": {
                "line": 1018,
                "column": 3
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "any",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": "NGN.EventEmitter#emit",
          "override": false,
          "private": false
        }
      }
    },
    "NGN.DATA.Representation": {
      "type": "class",
      "label": "NGN.DATA.Representation",
      "description": "This is a test",
      "code": "// [PARTIAL]\r\n\r\n/**\r\n * @class NGN.DATA.Representation\r\n * A data representation is a customized view of a model or\r\n * a store. Representations exist to format data from a model\r\n * or store in a manner suitable for a particular purpose.\r\n *\r\n * For example, a representation may need to calculate data\r\n * attributes differently for different purposes, such as API\r\n * output for a system or a website. Many API's utilize an `href`\r\n * data attribute that contains the base URL of the server plus\r\n * the ID of a model. The URL may only be known at runtime, making\r\n * it difficult to represent this attribute as a generic virtual\r\n * field.\r\n *\r\n * Representations can also be used to change the format entirely,\r\n * such as outputting data as XML instead of JSON.\r\n */\r\nclass NGNDataRepresentation extends NGN.EventEmitter { // eslint-disable-line\r\n  /**\r\n   * @method constructor\r\n   * Create a new representation\r\n   * @param {Object} [cfg={}]\r\n   * The config contains stuff.\r\n   * @param {Boolean} [bb=true] (test,blah)\r\n   * das boolean\r\n   * @fires {Object,test:String} eventguy\r\n   * This is a strange name for an event.\r\n   * @fires {String|Object} blerg\r\n   * This is a strange name for an event.\r\n   * @todo This buds for you\r\n   * @todo This turd's for you\r\n   * @todo This buds for you too\r\n   * @todo This turd's for you two\r\n   */\r\n  constructor (cfg) {\r\n    super()\r\n\r\n    this.blahblah = true\r\n\r\n    Object.defineProperties(this, {\r\n      /**\r\n       * @cfgproperty\r\n       * X is a config value\r\n       */\r\n      x: NGN.public(true),\r\n      /**\r\n       * @property {boolean} nanananan\r\n       * Batman!\r\n       */\r\n      y: NGN.define(true, false, false, 'test'),\r\n\r\n      o: {\r\n        enumerable: false,\r\n        writable: true,\r\n        configurable: false,\r\n        value: 'obj'\r\n      }\r\n    })\r\n\r\n    /**\r\n     * @property {number} doesnotexist\r\n     * This is a test\r\n     */\r\n    Object.defineProperty(this, {\r\n      /**\r\n       * @property {boolean} hot\r\n       * dog\r\n       */\r\n      z: NGN.define(true, false, false, 'another test')\r\n    })\r\n\r\n    return 1\r\n  }\r\n\r\n  get mofo () {\r\n    return false\r\n  }\r\n\r\n  /**\r\n   * anotherFn description\r\n   * @param {function} callback\r\n   * This is an example callback.\r\n   * @param {boolean} callback.a\r\n   * The first element is a.\r\n   * @param {boolean} callback.b (possible,values)\r\n   * The next element is b.\r\n   * @param somethingswonderful\r\n   * something else\r\n   */\r\n  anotherFn () {\r\n    this.emit('blerg', {some: 'value'})\r\nlet x = 'test'\r\n    this.delayEmit('ablergy', 200, x)\r\nNGN.BUS.emit('yo')\r\n    this.emit(Symbol('test'), x)\r\n\r\n\r\n    this.funnel(['a', 'b', 'c'], 'd')\r\n    this.threshold('d', 3, 'THOLD', {blah: 1})\r\n\r\n    this.deprecate('nomore', 'blerg')\r\n    return\r\n  }\r\n}",
      "tags": {},
      "exceptions": {},
      "events": {
        "eventguy": {
          "type": "event",
          "label": "eventguy",
          "description": "This is a strange name for an event.",
          "code": "@fires {Object,test:String} eventguy\nThis is a strange name for an event.",
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "parameters": {
            "payload": {
              "type": "argument",
              "label": "payload",
              "description": null,
              "code": null,
              "start": {
                "line": 0,
                "column": 0
              },
              "end": {
                "line": 0,
                "column": 0
              },
              "flags": [],
              "authors": [],
              "datatype": "object",
              "required": false,
              "enum": null
            },
            "test": {
              "type": "argument",
              "label": "test",
              "description": null,
              "code": null,
              "start": {
                "line": 0,
                "column": 0
              },
              "end": {
                "line": 0,
                "column": 0
              },
              "flags": [],
              "authors": [],
              "datatype": "string",
              "required": false,
              "enum": null
            }
          },
          "deprecated": false,
          "deprecationReplacement": null
        },
        "blerg": {
          "type": "event",
          "label": "blerg",
          "description": null,
          "code": "this.emit('blerg', {some: 'value'})",
          "start": {
            "line": 93,
            "column": 4
          },
          "end": {
            "line": 93,
            "column": 39
          },
          "flags": [],
          "authors": [],
          "parameters": {
            "payload1": {
              "type": "argument",
              "label": "payload1",
              "description": null,
              "code": "{some: 'value'}",
              "start": {
                "line": 93,
                "column": 23
              },
              "end": {
                "line": 93,
                "column": 38
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "deprecated": false,
          "deprecationReplacement": null
        },
        "ablergy": {
          "type": "event",
          "label": "ablergy",
          "description": "Event triggered after 200 milliseconds.",
          "code": "this.delayEmit('ablergy', 200, x)",
          "start": {
            "line": 95,
            "column": 4
          },
          "end": {
            "line": 95,
            "column": 37
          },
          "flags": [],
          "authors": [],
          "parameters": {
            "payload1": {
              "type": "argument",
              "label": "payload1",
              "description": null,
              "code": "200",
              "start": {
                "line": 95,
                "column": 30
              },
              "end": {
                "line": 95,
                "column": 33
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            },
            "x": {
              "type": "argument",
              "label": "x",
              "description": null,
              "code": "x",
              "start": {
                "line": 95,
                "column": 35
              },
              "end": {
                "line": 95,
                "column": 36
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "deprecated": false,
          "deprecationReplacement": null
        },
        "d": {
          "type": "event",
          "label": "d",
          "description": null,
          "code": "this.funnel(['a', 'b', 'c'], 'd')",
          "start": {
            "line": 100,
            "column": 4
          },
          "end": {
            "line": 100,
            "column": 37
          },
          "flags": [],
          "authors": [],
          "parameters": {},
          "deprecated": false,
          "deprecationReplacement": null
        },
        "THOLD": {
          "type": "event",
          "label": "THOLD",
          "description": "Triggered after `d` is fired 3 times.",
          "code": "this.threshold('d', 3, 'THOLD', {blah: 1})",
          "start": {
            "line": 101,
            "column": 4
          },
          "end": {
            "line": 101,
            "column": 46
          },
          "flags": [],
          "authors": [],
          "parameters": {
            "payload2": {
              "type": "argument",
              "label": "payload2",
              "description": null,
              "code": "{blah: 1}",
              "start": {
                "line": 101,
                "column": 36
              },
              "end": {
                "line": 101,
                "column": 45
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "deprecated": false,
          "deprecationReplacement": null
        },
        "nomore": {
          "type": "event",
          "label": "nomore",
          "description": null,
          "code": null,
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "parameters": {},
          "deprecated": true,
          "deprecationReplacement": "blerg"
        }
      },
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 106,
        "column": 1
      },
      "flags": [],
      "authors": [],
      "sourcefile": "./\\data\\Representation.js",
      "extends": "NGN.EventEmitter",
      "configuration": {
        "x": {
          "type": "property",
          "label": "x",
          "description": "X is a config value",
          "code": "x: NGN.public(true)",
          "start": {
            "line": 47,
            "column": 6
          },
          "end": {
            "line": 47,
            "column": 25
          },
          "flags": [],
          "authors": [],
          "default": null,
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": true,
          "private": false
        }
      },
      "properties": {
        "blahblah": {
          "type": "property",
          "label": "blahblah",
          "description": null,
          "code": "this.blahblah = true",
          "start": {
            "line": 40,
            "column": 9
          },
          "end": {
            "line": 40,
            "column": 17
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "x": {
          "type": "property",
          "label": "x",
          "description": "X is a config value",
          "code": "x: NGN.public(true)",
          "start": {
            "line": 47,
            "column": 6
          },
          "end": {
            "line": 47,
            "column": 25
          },
          "flags": [],
          "authors": [],
          "default": null,
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": true,
          "private": false
        },
        "nanananan": {
          "type": "property",
          "label": "nanananan",
          "description": "Batman!",
          "code": "y: NGN.define(true, false, false, 'test')",
          "start": {
            "line": 52,
            "column": 6
          },
          "end": {
            "line": 52,
            "column": 47
          },
          "flags": [],
          "authors": [],
          "default": null,
          "datatype": "boolean",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        },
        "o": {
          "type": "property",
          "label": "o",
          "description": null,
          "code": "o: {\r\n        enumerable: false,\r\n        writable: true,\r\n        configurable: false,\r\n        value: 'obj'\r\n      }",
          "start": {
            "line": 54,
            "column": 6
          },
          "end": {
            "line": 59,
            "column": 7
          },
          "flags": [],
          "authors": [],
          "default": "obj",
          "datatype": "string",
          "readable": false,
          "writable": true,
          "configuration": false,
          "private": true
        },
        "hot": {
          "type": "property",
          "label": "hot",
          "description": "dog",
          "code": "z: NGN.define(true, false, false, 'another test')",
          "start": {
            "line": 71,
            "column": 6
          },
          "end": {
            "line": 71,
            "column": 55
          },
          "flags": [],
          "authors": [],
          "default": null,
          "datatype": "boolean",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        },
        "mofo": {
          "type": "property",
          "label": "mofo",
          "description": null,
          "code": "get mofo () {\r\n    return false\r\n  }",
          "start": {
            "line": 77,
            "column": 2
          },
          "end": {
            "line": 79,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "boolean",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "META": {
          "type": "property",
          "label": "META",
          "description": null,
          "code": "META: NGN.private({\r\n        queued: {},\r\n        collectionQueue: {},\r\n        thresholdQueue: {},\r\n        defaultTTL: -1,\r\n        wildcardEvents: new Set()\r\n      })",
          "start": {
            "line": 33,
            "column": 6
          },
          "end": {
            "line": 39,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": true
        },
        "setTTL": {
          "type": "property",
          "label": "setTTL",
          "description": "Set a default time-to-live for event handlers (in milliseconds).\r\n      After the TTL period elapses, event handlers are removed.\r\n      By default, there is no TTL (`-1`).\r\n      \r\n      The number of milliseconds before an event handler is automatically\r\n      removed. This value may be `-1` (no TTL/never expires) or a value\r\n      greater than `0`.",
          "code": "setTTL: NGN.const((ttl = -1) => {\r\n        if (ttl === 0) {\r\n          NGN.WARN('NGN.EventEmitter#TTL cannot be 0.')\r\n          return\r\n        }\r\n\r\n        this.META.defaultTTL = ttl\r\n      })",
          "start": {
            "line": 51,
            "column": 6
          },
          "end": {
            "line": 58,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "off": {
          "type": "property",
          "label": "off",
          "description": "Remove an event handler. If no handler is specified, all handlers for\r\n      the specified event will be removed.\r\n      This is a shortcut for #removeListener.\r\n      \r\n      Name of the event to remove.\r\n      \r\n      The handler function to remove from the event handlers.",
          "code": "off: NGN.public((eventName, handlerFn) => {\r\n        if (NGN.typeof(eventName) === 'array') {\r\n          for (let i = 0; i < eventName.length; i++) {\r\n            this.off(eventName[i], handlerFn)\r\n          }\r\n\r\n          return\r\n        }\r\n\r\n        let l = this.listeners(eventName)\r\n\r\n        if (!NGN.isFn(handlerFn)) {\r\n          return this.clear(eventName)\r\n        }\r\n\r\n        let wrappedHandlerFn = this.wrapEventHandlerWithScope(eventName, handlerFn)\r\n\r\n        if (l.indexOf(wrappedHandlerFn) < 0) {\r\n          for (let i = 0; i < l.length; i++) {\r\n            if (l[i].toString() === wrappedHandlerFn.toString()) {\r\n              this.META.wildcardEvents.delete(eventName)\r\n              // this.removeListener(eventName, handlerFn)\r\n              this.removeListener(eventName, l[i], false)\r\n              break\r\n            }\r\n          }\r\n        } else {\r\n          this.META.wildcardEvents.delete(eventName)\r\n          this.removeListener(eventName, handlerFn)\r\n        }\r\n      })",
          "start": {
            "line": 70,
            "column": 6
          },
          "end": {
            "line": 100,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "deprecate": {
          "type": "property",
          "label": "deprecate",
          "description": "Provides a deprecation notice for the specified event.\r\n      Automatically emits the appropriate \"replacement\" event\r\n      if a replacement event is configured. If no replacement\r\n      event is configured, the deprecation notice will be written\r\n      to the console but no replacement event will be triggered.\r\n      \r\n      The name of the deprecated event.\r\n      \r\n      The name of the new event.",
          "code": "deprecate: NGN.const((deprecatedEventName, replacementEventName) => {\r\n        const me = this\r\n\r\n        this.on(deprecatedEventName, function () {\r\n          NGN.WARN(`${deprecatedEventName} is deprecated. ` + (!replacementEventName ? '' : `Use ${replacementEventName} instead.`))\r\n\r\n          if (replacementEventName) {\r\n            let args = NGN.slice(arguments)\r\n\r\n            args.shift()\r\n            args.unshift(replacementEventName)\r\n\r\n            me.emit.apply(me, args)\r\n          }\r\n        })\r\n      })",
          "start": {
            "line": 114,
            "column": 6
          },
          "end": {
            "line": 129,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "subscriberObject": {
          "type": "property",
          "label": "subscriberObject",
          "description": "A key:value object where the key is the name of the\nunprefixed event and the key is the handler function.\nA value can be an object, allowing for nesting events. For example:\n\n```js\nNGN.BUS.pool('prefix.', {\ndeep: {\nnested: {\neventName: function  {\nconsole.log('event triggered')\n}\n}\n}\n})\n\nNGN.BUS.emit('prefix.deep.nested.eventName') // <-- Outputs \"event triggered\"\n```",
          "code": "pool: NGN.privateconst(function (prefix, group) {\r\n        if (typeof prefix !== 'string') {\r\n          group = prefix\r\n          prefix = ''\r\n        }\r\n\r\n        let pool = {}\r\n\r\n        for (let eventName in group) {\r\n          let topic = `${NGN.coalesce(prefix, '')}${eventName}`\r\n\r\n          if (NGN.isFn(group[eventName])) {\r\n            this.increaseMaxListeners()\r\n\r\n            pool[eventName] = this.on(topic, group[eventName])\r\n          } else if (typeof group[eventName] === 'object') {\r\n            this.pool(`${topic}.`, group[eventName])\r\n          } else {\r\n            NGN.WARN(`${topic} could not be pooled in the event emitter because it's value is not a function.`)\r\n          }\r\n        }\r\n      })",
          "start": {
            "line": 158,
            "column": 6
          },
          "end": {
            "line": 179,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "default": null,
          "datatype": "object",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        },
        "attach": {
          "type": "property",
          "label": "attach",
          "description": "Attach a function to a topic. This can be used\r\n      to forward events in response to asynchronous functions.\r\n      \n      For example:\r\n      \n      ```js\r\n      myAsyncDataFetch(NGN.BUS.attach('topicName'))\r\n      ```\r\n      \n      This is the same as:\r\n      \n      ```js\r\n      myAsyncCall(function(data){\r\n       NGN.BUS.emit('topicName', data)\r\n      })\r\n      ```\r\n      \r\n      The name of the event to attach a handler method to.\r\n      \r\n      Setting this to `true` will execute a `event.preventDefault()` before\r\n      attaching the handler.\r\n      \r\n      Returns a function that will automatically be associated with an event.",
          "code": "attach: NGN.const(function (eventName, preventDefaultAction) {\r\n        preventDefaultAction = NGN.coalesce(preventDefaultAction, false)\r\n\r\n        return (e) => {\r\n          if (preventDefaultAction && !NGN.nodelike) {\r\n            e.preventDefault()\r\n          }\r\n\r\n          this.emit(eventName, ...arguments)\r\n        }\r\n      })",
          "start": {
            "line": 207,
            "column": 6
          },
          "end": {
            "line": 217,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "increaseMaxListeners": {
          "type": "property",
          "label": "increaseMaxListeners",
          "description": "Increase the number of maximum listeners.\r\n      \r\n      The number of events the max listener account will be increased by.",
          "code": "increaseMaxListeners: NGN.private((count = 1) => {\r\n        this.setMaxListeners(this.getMaxListeners() + count)\r\n      })",
          "start": {
            "line": 226,
            "column": 6
          },
          "end": {
            "line": 228,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": true
        },
        "decreaseMaxListeners": {
          "type": "property",
          "label": "decreaseMaxListeners",
          "description": "Decrease the number of maximum listeners.\r\n      \r\n      The number of events the max listener account will be decreased by.",
          "code": "decreaseMaxListeners: NGN.private((count = 1) => {\r\n        this.setMaxListeners(this.getMaxListeners() - count)\r\n      })",
          "start": {
            "line": 237,
            "column": 6
          },
          "end": {
            "line": 239,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": true
        },
        "forward": {
          "type": "property",
          "label": "forward",
          "description": "A special subscriber that fires one or more event in response to\r\n      to an event. This is used to bubble events up/down an event chain.\r\n      \n      For example:\r\n      \n      ```js\r\n      NGN.BUS.forward('sourceEvent', ['someEvent','anotherEvent'], {payload:true})\r\n      ```\r\n      When `sourceEvent` is published, the bind method triggers `someEvent` and\r\n      `anotherEvent`, passing the payload object to `someEvent` and\r\n      `anotherEvent` subscribers simultaneously.\r\n      \n      To forward an event to another EventEmitter, see #relay.\r\n      \r\n      The event to subscribe to.\r\n      \r\n      An event or array of events to fire in response to the sourceEvent.\r\n      \r\n      Optional data to pass to each bound event handler.\r\n      \r\n      Returns an object with a single `remove()` method.",
          "code": "forward: NGN.const(function (eventName, triggers, payload) {\r\n        triggers = NGN.forceArray(triggers)\r\n\r\n        let me = this\r\n        let listener = function () {\r\n          let args = NGN.slice(arguments)\r\n\r\n          if (payload) {\r\n            args.push(payload)\r\n          }\r\n\r\n          me.emit(triggers, ...args)\r\n        }\r\n\r\n        this.increaseMaxListeners()\r\n        this.on(eventName, listener)\r\n\r\n        // Provide handle back for removal of topic\r\n        return {\r\n          remove: () => {\r\n            this.decreaseMaxListeners()\r\n            this.off(eventName, listener)\r\n          }\r\n        }\r\n      })",
          "start": {
            "line": 265,
            "column": 6
          },
          "end": {
            "line": 289,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "relay": {
          "type": "property",
          "label": "relay",
          "description": "This relays an entire event to a different event emitter.\r\n      For example:\r\n      \n      ```js\r\n      let emitterA = new NGN.EventEmitter()\r\n      let emitterB = new NGN.EventEmitter()\r\n      \n      emitterA.relay('my.event', emitterB)\r\n      \n      emitterB.on('my.event', () => { console.log('Emitter B heard the event!') })\r\n      \n      emitterA.emit('my.event') // Outputs \"Emitter B heard the event!\"\r\n      ```\r\n      \r\n      The name of the event to listen for.\r\n      \r\n      The emitter to relay the event to.\r\n      \r\n      An optional prefix to prepend to the eventName.\r\n      \r\n      An optional postfix to append to the eventName.",
          "code": "relay: NGN.const(function (eventName, targetEmitter, prefix = null, postfix = null) {\r\n        let eventNameList = NGN.forceArray(eventName)\r\n\r\n        for (let i = 0; i < eventNameList.length; i++) {\r\n          let eventName = eventNameList[i]\r\n\r\n          this.on(eventName, function () {\r\n            if (NGN.typeof(this.event) === 'symbol') {\r\n              if (prefix !== null || postfix !== null) {\r\n                NGN.INFO('Cannot relay a symbol-based event with a prefix/postfix.')\r\n              }\r\n\r\n              targetEmitter.emit(...arguments)\r\n            } else {\r\n              targetEmitter.emit(`${NGN.coalesce(prefix, '')}${this.event}${NGN.coalesce(postfix, '')}`, ...arguments)\r\n            }\r\n          })\r\n        }\r\n      })",
          "start": {
            "line": 314,
            "column": 6
          },
          "end": {
            "line": 332,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "relayOnce": {
          "type": "property",
          "label": "relayOnce",
          "description": "This relays an entire event to a different event emitter. This is\r\n      the same as #relay, but the event handler is removed after the\r\n      first invocation of the event.\r\n      \n      For example:\r\n      \n      ```js\r\n      let emitterA = new NGN.EventEmitter()\r\n      let emitterB = new NGN.EventEmitter()\r\n      \n      emitterA.relayOnce('my.event', emitterB)\r\n      \n      emitterB.on('my.event', () => { console.log('Emitter B heard the event!') })\r\n      \n      emitterA.emit('my.event') // Outputs \"Emitter B heard the event!\"\r\n      emitterA.emit('my.event') // Does nothing\r\n      ```\r\n      \r\n      The name of the event to listen for.\r\n      \r\n      The emitter to relay the event to.\r\n      \r\n      An optional prefix to prepend to the eventName.\r\n      \r\n      An optional postfix to append to the eventName.",
          "code": "relayOnce: NGN.const(function (eventName, targetEmitter, prefix = null, postfix = null) {\r\n        let eventNameList = NGN.forceArray(eventName)\r\n\r\n        for (let i = 0; i < eventNameList.length; i++) {\r\n          let eventName = eventNameList[i]\r\n\r\n          this.once(eventName, function () {\r\n            if (NGN.typeof(this.event) === 'symbol') {\r\n              if (prefix !== null || postfix !== null) {\r\n                NGN.INFO('Cannot relay a symbol-based event with a prefix/postfix.')\r\n              }\r\n\r\n              targetEmitter.emit(...arguments)\r\n            } else {\r\n              targetEmitter.emit(`${NGN.coalesce(prefix, '')}${this.event}${NGN.coalesce(postfix, '')}`, ...arguments)\r\n            }\r\n          })\r\n        }\r\n      })",
          "start": {
            "line": 361,
            "column": 6
          },
          "end": {
            "line": 379,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "delayEmit": {
          "type": "property",
          "label": "delayEmit",
          "description": "This method waits for the specified duration, then publishes an\r\n      event once. This will publish the event only once at the end of the\r\n      wait period, even if the event is triggered multiple times. This can\r\n      be useful when working with many events triggered in rapid succession.\r\n      \n      For example, an NGN.DATA.Model representing a person may be used to\r\n      track a user profile. The NGN.DATA.Model fires an event called `field.update`\r\n      every time a data field is modified. In many cases, a user may update\r\n      multiple fields of their profile using a form with a \"Save\" button.\r\n      Instead of generating a new \"save\" (to disk, to memory, to an API, etc)\r\n      operation for each field, the publishOnce event can wait until all\r\n      changes are made before running the save operation.\r\n      \n      ```js\r\n      // Create a data model representing a person.\r\n      var Person = new NGN.DATA.Model({....})\r\n      \n      // Create a new person record for a user.\r\n      var user = new Person()\r\n      \n      // When the user is modified, save the data.\r\n      user.on('field.update', function () {\r\n        // Wait 300 milliseconds to trigger the save event\r\n        NGN.BUS.delayEmit('user.save', 300)\r\n      })\r\n      \n      // Save the user using an API\r\n      NGN.BUS.on('user.save', function () {\r\n        NGN.NET.put({\r\n          url: 'https://my.api.com/user',\r\n          json: user.data\r\n        })\r\n      })\r\n      \n      // Modify the record attributes (which are blank by default)\r\n      user.firstname = 'John'\r\n      user.lastname = 'Doe'\r\n      user.age = 42\r\n      \n      // Make another update 1 second later\r\n      setTimeout(function () {\r\n        user.age = 32\r\n      }, 1000)\r\n      ```\r\n      \n      The code above sets up a model and record. Then it listens to the record\r\n      for field updates. Each time it recognizes an update, it queues the \"save\"\r\n      event. When the queue matures, it fires the `user.save` event.\r\n      \n      The first `field.update` is triggered when `user.firstname = 'John'` runs.\r\n      This initiates a queue for `user.save`, set to mature in 300 millisenconds.\r\n      Next, a `field.update` is triggered when `user.lastname = 'Doe'` runs.\r\n      This time, since the queue for `user.save` is already initiated, notthing\r\n      new happens. Finally, a `field.update` is triggered when `user.age = 42`\r\n      runs. Just like the last one, nothing happens since the `user.save` queue\r\n      is already active.\r\n      \n      The `user.save` queue \"matures\" after 300 milliseconds. This means after\r\n      300 milliseconds have elapsed, the `user.save` event is triggered. In this\r\n      example, it means the `NGN.NET.put()` code will be executed. As a result,\r\n      all 3 change (firstname, lastname, and age) will be complete before the\r\n      API request is executed. The queue is cleared immediately.\r\n      \n      The final update occurs 1 second later (700 milliseconds after the queue\r\n      matures). This triggers a `field.update`, but since the queue is no\r\n      longer active, it is re-initiated. 300 milliseconds later, the `user.save`\r\n      event is fired again, thus executing the API request again (1.3 seconds\r\n      in total).\r\n      \r\n      The event/topic to publish/emit.\r\n      \r\n      The number of milliseconds to wait before firing the event.\r\n      \r\n      An optional payload, such as data to be passed to an event handler.",
          "code": "delayEmit: NGN.const(function (eventName, delay) {\r\n        if (!this.META.queued.hasOwnProperty(eventName)) {\r\n          let args = NGN.slice(arguments)\r\n          args.splice(1, 1)\r\n\r\n          this.META.queued[eventName] = setTimeout(() => {\r\n            delete this.META.queued[eventName]\r\n            this.emit(...args)\r\n          }, delay)\r\n        }\r\n      })",
          "start": {
            "line": 458,
            "column": 6
          },
          "end": {
            "line": 468,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "getInternalCollectionId": {
          "type": "property",
          "label": "getInternalCollectionId",
          "description": "Returns a unique ID for special collections.\r\n      \r\n      The collection to generate an ID for.",
          "code": "getInternalCollectionId: NGN.privateconst(function (collection) {\r\n        return Symbol(collection)\r\n        // let time = (new Date()).getTime().toString()\r\n        // let rand = Math.random().toString()\r\n        // let key = Object.keys(collection).length + 1\r\n        //\r\n        // while (collection.hasOwnProperty(`${key.toString()}${time}${rand}`)) {\r\n        //   key++\r\n        // }\r\n        //\r\n        // return `${key.toString()}${time}${rand}`\r\n      })",
          "start": {
            "line": 477,
            "column": 6
          },
          "end": {
            "line": 488,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        },
        "handleCollectionTrigger": {
          "type": "property",
          "label": "handleCollectionTrigger",
          "description": "A method to manage #chain event handlers.",
          "code": "handleCollectionTrigger: NGN.privateconst(function (eventName, key) {\r\n        let me = this\r\n\r\n        return function () {\r\n          // Use setTimeout to simulate nextTick\r\n          setTimeout(() => {\r\n            let cq = me.META.collectionQueue\r\n\r\n            if (cq[key]) {\r\n              cq[key].remainingqueue.delete(eventName)\r\n\r\n              if (cq[key].remainingqueue.size === 0) {\r\n                cq[key].remainingqueue = cq[key].masterqueue\r\n\r\n                if (NGN.isFn(cq[key].eventName)) {\r\n                  cq[key].eventName(cq[key].payload)\r\n                } else {\r\n                  me.emit(cq[key].eventName, cq[key].payload)\r\n                }\r\n              }\r\n            }\r\n          }, 0)\r\n        }\r\n      })",
          "start": {
            "line": 495,
            "column": 6
          },
          "end": {
            "line": 518,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        },
        "funnel": {
          "type": "property",
          "label": "funnel",
          "description": "Emit an event after a collection of unique events have all fired.\r\n      This can be useful in situations where multiple asynchronous actions\r\n      must complete before another begins. For example, blending 3\r\n      remote data sources from different API's into a single resultset\r\n      can be achieved with this.\r\n      \n      Example\n      ```js\r\n      let collection = NGN.BUS.funnel(['download1done', 'download2done', 'download3done'], 'make.results')\r\n      \n      let allData = []\r\n      \n      // When all of the downloads are done, log them.\r\n      NGN.BUS.on('make.results', () => {\r\n        console.log(allData)\r\n      })\r\n      \n      // Download the first set of data asynchronously\r\n      NGN.NET.json('http:/download1.com/data.json', (data) => {\r\n        allData.push(data)\r\n        NGN.BUS.emit('download1done')\r\n      })\r\n      \n      // Download the second set of data asynchronously\r\n      NGN.NET.json('http:/download2.com/data.json', (data) => {\r\n        allData.push(data)\r\n        NGN.BUS.emit('download2done')\r\n      })\r\n      \n      // Download the third set of data asynchronously\r\n      NGN.NET.json('http:/download3.com/data.json', (data) => {\r\n        allData.push(data)\r\n        NGN.BUS.emit('download3done')\r\n      })\r\n      \n      // The handler can be removed with the special method:\r\n      collection.remove()\r\n      ```\r\n      \r\n      An array of events. Once _all_ of these events have fired,\r\n      the triggerEventName will be fired.\r\n      \r\n      The name of the event triggered after the collection has completed.\r\n      This can also be a callback function. If a callback function is provided,\r\n      it will receive the payload as the only argument when it is triggered.\r\n      \r\n      An optional payload delivered to the #triggerEventName.\r\n      \r\n      Provides the key/value configuration of the collection.\r\n      ```js\r\n      {\r\n        masterqueue: ['event1', 'event2', 'etc'], // The original event array (non-editable)\r\n        remainingqueue: [...], // The events the BUS is still waiting for before firing the trigger event.\r\n        eventName: 'triggeredEventName', // Name of the event triggered after the remaining elements are flushed.\r\n        payload: 'anything', // OPTIONAL\r\n        remove: [Function]\r\n      }\r\n      ```",
          "code": "funnel: NGN.const((eventCollection, triggerEventName, payload = null) => {\r\n        if (NGN.typeof(eventCollection) !== 'array') {\r\n          throw new Error(`NGN.BUS.funnel expected an array of events, but received a(n) ${NGN.typeof(eventCollection)}`)\r\n        }\r\n\r\n        let collection = new Set(eventCollection)\r\n        let key = this.getInternalCollectionId(this.META.collectionQueue)\r\n\r\n        this.META.collectionQueue[key] = {}\r\n\r\n        Object.defineProperties(this.META.collectionQueue[key], {\r\n          masterqueue: NGN.const(new Set(eventCollection)),\r\n          remainingqueue: NGN.private(collection),\r\n          eventName: NGN.const(triggerEventName),\r\n          remove: NGN.const(() => {\r\n            this.META.collectionQueue[key].masterqueue.forEach(event => {\r\n              this.off(event, this.handleCollectionTrigger(event, key))\r\n            })\r\n\r\n            this.decreaseMaxListeners(this.META.collectionQueue[key].masterqueue.size)\r\n\r\n            delete this.META.collectionQueue[key]\r\n          }),\r\n          payload: NGN.const(payload)\r\n        })\r\n\r\n        this.increaseMaxListeners(collection.size)\r\n\r\n        collection.forEach(event => {\r\n          this.on(event, this.handleCollectionTrigger(event, key))\r\n        })\r\n\r\n        return this.META.collectionQueue[key]\r\n      })",
          "start": {
            "line": 581,
            "column": 6
          },
          "end": {
            "line": 614,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "funnelOnce": {
          "type": "property",
          "label": "funnelOnce",
          "description": "This provides the same functionality as #funnel, but\r\n      removes the listener after the resultant event has fired.\r\n      See #funnel for detailed usage.\r\n      \r\n      An array of events. Once _all_ of these events have fired,\r\n      the triggerEventName will be fired.\r\n      \r\n      The name of the event triggered after the collection has completed.\r\n      \r\n      An optional payload delivered to the #triggerEventName.\r\n      \r\n      Provides the key/value configuration of the collection.",
          "code": "funnelOnce: NGN.const((eventCollection, triggerEventName, payload = null) => {\r\n        let funnelClosureEvent = `::NGNFUNNEL::${(new Date()).getTime()}::${triggerEventName}`\r\n        // let funnelClosureEvent = Symbol(triggerEventName)\r\n        let collection = this.funnel(eventCollection, funnelClosureEvent, payload)\r\n\r\n        this.increaseMaxListeners()\r\n        this.once(funnelClosureEvent, () => {\r\n          collection.remove()\r\n          collection = null\r\n          this.emit(triggerEventName, payload)\r\n        })\r\n      })",
          "start": {
            "line": 631,
            "column": 6
          },
          "end": {
            "line": 642,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "threshold": {
          "type": "property",
          "label": "threshold",
          "description": "After an event is fired a predetermined number of times (the threshold),\r\n      trigger another event or function.\r\n      \n      For example:\r\n      \n      ```js\r\n      NGN.BUS.threshold('push.my.button', 3, 'annoyed')\r\n      \n      NGN.BUS.on('annoyed', function () {\r\n        console.log('We apologize for the slow response, but excessive clicking will not speed up the process.')\r\n      })\r\n      \n      document.getElementById('#myButton').addEventListener('click', NGN.BUS.attach('push.my.button'))\r\n      ```\r\n      \n      Once the threshold is exceeded, the final event will be triggered and\r\n      the threshold will be reset. Using the example above, this means\r\n      clicking 3 times on `#myButton` would trigger the `annoyed` event ONCE,\r\n      6 times triggers `annoyed` TWICE, 9 times triggers `annoyed` THREE times, etc.\r\n      \r\n      The name of the event to count.\r\n      \r\n      The number of occurrances allowed until the final event is triggered.\r\n      The event will be triggered at the threshold. For example, if the limit\r\n      is `3`, the finalEvent will be triggered the 3rd time thresholdEventName is\r\n      fired.\r\n      \r\n      This can be an event or callback function triggered when the threshold is crossed.\r\n      If a callback function is specified, the payload is passed as the only argument.\r\n      \r\n      An optional payload to send to the finalEvent handler(s).\r\n      \r\n      Returns an object that can be used to remove the threshold.",
          "code": "threshold: NGN.const(function (thresholdEventName, limit, finalEventName, payload = null) {\r\n        if (typeof thresholdEventName !== 'string') {\r\n          throw new Error('The threshold event name must be a string (received ' + (typeof thresholdEventName) + ')')\r\n        }\r\n\r\n        // let key = `${this.getInternalCollectionId(this.META.thresholdQueue)}${limit.toString()}`\r\n        let key = this.getInternalCollectionId(this.META.thresholdQueue)\r\n\r\n        this.META.thresholdQueue[key] = {}\r\n\r\n        Object.defineProperties(this.META.thresholdQueue[key], {\r\n          key: NGN.const(key),\r\n          eventName: NGN.const(thresholdEventName),\r\n          limit: NGN.const(limit),\r\n          count: NGN.private(0),\r\n          finalEventName: NGN.const(finalEventName),\r\n          remove: NGN.const(() => {\r\n            let event = this.META.thresholdQueue[key].eventName\r\n\r\n            delete this.META.thresholdQueue[key]\r\n\r\n            this.decreaseMaxListeners()\r\n            this.off(event, this.handleThresholdTrigger(key))\r\n          }),\r\n          payload: NGN.const(payload)\r\n        })\r\n\r\n        this.increaseMaxListeners()\r\n        this.on(thresholdEventName, this.handleThresholdTrigger(key))\r\n\r\n        return this.META.thresholdQueue[key]\r\n      })",
          "start": {
            "line": 681,
            "column": 6
          },
          "end": {
            "line": 712,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "thresholdOnce": {
          "type": "property",
          "label": "thresholdOnce",
          "description": null,
          "code": "thresholdOnce: NGN.const(function (thresholdEventName, limit, finalEventName, payload = null) {\r\n        let thresholdClosureEvent = `::NGNTHRESHOLD::${(new Date()).getTime()}::${finalEventName}`\r\n        let threshold = this.threshold(thresholdEventName, limit, thresholdClosureEvent, payload)\r\n\r\n        this.once(thresholdClosureEvent, () => {\r\n          threshold.remove()\r\n          threshold = null\r\n          this.emit(finalEventName, payload)\r\n        })\r\n      })",
          "start": {
            "line": 714,
            "column": 6
          },
          "end": {
            "line": 723,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "handleThresholdTrigger": {
          "type": "property",
          "label": "handleThresholdTrigger",
          "description": "A method to manage #threshold event handlers.",
          "code": "handleThresholdTrigger: NGN.const(function (key) {\r\n        let me = this\r\n        return function () {\r\n          // Use setTimeout to simulate nextTick\r\n          setTimeout(() => {\r\n            if (me.META.thresholdQueue.hasOwnProperty(key)) {\r\n              me.META.thresholdQueue[key].count++\r\n              if (me.META.thresholdQueue[key].count === me.META.thresholdQueue[key].limit) {\r\n                if (NGN.isFn(me.META.thresholdQueue[key].finalEventName)) {\r\n                  me.META.thresholdQueue[key].finalEventName(me.META.thresholdQueue[key].payload)\r\n                } else {\r\n                  me.emit(me.META.thresholdQueue[key].finalEventName, me.META.thresholdQueue[key].payload)\r\n                }\r\n\r\n                // This if statement is required in case the event is removed\r\n                // during the reset process.\r\n                if (me.META.thresholdQueue.hasOwnProperty(key)) {\r\n                  me.META.thresholdQueue[key].count = 0\r\n                }\r\n              }\r\n            }\r\n          }, 0)\r\n        }\r\n      })",
          "start": {
            "line": 730,
            "column": 6
          },
          "end": {
            "line": 753,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        },
        "wrapEventHandlerWithScope": {
          "type": "property",
          "label": "wrapEventHandlerWithScope",
          "description": "An internal method to wrap node-based event handlers\r\n      with the proper scope.\r\n      \r\n      The name of the event being handled.\r\n      \r\n      The handler function.",
          "code": "wrapEventHandlerWithScope: NGN.privateconst((name, fn) => {\r\n        if (!NGN.nodelike) {\r\n          return fn\r\n        }\r\n\r\n        const handlerFn = fn\r\n\r\n        return function () {\r\n          let args = arguments\r\n\r\n          if (typeof args[args.length - 1] === 'symbol') {\r\n            name = args[args.length - 1].toString().replace(/Symbol\\(|\\)/gi, '')\r\n            args = NGN.slice(args)\r\n            args.pop()\r\n          }\r\n\r\n          handlerFn.apply({ event: name }, args)\r\n        }\r\n      })",
          "start": {
            "line": 763,
            "column": 6
          },
          "end": {
            "line": 781,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        },
        "applyScope": {
          "type": "property",
          "label": "applyScope",
          "description": "An internal method to apply scope based on whether the handler\r\n      is a Node-like \"once\" emitter or not.\r\n      \r\n      The name of the event being scoped.\r\n      \r\n      The handler function.",
          "code": "applyScope: NGN.privateconst((args) => {\r\n        if (NGN.nodelike && args.length > 1) {\r\n          if (args[args.length - 1].listener) {\r\n            args[args.length - 1].listener = this.wrapEventHandlerWithScope(\r\n              args[0],\r\n              args[args.length - 1].listener\r\n            )\r\n          } else {\r\n            args[args.length - 1] = this.wrapEventHandlerWithScope(\r\n              args[0],\r\n              args[args.length - 1]\r\n            )\r\n          }\r\n        }\r\n      })",
          "start": {
            "line": 791,
            "column": 6
          },
          "end": {
            "line": 805,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        }
      },
      "methods": {
        "constructor": {
          "type": "method",
          "label": "constructor",
          "description": "Create a new representation",
          "code": "constructor (cfg) {\r\n    super()\r\n\r\n    this.blahblah = true\r\n\r\n    Object.defineProperties(this, {\r\n      /**\r\n       * @cfgproperty\r\n       * X is a config value\r\n       */\r\n      x: NGN.public(true),\r\n      /**\r\n       * @property {boolean} nanananan\r\n       * Batman!\r\n       */\r\n      y: NGN.define(true, false, false, 'test'),\r\n\r\n      o: {\r\n        enumerable: false,\r\n        writable: true,\r\n        configurable: false,\r\n        value: 'obj'\r\n      }\r\n    })\r\n\r\n    /**\r\n     * @property {number} doesnotexist\r\n     * This is a test\r\n     */\r\n    Object.defineProperty(this, {\r\n      /**\r\n       * @property {boolean} hot\r\n       * dog\r\n       */\r\n      z: NGN.define(true, false, false, 'another test')\r\n    })\r\n\r\n    return 1\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 37,
            "column": 2
          },
          "end": {
            "line": 75,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "todo": [
            "This buds for you",
            "This turd's for you",
            "This buds for you too",
            "This turd's for you two"
          ],
          "arguments": {
            "cfg": {
              "type": "argument",
              "label": "cfg",
              "description": "The config contains stuff.",
              "code": "cfg",
              "start": {
                "line": 37,
                "column": 15
              },
              "end": {
                "line": 37,
                "column": 18
              },
              "flags": [],
              "authors": [],
              "default": "{}",
              "datatype": "object",
              "required": false,
              "enum": null
            },
            "bb": {
              "type": "argument",
              "label": "bb",
              "description": "das boolean",
              "code": "constructor (cfg) {\r\n    super()\r\n\r\n    this.blahblah = true\r\n\r\n    Object.defineProperties(this, {\r\n      /**\r\n       * @cfgproperty\r\n       * X is a config value\r\n       */\r\n      x: NGN.public(true),\r\n      /**\r\n       * @property {boolean} nanananan\r\n       * Batman!\r\n       */\r\n      y: NGN.define(true, false, false, 'test'),\r\n\r\n      o: {\r\n        enumerable: false,\r\n        writable: true,\r\n        configurable: false,\r\n        value: 'obj'\r\n      }\r\n    })\r\n\r\n    /**\r\n     * @property {number} doesnotexist\r\n     * This is a test\r\n     */\r\n    Object.defineProperty(this, {\r\n      /**\r\n       * @property {boolean} hot\r\n       * dog\r\n       */\r\n      z: NGN.define(true, false, false, 'another test')\r\n    })\r\n\r\n    return 1\r\n  }",
              "start": {
                "line": 37,
                "column": 2
              },
              "end": {
                "line": 75,
                "column": 3
              },
              "flags": [],
              "authors": [],
              "default": "true",
              "datatype": "boolean",
              "required": false,
              "enum": [
                "test",
                "blah"
              ]
            }
          },
          "returnType": "number",
          "returnDescription": "",
          "kind": "constructor",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "anotherFn": {
          "type": "method",
          "label": "anotherFn",
          "description": "anotherFn description\r\n  \r\n  This is an example callback.\r\n  \r\n  The first element is a.\r\n  \r\n  The next element is b.\r\n  \r\n  something else",
          "code": "anotherFn () {\r\n    this.emit('blerg', {some: 'value'})\r\nlet x = 'test'\r\n    this.delayEmit('ablergy', 200, x)\r\nNGN.BUS.emit('yo')\r\n    this.emit(Symbol('test'), x)\r\n\r\n\r\n    this.funnel(['a', 'b', 'c'], 'd')\r\n    this.threshold('d', 3, 'THOLD', {blah: 1})\r\n\r\n    this.deprecate('nomore', 'blerg')\r\n    return\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 92,
            "column": 2
          },
          "end": {
            "line": 105,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "callback": {
              "type": "method",
              "label": "callback",
              "description": "This is an example callback.",
              "code": "@param {function} callback\nThis is an example callback.",
              "start": {
                "line": 92,
                "column": 2
              },
              "end": {
                "line": 105,
                "column": 3
              },
              "flags": [],
              "authors": [],
              "arguments": {
                "a": {
                  "type": "argument",
                  "label": "a",
                  "description": "The first element is a.",
                  "code": "@param {boolean} callback.a\nThe first element is a.",
                  "start": {
                    "line": 92,
                    "column": 2
                  },
                  "end": {
                    "line": 105,
                    "column": 3
                  },
                  "flags": [],
                  "authors": [],
                  "default": null,
                  "datatype": "boolean",
                  "required": true,
                  "enum": null
                },
                "b": {
                  "type": "argument",
                  "label": "b",
                  "description": "The next element is b.",
                  "code": "@param {boolean} callback.b (possible,values)\nThe next element is b.",
                  "start": {
                    "line": 92,
                    "column": 2
                  },
                  "end": {
                    "line": 105,
                    "column": 3
                  },
                  "flags": [],
                  "authors": [],
                  "default": null,
                  "datatype": "boolean",
                  "required": true,
                  "enum": [
                    "possible",
                    "values"
                  ]
                }
              },
              "returnType": "void",
              "returnDescription": "void",
              "kind": null,
              "generator": false,
              "static": false,
              "computed": false,
              "async": false,
              "super": null,
              "override": false,
              "private": false
            },
            "somethingswonderful": {
              "type": "argument",
              "label": "somethingswonderful",
              "description": "something else",
              "code": "anotherFn () {\r\n    this.emit('blerg', {some: 'value'})\r\nlet x = 'test'\r\n    this.delayEmit('ablergy', 200, x)\r\nNGN.BUS.emit('yo')\r\n    this.emit(Symbol('test'), x)\r\n\r\n\r\n    this.funnel(['a', 'b', 'c'], 'd')\r\n    this.threshold('d', 3, 'THOLD', {blah: 1})\r\n\r\n    this.deprecate('nomore', 'blerg')\r\n    return\r\n  }",
              "start": {
                "line": 92,
                "column": 2
              },
              "end": {
                "line": 105,
                "column": 3
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "setTTL": {
          "type": "method",
          "label": "setTTL",
          "description": "Set a default time-to-live for event handlers .\nAfter the TTL period elapses, event handlers are removed.\nBy default, there is no TTL (`-1`).",
          "code": "setTTL: NGN.const((ttl = -1) => {\r\n        if (ttl === 0) {\r\n          NGN.WARN('NGN.EventEmitter#TTL cannot be 0.')\r\n          return\r\n        }\r\n\r\n        this.META.defaultTTL = ttl\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 51,
            "column": 6
          },
          "end": {
            "line": 58,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "ttl": {
              "type": "argument",
              "label": "ttl",
              "description": "The number of milliseconds before an event handler is automatically\nremoved. This value may be `-1`  or a value\ngreater than `0`.",
              "code": "setTTL: NGN.const((ttl = -1) => {\r\n        if (ttl === 0) {\r\n          NGN.WARN('NGN.EventEmitter#TTL cannot be 0.')\r\n          return\r\n        }\r\n\r\n        this.META.defaultTTL = ttl\r\n      })",
              "start": {
                "line": 51,
                "column": 6
              },
              "end": {
                "line": 58,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "number",
              "required": true,
              "enum": [
                "no TTL/never expires"
              ]
            },
            "eventName": {
              "type": "argument",
              "label": "eventName",
              "description": "Name of the event to remove.",
              "code": "off: NGN.public((eventName, handlerFn) => {\r\n        if (NGN.typeof(eventName) === 'array') {\r\n          for (let i = 0; i < eventName.length; i++) {\r\n            this.off(eventName[i], handlerFn)\r\n          }\r\n\r\n          return\r\n        }\r\n\r\n        let l = this.listeners(eventName)\r\n\r\n        if (!NGN.isFn(handlerFn)) {\r\n          return this.clear(eventName)\r\n        }\r\n\r\n        let wrappedHandlerFn = this.wrapEventHandlerWithScope(eventName, handlerFn)\r\n\r\n        if (l.indexOf(wrappedHandlerFn) < 0) {\r\n          for (let i = 0; i < l.length; i++) {\r\n            if (l[i].toString() === wrappedHandlerFn.toString()) {\r\n              this.META.wildcardEvents.delete(eventName)\r\n              // this.removeListener(eventName, handlerFn)\r\n              this.removeListener(eventName, l[i], false)\r\n              break\r\n            }\r\n          }\r\n        } else {\r\n          this.META.wildcardEvents.delete(eventName)\r\n          this.removeListener(eventName, handlerFn)\r\n        }\r\n      })",
              "start": {
                "line": 70,
                "column": 6
              },
              "end": {
                "line": 100,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "handlerFn": {
              "type": "method",
              "label": "handlerFn",
              "description": "The handler function to remove from the event handlers.",
              "code": "@param {function} [handlerFn]\nThe handler function to remove from the event handlers.",
              "start": {
                "line": 70,
                "column": 6
              },
              "end": {
                "line": 100,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "arguments": {},
              "returnType": "void",
              "returnDescription": "void",
              "kind": null,
              "generator": false,
              "static": false,
              "computed": false,
              "async": false,
              "super": null,
              "override": false,
              "private": false
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "init",
          "computed": false,
          "super": "NGN.EventEmitter#setTTL",
          "override": false,
          "private": false
        },
        "deprecate": {
          "type": "method",
          "label": "deprecate",
          "description": "Provides a deprecation notice for the specified event.\nAutomatically emits the appropriate \"replacement\" event\nif a replacement event is configured. If no replacement\nevent is configured, the deprecation notice will be written\nto the console but no replacement event will be triggered.",
          "code": "deprecate: NGN.const((deprecatedEventName, replacementEventName) => {\r\n        const me = this\r\n\r\n        this.on(deprecatedEventName, function () {\r\n          NGN.WARN(`${deprecatedEventName} is deprecated. ` + (!replacementEventName ? '' : `Use ${replacementEventName} instead.`))\r\n\r\n          if (replacementEventName) {\r\n            let args = NGN.slice(arguments)\r\n\r\n            args.shift()\r\n            args.unshift(replacementEventName)\r\n\r\n            me.emit.apply(me, args)\r\n          }\r\n        })\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 114,
            "column": 6
          },
          "end": {
            "line": 129,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "deprecatedEventName": {
              "type": "argument",
              "label": "deprecatedEventName",
              "description": "The name of the deprecated event.",
              "code": "deprecate: NGN.const((deprecatedEventName, replacementEventName) => {\r\n        const me = this\r\n\r\n        this.on(deprecatedEventName, function () {\r\n          NGN.WARN(`${deprecatedEventName} is deprecated. ` + (!replacementEventName ? '' : `Use ${replacementEventName} instead.`))\r\n\r\n          if (replacementEventName) {\r\n            let args = NGN.slice(arguments)\r\n\r\n            args.shift()\r\n            args.unshift(replacementEventName)\r\n\r\n            me.emit.apply(me, args)\r\n          }\r\n        })\r\n      })",
              "start": {
                "line": 114,
                "column": 6
              },
              "end": {
                "line": 129,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "replacementEventName": {
              "type": "argument",
              "label": "replacementEventName",
              "description": "The name of the new event.",
              "code": "deprecate: NGN.const((deprecatedEventName, replacementEventName) => {\r\n        const me = this\r\n\r\n        this.on(deprecatedEventName, function () {\r\n          NGN.WARN(`${deprecatedEventName} is deprecated. ` + (!replacementEventName ? '' : `Use ${replacementEventName} instead.`))\r\n\r\n          if (replacementEventName) {\r\n            let args = NGN.slice(arguments)\r\n\r\n            args.shift()\r\n            args.unshift(replacementEventName)\r\n\r\n            me.emit.apply(me, args)\r\n          }\r\n        })\r\n      })",
              "start": {
                "line": 114,
                "column": 6
              },
              "end": {
                "line": 129,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "init",
          "computed": false,
          "super": "NGN.EventEmitter#deprecate",
          "override": false,
          "private": false
        },
        "pool": {
          "type": "method",
          "label": "pool",
          "description": "A helper command to create multiple related subscribers\nall at once. This is a convenience function.",
          "code": "pool: NGN.privateconst(function (prefix, group) {\r\n        if (typeof prefix !== 'string') {\r\n          group = prefix\r\n          prefix = ''\r\n        }\r\n\r\n        let pool = {}\r\n\r\n        for (let eventName in group) {\r\n          let topic = `${NGN.coalesce(prefix, '')}${eventName}`\r\n\r\n          if (NGN.isFn(group[eventName])) {\r\n            this.increaseMaxListeners()\r\n\r\n            pool[eventName] = this.on(topic, group[eventName])\r\n          } else if (typeof group[eventName] === 'object') {\r\n            this.pool(`${topic}.`, group[eventName])\r\n          } else {\r\n            NGN.WARN(`${topic} could not be pooled in the event emitter because it's value is not a function.`)\r\n          }\r\n        }\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 158,
            "column": 6
          },
          "end": {
            "line": 179,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "prefix": {
              "type": "argument",
              "label": "prefix",
              "description": null,
              "code": "prefix",
              "start": {
                "line": 158,
                "column": 39
              },
              "end": {
                "line": 158,
                "column": 45
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            },
            "group": {
              "type": "argument",
              "label": "group",
              "description": null,
              "code": "group",
              "start": {
                "line": 158,
                "column": 47
              },
              "end": {
                "line": 158,
                "column": 52
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "init",
          "computed": false,
          "super": "NGN.EventEmitter#pool",
          "override": false,
          "private": true
        },
        "attach": {
          "type": "method",
          "label": "attach",
          "description": "Attach a function to a topic. This can be used\nto forward events in response to asynchronous functions.\n\nFor example:\n\n```js\nmyAsyncDataFetch\n```\n\nThis is the same as:\n\n```js\nmyAsyncCall(function(data){\nNGN.BUS.emit('topicName', data)\n})\n```",
          "code": "attach: NGN.const(function (eventName, preventDefaultAction) {\r\n        preventDefaultAction = NGN.coalesce(preventDefaultAction, false)\r\n\r\n        return (e) => {\r\n          if (preventDefaultAction && !NGN.nodelike) {\r\n            e.preventDefault()\r\n          }\r\n\r\n          this.emit(eventName, ...arguments)\r\n        }\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 207,
            "column": 6
          },
          "end": {
            "line": 217,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "eventName": {
              "type": "argument",
              "label": "eventName",
              "description": "The name of the event to attach a handler method to.",
              "code": "attach: NGN.const(function (eventName, preventDefaultAction) {\r\n        preventDefaultAction = NGN.coalesce(preventDefaultAction, false)\r\n\r\n        return (e) => {\r\n          if (preventDefaultAction && !NGN.nodelike) {\r\n            e.preventDefault()\r\n          }\r\n\r\n          this.emit(eventName, ...arguments)\r\n        }\r\n      })",
              "start": {
                "line": 207,
                "column": 6
              },
              "end": {
                "line": 217,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "preventDefaultAction": {
              "type": "argument",
              "label": "preventDefaultAction",
              "description": "Setting this to `true` will execute a `event.preventDefault` before\nattaching the handler.",
              "code": "attach: NGN.const(function (eventName, preventDefaultAction) {\r\n        preventDefaultAction = NGN.coalesce(preventDefaultAction, false)\r\n\r\n        return (e) => {\r\n          if (preventDefaultAction && !NGN.nodelike) {\r\n            e.preventDefault()\r\n          }\r\n\r\n          this.emit(eventName, ...arguments)\r\n        }\r\n      })",
              "start": {
                "line": 207,
                "column": 6
              },
              "end": {
                "line": 217,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": "false",
              "datatype": "boolean",
              "required": false,
              "enum": [
                ""
              ]
            }
          },
          "returnType": "function",
          "returnDescription": "null Returns a function that will automatically be associated with an event.",
          "kind": "init",
          "computed": false,
          "super": "NGN.EventEmitter#attach",
          "override": false,
          "private": false
        },
        "increaseMaxListeners": {
          "type": "method",
          "label": "increaseMaxListeners",
          "description": "Increase the number of maximum listeners.",
          "code": "increaseMaxListeners: NGN.private((count = 1) => {\r\n        this.setMaxListeners(this.getMaxListeners() + count)\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 226,
            "column": 6
          },
          "end": {
            "line": 228,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "count": {
              "type": "argument",
              "label": "value ",
              "description": "The number of events the max listener account will be increased by.",
              "code": "count = 1",
              "start": {
                "line": 226,
                "column": 41
              },
              "end": {
                "line": 226,
                "column": 50
              },
              "flags": [],
              "authors": [],
              "default": " 1",
              "datatype": "number",
              "required": false,
              "enum": null
            },
            "value ": {
              "type": "argument",
              "label": "value ",
              "description": "The number of events the max listener account will be increased by.",
              "code": "increaseMaxListeners: NGN.private((count = 1) => {\r\n        this.setMaxListeners(this.getMaxListeners() + count)\r\n      })",
              "start": {
                "line": 226,
                "column": 6
              },
              "end": {
                "line": 228,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": " 1",
              "datatype": "number",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "init",
          "computed": false,
          "super": "NGN.EventEmitter#increaseMaxListeners",
          "override": false,
          "private": true
        },
        "decreaseMaxListeners": {
          "type": "method",
          "label": "decreaseMaxListeners",
          "description": "Decrease the number of maximum listeners.",
          "code": "decreaseMaxListeners: NGN.private((count = 1) => {\r\n        this.setMaxListeners(this.getMaxListeners() - count)\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 237,
            "column": 6
          },
          "end": {
            "line": 239,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "count": {
              "type": "argument",
              "label": "value ",
              "description": "The number of events the max listener account will be decreased by.",
              "code": "count = 1",
              "start": {
                "line": 237,
                "column": 41
              },
              "end": {
                "line": 237,
                "column": 50
              },
              "flags": [],
              "authors": [],
              "default": " 1",
              "datatype": "number",
              "required": false,
              "enum": null
            },
            "value ": {
              "type": "argument",
              "label": "value ",
              "description": "The number of events the max listener account will be decreased by.",
              "code": "decreaseMaxListeners: NGN.private((count = 1) => {\r\n        this.setMaxListeners(this.getMaxListeners() - count)\r\n      })",
              "start": {
                "line": 237,
                "column": 6
              },
              "end": {
                "line": 239,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": " 1",
              "datatype": "number",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "init",
          "computed": false,
          "super": "NGN.EventEmitter#decreaseMaxListeners",
          "override": false,
          "private": true
        },
        "forward": {
          "type": "method",
          "label": "forward",
          "description": "A special subscriber that fires one or more event in response to\nto an event. This is used to bubble events up/down an event chain.\n\nFor example:\n\n```js\nNGN.BUS.forward\n```\nWhen `sourceEvent` is published, the bind method triggers `someEvent` and\n`anotherEvent`, passing the payload object to `someEvent` and\n`anotherEvent` subscribers simultaneously.\n\nTo forward an event to another EventEmitter, see #relay.",
          "code": "forward: NGN.const(function (eventName, triggers, payload) {\r\n        triggers = NGN.forceArray(triggers)\r\n\r\n        let me = this\r\n        let listener = function () {\r\n          let args = NGN.slice(arguments)\r\n\r\n          if (payload) {\r\n            args.push(payload)\r\n          }\r\n\r\n          me.emit(triggers, ...args)\r\n        }\r\n\r\n        this.increaseMaxListeners()\r\n        this.on(eventName, listener)\r\n\r\n        // Provide handle back for removal of topic\r\n        return {\r\n          remove: () => {\r\n            this.decreaseMaxListeners()\r\n            this.off(eventName, listener)\r\n          }\r\n        }\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 265,
            "column": 6
          },
          "end": {
            "line": 289,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "eventName": {
              "type": "argument",
              "label": "eventName",
              "description": "The name of the event to listen for.",
              "code": "relayOnce: NGN.const(function (eventName, targetEmitter, prefix = null, postfix = null) {\r\n        let eventNameList = NGN.forceArray(eventName)\r\n\r\n        for (let i = 0; i < eventNameList.length; i++) {\r\n          let eventName = eventNameList[i]\r\n\r\n          this.once(eventName, function () {\r\n            if (NGN.typeof(this.event) === 'symbol') {\r\n              if (prefix !== null || postfix !== null) {\r\n                NGN.INFO('Cannot relay a symbol-based event with a prefix/postfix.')\r\n              }\r\n\r\n              targetEmitter.emit(...arguments)\r\n            } else {\r\n              targetEmitter.emit(`${NGN.coalesce(prefix, '')}${this.event}${NGN.coalesce(postfix, '')}`, ...arguments)\r\n            }\r\n          })\r\n        }\r\n      })",
              "start": {
                "line": 361,
                "column": 6
              },
              "end": {
                "line": 379,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "triggers": {
              "type": "argument",
              "label": "triggeredEvent",
              "description": "An event or array of events to fire in response to the sourceEvent.",
              "code": "triggers",
              "start": {
                "line": 265,
                "column": 46
              },
              "end": {
                "line": 265,
                "column": 54
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string|array",
              "required": true,
              "enum": null
            },
            "payload": {
              "type": "argument",
              "label": "data",
              "description": "Optional data to pass to each bound event handler.",
              "code": "payload",
              "start": {
                "line": 265,
                "column": 56
              },
              "end": {
                "line": 265,
                "column": 63
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "any",
              "required": true,
              "enum": null
            },
            "sourceEvent": {
              "type": "argument",
              "label": "sourceEvent",
              "description": "The event to subscribe to.",
              "code": "forward: NGN.const(function (eventName, triggers, payload) {\r\n        triggers = NGN.forceArray(triggers)\r\n\r\n        let me = this\r\n        let listener = function () {\r\n          let args = NGN.slice(arguments)\r\n\r\n          if (payload) {\r\n            args.push(payload)\r\n          }\r\n\r\n          me.emit(triggers, ...args)\r\n        }\r\n\r\n        this.increaseMaxListeners()\r\n        this.on(eventName, listener)\r\n\r\n        // Provide handle back for removal of topic\r\n        return {\r\n          remove: () => {\r\n            this.decreaseMaxListeners()\r\n            this.off(eventName, listener)\r\n          }\r\n        }\r\n      })",
              "start": {
                "line": 265,
                "column": 6
              },
              "end": {
                "line": 289,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "triggeredEvent": {
              "type": "argument",
              "label": "triggeredEvent",
              "description": "An event or array of events to fire in response to the sourceEvent.",
              "code": "forward: NGN.const(function (eventName, triggers, payload) {\r\n        triggers = NGN.forceArray(triggers)\r\n\r\n        let me = this\r\n        let listener = function () {\r\n          let args = NGN.slice(arguments)\r\n\r\n          if (payload) {\r\n            args.push(payload)\r\n          }\r\n\r\n          me.emit(triggers, ...args)\r\n        }\r\n\r\n        this.increaseMaxListeners()\r\n        this.on(eventName, listener)\r\n\r\n        // Provide handle back for removal of topic\r\n        return {\r\n          remove: () => {\r\n            this.decreaseMaxListeners()\r\n            this.off(eventName, listener)\r\n          }\r\n        }\r\n      })",
              "start": {
                "line": 265,
                "column": 6
              },
              "end": {
                "line": 289,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string|array",
              "required": true,
              "enum": null
            },
            "data": {
              "type": "argument",
              "label": "data",
              "description": "Optional data to pass to each bound event handler.",
              "code": "forward: NGN.const(function (eventName, triggers, payload) {\r\n        triggers = NGN.forceArray(triggers)\r\n\r\n        let me = this\r\n        let listener = function () {\r\n          let args = NGN.slice(arguments)\r\n\r\n          if (payload) {\r\n            args.push(payload)\r\n          }\r\n\r\n          me.emit(triggers, ...args)\r\n        }\r\n\r\n        this.increaseMaxListeners()\r\n        this.on(eventName, listener)\r\n\r\n        // Provide handle back for removal of topic\r\n        return {\r\n          remove: () => {\r\n            this.decreaseMaxListeners()\r\n            this.off(eventName, listener)\r\n          }\r\n        }\r\n      })",
              "start": {
                "line": 265,
                "column": 6
              },
              "end": {
                "line": 289,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "any",
              "required": true,
              "enum": null
            },
            "targetEmitter": {
              "type": "argument",
              "label": "targetEmitter",
              "description": "The emitter to relay the event to.",
              "code": "relayOnce: NGN.const(function (eventName, targetEmitter, prefix = null, postfix = null) {\r\n        let eventNameList = NGN.forceArray(eventName)\r\n\r\n        for (let i = 0; i < eventNameList.length; i++) {\r\n          let eventName = eventNameList[i]\r\n\r\n          this.once(eventName, function () {\r\n            if (NGN.typeof(this.event) === 'symbol') {\r\n              if (prefix !== null || postfix !== null) {\r\n                NGN.INFO('Cannot relay a symbol-based event with a prefix/postfix.')\r\n              }\r\n\r\n              targetEmitter.emit(...arguments)\r\n            } else {\r\n              targetEmitter.emit(`${NGN.coalesce(prefix, '')}${this.event}${NGN.coalesce(postfix, '')}`, ...arguments)\r\n            }\r\n          })\r\n        }\r\n      })",
              "start": {
                "line": 361,
                "column": 6
              },
              "end": {
                "line": 379,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "ngn.eventemitter",
              "required": true,
              "enum": null
            },
            "prefix": {
              "type": "argument",
              "label": "prefix",
              "description": "An optional prefix to prepend to the eventName.",
              "code": "relayOnce: NGN.const(function (eventName, targetEmitter, prefix = null, postfix = null) {\r\n        let eventNameList = NGN.forceArray(eventName)\r\n\r\n        for (let i = 0; i < eventNameList.length; i++) {\r\n          let eventName = eventNameList[i]\r\n\r\n          this.once(eventName, function () {\r\n            if (NGN.typeof(this.event) === 'symbol') {\r\n              if (prefix !== null || postfix !== null) {\r\n                NGN.INFO('Cannot relay a symbol-based event with a prefix/postfix.')\r\n              }\r\n\r\n              targetEmitter.emit(...arguments)\r\n            } else {\r\n              targetEmitter.emit(`${NGN.coalesce(prefix, '')}${this.event}${NGN.coalesce(postfix, '')}`, ...arguments)\r\n            }\r\n          })\r\n        }\r\n      })",
              "start": {
                "line": 361,
                "column": 6
              },
              "end": {
                "line": 379,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": false,
              "enum": null
            },
            "postfix": {
              "type": "argument",
              "label": "postfix",
              "description": "An optional postfix to append to the eventName.",
              "code": "relayOnce: NGN.const(function (eventName, targetEmitter, prefix = null, postfix = null) {\r\n        let eventNameList = NGN.forceArray(eventName)\r\n\r\n        for (let i = 0; i < eventNameList.length; i++) {\r\n          let eventName = eventNameList[i]\r\n\r\n          this.once(eventName, function () {\r\n            if (NGN.typeof(this.event) === 'symbol') {\r\n              if (prefix !== null || postfix !== null) {\r\n                NGN.INFO('Cannot relay a symbol-based event with a prefix/postfix.')\r\n              }\r\n\r\n              targetEmitter.emit(...arguments)\r\n            } else {\r\n              targetEmitter.emit(`${NGN.coalesce(prefix, '')}${this.event}${NGN.coalesce(postfix, '')}`, ...arguments)\r\n            }\r\n          })\r\n        }\r\n      })",
              "start": {
                "line": 361,
                "column": 6
              },
              "end": {
                "line": 379,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": false,
              "enum": null
            }
          },
          "returnType": "Object",
          "returnDescription": "null Returns an object with a single `remove` method.",
          "kind": "init",
          "computed": false,
          "super": "NGN.EventEmitter#forward",
          "override": false,
          "private": false
        },
        "delayEmit": {
          "type": "method",
          "label": "delayEmit",
          "description": "This method waits for the specified duration, then publishes an\nevent once. This will publish the event only once at the end of the\nwait period, even if the event is triggered multiple times. This can\nbe useful when working with many events triggered in rapid succession.\n\nFor example, an NGN.DATA.Model representing a person may be used to\ntrack a user profile. The NGN.DATA.Model fires an event called `field.update`\nevery time a data field is modified. In many cases, a user may update\nmultiple fields of their profile using a form with a \"Save\" button.\nInstead of generating a new \"save\" \noperation for each field, the publishOnce event can wait until all\nchanges are made before running the save operation.\n\n```js\n// Create a data model representing a person.\nvar Person = new NGN.DATA.Model({....})\n\n// Create a new person record for a user.\nvar user = new Person()\n\n// When the user is modified, save the data.\nuser.on('field.update', function () {\n// Wait 300 milliseconds to trigger the save event\nNGN.BUS.delayEmit('user.save', 300)\n})\n\n// Save the user using an API\nNGN.BUS.on('user.save', function () {\nNGN.NET.put({\nurl: 'https://my.api.com/user',\njson: user.data\n})\n})\n\n// Modify the record attributes (which are blank by default)\nuser.firstname = 'John'\nuser.lastname = 'Doe'\nuser.age = 42\n\n// Make another update 1 second later\nsetTimeout(function () {\nuser.age = 32\n}, 1000)\n```\n\nThe code above sets up a model and record. Then it listens to the record\nfor field updates. Each time it recognizes an update, it queues the \"save\"\nevent. When the queue matures, it fires the `user.save` event.\n\nThe first `field.update` is triggered when `user.firstname = 'John'` runs.\nThis initiates a queue for `user.save`, set to mature in 300 millisenconds.\nNext, a `field.update` is triggered when `user.lastname = 'Doe'` runs.\nThis time, since the queue for `user.save` is already initiated, notthing\nnew happens. Finally, a `field.update` is triggered when `user.age = 42`\nruns. Just like the last one, nothing happens since the `user.save` queue\nis already active.\n\nThe `user.save` queue \"matures\" after 300 milliseconds. This means after\n300 milliseconds have elapsed, the `user.save` event is triggered. In this\nexample, it means the `NGN.NET.put()` code will be executed. As a result,\nall 3 change (firstname, lastname, and age) will be complete before the\nAPI request is executed. The queue is cleared immediately.\n\nThe final update occurs 1 second later (700 milliseconds after the queue\nmatures). This triggers a `field.update`, but since the queue is no\nlonger active, it is re-initiated. 300 milliseconds later, the `user.save`\nevent is fired again, thus executing the API request again (1.3 seconds\nin total).",
          "code": "delayEmit: NGN.const(function (eventName, delay) {\r\n        if (!this.META.queued.hasOwnProperty(eventName)) {\r\n          let args = NGN.slice(arguments)\r\n          args.splice(1, 1)\r\n\r\n          this.META.queued[eventName] = setTimeout(() => {\r\n            delete this.META.queued[eventName]\r\n            this.emit(...args)\r\n          }, delay)\r\n        }\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 458,
            "column": 6
          },
          "end": {
            "line": 468,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "eventName": {
              "type": "argument",
              "label": "eventName",
              "description": "The event/topic to publish/emit.",
              "code": "delayEmit: NGN.const(function (eventName, delay) {\r\n        if (!this.META.queued.hasOwnProperty(eventName)) {\r\n          let args = NGN.slice(arguments)\r\n          args.splice(1, 1)\r\n\r\n          this.META.queued[eventName] = setTimeout(() => {\r\n            delete this.META.queued[eventName]\r\n            this.emit(...args)\r\n          }, delay)\r\n        }\r\n      })",
              "start": {
                "line": 458,
                "column": 6
              },
              "end": {
                "line": 468,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "delay": {
              "type": "argument",
              "label": "delay",
              "description": "The number of milliseconds to wait before firing the event.",
              "code": "delayEmit: NGN.const(function (eventName, delay) {\r\n        if (!this.META.queued.hasOwnProperty(eventName)) {\r\n          let args = NGN.slice(arguments)\r\n          args.splice(1, 1)\r\n\r\n          this.META.queued[eventName] = setTimeout(() => {\r\n            delete this.META.queued[eventName]\r\n            this.emit(...args)\r\n          }, delay)\r\n        }\r\n      })",
              "start": {
                "line": 458,
                "column": 6
              },
              "end": {
                "line": 468,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": "300",
              "datatype": "number",
              "required": false,
              "enum": null
            },
            "payload": {
              "type": "argument",
              "label": "payload",
              "description": "An optional payload, such as data to be passed to an event handler.",
              "code": "delayEmit: NGN.const(function (eventName, delay) {\r\n        if (!this.META.queued.hasOwnProperty(eventName)) {\r\n          let args = NGN.slice(arguments)\r\n          args.splice(1, 1)\r\n\r\n          this.META.queued[eventName] = setTimeout(() => {\r\n            delete this.META.queued[eventName]\r\n            this.emit(...args)\r\n          }, delay)\r\n        }\r\n      })",
              "start": {
                "line": 458,
                "column": 6
              },
              "end": {
                "line": 468,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "any",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "init",
          "computed": false,
          "super": "NGN.EventEmitter#delayEmit",
          "override": false,
          "private": false
        },
        "getInternalCollectionId": {
          "type": "method",
          "label": "getInternalCollectionId",
          "description": "Returns a unique ID for special collections.",
          "code": "getInternalCollectionId: NGN.privateconst(function (collection) {\r\n        return Symbol(collection)\r\n        // let time = (new Date()).getTime().toString()\r\n        // let rand = Math.random().toString()\r\n        // let key = Object.keys(collection).length + 1\r\n        //\r\n        // while (collection.hasOwnProperty(`${key.toString()}${time}${rand}`)) {\r\n        //   key++\r\n        // }\r\n        //\r\n        // return `${key.toString()}${time}${rand}`\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 477,
            "column": 6
          },
          "end": {
            "line": 488,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "collection": {
              "type": "argument",
              "label": "collection",
              "description": "The collection to generate an ID for.",
              "code": "getInternalCollectionId: NGN.privateconst(function (collection) {\r\n        return Symbol(collection)\r\n        // let time = (new Date()).getTime().toString()\r\n        // let rand = Math.random().toString()\r\n        // let key = Object.keys(collection).length + 1\r\n        //\r\n        // while (collection.hasOwnProperty(`${key.toString()}${time}${rand}`)) {\r\n        //   key++\r\n        // }\r\n        //\r\n        // return `${key.toString()}${time}${rand}`\r\n      })",
              "start": {
                "line": 477,
                "column": 6
              },
              "end": {
                "line": 488,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "object",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "init",
          "computed": false,
          "super": "NGN.EventEmitter#getInternalCollectionId",
          "override": false,
          "private": true
        },
        "handleCollectionTrigger": {
          "type": "method",
          "label": "handleCollectionTrigger",
          "description": "A method to manage #chain event handlers.",
          "code": "handleCollectionTrigger: NGN.privateconst(function (eventName, key) {\r\n        let me = this\r\n\r\n        return function () {\r\n          // Use setTimeout to simulate nextTick\r\n          setTimeout(() => {\r\n            let cq = me.META.collectionQueue\r\n\r\n            if (cq[key]) {\r\n              cq[key].remainingqueue.delete(eventName)\r\n\r\n              if (cq[key].remainingqueue.size === 0) {\r\n                cq[key].remainingqueue = cq[key].masterqueue\r\n\r\n                if (NGN.isFn(cq[key].eventName)) {\r\n                  cq[key].eventName(cq[key].payload)\r\n                } else {\r\n                  me.emit(cq[key].eventName, cq[key].payload)\r\n                }\r\n              }\r\n            }\r\n          }, 0)\r\n        }\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 495,
            "column": 6
          },
          "end": {
            "line": 518,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "eventName": {
              "type": "argument",
              "label": "eventName",
              "description": null,
              "code": "eventName",
              "start": {
                "line": 495,
                "column": 58
              },
              "end": {
                "line": 495,
                "column": 67
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            },
            "key": {
              "type": "argument",
              "label": "key",
              "description": null,
              "code": "key",
              "start": {
                "line": 495,
                "column": 69
              },
              "end": {
                "line": 495,
                "column": 72
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "init",
          "computed": false,
          "super": "NGN.EventEmitter#handleCollectionTrigger",
          "override": false,
          "private": true
        },
        "funnel": {
          "type": "method",
          "label": "funnel",
          "description": "Emit an event after a collection of unique events have all fired.\nThis can be useful in situations where multiple asynchronous actions\nmust complete before another begins. For example, blending 3\nremote data sources from different API's into a single resultset\ncan be achieved with this.\n\n**Example**\n```js\nlet collection = NGN.BUS.funnel\n\nlet allData = []\n\n// When all of the downloads are done, log them.\nNGN.BUS.on('make.results', () => {\nconsole.log(allData)\n})\n\n// Download the first set of data asynchronously\nNGN.NET.json('http:/download1.com/data.json', (data) => {\nallData.push(data)\nNGN.BUS.emit('download1done')\n})\n\n// Download the second set of data asynchronously\nNGN.NET.json('http:/download2.com/data.json', (data) => {\nallData.push(data)\nNGN.BUS.emit('download2done')\n})\n\n// Download the third set of data asynchronously\nNGN.NET.json('http:/download3.com/data.json', (data) => {\nallData.push(data)\nNGN.BUS.emit('download3done')\n})\n\n// The handler can be removed with the special method:\ncollection.remove()\n```",
          "code": "funnel: NGN.const((eventCollection, triggerEventName, payload = null) => {\r\n        if (NGN.typeof(eventCollection) !== 'array') {\r\n          throw new Error(`NGN.BUS.funnel expected an array of events, but received a(n) ${NGN.typeof(eventCollection)}`)\r\n        }\r\n\r\n        let collection = new Set(eventCollection)\r\n        let key = this.getInternalCollectionId(this.META.collectionQueue)\r\n\r\n        this.META.collectionQueue[key] = {}\r\n\r\n        Object.defineProperties(this.META.collectionQueue[key], {\r\n          masterqueue: NGN.const(new Set(eventCollection)),\r\n          remainingqueue: NGN.private(collection),\r\n          eventName: NGN.const(triggerEventName),\r\n          remove: NGN.const(() => {\r\n            this.META.collectionQueue[key].masterqueue.forEach(event => {\r\n              this.off(event, this.handleCollectionTrigger(event, key))\r\n            })\r\n\r\n            this.decreaseMaxListeners(this.META.collectionQueue[key].masterqueue.size)\r\n\r\n            delete this.META.collectionQueue[key]\r\n          }),\r\n          payload: NGN.const(payload)\r\n        })\r\n\r\n        this.increaseMaxListeners(collection.size)\r\n\r\n        collection.forEach(event => {\r\n          this.on(event, this.handleCollectionTrigger(event, key))\r\n        })\r\n\r\n        return this.META.collectionQueue[key]\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 581,
            "column": 6
          },
          "end": {
            "line": 614,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "triggerEventName": {
              "type": "argument",
              "label": "payload",
              "description": "An optional payload delivered to the #triggerEventName.",
              "code": "triggerEventName",
              "start": {
                "line": 581,
                "column": 25
              },
              "end": {
                "line": 581,
                "column": 40
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "any",
              "required": false,
              "enum": null
            },
            "payload": {
              "type": "argument",
              "label": "payload",
              "description": "An optional payload delivered to the #triggerEventName.",
              "code": "funnel: NGN.const((eventCollection, triggerEventName, payload = null) => {\r\n        if (NGN.typeof(eventCollection) !== 'array') {\r\n          throw new Error(`NGN.BUS.funnel expected an array of events, but received a(n) ${NGN.typeof(eventCollection)}`)\r\n        }\r\n\r\n        let collection = new Set(eventCollection)\r\n        let key = this.getInternalCollectionId(this.META.collectionQueue)\r\n\r\n        this.META.collectionQueue[key] = {}\r\n\r\n        Object.defineProperties(this.META.collectionQueue[key], {\r\n          masterqueue: NGN.const(new Set(eventCollection)),\r\n          remainingqueue: NGN.private(collection),\r\n          eventName: NGN.const(triggerEventName),\r\n          remove: NGN.const(() => {\r\n            this.META.collectionQueue[key].masterqueue.forEach(event => {\r\n              this.off(event, this.handleCollectionTrigger(event, key))\r\n            })\r\n\r\n            this.decreaseMaxListeners(this.META.collectionQueue[key].masterqueue.size)\r\n\r\n            delete this.META.collectionQueue[key]\r\n          }),\r\n          payload: NGN.const(payload)\r\n        })\r\n\r\n        this.increaseMaxListeners(collection.size)\r\n\r\n        collection.forEach(event => {\r\n          this.on(event, this.handleCollectionTrigger(event, key))\r\n        })\r\n\r\n        return this.META.collectionQueue[key]\r\n      })",
              "start": {
                "line": 581,
                "column": 6
              },
              "end": {
                "line": 614,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "any",
              "required": false,
              "enum": null
            },
            "eventCollection": {
              "type": "argument",
              "label": "eventCollection",
              "description": "An array of events. Once _all_ of these events have fired,\nthe triggerEventName will be fired.",
              "code": "funnel: NGN.const((eventCollection, triggerEventName, payload = null) => {\r\n        if (NGN.typeof(eventCollection) !== 'array') {\r\n          throw new Error(`NGN.BUS.funnel expected an array of events, but received a(n) ${NGN.typeof(eventCollection)}`)\r\n        }\r\n\r\n        let collection = new Set(eventCollection)\r\n        let key = this.getInternalCollectionId(this.META.collectionQueue)\r\n\r\n        this.META.collectionQueue[key] = {}\r\n\r\n        Object.defineProperties(this.META.collectionQueue[key], {\r\n          masterqueue: NGN.const(new Set(eventCollection)),\r\n          remainingqueue: NGN.private(collection),\r\n          eventName: NGN.const(triggerEventName),\r\n          remove: NGN.const(() => {\r\n            this.META.collectionQueue[key].masterqueue.forEach(event => {\r\n              this.off(event, this.handleCollectionTrigger(event, key))\r\n            })\r\n\r\n            this.decreaseMaxListeners(this.META.collectionQueue[key].masterqueue.size)\r\n\r\n            delete this.META.collectionQueue[key]\r\n          }),\r\n          payload: NGN.const(payload)\r\n        })\r\n\r\n        this.increaseMaxListeners(collection.size)\r\n\r\n        collection.forEach(event => {\r\n          this.on(event, this.handleCollectionTrigger(event, key))\r\n        })\r\n\r\n        return this.META.collectionQueue[key]\r\n      })",
              "start": {
                "line": 581,
                "column": 6
              },
              "end": {
                "line": 614,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "array",
              "required": true,
              "enum": null
            }
          },
          "returnType": "object",
          "returnDescription": "collection Provides the key/value configuration of the collection.\n```js\n{\nmasterqueue: ['event1', 'event2', 'etc'], // The original event array \nremainingqueue: [...], // The events the BUS is still waiting for before firing the trigger event.\neventName: 'triggeredEventName', // Name of the event triggered after the remaining elements are flushed.\npayload: 'anything', // OPTIONAL\nremove: [Function]\n}\n```",
          "kind": "init",
          "computed": false,
          "super": "NGN.EventEmitter#funnel",
          "override": false,
          "private": false
        },
        "funnelOnce": {
          "type": "method",
          "label": "funnelOnce",
          "description": "This provides the same functionality as #funnel, but\nremoves the listener after the resultant event has fired.\nSee #funnel for detailed usage.",
          "code": "funnelOnce: NGN.const((eventCollection, triggerEventName, payload = null) => {\r\n        let funnelClosureEvent = `::NGNFUNNEL::${(new Date()).getTime()}::${triggerEventName}`\r\n        // let funnelClosureEvent = Symbol(triggerEventName)\r\n        let collection = this.funnel(eventCollection, funnelClosureEvent, payload)\r\n\r\n        this.increaseMaxListeners()\r\n        this.once(funnelClosureEvent, () => {\r\n          collection.remove()\r\n          collection = null\r\n          this.emit(triggerEventName, payload)\r\n        })\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 631,
            "column": 6
          },
          "end": {
            "line": 642,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "eventCollection": {
              "type": "argument",
              "label": "eventCollection",
              "description": "An array of events. Once _all_ of these events have fired,\nthe triggerEventName will be fired.",
              "code": "funnelOnce: NGN.const((eventCollection, triggerEventName, payload = null) => {\r\n        let funnelClosureEvent = `::NGNFUNNEL::${(new Date()).getTime()}::${triggerEventName}`\r\n        // let funnelClosureEvent = Symbol(triggerEventName)\r\n        let collection = this.funnel(eventCollection, funnelClosureEvent, payload)\r\n\r\n        this.increaseMaxListeners()\r\n        this.once(funnelClosureEvent, () => {\r\n          collection.remove()\r\n          collection = null\r\n          this.emit(triggerEventName, payload)\r\n        })\r\n      })",
              "start": {
                "line": 631,
                "column": 6
              },
              "end": {
                "line": 642,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "array",
              "required": true,
              "enum": null
            },
            "triggerEventName": {
              "type": "argument",
              "label": "triggerEventName",
              "description": "The name of the event triggered after the collection has completed.",
              "code": "funnelOnce: NGN.const((eventCollection, triggerEventName, payload = null) => {\r\n        let funnelClosureEvent = `::NGNFUNNEL::${(new Date()).getTime()}::${triggerEventName}`\r\n        // let funnelClosureEvent = Symbol(triggerEventName)\r\n        let collection = this.funnel(eventCollection, funnelClosureEvent, payload)\r\n\r\n        this.increaseMaxListeners()\r\n        this.once(funnelClosureEvent, () => {\r\n          collection.remove()\r\n          collection = null\r\n          this.emit(triggerEventName, payload)\r\n        })\r\n      })",
              "start": {
                "line": 631,
                "column": 6
              },
              "end": {
                "line": 642,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "payload": {
              "type": "argument",
              "label": "payload",
              "description": "An optional payload delivered to the #triggerEventName.",
              "code": "funnelOnce: NGN.const((eventCollection, triggerEventName, payload = null) => {\r\n        let funnelClosureEvent = `::NGNFUNNEL::${(new Date()).getTime()}::${triggerEventName}`\r\n        // let funnelClosureEvent = Symbol(triggerEventName)\r\n        let collection = this.funnel(eventCollection, funnelClosureEvent, payload)\r\n\r\n        this.increaseMaxListeners()\r\n        this.once(funnelClosureEvent, () => {\r\n          collection.remove()\r\n          collection = null\r\n          this.emit(triggerEventName, payload)\r\n        })\r\n      })",
              "start": {
                "line": 631,
                "column": 6
              },
              "end": {
                "line": 642,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "any",
              "required": false,
              "enum": null
            }
          },
          "returnType": "object",
          "returnDescription": "collection Provides the key/value configuration of the collection.",
          "kind": "init",
          "computed": false,
          "super": "NGN.EventEmitter#funnelOnce",
          "override": false,
          "private": false
        },
        "threshold": {
          "type": "method",
          "label": "threshold",
          "description": "After an event is fired a predetermined number of times ,\ntrigger another event or function.\n\nFor example:\n\n```js\nNGN.BUS.threshold('push.my.button', 3, 'annoyed')\n\nNGN.BUS.on('annoyed', function () {\nconsole.log('We apologize for the slow response, but excessive clicking will not speed up the process.')\n})\n\ndocument.getElementById('#myButton').addEventListener('click', NGN.BUS.attach('push.my.button'))\n```\n\nOnce the threshold is exceeded, the final event will be triggered and\nthe threshold will be reset. Using the example above, this means\nclicking 3 times on `#myButton` would trigger the `annoyed` event ONCE,\n6 times triggers `annoyed` TWICE, 9 times triggers `annoyed` THREE times, etc.",
          "code": "threshold: NGN.const(function (thresholdEventName, limit, finalEventName, payload = null) {\r\n        if (typeof thresholdEventName !== 'string') {\r\n          throw new Error('The threshold event name must be a string (received ' + (typeof thresholdEventName) + ')')\r\n        }\r\n\r\n        // let key = `${this.getInternalCollectionId(this.META.thresholdQueue)}${limit.toString()}`\r\n        let key = this.getInternalCollectionId(this.META.thresholdQueue)\r\n\r\n        this.META.thresholdQueue[key] = {}\r\n\r\n        Object.defineProperties(this.META.thresholdQueue[key], {\r\n          key: NGN.const(key),\r\n          eventName: NGN.const(thresholdEventName),\r\n          limit: NGN.const(limit),\r\n          count: NGN.private(0),\r\n          finalEventName: NGN.const(finalEventName),\r\n          remove: NGN.const(() => {\r\n            let event = this.META.thresholdQueue[key].eventName\r\n\r\n            delete this.META.thresholdQueue[key]\r\n\r\n            this.decreaseMaxListeners()\r\n            this.off(event, this.handleThresholdTrigger(key))\r\n          }),\r\n          payload: NGN.const(payload)\r\n        })\r\n\r\n        this.increaseMaxListeners()\r\n        this.on(thresholdEventName, this.handleThresholdTrigger(key))\r\n\r\n        return this.META.thresholdQueue[key]\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 681,
            "column": 6
          },
          "end": {
            "line": 712,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "thresholdEventName": {
              "type": "argument",
              "label": "thresholdEventName",
              "description": "The name of the event to count.",
              "code": "threshold: NGN.const(function (thresholdEventName, limit, finalEventName, payload = null) {\r\n        if (typeof thresholdEventName !== 'string') {\r\n          throw new Error('The threshold event name must be a string (received ' + (typeof thresholdEventName) + ')')\r\n        }\r\n\r\n        // let key = `${this.getInternalCollectionId(this.META.thresholdQueue)}${limit.toString()}`\r\n        let key = this.getInternalCollectionId(this.META.thresholdQueue)\r\n\r\n        this.META.thresholdQueue[key] = {}\r\n\r\n        Object.defineProperties(this.META.thresholdQueue[key], {\r\n          key: NGN.const(key),\r\n          eventName: NGN.const(thresholdEventName),\r\n          limit: NGN.const(limit),\r\n          count: NGN.private(0),\r\n          finalEventName: NGN.const(finalEventName),\r\n          remove: NGN.const(() => {\r\n            let event = this.META.thresholdQueue[key].eventName\r\n\r\n            delete this.META.thresholdQueue[key]\r\n\r\n            this.decreaseMaxListeners()\r\n            this.off(event, this.handleThresholdTrigger(key))\r\n          }),\r\n          payload: NGN.const(payload)\r\n        })\r\n\r\n        this.increaseMaxListeners()\r\n        this.on(thresholdEventName, this.handleThresholdTrigger(key))\r\n\r\n        return this.META.thresholdQueue[key]\r\n      })",
              "start": {
                "line": 681,
                "column": 6
              },
              "end": {
                "line": 712,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "finalEventName": {
              "type": "argument",
              "label": "payload",
              "description": "An optional payload to send to the finalEvent handler.",
              "code": "finalEventName",
              "start": {
                "line": 681,
                "column": 57
              },
              "end": {
                "line": 681,
                "column": 62
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "any",
              "required": false,
              "enum": [
                "s"
              ]
            },
            "payload": {
              "type": "argument",
              "label": "payload",
              "description": "An optional payload to send to the finalEvent handler.",
              "code": "threshold: NGN.const(function (thresholdEventName, limit, finalEventName, payload = null) {\r\n        if (typeof thresholdEventName !== 'string') {\r\n          throw new Error('The threshold event name must be a string (received ' + (typeof thresholdEventName) + ')')\r\n        }\r\n\r\n        // let key = `${this.getInternalCollectionId(this.META.thresholdQueue)}${limit.toString()}`\r\n        let key = this.getInternalCollectionId(this.META.thresholdQueue)\r\n\r\n        this.META.thresholdQueue[key] = {}\r\n\r\n        Object.defineProperties(this.META.thresholdQueue[key], {\r\n          key: NGN.const(key),\r\n          eventName: NGN.const(thresholdEventName),\r\n          limit: NGN.const(limit),\r\n          count: NGN.private(0),\r\n          finalEventName: NGN.const(finalEventName),\r\n          remove: NGN.const(() => {\r\n            let event = this.META.thresholdQueue[key].eventName\r\n\r\n            delete this.META.thresholdQueue[key]\r\n\r\n            this.decreaseMaxListeners()\r\n            this.off(event, this.handleThresholdTrigger(key))\r\n          }),\r\n          payload: NGN.const(payload)\r\n        })\r\n\r\n        this.increaseMaxListeners()\r\n        this.on(thresholdEventName, this.handleThresholdTrigger(key))\r\n\r\n        return this.META.thresholdQueue[key]\r\n      })",
              "start": {
                "line": 681,
                "column": 6
              },
              "end": {
                "line": 712,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "any",
              "required": false,
              "enum": [
                "s"
              ]
            },
            "limit": {
              "type": "argument",
              "label": "limit",
              "description": "The number of occurrances allowed until the final event is triggered.\nThe event will be triggered at the threshold. For example, if the limit\nis `3`, the finalEvent will be triggered the 3rd time thresholdEventName is\nfired.",
              "code": "threshold: NGN.const(function (thresholdEventName, limit, finalEventName, payload = null) {\r\n        if (typeof thresholdEventName !== 'string') {\r\n          throw new Error('The threshold event name must be a string (received ' + (typeof thresholdEventName) + ')')\r\n        }\r\n\r\n        // let key = `${this.getInternalCollectionId(this.META.thresholdQueue)}${limit.toString()}`\r\n        let key = this.getInternalCollectionId(this.META.thresholdQueue)\r\n\r\n        this.META.thresholdQueue[key] = {}\r\n\r\n        Object.defineProperties(this.META.thresholdQueue[key], {\r\n          key: NGN.const(key),\r\n          eventName: NGN.const(thresholdEventName),\r\n          limit: NGN.const(limit),\r\n          count: NGN.private(0),\r\n          finalEventName: NGN.const(finalEventName),\r\n          remove: NGN.const(() => {\r\n            let event = this.META.thresholdQueue[key].eventName\r\n\r\n            delete this.META.thresholdQueue[key]\r\n\r\n            this.decreaseMaxListeners()\r\n            this.off(event, this.handleThresholdTrigger(key))\r\n          }),\r\n          payload: NGN.const(payload)\r\n        })\r\n\r\n        this.increaseMaxListeners()\r\n        this.on(thresholdEventName, this.handleThresholdTrigger(key))\r\n\r\n        return this.META.thresholdQueue[key]\r\n      })",
              "start": {
                "line": 681,
                "column": 6
              },
              "end": {
                "line": 712,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "number",
              "required": true,
              "enum": null
            }
          },
          "returnType": "object",
          "returnDescription": "null Returns an object that can be used to remove the threshold.",
          "kind": "init",
          "computed": false,
          "super": "NGN.EventEmitter#threshold",
          "override": false,
          "private": false
        },
        "handleThresholdTrigger": {
          "type": "method",
          "label": "handleThresholdTrigger",
          "description": "A method to manage #threshold event handlers.",
          "code": "handleThresholdTrigger: NGN.const(function (key) {\r\n        let me = this\r\n        return function () {\r\n          // Use setTimeout to simulate nextTick\r\n          setTimeout(() => {\r\n            if (me.META.thresholdQueue.hasOwnProperty(key)) {\r\n              me.META.thresholdQueue[key].count++\r\n              if (me.META.thresholdQueue[key].count === me.META.thresholdQueue[key].limit) {\r\n                if (NGN.isFn(me.META.thresholdQueue[key].finalEventName)) {\r\n                  me.META.thresholdQueue[key].finalEventName(me.META.thresholdQueue[key].payload)\r\n                } else {\r\n                  me.emit(me.META.thresholdQueue[key].finalEventName, me.META.thresholdQueue[key].payload)\r\n                }\r\n\r\n                // This if statement is required in case the event is removed\r\n                // during the reset process.\r\n                if (me.META.thresholdQueue.hasOwnProperty(key)) {\r\n                  me.META.thresholdQueue[key].count = 0\r\n                }\r\n              }\r\n            }\r\n          }, 0)\r\n        }\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 730,
            "column": 6
          },
          "end": {
            "line": 753,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "key": {
              "type": "argument",
              "label": "key",
              "description": null,
              "code": "key",
              "start": {
                "line": 730,
                "column": 50
              },
              "end": {
                "line": 730,
                "column": 53
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            },
            "eventName": {
              "type": "argument",
              "label": "eventName",
              "description": "The name of the event being scoped.",
              "code": "applyScope: NGN.privateconst((args) => {\r\n        if (NGN.nodelike && args.length > 1) {\r\n          if (args[args.length - 1].listener) {\r\n            args[args.length - 1].listener = this.wrapEventHandlerWithScope(\r\n              args[0],\r\n              args[args.length - 1].listener\r\n            )\r\n          } else {\r\n            args[args.length - 1] = this.wrapEventHandlerWithScope(\r\n              args[0],\r\n              args[args.length - 1]\r\n            )\r\n          }\r\n        }\r\n      })",
              "start": {
                "line": 791,
                "column": 6
              },
              "end": {
                "line": 805,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "handlerFn": {
              "type": "method",
              "label": "handlerFn",
              "description": "The handler function.",
              "code": "@param {function} handlerFn\nThe handler function.",
              "start": {
                "line": 763,
                "column": 6
              },
              "end": {
                "line": 781,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "arguments": {},
              "returnType": "void",
              "returnDescription": "void",
              "kind": null,
              "generator": false,
              "static": false,
              "computed": false,
              "async": false,
              "super": null,
              "override": false,
              "private": false
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "init",
          "computed": false,
          "super": "NGN.EventEmitter#handleThresholdTrigger",
          "override": false,
          "private": false
        },
        "clear": {
          "type": "method",
          "label": "clear",
          "description": "Remove all event handlers from the EventEmitter (both regular and adhoc).\r\n  This is a shortcut for #removeAllListeners.",
          "code": "clear () {\r\n    let events = NGN.slice(arguments)\r\n\r\n    if (events.length === 0) {\r\n      this.META.wildcardEvents.clear()\r\n\r\n      let symbolEvents = []\r\n\r\n      if (NGN.nodelike) {\r\n        symbolEvents = Object.getOwnPropertySymbols(this._events)\r\n      } else {\r\n        symbolEvents = Object.getOwnPropertySymbols(this.adhoc)\r\n        symbolEvents = symbolEvents.concat(Object.getOwnPropertySymbols(this.handlers))\r\n      }\r\n\r\n      for (let i = 0; i < symbolEvents.length; i++) {\r\n        this.removeAllListeners(symbolEvents[i])\r\n      }\r\n\r\n      return this.removeAllListeners()\r\n    }\r\n\r\n    for (let i = 0; i < events.length; i++) {\r\n      this.META.wildcardEvents.delete(events[i])\r\n      this.removeAllListeners(events[i])\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 813,
            "column": 2
          },
          "end": {
            "line": 839,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": "NGN.EventEmitter#clear",
          "override": false,
          "private": false
        },
        "eventHandler": {
          "type": "method",
          "label": "eventHandler",
          "description": "Internal method used to handle TTL and wildcard management.",
          "code": "eventHandler (eventName, callback, ttl, prepend = false) {\r\n    if (NGN.typeof(ttl) === 'boolean') {\r\n      prepend = ttl\r\n      ttl = this.META.defaultTTL\r\n    }\r\n\r\n    if (ttl === undefined) {\r\n      ttl = this.META.defaultTTL\r\n    }\r\n\r\n    if (ttl > 0) {\r\n      setTimeout(() => this.off(eventName, callback), ttl)\r\n    }\r\n\r\n    if (typeof eventName === 'string' && eventName.indexOf('*') >= 0) {\r\n      this.META.wildcardEvents.add(eventName)\r\n    }\r\n\r\n    return prepend\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 845,
            "column": 2
          },
          "end": {
            "line": 864,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "eventName": {
              "type": "argument",
              "label": "eventName",
              "description": null,
              "code": "eventName",
              "start": {
                "line": 845,
                "column": 16
              },
              "end": {
                "line": 845,
                "column": 25
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            },
            "callback": {
              "type": "argument",
              "label": "callback",
              "description": null,
              "code": "callback",
              "start": {
                "line": 845,
                "column": 27
              },
              "end": {
                "line": 845,
                "column": 35
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            },
            "ttl": {
              "type": "argument",
              "label": "ttl",
              "description": null,
              "code": "ttl",
              "start": {
                "line": 845,
                "column": 37
              },
              "end": {
                "line": 845,
                "column": 40
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            },
            "prepend": {
              "type": "argument",
              "label": "prepend",
              "description": null,
              "code": "prepend = false",
              "start": {
                "line": 845,
                "column": 42
              },
              "end": {
                "line": 845,
                "column": 57
              },
              "flags": [],
              "authors": [],
              "default": false,
              "datatype": "boolean",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": "NGN.EventEmitter#eventHandler",
          "override": false,
          "private": true
        },
        "on": {
          "type": "method",
          "label": "on",
          "description": "Create a new event handler for the specified event.",
          "code": "on (eventName, callback, ttl, prepend = false) {\r\n    if (NGN.typeof(eventName) === 'array') {\r\n      for (let i = 0; i < eventName.length; i++) {\r\n        this.on(eventName[i], callback, ttl, prepend)\r\n      }\r\n\r\n      return\r\n    }\r\n\r\n    if (this.eventHandler(...arguments)) {\r\n      this.prependListener(eventName, callback)\r\n    } else {\r\n      this.addListener(eventName, callback)\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 884,
            "column": 2
          },
          "end": {
            "line": 898,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "eventName": {
              "type": "argument",
              "label": "eventName",
              "description": "Name of the event to listen for.\nIf an object is passed, this method will automatically setup a #pool.",
              "code": "eventName",
              "start": {
                "line": 884,
                "column": 6
              },
              "end": {
                "line": 884,
                "column": 15
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string|string[]|object",
              "required": true,
              "enum": null
            },
            "handler": {
              "type": "method",
              "label": "handler",
              "description": "The method responsible for responding to the event.\nThis is ignored if eventName is an object.",
              "code": "@param {function} handler\nThe method responsible for responding to the event.\nThis is ignored if eventName is an object.",
              "start": {
                "line": 884,
                "column": 2
              },
              "end": {
                "line": 898,
                "column": 3
              },
              "flags": [],
              "authors": [],
              "arguments": {},
              "returnType": "void",
              "returnDescription": "void",
              "kind": null,
              "generator": false,
              "static": false,
              "computed": false,
              "async": false,
              "super": null,
              "override": false,
              "private": false
            },
            "ttl": {
              "type": "argument",
              "label": "TTL",
              "description": "Time-To-Live is the number of milliseconds before the event handler\nis automatically removed. This is useful for automatically cleaning\nup limited-life event handlers.",
              "code": "ttl",
              "start": {
                "line": 884,
                "column": 27
              },
              "end": {
                "line": 884,
                "column": 30
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "number",
              "required": false,
              "enum": null
            },
            "prepend": {
              "type": "argument",
              "label": "prepend",
              "description": "When set to `true`, the event is added to the beginning of\nthe processing list instead of the end.\nThis is ignored if eventName is an object.",
              "code": "prepend = false",
              "start": {
                "line": 884,
                "column": 32
              },
              "end": {
                "line": 884,
                "column": 47
              },
              "flags": [],
              "authors": [],
              "default": "false",
              "datatype": "boolean",
              "required": false,
              "enum": null
            },
            "TTL": {
              "type": "argument",
              "label": "TTL",
              "description": "Time-To-Live is the number of milliseconds before the event handler\nis automatically removed. This is useful for automatically cleaning\nup limited-life event handlers.",
              "code": "ttl",
              "start": {
                "line": 884,
                "column": 27
              },
              "end": {
                "line": 884,
                "column": 30
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "number",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": "NGN.EventEmitter#on",
          "override": false,
          "private": false
        },
        "once": {
          "type": "method",
          "label": "once",
          "description": "Create a new event handler for the specified event. The\nhandler will be removed immediately after it is executed. This\neffectively listens for an event to happen once and only once\nbefore the handler is destroyed.",
          "code": "once (eventName, callback, ttl, prepend = false) {\r\n    if (NGN.typeof(eventName) === 'array') {\r\n      for (let i = 0; i < eventName.length; i++) {\r\n        this.once(eventName[i], callback, ttl, prepend)\r\n      }\r\n\r\n      return\r\n    }\r\n\r\n    if (this.eventHandler(...arguments)) {\r\n      this.prependOnceListener(eventName, callback)\r\n    } else {\r\n      super.once(eventName, this.wrapEventHandlerWithScope(eventName, callback))\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 914,
            "column": 2
          },
          "end": {
            "line": 928,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "eventName": {
              "type": "argument",
              "label": "eventName",
              "description": "Name of the event to listen for.",
              "code": "eventName",
              "start": {
                "line": 914,
                "column": 8
              },
              "end": {
                "line": 914,
                "column": 17
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "callback": {
              "type": "argument",
              "label": "handler",
              "description": "The method responsible for responding to the event.",
              "code": "callback",
              "start": {
                "line": 914,
                "column": 19
              },
              "end": {
                "line": 914,
                "column": 27
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "function",
              "required": true,
              "enum": null
            },
            "ttl": {
              "type": "argument",
              "label": "prepend",
              "description": "When set to `true`, the event is added to the beginning of\nthe processing list instead of the end.",
              "code": "ttl",
              "start": {
                "line": 914,
                "column": 29
              },
              "end": {
                "line": 914,
                "column": 32
              },
              "flags": [],
              "authors": [],
              "default": "false",
              "datatype": "boolean",
              "required": false,
              "enum": null
            },
            "prepend": {
              "type": "argument",
              "label": "prepend",
              "description": "When set to `true`, the event is added to the beginning of\nthe processing list instead of the end.",
              "code": "ttl",
              "start": {
                "line": 914,
                "column": 29
              },
              "end": {
                "line": 914,
                "column": 32
              },
              "flags": [],
              "authors": [],
              "default": "false",
              "datatype": "boolean",
              "required": false,
              "enum": null
            },
            "handler": {
              "type": "argument",
              "label": "handler",
              "description": "The method responsible for responding to the event.",
              "code": "callback",
              "start": {
                "line": 914,
                "column": 19
              },
              "end": {
                "line": 914,
                "column": 27
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "function",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": "NGN.EventEmitter#once",
          "override": false,
          "private": false
        },
        "prependListener": {
          "type": "method",
          "label": "prependListener",
          "description": null,
          "code": "prependListener () {\r\n    this.applyScope(arguments)\r\n    super.prependListener(...arguments)\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 931,
            "column": 2
          },
          "end": {
            "line": 934,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": "NGN.EventEmitter#prependListener",
          "override": false,
          "private": false
        },
        "prependOnceListener": {
          "type": "method",
          "label": "prependOnceListener",
          "description": null,
          "code": "prependOnceListener () {\r\n    this.applyScope(arguments)\r\n    super.prependOnceListener(...arguments)\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 936,
            "column": 2
          },
          "end": {
            "line": 939,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": "NGN.EventEmitter#prependOnceListener",
          "override": false,
          "private": false
        },
        "addListener": {
          "type": "method",
          "label": "addListener",
          "description": null,
          "code": "addListener () {\r\n    this.applyScope(arguments)\r\n    super.addListener(...arguments)\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 941,
            "column": 2
          },
          "end": {
            "line": 944,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": "NGN.EventEmitter#addListener",
          "override": false,
          "private": false
        },
        "removeListener": {
          "type": "method",
          "label": "removeListener",
          "description": null,
          "code": "removeListener () {\r\n    if (arguments[arguments.length - 1] !== true) {\r\n      this.applyScope(arguments)\r\n    }\r\n\r\n    super.removeListener(...arguments)\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 946,
            "column": 2
          },
          "end": {
            "line": 952,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": "NGN.EventEmitter#removeListener",
          "override": false,
          "private": false
        },
        "emit": {
          "type": "method",
          "label": "emit",
          "description": "Emits an event.",
          "code": "emit () {\r\n    if (NGN.typeof(arguments[0]) === 'array') {\r\n      let args = NGN.slice(arguments)\r\n      let eventNames = args.shift()\r\n\r\n      for (let i = 0; i < eventNames.length; i++) {\r\n        this.emit(eventNames[i], ...args)\r\n      }\r\n\r\n      return\r\n    }\r\n\r\n    // This catches non-string event names. NGN internally uses Symbols\r\n    // for the NGN.WARN/INFO/ERROR event names to prevent name collisions.\r\n    // This check provides support for these special events. These types\r\n    // of events will never have wildcards.\r\n    if (!NGN.nodelike || !arguments[0] || this.META.wildcardEvents.size === 0) {\r\n      super.emit(...arguments)\r\n      return\r\n    }\r\n\r\n    if (NGN.nodelike && typeof arguments[0] === 'symbol') {\r\n      super.emit(...arguments)\r\n      return\r\n    }\r\n\r\n    /**\r\n     * The NGN browser-based event emitter supports wildcards natively, but\r\n     * Node.js does not. This adds simple wildcard support for Node. The\r\n     * only wildcard character supported at this time is `*`. This feature\r\n     * will check the event name for the existance of a wildcard. If a\r\n     * wilcard character is present, the internally-maintained list of\r\n     * wildcard events is checked to see if it's a known event. If none\r\n     * of these checks pass, the standard event emitter is used, otherwise\r\n     * special wildcard handling is used.\r\n     */\r\n    let iterator = this.META.wildcardEvents.values()\r\n    let currentEvent = null\r\n    let args = NGN.slice(arguments)\r\n\r\n    args.shift()\r\n\r\n    while (currentEvent === null || !currentEvent.done) {\r\n      if (currentEvent !== null && currentEvent.value !== arguments[0]) {\r\n        let pattern = new RegExp(currentEvent.value.replace(/\\./g, '\\\\.').replace(/\\*/g, '.*'), 'g')\r\n\r\n        if (pattern.test(arguments[0])) {\r\n          super.emit(currentEvent.value, ...args, typeof arguments[0] !== 'symbol' ? Symbol(arguments[0]) : arguments[0])\r\n          break\r\n        }\r\n      }\r\n\r\n      currentEvent = iterator.next()\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 964,
            "column": 2
          },
          "end": {
            "line": 1018,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "eventName": {
              "type": "argument",
              "label": "eventName",
              "description": "The event name can be a string or an array of strings. If an array\nof strings is specified, an event will be fired for each event name\nwithin the array.",
              "code": "emit () {\r\n    if (NGN.typeof(arguments[0]) === 'array') {\r\n      let args = NGN.slice(arguments)\r\n      let eventNames = args.shift()\r\n\r\n      for (let i = 0; i < eventNames.length; i++) {\r\n        this.emit(eventNames[i], ...args)\r\n      }\r\n\r\n      return\r\n    }\r\n\r\n    // This catches non-string event names. NGN internally uses Symbols\r\n    // for the NGN.WARN/INFO/ERROR event names to prevent name collisions.\r\n    // This check provides support for these special events. These types\r\n    // of events will never have wildcards.\r\n    if (!NGN.nodelike || !arguments[0] || this.META.wildcardEvents.size === 0) {\r\n      super.emit(...arguments)\r\n      return\r\n    }\r\n\r\n    if (NGN.nodelike && typeof arguments[0] === 'symbol') {\r\n      super.emit(...arguments)\r\n      return\r\n    }\r\n\r\n    /**\r\n     * The NGN browser-based event emitter supports wildcards natively, but\r\n     * Node.js does not. This adds simple wildcard support for Node. The\r\n     * only wildcard character supported at this time is `*`. This feature\r\n     * will check the event name for the existance of a wildcard. If a\r\n     * wilcard character is present, the internally-maintained list of\r\n     * wildcard events is checked to see if it's a known event. If none\r\n     * of these checks pass, the standard event emitter is used, otherwise\r\n     * special wildcard handling is used.\r\n     */\r\n    let iterator = this.META.wildcardEvents.values()\r\n    let currentEvent = null\r\n    let args = NGN.slice(arguments)\r\n\r\n    args.shift()\r\n\r\n    while (currentEvent === null || !currentEvent.done) {\r\n      if (currentEvent !== null && currentEvent.value !== arguments[0]) {\r\n        let pattern = new RegExp(currentEvent.value.replace(/\\./g, '\\\\.').replace(/\\*/g, '.*'), 'g')\r\n\r\n        if (pattern.test(arguments[0])) {\r\n          super.emit(currentEvent.value, ...args, typeof arguments[0] !== 'symbol' ? Symbol(arguments[0]) : arguments[0])\r\n          break\r\n        }\r\n      }\r\n\r\n      currentEvent = iterator.next()\r\n    }\r\n  }",
              "start": {
                "line": 964,
                "column": 2
              },
              "end": {
                "line": 1018,
                "column": 3
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string[]",
              "required": true,
              "enum": null
            },
            "payload": {
              "type": "argument",
              "label": "payload",
              "description": "An optional payload. This can be any number of additional arguments.",
              "code": "emit () {\r\n    if (NGN.typeof(arguments[0]) === 'array') {\r\n      let args = NGN.slice(arguments)\r\n      let eventNames = args.shift()\r\n\r\n      for (let i = 0; i < eventNames.length; i++) {\r\n        this.emit(eventNames[i], ...args)\r\n      }\r\n\r\n      return\r\n    }\r\n\r\n    // This catches non-string event names. NGN internally uses Symbols\r\n    // for the NGN.WARN/INFO/ERROR event names to prevent name collisions.\r\n    // This check provides support for these special events. These types\r\n    // of events will never have wildcards.\r\n    if (!NGN.nodelike || !arguments[0] || this.META.wildcardEvents.size === 0) {\r\n      super.emit(...arguments)\r\n      return\r\n    }\r\n\r\n    if (NGN.nodelike && typeof arguments[0] === 'symbol') {\r\n      super.emit(...arguments)\r\n      return\r\n    }\r\n\r\n    /**\r\n     * The NGN browser-based event emitter supports wildcards natively, but\r\n     * Node.js does not. This adds simple wildcard support for Node. The\r\n     * only wildcard character supported at this time is `*`. This feature\r\n     * will check the event name for the existance of a wildcard. If a\r\n     * wilcard character is present, the internally-maintained list of\r\n     * wildcard events is checked to see if it's a known event. If none\r\n     * of these checks pass, the standard event emitter is used, otherwise\r\n     * special wildcard handling is used.\r\n     */\r\n    let iterator = this.META.wildcardEvents.values()\r\n    let currentEvent = null\r\n    let args = NGN.slice(arguments)\r\n\r\n    args.shift()\r\n\r\n    while (currentEvent === null || !currentEvent.done) {\r\n      if (currentEvent !== null && currentEvent.value !== arguments[0]) {\r\n        let pattern = new RegExp(currentEvent.value.replace(/\\./g, '\\\\.').replace(/\\*/g, '.*'), 'g')\r\n\r\n        if (pattern.test(arguments[0])) {\r\n          super.emit(currentEvent.value, ...args, typeof arguments[0] !== 'symbol' ? Symbol(arguments[0]) : arguments[0])\r\n          break\r\n        }\r\n      }\r\n\r\n      currentEvent = iterator.next()\r\n    }\r\n  }",
              "start": {
                "line": 964,
                "column": 2
              },
              "end": {
                "line": 1018,
                "column": 3
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "any",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": "NGN.EventEmitter#emit",
          "override": false,
          "private": false
        }
      }
    },
    "NGN.DATA.RangeRule": {
      "type": "class",
      "label": "NGN.DATA.RangeRule",
      "description": "A special rule to validate values within one or more ranges.\nSupports numeric ranges, date ranges, and simple string-based\nranges .",
      "code": "class NGNDataRangeValidationRule extends Rule { // eslint-disable-line\r\n  /**\r\n   * Create a new range rule.\r\n   * @param {string} [name]\r\n   * An optional name for the rule. This can be useful when debugging data issues.\r\n   * @param {object} [scope=null]\r\n   * Apply a custom scope to the validation functions (applicable to custom methods only).\r\n   * @param {Array} [range]\r\n   * An enumeration of acceptable numeric ranges. For example, if\r\n   * the value must be between 5-10 or from 25-50, the configuration\r\n   * would look like:\r\n   *\r\n   * ```js\r\n   * range: [\r\n   *   [5, 10],\r\n   *   ['25-50']\r\n   * ]\r\n   * ```\r\n   *\r\n   * To accept anything below a certain number or anything over a certain\r\n   * number while also specifying one or more ranges, use a `null` value.\r\n   *\r\n   * For example:\r\n   *\r\n   * ```js\r\n   * range: [\r\n   *   [null, 0],\r\n   *   [5, 10],\r\n   *   ['25-50'],\r\n   *   [100, null]\r\n   * ]\r\n   * ```\r\n   *\r\n   * The aforementioned example would accept a value less than `zero`,\r\n   * between `5` and `10`, between `25` and `50`, or over `100`. Therefore,\r\n   * acceptable values could be `-7`, `7`, `25`, `42`,  `10000`, or anything\r\n   * else within the ranges. However, the values `3`, `19`, and `62` would\r\n   * all fail because they're outside the ranges.\r\n   */\r\n  constructor (name, scope, range = []) {\r\n    if (NGN.typeof(scope) === 'array') {\r\n      range = scope\r\n      scope = null\r\n    }\r\n\r\n    super(null, name, scope)\r\n\r\n    this.RULE.prepareRange = function (value) {\r\n      // If a simple range is specified (single array), format it for the rule processor.\r\n      value = NGN.forceArray(value)\r\n\r\n      if (NGN.typeof(value[0]) !== 'array') {\r\n        value = [value]\r\n      }\r\n\r\n      for (let i = 0; i < value.length; i++) {\r\n        if (value[i].length !== 2) {\r\n          if (NGN.typeof(value[i][0]) !== 'string') {\r\n            throw new Error(`Invalid range: \"${value[i].toString()}\"`)\r\n          }\r\n\r\n          value[i] = value[i][0].replace(/[^0-9->]/gi, '').split(/->{1,100}/)\r\n        }\r\n\r\n        if (NGN.typeof(value[i][0]) !== 'number') {\r\n          value[i][0] = NGN.coalesce(value[i][0], '').replace(/null|none|any/gi, '')\r\n        }\r\n\r\n        if (NGN.typeof(value[i][1]) !== 'number') {\r\n          value[i][1] = NGN.coalesce(value[i][1], '').replace(/null|none|any/gi, '')\r\n        }\r\n      }\r\n\r\n      return value\r\n    }\r\n\r\n    // Initialize the range\r\n    this.RULE.range = new Set()\r\n    this.range = range\r\n\r\n    // Create the validation function.\r\n    this.RULE.validator = (value) => {\r\n      let isString = NGN.typeof(value) === 'string'\r\n      let range = this.range\r\n\r\n      for (let i = 0; i < range.length; i++) {\r\n        let min = NGN.coalesceb(range[i][0], isString ? value.length : value)\r\n        let max = NGN.coalesceb(range[i][1], isString ? value.length : value)\r\n\r\n        if (\r\n          (isString && value.length >= min && value.length <= max) ||\r\n          (!isString && value >= min && value <= max)\r\n        ) {\r\n          return true\r\n        }\r\n      }\r\n\r\n      return false\r\n    }\r\n  }\r\n\r\n  get range () {\r\n    return Array.from(this.RULE.range.values())\r\n  }\r\n\r\n  set range (value) {\r\n    this.RULE.range = new Set()\r\n    this.addRange(value)\r\n  }\r\n\r\n  /**\r\n   * Add a range to the rule.\r\n   * @param {array} value\r\n   * A range can be a single array, such as `[min, max]`. An array of arrays is\r\n   * also acceptable, such as `[[min1, max1], [min2, max2]]`.\r\n   */\r\n  addRange (value) {\r\n    value = this.RULE.prepareRange(value)\r\n\r\n    for (let i = 0; i < value.length; i++) {\r\n      if (NGN.coalesceb(value[i][0]) !== null && NGN.coalesceb(value[i][1]) !== null && value[i][1] < value[i][0]) {\r\n        throw new Error(`Invalid value \"${value[i][0].toString()} -> ${value[i][1].toString()}\". Minimum value cannot exceed maximum.`)\r\n      }\r\n\r\n      this.RULE.range.add(value[i])\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove an existing range from the rule.\r\n   * @param {array} value\r\n   * A range can be a single array, such as `[min, max]`. An array of arrays is\r\n   * also acceptable, such as `[[min1, max1], [min2, max2]]`.\r\n   */\r\n  removeRange (value) {\r\n    let range = this.range\r\n    value = this.RULE.prepareRange(value)\r\n\r\n    for (let i = 0; i < value.length; i++) {\r\n      for (let x = 0; x < range.length; x++) {\r\n        if (value[i].toString() === range[x].toString()) {\r\n          this.RULE.range.delete(range[x])\r\n        }\r\n      }\r\n    }\r\n  }\r\n}",
      "tags": {},
      "exceptions": {},
      "events": {},
      "start": {
        "line": 9,
        "column": 15
      },
      "end": {
        "line": 155,
        "column": 1
      },
      "flags": [],
      "authors": [],
      "sourcefile": "./\\data\\rule\\RangeRule.js",
      "extends": "Rule",
      "configuration": {},
      "properties": {
        "prepareRange": {
          "type": "property",
          "label": "prepareRange",
          "description": null,
          "code": "this.RULE.prepareRange = function (value) {\r\n      // If a simple range is specified (single array), format it for the rule processor.\r\n      value = NGN.forceArray(value)\r\n\r\n      if (NGN.typeof(value[0]) !== 'array') {\r\n        value = [value]\r\n      }\r\n\r\n      for (let i = 0; i < value.length; i++) {\r\n        if (value[i].length !== 2) {\r\n          if (NGN.typeof(value[i][0]) !== 'string') {\r\n            throw new Error(`Invalid range: \"${value[i].toString()}\"`)\r\n          }\r\n\r\n          value[i] = value[i][0].replace(/[^0-9->]/gi, '').split(/->{1,100}/)\r\n        }\r\n\r\n        if (NGN.typeof(value[i][0]) !== 'number') {\r\n          value[i][0] = NGN.coalesce(value[i][0], '').replace(/null|none|any/gi, '')\r\n        }\r\n\r\n        if (NGN.typeof(value[i][1]) !== 'number') {\r\n          value[i][1] = NGN.coalesce(value[i][1], '').replace(/null|none|any/gi, '')\r\n        }\r\n      }\r\n\r\n      return value\r\n    }",
          "start": {
            "line": 56,
            "column": 14
          },
          "end": {
            "line": 56,
            "column": 26
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "range": {
          "type": "property",
          "label": "range",
          "description": null,
          "code": "set range (value) {\r\n    this.RULE.range = new Set()\r\n    this.addRange(value)\r\n  }",
          "start": {
            "line": 114,
            "column": 2
          },
          "end": {
            "line": 117,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": false,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "validator": {
          "type": "property",
          "label": "validator",
          "description": null,
          "code": "this.RULE.validator = (value) => {\r\n      let isString = NGN.typeof(value) === 'string'\r\n      let range = this.range\r\n\r\n      for (let i = 0; i < range.length; i++) {\r\n        let min = NGN.coalesceb(range[i][0], isString ? value.length : value)\r\n        let max = NGN.coalesceb(range[i][1], isString ? value.length : value)\r\n\r\n        if (\r\n          (isString && value.length >= min && value.length <= max) ||\r\n          (!isString && value >= min && value <= max)\r\n        ) {\r\n          return true\r\n        }\r\n      }\r\n\r\n      return false\r\n    }",
          "start": {
            "line": 90,
            "column": 14
          },
          "end": {
            "line": 90,
            "column": 23
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": false
        }
      },
      "methods": {
        "constructor": {
          "type": "method",
          "label": "constructor",
          "description": "Create a new range rule.\r\n  \r\n  An optional name for the rule. This can be useful when debugging data issues.\r\n  \r\n  Apply a custom scope to the validation functions (applicable to custom methods only).\r\n  \r\n  An enumeration of acceptable numeric ranges. For example, if\r\n  the value must be between 5-10 or from 25-50, the configuration\r\n  would look like:\r\n  \n  ```js\r\n  range: [\r\n    [5, 10],\r\n    ['25-50']\r\n  ]\r\n  ```\r\n  \n  To accept anything below a certain number or anything over a certain\r\n  number while also specifying one or more ranges, use a `null` value.\r\n  \n  For example:\r\n  \n  ```js\r\n  range: [\r\n    [null, 0],\r\n    [5, 10],\r\n    ['25-50'],\r\n    [100, null]\r\n  ]\r\n  ```\r\n  \n  The aforementioned example would accept a value less than `zero`,\r\n  between `5` and `10`, between `25` and `50`, or over `100`. Therefore,\r\n  acceptable values could be `-7`, `7`, `25`, `42`,  `10000`, or anything\r\n  else within the ranges. However, the values `3`, `19`, and `62` would\r\n  all fail because they're outside the ranges.",
          "code": "constructor (name, scope, range = []) {\r\n    if (NGN.typeof(scope) === 'array') {\r\n      range = scope\r\n      scope = null\r\n    }\r\n\r\n    super(null, name, scope)\r\n\r\n    this.RULE.prepareRange = function (value) {\r\n      // If a simple range is specified (single array), format it for the rule processor.\r\n      value = NGN.forceArray(value)\r\n\r\n      if (NGN.typeof(value[0]) !== 'array') {\r\n        value = [value]\r\n      }\r\n\r\n      for (let i = 0; i < value.length; i++) {\r\n        if (value[i].length !== 2) {\r\n          if (NGN.typeof(value[i][0]) !== 'string') {\r\n            throw new Error(`Invalid range: \"${value[i].toString()}\"`)\r\n          }\r\n\r\n          value[i] = value[i][0].replace(/[^0-9->]/gi, '').split(/->{1,100}/)\r\n        }\r\n\r\n        if (NGN.typeof(value[i][0]) !== 'number') {\r\n          value[i][0] = NGN.coalesce(value[i][0], '').replace(/null|none|any/gi, '')\r\n        }\r\n\r\n        if (NGN.typeof(value[i][1]) !== 'number') {\r\n          value[i][1] = NGN.coalesce(value[i][1], '').replace(/null|none|any/gi, '')\r\n        }\r\n      }\r\n\r\n      return value\r\n    }\r\n\r\n    // Initialize the range\r\n    this.RULE.range = new Set()\r\n    this.range = range\r\n\r\n    // Create the validation function.\r\n    this.RULE.validator = (value) => {\r\n      let isString = NGN.typeof(value) === 'string'\r\n      let range = this.range\r\n\r\n      for (let i = 0; i < range.length; i++) {\r\n        let min = NGN.coalesceb(range[i][0], isString ? value.length : value)\r\n        let max = NGN.coalesceb(range[i][1], isString ? value.length : value)\r\n\r\n        if (\r\n          (isString && value.length >= min && value.length <= max) ||\r\n          (!isString && value >= min && value <= max)\r\n        ) {\r\n          return true\r\n        }\r\n      }\r\n\r\n      return false\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 48,
            "column": 2
          },
          "end": {
            "line": 108,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "name": {
              "type": "argument",
              "label": "name",
              "description": "An optional name for the rule. This can be useful when debugging data issues.",
              "code": "name",
              "start": {
                "line": 48,
                "column": 15
              },
              "end": {
                "line": 48,
                "column": 19
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": false,
              "enum": null
            },
            "scope": {
              "type": "argument",
              "label": "scope",
              "description": "Apply a custom scope to the validation functions .",
              "code": "scope",
              "start": {
                "line": 48,
                "column": 21
              },
              "end": {
                "line": 48,
                "column": 26
              },
              "flags": [],
              "authors": [],
              "default": "null",
              "datatype": "object",
              "required": false,
              "enum": [
                "applicable to custom methods only"
              ]
            },
            "range": {
              "type": "argument",
              "label": "range",
              "description": "An enumeration of acceptable numeric ranges. For example, if\nthe value must be between 5-10 or from 25-50, the configuration\nwould look like:\n\n```js\nrange: [\n[5, 10],\n['25-50']\n]\n```\n\nTo accept anything below a certain number or anything over a certain\nnumber while also specifying one or more ranges, use a `null` value.\n\nFor example:\n\n```js\nrange: [\n[null, 0],\n[5, 10],\n['25-50'],\n[100, null]\n]\n```\n\nThe aforementioned example would accept a value less than `zero`,\nbetween `5` and `10`, between `25` and `50`, or over `100`. Therefore,\nacceptable values could be `-7`, `7`, `25`, `42`,  `10000`, or anything\nelse within the ranges. However, the values `3`, `19`, and `62` would\nall fail because they're outside the ranges.",
              "code": "range = []",
              "start": {
                "line": 48,
                "column": 28
              },
              "end": {
                "line": 48,
                "column": 38
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "array",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "constructor",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "addRange": {
          "type": "method",
          "label": "addRange",
          "description": "Add a range to the rule.\r\n  \r\n  A range can be a single array, such as `[min, max]`. An array of arrays is\r\n  also acceptable, such as `[[min1, max1], [min2, max2]]`.",
          "code": "addRange (value) {\r\n    value = this.RULE.prepareRange(value)\r\n\r\n    for (let i = 0; i < value.length; i++) {\r\n      if (NGN.coalesceb(value[i][0]) !== null && NGN.coalesceb(value[i][1]) !== null && value[i][1] < value[i][0]) {\r\n        throw new Error(`Invalid value \"${value[i][0].toString()} -> ${value[i][1].toString()}\". Minimum value cannot exceed maximum.`)\r\n      }\r\n\r\n      this.RULE.range.add(value[i])\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 125,
            "column": 2
          },
          "end": {
            "line": 135,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "value": {
              "type": "argument",
              "label": "value",
              "description": "A range can be a single array, such as `[min, max]`. An array of arrays is\nalso acceptable, such as `[[min1, max1], [min2, max2]]`.",
              "code": "value",
              "start": {
                "line": 125,
                "column": 12
              },
              "end": {
                "line": 125,
                "column": 17
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "array",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "removeRange": {
          "type": "method",
          "label": "removeRange",
          "description": "Remove an existing range from the rule.\r\n  \r\n  A range can be a single array, such as `[min, max]`. An array of arrays is\r\n  also acceptable, such as `[[min1, max1], [min2, max2]]`.",
          "code": "removeRange (value) {\r\n    let range = this.range\r\n    value = this.RULE.prepareRange(value)\r\n\r\n    for (let i = 0; i < value.length; i++) {\r\n      for (let x = 0; x < range.length; x++) {\r\n        if (value[i].toString() === range[x].toString()) {\r\n          this.RULE.range.delete(range[x])\r\n        }\r\n      }\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 143,
            "column": 2
          },
          "end": {
            "line": 154,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "value": {
              "type": "argument",
              "label": "value",
              "description": "A range can be a single array, such as `[min, max]`. An array of arrays is\nalso acceptable, such as `[[min1, max1], [min2, max2]]`.",
              "code": "value",
              "start": {
                "line": 143,
                "column": 15
              },
              "end": {
                "line": 143,
                "column": 20
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "array",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        }
      }
    },
    "NGN.DATA.Rule": {
      "type": "class",
      "label": "NGN.DATA.Rule",
      "description": "A data validation rule.",
      "code": "class NGNDataValidationRule { // eslint-disable-line\r\n  /**\r\n   * Create a new data rule.\r\n   * @param {Function/String[]/Number[]/Date[]/RegExp/Array} rule\r\n   * * When rule is a _function_, the value is passed to it as an argument.\r\n   * * When rule is a _String_, the value is compared for an exact match (case sensitive)\r\n   * * When rule is a _Number_, the value is compared for equality.\r\n   * * When rule is a _Date_, the value is compared for exact equality.\r\n   * * When rule is a _RegExp_, the value is tested and the results of the RegExp#test are used to validate.\r\n   * * When rule is an _Array_, the value is checked to exist in the array, regardless of data type. This is treated as an `enum`.\r\n   * * When rule is _an array of dates_, the value is compared to each date for equality.\r\n   * @param {string} [name]\r\n   * An optional name for the rule. This can be useful when debugging data issues.\r\n   * @param {object} [scope]\r\n   * Apply a custom scope to the validation functions (applicable to custom methods only).\r\n   */\r\n  constructor (validation, name = null, scope = null) {\r\n    const type = NGN.typeof(validation)\r\n\r\n    Object.defineProperties(this, {\r\n      RULE: NGN.private({\r\n        type: type,\r\n        validator: validation,\r\n        name: NGN.coalesce(name, `Untitled ${type.toUpperCase()} Validation`),\r\n        scope: NGN.coalesce(scope, this)\r\n      })\r\n    })\r\n  }\r\n\r\n  get name () {\r\n    return this.RULE.name\r\n  }\r\n\r\n  get type () {\r\n    return this.RULE.type\r\n  }\r\n\r\n  /**\r\n   * @method test\r\n   * Test a value against the validation rule.\r\n   * @param {any} value\r\n   * The value to test.\r\n   * @returns {boolean}\r\n   * Returns `true` when the value meets the rule expectations and `false` when it does not.\r\n   */\r\n  test (value) {\r\n    if (NGN.isFn(this.RULE.validator)) {\r\n      // Custom enforcement function\r\n      return this.RULE.validator.apply(this.RULE.scope, [value])\r\n    } else {\r\n      switch (this.type) {\r\n        // Enumeration\r\n        case 'array':\r\n          return this.RULE.validator.indexOf(value) !== -1\r\n\r\n        // Pattern Matching\r\n        case 'regexp':\r\n          return this.RULE.validator.test(value)\r\n\r\n        default:\r\n          return this.RULE.validator === value\r\n      }\r\n    }\r\n  }\r\n}",
      "tags": {},
      "exceptions": {},
      "events": {
        "validator.add": {
          "type": "event",
          "label": "validator.add",
          "description": "",
          "code": "@fires validator.add",
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "parameters": {
            "payload": {
              "type": "argument",
              "label": "payload",
              "description": null,
              "code": null,
              "start": {
                "line": 0,
                "column": 0
              },
              "end": {
                "line": 0,
                "column": 0
              },
              "flags": [],
              "authors": [],
              "datatype": "",
              "required": false,
              "enum": null
            }
          },
          "deprecated": false,
          "deprecationReplacement": null
        }
      },
      "start": {
        "line": 6,
        "column": 15
      },
      "end": {
        "line": 70,
        "column": 1
      },
      "flags": [],
      "authors": [],
      "sourcefile": "./\\data\\rule\\Rule.js",
      "extends": null,
      "configuration": {},
      "properties": {
        "RULE": {
          "type": "property",
          "label": "RULE",
          "description": null,
          "code": "RULE: NGN.private({\r\n        type: type,\r\n        validator: validation,\r\n        name: NGN.coalesce(name, `Untitled ${type.toUpperCase()} Validation`),\r\n        scope: NGN.coalesce(scope, this)\r\n      })",
          "start": {
            "line": 26,
            "column": 6
          },
          "end": {
            "line": 31,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": true
        },
        "name": {
          "type": "property",
          "label": "name",
          "description": null,
          "code": "get name () {\r\n    return this.RULE.name\r\n  }",
          "start": {
            "line": 35,
            "column": 2
          },
          "end": {
            "line": 37,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "type": {
          "type": "property",
          "label": "type",
          "description": null,
          "code": "get type () {\r\n    return this.RULE.type\r\n  }",
          "start": {
            "line": 39,
            "column": 2
          },
          "end": {
            "line": 41,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        }
      },
      "methods": {
        "constructor": {
          "type": "method",
          "label": "constructor",
          "description": "Create a new data rule.\r\n  \r\n  When rule is a _function_, the value is passed to it as an argument.\r\n  When rule is a _String_, the value is compared for an exact match (case sensitive)\r\n  When rule is a _Number_, the value is compared for equality.\r\n  When rule is a _Date_, the value is compared for exact equality.\r\n  When rule is a _RegExp_, the value is tested and the results of the RegExp#test are used to validate.\r\n  When rule is an _Array_, the value is checked to exist in the array, regardless of data type. This is treated as an `enum`.\r\n  When rule is _an array of dates_, the value is compared to each date for equality.\r\n  \r\n  An optional name for the rule. This can be useful when debugging data issues.\r\n  \r\n  Apply a custom scope to the validation functions (applicable to custom methods only).",
          "code": "constructor (validation, name = null, scope = null) {\r\n    const type = NGN.typeof(validation)\r\n\r\n    Object.defineProperties(this, {\r\n      RULE: NGN.private({\r\n        type: type,\r\n        validator: validation,\r\n        name: NGN.coalesce(name, `Untitled ${type.toUpperCase()} Validation`),\r\n        scope: NGN.coalesce(scope, this)\r\n      })\r\n    })\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 22,
            "column": 2
          },
          "end": {
            "line": 33,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "validation": {
              "type": "argument",
              "label": "rule",
              "description": "* When rule is a _function_, the value is passed to it as an argument.\n* When rule is a _String_, the value is compared for an exact match \n* When rule is a _Number_, the value is compared for equality.\n* When rule is a _Date_, the value is compared for exact equality.\n* When rule is a _RegExp_, the value is tested and the results of the RegExp#test are used to validate.\n* When rule is an _Array_, the value is checked to exist in the array, regardless of data type. This is treated as an `enum`.\n* When rule is _an array of dates_, the value is compared to each date for equality.",
              "code": "validation",
              "start": {
                "line": 22,
                "column": 15
              },
              "end": {
                "line": 22,
                "column": 25
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "function/string[]/number[]/date[]/regexp/array",
              "required": true,
              "enum": [
                "case sensitive"
              ]
            },
            "name": {
              "type": "argument",
              "label": "name",
              "description": "An optional name for the rule. This can be useful when debugging data issues.",
              "code": "name = null",
              "start": {
                "line": 22,
                "column": 27
              },
              "end": {
                "line": 22,
                "column": 38
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": false,
              "enum": null
            },
            "scope": {
              "type": "argument",
              "label": "scope",
              "description": "Apply a custom scope to the validation functions .",
              "code": "scope = null",
              "start": {
                "line": 22,
                "column": 40
              },
              "end": {
                "line": 22,
                "column": 52
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "object",
              "required": false,
              "enum": [
                "applicable to custom methods only"
              ]
            },
            "rule": {
              "type": "argument",
              "label": "rule",
              "description": "* When rule is a _function_, the value is passed to it as an argument.\n* When rule is a _String_, the value is compared for an exact match \n* When rule is a _Number_, the value is compared for equality.\n* When rule is a _Date_, the value is compared for exact equality.\n* When rule is a _RegExp_, the value is tested and the results of the RegExp#test are used to validate.\n* When rule is an _Array_, the value is checked to exist in the array, regardless of data type. This is treated as an `enum`.\n* When rule is _an array of dates_, the value is compared to each date for equality.",
              "code": "validation",
              "start": {
                "line": 22,
                "column": 15
              },
              "end": {
                "line": 22,
                "column": 25
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "function/string[]/number[]/date[]/regexp/array",
              "required": true,
              "enum": [
                "case sensitive"
              ]
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "constructor",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "test": {
          "type": "method",
          "label": "test",
          "description": "Test a value against the validation rule.",
          "code": "test (value) {\r\n    if (NGN.isFn(this.RULE.validator)) {\r\n      // Custom enforcement function\r\n      return this.RULE.validator.apply(this.RULE.scope, [value])\r\n    } else {\r\n      switch (this.type) {\r\n        // Enumeration\r\n        case 'array':\r\n          return this.RULE.validator.indexOf(value) !== -1\r\n\r\n        // Pattern Matching\r\n        case 'regexp':\r\n          return this.RULE.validator.test(value)\r\n\r\n        default:\r\n          return this.RULE.validator === value\r\n      }\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 51,
            "column": 2
          },
          "end": {
            "line": 69,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "value": {
              "type": "argument",
              "label": "value",
              "description": "The value to test.",
              "code": "value",
              "start": {
                "line": 51,
                "column": 8
              },
              "end": {
                "line": 51,
                "column": 13
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "returnType": "boolean",
          "returnDescription": "null Returns `true` when the value meets the rule expectations and `false` when it does not.",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        }
      }
    },
    "NGN.DATA.JSONSchema": {
      "type": "class",
      "label": "NGN.DATA.JSONSchema",
      "description": "Retrieve all of the NGN.DATA.Model defitions that can be interpreted\r\n        from this schema.\r\n        \r\n        \r\n        \r\n        The schema object.\r\n        \r\n        An array of known models. This method is used recursively, so this\r\n        argument exists primarily for internal use.\r\n        \r\n        Executed when all models have been detected.",
      "code": "class NGNJSONSchema extends EventEmitter { // eslint-disable-line no-unused-vars\r\n  /**\r\n   * Create a new JSON schema reference.\r\n   * @param  {Object|String} [schema={}]\r\n   * The schema to parse. This can be the JSON schema object itself or the URL\r\n   * of a remote JSON schema.\r\n   * @param  {NGN.NET.Resource} [NetworkResource]\r\n   * Specify a custom network resource to make the request for a remote schema.\r\n   */\r\n  constructor (schema = {}, NetworkResource = null) {\r\n    super()\r\n\r\n    Object.defineProperties(this, {\r\n      METADATA: NGN.private({\r\n        schema,\r\n        ID: null,\r\n        name: null\r\n      }),\r\n\r\n      PRIVATE: NGN.privateconst({\r\n        MODELS: null,\r\n        NET: NGN.coalesce(NetworkResource, NGN.NET),\r\n\r\n        parsed: false,\r\n\r\n        /**\r\n         * @method PRIVATE.extractCommonPropertyAttributes\r\n         * @param  {object} property\r\n         * Schema metadata object.\r\n         * @param {array} [models=[]]\r\n         * The list of known models. This is passed in because nested objects\r\n         * may exist within a property. NGN identifies these as nested models,\r\n         * even though the JSON schema does not force these to be separate\r\n         * schemas.\r\n         * @return {Object}\r\n         * Returns a clean \"NGN-ready\" field object of common properties.\r\n         */\r\n        extractCommonPropertyAttributes: (property, models = []) => {\r\n          let field = {}\r\n\r\n          // Add pattern\r\n          if (property.pattern) {\r\n            field.pattern = property.pattern\r\n          }\r\n\r\n          // Add description\r\n          if (property.description) {\r\n            field.description = property.description\r\n          }\r\n\r\n          // Add default\r\n          if (property.default) {\r\n            field.default = property.default\r\n          }\r\n\r\n          if (!property.$ref) {\r\n            if (!property.type) {\r\n              field.type = String\r\n            } else {\r\n              let type = NGN.typeof(property.type) === 'array' ? 'array' : property.type.trim().toLowerCase()\r\n\r\n              switch (type) {\r\n                case 'string':\r\n                  let format = NGN.coalesce(property.format, 'unknown').trim().toLowerCase()\r\n\r\n                  field.type = String\r\n\r\n                  switch (format) {\r\n                    case 'date':\r\n                    case 'date-time':\r\n                    case 'datetime':\r\n                    case 'format-time':\r\n                      field.type = Date\r\n                      break\r\n\r\n                    case 'ipv4':\r\n                      field.pattern = NGN.coalesce(\r\n                        property.pattern,\r\n                        /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$|^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\\-]*[A-Za-z0-9])$|^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$/ // eslint-disable-line no-useless-escape\r\n                      )\r\n\r\n                      break\r\n\r\n                    case 'ipv6':\r\n                      field.pattern = NGN.coalesce(\r\n                        property.pattern,\r\n                        /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$|^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\\-]*[A-Za-z0-9])$|^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$/ // eslint-disable-line no-useless-escape\r\n                      )\r\n\r\n                      break\r\n\r\n                    case 'email':\r\n                      field.pattern = NGN.coalesce(\r\n                        property.pattern,\r\n                        /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+(?:[A-Z]{2}|com|org|net|gov|mil|biz|info|mobi|name|aero|jobs|museum)\\b$/\r\n                      )\r\n\r\n                      break\r\n\r\n                    case 'hostname':\r\n                      field.pattern = NGN.coalesce(\r\n                        property.pattern,\r\n                        /^([a-zA-Z0-9]+(-[a-zA-Z0-9]+)*)+(\\.([a-zA-Z0-9]+(-[a-zA-Z0-9‌​]+)*))*$/ // eslint-disable-line no-irregular-whitespace\r\n                      )\r\n\r\n                      break\r\n\r\n                    case 'uri':\r\n                      field.pattern = NGN.coalesce(\r\n                        property.pattern,\r\n                        /(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]\\.[^\\s]{2,})/\r\n                      )\r\n\r\n                      break\r\n                  }\r\n\r\n                  break\r\n\r\n                case 'integer':\r\n                  field.type = Number\r\n                  field.pattern = /^\\d+$/\r\n                  break\r\n\r\n                case 'number':\r\n                  field.type = Number\r\n                  break\r\n\r\n                case 'object':\r\n                  if (property.properties) {\r\n                    let subschema = new NGN.DATA.JSONSchema(property)\r\n\r\n                    subschema.name = `${NGN.coalesce(this.name, 'untitled')}_${NGN.coalesce(subschema.name, 'submodel')}${models.length + 1}`\r\n\r\n                    subschema.getModelDefinitions(definitions => {\r\n                      definitions[definitions.length - 1].name = subschema.name\r\n                      models = definitions.concat(models)\r\n                    })\r\n\r\n                    field = {\r\n                      $model: subschema.name\r\n                    }\r\n                  } else {\r\n                    field.type = Object\r\n                  }\r\n\r\n                  break\r\n\r\n                default:\r\n                  field.type = String\r\n                  break\r\n              }\r\n            }\r\n          }\r\n\r\n          // String validation options\r\n          if (field.type === String || field.type === Number) {\r\n            if (NGN.coalesce(property.minLength, property.minimum)) {\r\n              field.min = NGN.coalesce(property.minLength, property.minimum)\r\n            }\r\n\r\n            if (NGN.coalesce(property.maxLength, property.maximum)) {\r\n              field.max = NGN.coalesce(property.maxLength, property.maximum)\r\n            }\r\n\r\n            // Numeric-specific validations\r\n            if (property.type === Number) {\r\n              if (property.multipleOf) {\r\n                field.multipleOf = property.multipleOf\r\n              }\r\n\r\n              if (property.exclusiveMinimum) {\r\n                field.min = (property.exclusiveMinimum + 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)\r\n              }\r\n\r\n              if (property.exclusiveMaximum) {\r\n                field.max = (property.exclusiveMaximum - 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)\r\n              }\r\n            }\r\n          }\r\n\r\n          // Array validation options\r\n          if (field.type === Array) {\r\n            // Support minimum array length\r\n            if (property.hasOwnProperty('minItems')) {\r\n              field.min = property.minItems\r\n            }\r\n\r\n            // Support maximum array length\r\n            if (property.hasOwnProperty('maxItems')) {\r\n              field.max = property.maxItems\r\n            }\r\n\r\n            if (property.hasOwnProperty('items')) {\r\n              if (NGN.typeof(property.items) === 'array') {\r\n                // Apply tuple validation\r\n                field.tuples = property.items\r\n              } else {\r\n                // Apply list validation\r\n                if (property.items.hasOwnProperty('type')) {\r\n                  field.listType = NGN.getType(property.items.type)\r\n                }\r\n\r\n                if (property.items.hasOwnProperty('enum')) {\r\n                  field.enum = property.items.enum\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          return field\r\n        },\r\n\r\n        /**\r\n         * @method PRIVATE.extractModelDefinitions\r\n         * Retrieve all of the NGN.DATA.Model defitions that can be interpreted\r\n         * from this schema.\r\n         * @protected\r\n         * @private\r\n         * @param  {Object} data\r\n         * The schema object.\r\n         * @param  {Array} [models=[]]\r\n         * An array of known models. This method is used recursively, so this\r\n         * argument exists primarily for internal use.\r\n         * @param  {Function} callback\r\n         * Executed when all models have been detected.\r\n         */\r\n        extractModelDefinitions: (data, models = [], callback) => {\r\n          if (NGN.isFn(models)) {\r\n            callback = models\r\n            models = []\r\n          }\r\n\r\n          if (data.type === 'object') {\r\n            let name = NGN.coalesce(data.name, this.name, 'Untitled')\r\n\r\n            if (data.hasOwnProperty('$schema') && name === null && this.METADATA.URL) {\r\n              name = this.METADATA.URL.split(/\\/|\\\\/).pop().replace('.json', '')\r\n            }\r\n\r\n            // Configure the basic model\r\n            let model = {\r\n              name,\r\n              description: NGN.coalesce(data.description, 'No description.'),\r\n              fields: {}\r\n            }\r\n\r\n            // Flag the ID for the schema\r\n            if (data.hasOwnProperty('$schema')) {\r\n              this.METADATA.ID = NGN.coalesce(data.$id, data.$schema)\r\n            }\r\n\r\n            // Queue the tasks since several are async but sequential\r\n            let tasks = new NGN.Tasks()\r\n\r\n            // If the allOf attribute exists, the schema is extending another.\r\n            // Extract the subschema before continuing.\r\n            if (data.hasOwnProperty('allOf')) {\r\n              for (let i = 0; i < data.allOf.length; i++) {\r\n                tasks.add(`Identify base schema: ${data.allOf}`, cont => {\r\n                  let URI = NGN.coalesce(data.allOf[i].$ref, data.allOf[i].$schema)\r\n\r\n                  if (URI !== null) {\r\n                    // When a URI is specified, retrieve the remote schema\r\n                    let baseSchema = new NGN.DATA.JSONSchema(URI)\r\n\r\n                    baseSchema.getModelDefinitions(definitions => {\r\n                      let coreModel = definitions.pop()\r\n\r\n                      Object.assign(model.fields, coreModel.fields)\r\n\r\n                      // If the nested schema has additional models, apply them.\r\n                      if (definitions.length > 0) {\r\n                        models = definitions.concat(models)\r\n                      }\r\n\r\n                      this.METADATA.name = NGN.coalesce(this.METADATA.name, coreModel.name)\r\n\r\n                      cont()\r\n                    })\r\n                  } else if (data.allOf[i].hasOwnProperty('properties')) {\r\n                    // Handle additional properties\r\n                    let additionalProperties = Object.keys(data.allOf[i].properties)\r\n\r\n                    for (let prop = 0; prop < additionalProperties.length; prop++) {\r\n                      model.fields[additionalProperties[prop]] = this.extractCommonPropertyAttributes(data.allOf[i].properties[additionalProperties[prop]])\r\n                    }\r\n\r\n                    cont()\r\n                  }\r\n                })\r\n              }\r\n            }\r\n\r\n            tasks.add('Identify attributes', cont => {\r\n              // If the schema specifies dependencies, it is specifying a set of\r\n              // rules requiring the existance and non-empty value of additional\r\n              // fields. Create NGN.DATA.Rule sets to support this.\r\n              if (data.hasOwnProperty('dependencies')) {\r\n                Object.keys(data.dependencies).forEach(dependency => {\r\n                  let requiredFields = null\r\n                  let dep = data.dependencies[dependency]\r\n\r\n                  if (NGN.typeof(dep) === 'array') {\r\n                    // Simple property dependencies\r\n                    requiredFields = dep\r\n                  } else if (dep.hasOwnProperty('required')) {\r\n                    // Schema dependencies\r\n                    requiredFields = dep.required\r\n                  }\r\n\r\n                  // Add all valid dependencies as rules\r\n                  if (requiredFields !== null) {\r\n                    model.rules[`${dependency} dependency on \"${requiredFields.join(', ')}\"`] = function () {\r\n                      if (NGN.coalesce(this[dependency]) !== null) {\r\n                        for (let i = 0; i < requiredFields.length; i++) {\r\n                          if (NGN.coalesce(this[requiredFields[i]]) === null) {\r\n                            return false\r\n                          }\r\n                        }\r\n                      }\r\n\r\n                      return true\r\n                    }\r\n                  }\r\n                })\r\n              }\r\n\r\n              // Identify the fields\r\n              let properties = Object.keys(data.properties)\r\n              let subtasks = new NGN.Tasks()\r\n\r\n              if (properties.length > 0) {\r\n                for (let i = 0; i < properties.length; i++) {\r\n                  let propertyName = properties[i]\r\n                  let property = data.properties[propertyName]\r\n\r\n                  model.fields[propertyName] = this.PRIVATE.extractCommonPropertyAttributes(property, models)\r\n\r\n                  // If this is a subschema, retrieve it.\r\n                  if (property.$ref) {\r\n                    subtasks.add(next => {\r\n                      let nestedModel = new NGN.DATA.JSONSchema(property.$ref)\r\n\r\n                      nestedModel.getModelDefinitions(definitions => {\r\n                        models = definitions.concat(models)\r\n\r\n                        model.fields[propertyName] = {\r\n                          $model: definitions[definitions.length - 1].name\r\n                        }\r\n\r\n                        next()\r\n                      })\r\n                    })\r\n                  }\r\n\r\n                  model.fields[propertyName].required = NGN.coalesce(data.required, '').indexOf(propertyName) >= 0\r\n                }\r\n              }\r\n\r\n              subtasks.on('complete', () => {\r\n                models.push(model)\r\n                cont()\r\n              })\r\n\r\n              subtasks.run(true)\r\n            })\r\n\r\n            tasks.on('complete', () => callback(models))\r\n            tasks.run(true)\r\n          } else {\r\n            callback(models)\r\n          }\r\n        }\r\n      })\r\n    })\r\n\r\n    this.once('parsed', () => {\r\n      this.PRIVATE.parsed = true\r\n      this.METADATA.ID = NGN.coalesce(this.METADATA.schema.id, this.METADATA.schema.$schema)\r\n    })\r\n\r\n    // Initialize\r\n    switch (NGN.typeof(schema)) {\r\n      case 'string':\r\n        // If schema is actually a URL, retrieve it.\r\n        this.METADATA.URL = schema\r\n        this.PRIVATE.NET.json(schema, (err, schema) => {\r\n          if (err) {\r\n            throw err\r\n          }\r\n\r\n          this.METADATA.schema = schema\r\n          this.METADATA.name = NGN.coalesce(schema.name, this.METADATA.URL.split(/\\/|\\\\/).pop().replace('.json', ''))\r\n\r\n          this.emit('parsed')\r\n        })\r\n\r\n        break\r\n\r\n      case 'object':\r\n        this.METADATA.name = NGN.coalesce(schema.name, 'Untitled')\r\n        this.emit('parsed')\r\n        break\r\n\r\n      default:\r\n        throw new Error('Invalid schema definition.')\r\n    }\r\n  }\r\n\r\n  get id () {\r\n    if (this.METADATA.ID) {\r\n      return this.METADATA.ID\r\n    }\r\n\r\n    let id = NGN.coalesce(this.METADATA.URL)\r\n\r\n    if (id !== null) {\r\n      return id\r\n    }\r\n\r\n    let root\r\n    /* node-only */\r\n    root = NGN.coalesce(this.PRIVATE.NET.baseUrl, `http://${require('os').hostname()}`)\r\n    /* end-node-only */\r\n    /* browser-only */\r\n    root = NGN.coalesce(this.PRIVATE.NET.baseUrl, window.location.origin)\r\n    /* end-browser-only */\r\n\r\n    this.METADATA.ID = this.PRIVATE.NET.normalizeUrl(`${root}/${NGN.coalesce(this.name, 'untitled').toLowerCase()}.json`)\r\n\r\n    return this.METADATA.ID\r\n  }\r\n\r\n  get name () {\r\n    return this.METADATA.name\r\n  }\r\n\r\n  set name (value) {\r\n    this.METADATA.name = NGN.coalesce(value, 'Untitled')\r\n  }\r\n\r\n  getModelDefinitions (callback) {\r\n    if (!this.PRIVATE.parsed) {\r\n      this.once('parsed', () => {\r\n        this.getModelDefinitions(callback)\r\n      })\r\n    } else if (!this.PRIVATE.MODELS) {\r\n      this.PRIVATE.extractModelDefinitions(this.METADATA.schema, [], definitions => {\r\n        this.PRIVATE.MODELS = definitions\r\n        callback(definitions)\r\n      })\r\n    } else {\r\n      callback(this.PRIVATE.MODELS)\r\n    }\r\n  }\r\n}",
      "tags": {},
      "exceptions": {},
      "events": {
        "parsed": {
          "type": "event",
          "label": "parsed",
          "description": null,
          "code": "this.emit('parsed')",
          "start": {
            "line": 410,
            "column": 8
          },
          "end": {
            "line": 410,
            "column": 27
          },
          "flags": [],
          "authors": [],
          "parameters": {},
          "deprecated": false,
          "deprecationReplacement": null
        }
      },
      "start": {
        "line": 9,
        "column": 15
      },
      "end": {
        "line": 464,
        "column": 1
      },
      "flags": [],
      "authors": [],
      "sourcefile": "./\\data\\schema\\JSON.js",
      "extends": "EventEmitter",
      "configuration": {},
      "properties": {
        "METADATA": {
          "type": "property",
          "label": "METADATA",
          "description": null,
          "code": "METADATA: NGN.private({\r\n        schema,\r\n        ID: null,\r\n        name: null\r\n      })",
          "start": {
            "line": 22,
            "column": 6
          },
          "end": {
            "line": 26,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": true
        },
        "PRIVATE": {
          "type": "property",
          "label": "PRIVATE",
          "description": null,
          "code": "PRIVATE: NGN.privateconst({\r\n        MODELS: null,\r\n        NET: NGN.coalesce(NetworkResource, NGN.NET),\r\n\r\n        parsed: false,\r\n\r\n        /**\r\n         * @method PRIVATE.extractCommonPropertyAttributes\r\n         * @param  {object} property\r\n         * Schema metadata object.\r\n         * @param {array} [models=[]]\r\n         * The list of known models. This is passed in because nested objects\r\n         * may exist within a property. NGN identifies these as nested models,\r\n         * even though the JSON schema does not force these to be separate\r\n         * schemas.\r\n         * @return {Object}\r\n         * Returns a clean \"NGN-ready\" field object of common properties.\r\n         */\r\n        extractCommonPropertyAttributes: (property, models = []) => {\r\n          let field = {}\r\n\r\n          // Add pattern\r\n          if (property.pattern) {\r\n            field.pattern = property.pattern\r\n          }\r\n\r\n          // Add description\r\n          if (property.description) {\r\n            field.description = property.description\r\n          }\r\n\r\n          // Add default\r\n          if (property.default) {\r\n            field.default = property.default\r\n          }\r\n\r\n          if (!property.$ref) {\r\n            if (!property.type) {\r\n              field.type = String\r\n            } else {\r\n              let type = NGN.typeof(property.type) === 'array' ? 'array' : property.type.trim().toLowerCase()\r\n\r\n              switch (type) {\r\n                case 'string':\r\n                  let format = NGN.coalesce(property.format, 'unknown').trim().toLowerCase()\r\n\r\n                  field.type = String\r\n\r\n                  switch (format) {\r\n                    case 'date':\r\n                    case 'date-time':\r\n                    case 'datetime':\r\n                    case 'format-time':\r\n                      field.type = Date\r\n                      break\r\n\r\n                    case 'ipv4':\r\n                      field.pattern = NGN.coalesce(\r\n                        property.pattern,\r\n                        /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$|^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\\-]*[A-Za-z0-9])$|^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$/ // eslint-disable-line no-useless-escape\r\n                      )\r\n\r\n                      break\r\n\r\n                    case 'ipv6':\r\n                      field.pattern = NGN.coalesce(\r\n                        property.pattern,\r\n                        /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$|^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\\-]*[A-Za-z0-9])$|^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$/ // eslint-disable-line no-useless-escape\r\n                      )\r\n\r\n                      break\r\n\r\n                    case 'email':\r\n                      field.pattern = NGN.coalesce(\r\n                        property.pattern,\r\n                        /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+(?:[A-Z]{2}|com|org|net|gov|mil|biz|info|mobi|name|aero|jobs|museum)\\b$/\r\n                      )\r\n\r\n                      break\r\n\r\n                    case 'hostname':\r\n                      field.pattern = NGN.coalesce(\r\n                        property.pattern,\r\n                        /^([a-zA-Z0-9]+(-[a-zA-Z0-9]+)*)+(\\.([a-zA-Z0-9]+(-[a-zA-Z0-9‌​]+)*))*$/ // eslint-disable-line no-irregular-whitespace\r\n                      )\r\n\r\n                      break\r\n\r\n                    case 'uri':\r\n                      field.pattern = NGN.coalesce(\r\n                        property.pattern,\r\n                        /(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]\\.[^\\s]{2,})/\r\n                      )\r\n\r\n                      break\r\n                  }\r\n\r\n                  break\r\n\r\n                case 'integer':\r\n                  field.type = Number\r\n                  field.pattern = /^\\d+$/\r\n                  break\r\n\r\n                case 'number':\r\n                  field.type = Number\r\n                  break\r\n\r\n                case 'object':\r\n                  if (property.properties) {\r\n                    let subschema = new NGN.DATA.JSONSchema(property)\r\n\r\n                    subschema.name = `${NGN.coalesce(this.name, 'untitled')}_${NGN.coalesce(subschema.name, 'submodel')}${models.length + 1}`\r\n\r\n                    subschema.getModelDefinitions(definitions => {\r\n                      definitions[definitions.length - 1].name = subschema.name\r\n                      models = definitions.concat(models)\r\n                    })\r\n\r\n                    field = {\r\n                      $model: subschema.name\r\n                    }\r\n                  } else {\r\n                    field.type = Object\r\n                  }\r\n\r\n                  break\r\n\r\n                default:\r\n                  field.type = String\r\n                  break\r\n              }\r\n            }\r\n          }\r\n\r\n          // String validation options\r\n          if (field.type === String || field.type === Number) {\r\n            if (NGN.coalesce(property.minLength, property.minimum)) {\r\n              field.min = NGN.coalesce(property.minLength, property.minimum)\r\n            }\r\n\r\n            if (NGN.coalesce(property.maxLength, property.maximum)) {\r\n              field.max = NGN.coalesce(property.maxLength, property.maximum)\r\n            }\r\n\r\n            // Numeric-specific validations\r\n            if (property.type === Number) {\r\n              if (property.multipleOf) {\r\n                field.multipleOf = property.multipleOf\r\n              }\r\n\r\n              if (property.exclusiveMinimum) {\r\n                field.min = (property.exclusiveMinimum + 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)\r\n              }\r\n\r\n              if (property.exclusiveMaximum) {\r\n                field.max = (property.exclusiveMaximum - 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)\r\n              }\r\n            }\r\n          }\r\n\r\n          // Array validation options\r\n          if (field.type === Array) {\r\n            // Support minimum array length\r\n            if (property.hasOwnProperty('minItems')) {\r\n              field.min = property.minItems\r\n            }\r\n\r\n            // Support maximum array length\r\n            if (property.hasOwnProperty('maxItems')) {\r\n              field.max = property.maxItems\r\n            }\r\n\r\n            if (property.hasOwnProperty('items')) {\r\n              if (NGN.typeof(property.items) === 'array') {\r\n                // Apply tuple validation\r\n                field.tuples = property.items\r\n              } else {\r\n                // Apply list validation\r\n                if (property.items.hasOwnProperty('type')) {\r\n                  field.listType = NGN.getType(property.items.type)\r\n                }\r\n\r\n                if (property.items.hasOwnProperty('enum')) {\r\n                  field.enum = property.items.enum\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          return field\r\n        },\r\n\r\n        /**\r\n         * @method PRIVATE.extractModelDefinitions\r\n         * Retrieve all of the NGN.DATA.Model defitions that can be interpreted\r\n         * from this schema.\r\n         * @protected\r\n         * @private\r\n         * @param  {Object} data\r\n         * The schema object.\r\n         * @param  {Array} [models=[]]\r\n         * An array of known models. This method is used recursively, so this\r\n         * argument exists primarily for internal use.\r\n         * @param  {Function} callback\r\n         * Executed when all models have been detected.\r\n         */\r\n        extractModelDefinitions: (data, models = [], callback) => {\r\n          if (NGN.isFn(models)) {\r\n            callback = models\r\n            models = []\r\n          }\r\n\r\n          if (data.type === 'object') {\r\n            let name = NGN.coalesce(data.name, this.name, 'Untitled')\r\n\r\n            if (data.hasOwnProperty('$schema') && name === null && this.METADATA.URL) {\r\n              name = this.METADATA.URL.split(/\\/|\\\\/).pop().replace('.json', '')\r\n            }\r\n\r\n            // Configure the basic model\r\n            let model = {\r\n              name,\r\n              description: NGN.coalesce(data.description, 'No description.'),\r\n              fields: {}\r\n            }\r\n\r\n            // Flag the ID for the schema\r\n            if (data.hasOwnProperty('$schema')) {\r\n              this.METADATA.ID = NGN.coalesce(data.$id, data.$schema)\r\n            }\r\n\r\n            // Queue the tasks since several are async but sequential\r\n            let tasks = new NGN.Tasks()\r\n\r\n            // If the allOf attribute exists, the schema is extending another.\r\n            // Extract the subschema before continuing.\r\n            if (data.hasOwnProperty('allOf')) {\r\n              for (let i = 0; i < data.allOf.length; i++) {\r\n                tasks.add(`Identify base schema: ${data.allOf}`, cont => {\r\n                  let URI = NGN.coalesce(data.allOf[i].$ref, data.allOf[i].$schema)\r\n\r\n                  if (URI !== null) {\r\n                    // When a URI is specified, retrieve the remote schema\r\n                    let baseSchema = new NGN.DATA.JSONSchema(URI)\r\n\r\n                    baseSchema.getModelDefinitions(definitions => {\r\n                      let coreModel = definitions.pop()\r\n\r\n                      Object.assign(model.fields, coreModel.fields)\r\n\r\n                      // If the nested schema has additional models, apply them.\r\n                      if (definitions.length > 0) {\r\n                        models = definitions.concat(models)\r\n                      }\r\n\r\n                      this.METADATA.name = NGN.coalesce(this.METADATA.name, coreModel.name)\r\n\r\n                      cont()\r\n                    })\r\n                  } else if (data.allOf[i].hasOwnProperty('properties')) {\r\n                    // Handle additional properties\r\n                    let additionalProperties = Object.keys(data.allOf[i].properties)\r\n\r\n                    for (let prop = 0; prop < additionalProperties.length; prop++) {\r\n                      model.fields[additionalProperties[prop]] = this.extractCommonPropertyAttributes(data.allOf[i].properties[additionalProperties[prop]])\r\n                    }\r\n\r\n                    cont()\r\n                  }\r\n                })\r\n              }\r\n            }\r\n\r\n            tasks.add('Identify attributes', cont => {\r\n              // If the schema specifies dependencies, it is specifying a set of\r\n              // rules requiring the existance and non-empty value of additional\r\n              // fields. Create NGN.DATA.Rule sets to support this.\r\n              if (data.hasOwnProperty('dependencies')) {\r\n                Object.keys(data.dependencies).forEach(dependency => {\r\n                  let requiredFields = null\r\n                  let dep = data.dependencies[dependency]\r\n\r\n                  if (NGN.typeof(dep) === 'array') {\r\n                    // Simple property dependencies\r\n                    requiredFields = dep\r\n                  } else if (dep.hasOwnProperty('required')) {\r\n                    // Schema dependencies\r\n                    requiredFields = dep.required\r\n                  }\r\n\r\n                  // Add all valid dependencies as rules\r\n                  if (requiredFields !== null) {\r\n                    model.rules[`${dependency} dependency on \"${requiredFields.join(', ')}\"`] = function () {\r\n                      if (NGN.coalesce(this[dependency]) !== null) {\r\n                        for (let i = 0; i < requiredFields.length; i++) {\r\n                          if (NGN.coalesce(this[requiredFields[i]]) === null) {\r\n                            return false\r\n                          }\r\n                        }\r\n                      }\r\n\r\n                      return true\r\n                    }\r\n                  }\r\n                })\r\n              }\r\n\r\n              // Identify the fields\r\n              let properties = Object.keys(data.properties)\r\n              let subtasks = new NGN.Tasks()\r\n\r\n              if (properties.length > 0) {\r\n                for (let i = 0; i < properties.length; i++) {\r\n                  let propertyName = properties[i]\r\n                  let property = data.properties[propertyName]\r\n\r\n                  model.fields[propertyName] = this.PRIVATE.extractCommonPropertyAttributes(property, models)\r\n\r\n                  // If this is a subschema, retrieve it.\r\n                  if (property.$ref) {\r\n                    subtasks.add(next => {\r\n                      let nestedModel = new NGN.DATA.JSONSchema(property.$ref)\r\n\r\n                      nestedModel.getModelDefinitions(definitions => {\r\n                        models = definitions.concat(models)\r\n\r\n                        model.fields[propertyName] = {\r\n                          $model: definitions[definitions.length - 1].name\r\n                        }\r\n\r\n                        next()\r\n                      })\r\n                    })\r\n                  }\r\n\r\n                  model.fields[propertyName].required = NGN.coalesce(data.required, '').indexOf(propertyName) >= 0\r\n                }\r\n              }\r\n\r\n              subtasks.on('complete', () => {\r\n                models.push(model)\r\n                cont()\r\n              })\r\n\r\n              subtasks.run(true)\r\n            })\r\n\r\n            tasks.on('complete', () => callback(models))\r\n            tasks.run(true)\r\n          } else {\r\n            callback(models)\r\n          }\r\n        }\r\n      })",
          "start": {
            "line": 28,
            "column": 6
          },
          "end": {
            "line": 382,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        },
        "id": {
          "type": "property",
          "label": "id",
          "description": null,
          "code": "get id () {\r\n    if (this.METADATA.ID) {\r\n      return this.METADATA.ID\r\n    }\r\n\r\n    let id = NGN.coalesce(this.METADATA.URL)\r\n\r\n    if (id !== null) {\r\n      return id\r\n    }\r\n\r\n    let root\r\n    /* node-only */\r\n    root = NGN.coalesce(this.PRIVATE.NET.baseUrl, `http://${require('os').hostname()}`)\r\n    /* end-node-only */\r\n    /* browser-only */\r\n    root = NGN.coalesce(this.PRIVATE.NET.baseUrl, window.location.origin)\r\n    /* end-browser-only */\r\n\r\n    this.METADATA.ID = this.PRIVATE.NET.normalizeUrl(`${root}/${NGN.coalesce(this.name, 'untitled').toLowerCase()}.json`)\r\n\r\n    return this.METADATA.ID\r\n  }",
          "start": {
            "line": 418,
            "column": 2
          },
          "end": {
            "line": 440,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "name": {
          "type": "property",
          "label": "name",
          "description": null,
          "code": "set name (value) {\r\n    this.METADATA.name = NGN.coalesce(value, 'Untitled')\r\n  }",
          "start": {
            "line": 446,
            "column": 2
          },
          "end": {
            "line": 448,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": false,
          "writable": true,
          "configuration": false,
          "private": false
        }
      },
      "methods": {
        "constructor": {
          "type": "method",
          "label": "constructor",
          "description": "Create a new JSON schema reference.\r\n  \r\n  The schema to parse. This can be the JSON schema object itself or the URL\r\n  of a remote JSON schema.\r\n  \r\n  Specify a custom network resource to make the request for a remote schema.",
          "code": "constructor (schema = {}, NetworkResource = null) {\r\n    super()\r\n\r\n    Object.defineProperties(this, {\r\n      METADATA: NGN.private({\r\n        schema,\r\n        ID: null,\r\n        name: null\r\n      }),\r\n\r\n      PRIVATE: NGN.privateconst({\r\n        MODELS: null,\r\n        NET: NGN.coalesce(NetworkResource, NGN.NET),\r\n\r\n        parsed: false,\r\n\r\n        /**\r\n         * @method PRIVATE.extractCommonPropertyAttributes\r\n         * @param  {object} property\r\n         * Schema metadata object.\r\n         * @param {array} [models=[]]\r\n         * The list of known models. This is passed in because nested objects\r\n         * may exist within a property. NGN identifies these as nested models,\r\n         * even though the JSON schema does not force these to be separate\r\n         * schemas.\r\n         * @return {Object}\r\n         * Returns a clean \"NGN-ready\" field object of common properties.\r\n         */\r\n        extractCommonPropertyAttributes: (property, models = []) => {\r\n          let field = {}\r\n\r\n          // Add pattern\r\n          if (property.pattern) {\r\n            field.pattern = property.pattern\r\n          }\r\n\r\n          // Add description\r\n          if (property.description) {\r\n            field.description = property.description\r\n          }\r\n\r\n          // Add default\r\n          if (property.default) {\r\n            field.default = property.default\r\n          }\r\n\r\n          if (!property.$ref) {\r\n            if (!property.type) {\r\n              field.type = String\r\n            } else {\r\n              let type = NGN.typeof(property.type) === 'array' ? 'array' : property.type.trim().toLowerCase()\r\n\r\n              switch (type) {\r\n                case 'string':\r\n                  let format = NGN.coalesce(property.format, 'unknown').trim().toLowerCase()\r\n\r\n                  field.type = String\r\n\r\n                  switch (format) {\r\n                    case 'date':\r\n                    case 'date-time':\r\n                    case 'datetime':\r\n                    case 'format-time':\r\n                      field.type = Date\r\n                      break\r\n\r\n                    case 'ipv4':\r\n                      field.pattern = NGN.coalesce(\r\n                        property.pattern,\r\n                        /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$|^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\\-]*[A-Za-z0-9])$|^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$/ // eslint-disable-line no-useless-escape\r\n                      )\r\n\r\n                      break\r\n\r\n                    case 'ipv6':\r\n                      field.pattern = NGN.coalesce(\r\n                        property.pattern,\r\n                        /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$|^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\\-]*[A-Za-z0-9])$|^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$/ // eslint-disable-line no-useless-escape\r\n                      )\r\n\r\n                      break\r\n\r\n                    case 'email':\r\n                      field.pattern = NGN.coalesce(\r\n                        property.pattern,\r\n                        /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+(?:[A-Z]{2}|com|org|net|gov|mil|biz|info|mobi|name|aero|jobs|museum)\\b$/\r\n                      )\r\n\r\n                      break\r\n\r\n                    case 'hostname':\r\n                      field.pattern = NGN.coalesce(\r\n                        property.pattern,\r\n                        /^([a-zA-Z0-9]+(-[a-zA-Z0-9]+)*)+(\\.([a-zA-Z0-9]+(-[a-zA-Z0-9‌​]+)*))*$/ // eslint-disable-line no-irregular-whitespace\r\n                      )\r\n\r\n                      break\r\n\r\n                    case 'uri':\r\n                      field.pattern = NGN.coalesce(\r\n                        property.pattern,\r\n                        /(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]\\.[^\\s]{2,})/\r\n                      )\r\n\r\n                      break\r\n                  }\r\n\r\n                  break\r\n\r\n                case 'integer':\r\n                  field.type = Number\r\n                  field.pattern = /^\\d+$/\r\n                  break\r\n\r\n                case 'number':\r\n                  field.type = Number\r\n                  break\r\n\r\n                case 'object':\r\n                  if (property.properties) {\r\n                    let subschema = new NGN.DATA.JSONSchema(property)\r\n\r\n                    subschema.name = `${NGN.coalesce(this.name, 'untitled')}_${NGN.coalesce(subschema.name, 'submodel')}${models.length + 1}`\r\n\r\n                    subschema.getModelDefinitions(definitions => {\r\n                      definitions[definitions.length - 1].name = subschema.name\r\n                      models = definitions.concat(models)\r\n                    })\r\n\r\n                    field = {\r\n                      $model: subschema.name\r\n                    }\r\n                  } else {\r\n                    field.type = Object\r\n                  }\r\n\r\n                  break\r\n\r\n                default:\r\n                  field.type = String\r\n                  break\r\n              }\r\n            }\r\n          }\r\n\r\n          // String validation options\r\n          if (field.type === String || field.type === Number) {\r\n            if (NGN.coalesce(property.minLength, property.minimum)) {\r\n              field.min = NGN.coalesce(property.minLength, property.minimum)\r\n            }\r\n\r\n            if (NGN.coalesce(property.maxLength, property.maximum)) {\r\n              field.max = NGN.coalesce(property.maxLength, property.maximum)\r\n            }\r\n\r\n            // Numeric-specific validations\r\n            if (property.type === Number) {\r\n              if (property.multipleOf) {\r\n                field.multipleOf = property.multipleOf\r\n              }\r\n\r\n              if (property.exclusiveMinimum) {\r\n                field.min = (property.exclusiveMinimum + 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)\r\n              }\r\n\r\n              if (property.exclusiveMaximum) {\r\n                field.max = (property.exclusiveMaximum - 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)\r\n              }\r\n            }\r\n          }\r\n\r\n          // Array validation options\r\n          if (field.type === Array) {\r\n            // Support minimum array length\r\n            if (property.hasOwnProperty('minItems')) {\r\n              field.min = property.minItems\r\n            }\r\n\r\n            // Support maximum array length\r\n            if (property.hasOwnProperty('maxItems')) {\r\n              field.max = property.maxItems\r\n            }\r\n\r\n            if (property.hasOwnProperty('items')) {\r\n              if (NGN.typeof(property.items) === 'array') {\r\n                // Apply tuple validation\r\n                field.tuples = property.items\r\n              } else {\r\n                // Apply list validation\r\n                if (property.items.hasOwnProperty('type')) {\r\n                  field.listType = NGN.getType(property.items.type)\r\n                }\r\n\r\n                if (property.items.hasOwnProperty('enum')) {\r\n                  field.enum = property.items.enum\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          return field\r\n        },\r\n\r\n        /**\r\n         * @method PRIVATE.extractModelDefinitions\r\n         * Retrieve all of the NGN.DATA.Model defitions that can be interpreted\r\n         * from this schema.\r\n         * @protected\r\n         * @private\r\n         * @param  {Object} data\r\n         * The schema object.\r\n         * @param  {Array} [models=[]]\r\n         * An array of known models. This method is used recursively, so this\r\n         * argument exists primarily for internal use.\r\n         * @param  {Function} callback\r\n         * Executed when all models have been detected.\r\n         */\r\n        extractModelDefinitions: (data, models = [], callback) => {\r\n          if (NGN.isFn(models)) {\r\n            callback = models\r\n            models = []\r\n          }\r\n\r\n          if (data.type === 'object') {\r\n            let name = NGN.coalesce(data.name, this.name, 'Untitled')\r\n\r\n            if (data.hasOwnProperty('$schema') && name === null && this.METADATA.URL) {\r\n              name = this.METADATA.URL.split(/\\/|\\\\/).pop().replace('.json', '')\r\n            }\r\n\r\n            // Configure the basic model\r\n            let model = {\r\n              name,\r\n              description: NGN.coalesce(data.description, 'No description.'),\r\n              fields: {}\r\n            }\r\n\r\n            // Flag the ID for the schema\r\n            if (data.hasOwnProperty('$schema')) {\r\n              this.METADATA.ID = NGN.coalesce(data.$id, data.$schema)\r\n            }\r\n\r\n            // Queue the tasks since several are async but sequential\r\n            let tasks = new NGN.Tasks()\r\n\r\n            // If the allOf attribute exists, the schema is extending another.\r\n            // Extract the subschema before continuing.\r\n            if (data.hasOwnProperty('allOf')) {\r\n              for (let i = 0; i < data.allOf.length; i++) {\r\n                tasks.add(`Identify base schema: ${data.allOf}`, cont => {\r\n                  let URI = NGN.coalesce(data.allOf[i].$ref, data.allOf[i].$schema)\r\n\r\n                  if (URI !== null) {\r\n                    // When a URI is specified, retrieve the remote schema\r\n                    let baseSchema = new NGN.DATA.JSONSchema(URI)\r\n\r\n                    baseSchema.getModelDefinitions(definitions => {\r\n                      let coreModel = definitions.pop()\r\n\r\n                      Object.assign(model.fields, coreModel.fields)\r\n\r\n                      // If the nested schema has additional models, apply them.\r\n                      if (definitions.length > 0) {\r\n                        models = definitions.concat(models)\r\n                      }\r\n\r\n                      this.METADATA.name = NGN.coalesce(this.METADATA.name, coreModel.name)\r\n\r\n                      cont()\r\n                    })\r\n                  } else if (data.allOf[i].hasOwnProperty('properties')) {\r\n                    // Handle additional properties\r\n                    let additionalProperties = Object.keys(data.allOf[i].properties)\r\n\r\n                    for (let prop = 0; prop < additionalProperties.length; prop++) {\r\n                      model.fields[additionalProperties[prop]] = this.extractCommonPropertyAttributes(data.allOf[i].properties[additionalProperties[prop]])\r\n                    }\r\n\r\n                    cont()\r\n                  }\r\n                })\r\n              }\r\n            }\r\n\r\n            tasks.add('Identify attributes', cont => {\r\n              // If the schema specifies dependencies, it is specifying a set of\r\n              // rules requiring the existance and non-empty value of additional\r\n              // fields. Create NGN.DATA.Rule sets to support this.\r\n              if (data.hasOwnProperty('dependencies')) {\r\n                Object.keys(data.dependencies).forEach(dependency => {\r\n                  let requiredFields = null\r\n                  let dep = data.dependencies[dependency]\r\n\r\n                  if (NGN.typeof(dep) === 'array') {\r\n                    // Simple property dependencies\r\n                    requiredFields = dep\r\n                  } else if (dep.hasOwnProperty('required')) {\r\n                    // Schema dependencies\r\n                    requiredFields = dep.required\r\n                  }\r\n\r\n                  // Add all valid dependencies as rules\r\n                  if (requiredFields !== null) {\r\n                    model.rules[`${dependency} dependency on \"${requiredFields.join(', ')}\"`] = function () {\r\n                      if (NGN.coalesce(this[dependency]) !== null) {\r\n                        for (let i = 0; i < requiredFields.length; i++) {\r\n                          if (NGN.coalesce(this[requiredFields[i]]) === null) {\r\n                            return false\r\n                          }\r\n                        }\r\n                      }\r\n\r\n                      return true\r\n                    }\r\n                  }\r\n                })\r\n              }\r\n\r\n              // Identify the fields\r\n              let properties = Object.keys(data.properties)\r\n              let subtasks = new NGN.Tasks()\r\n\r\n              if (properties.length > 0) {\r\n                for (let i = 0; i < properties.length; i++) {\r\n                  let propertyName = properties[i]\r\n                  let property = data.properties[propertyName]\r\n\r\n                  model.fields[propertyName] = this.PRIVATE.extractCommonPropertyAttributes(property, models)\r\n\r\n                  // If this is a subschema, retrieve it.\r\n                  if (property.$ref) {\r\n                    subtasks.add(next => {\r\n                      let nestedModel = new NGN.DATA.JSONSchema(property.$ref)\r\n\r\n                      nestedModel.getModelDefinitions(definitions => {\r\n                        models = definitions.concat(models)\r\n\r\n                        model.fields[propertyName] = {\r\n                          $model: definitions[definitions.length - 1].name\r\n                        }\r\n\r\n                        next()\r\n                      })\r\n                    })\r\n                  }\r\n\r\n                  model.fields[propertyName].required = NGN.coalesce(data.required, '').indexOf(propertyName) >= 0\r\n                }\r\n              }\r\n\r\n              subtasks.on('complete', () => {\r\n                models.push(model)\r\n                cont()\r\n              })\r\n\r\n              subtasks.run(true)\r\n            })\r\n\r\n            tasks.on('complete', () => callback(models))\r\n            tasks.run(true)\r\n          } else {\r\n            callback(models)\r\n          }\r\n        }\r\n      })\r\n    })\r\n\r\n    this.once('parsed', () => {\r\n      this.PRIVATE.parsed = true\r\n      this.METADATA.ID = NGN.coalesce(this.METADATA.schema.id, this.METADATA.schema.$schema)\r\n    })\r\n\r\n    // Initialize\r\n    switch (NGN.typeof(schema)) {\r\n      case 'string':\r\n        // If schema is actually a URL, retrieve it.\r\n        this.METADATA.URL = schema\r\n        this.PRIVATE.NET.json(schema, (err, schema) => {\r\n          if (err) {\r\n            throw err\r\n          }\r\n\r\n          this.METADATA.schema = schema\r\n          this.METADATA.name = NGN.coalesce(schema.name, this.METADATA.URL.split(/\\/|\\\\/).pop().replace('.json', ''))\r\n\r\n          this.emit('parsed')\r\n        })\r\n\r\n        break\r\n\r\n      case 'object':\r\n        this.METADATA.name = NGN.coalesce(schema.name, 'Untitled')\r\n        this.emit('parsed')\r\n        break\r\n\r\n      default:\r\n        throw new Error('Invalid schema definition.')\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 18,
            "column": 2
          },
          "end": {
            "line": 416,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "schema": {
              "type": "argument",
              "label": "schema",
              "description": "The schema to parse. This can be the JSON schema object itself or the URL\nof a remote JSON schema.",
              "code": "schema = {}",
              "start": {
                "line": 18,
                "column": 15
              },
              "end": {
                "line": 18,
                "column": 26
              },
              "flags": [],
              "authors": [],
              "default": "{}",
              "datatype": "object|string",
              "required": false,
              "enum": null
            },
            "NetworkResource": {
              "type": "argument",
              "label": "NetworkResource",
              "description": "Specify a custom network resource to make the request for a remote schema.",
              "code": "NetworkResource = null",
              "start": {
                "line": 18,
                "column": 28
              },
              "end": {
                "line": 18,
                "column": 50
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "ngn.net.resource",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "constructor",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "getModelDefinitions": {
          "type": "method",
          "label": "getModelDefinitions",
          "description": null,
          "code": "getModelDefinitions (callback) {\r\n    if (!this.PRIVATE.parsed) {\r\n      this.once('parsed', () => {\r\n        this.getModelDefinitions(callback)\r\n      })\r\n    } else if (!this.PRIVATE.MODELS) {\r\n      this.PRIVATE.extractModelDefinitions(this.METADATA.schema, [], definitions => {\r\n        this.PRIVATE.MODELS = definitions\r\n        callback(definitions)\r\n      })\r\n    } else {\r\n      callback(this.PRIVATE.MODELS)\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 450,
            "column": 2
          },
          "end": {
            "line": 463,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "callback": {
              "type": "argument",
              "label": "callback",
              "description": null,
              "code": "callback",
              "start": {
                "line": 450,
                "column": 23
              },
              "end": {
                "line": 450,
                "column": 31
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "PRIVATE.extractCommonPropertyAttributes": {
          "type": "method",
          "label": "PRIVATE.extractCommonPropertyAttributes",
          "description": "",
          "code": null,
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": null,
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "PRIVATE.extractModelDefinitions": {
          "type": "method",
          "label": "PRIVATE.extractModelDefinitions",
          "description": "Retrieve all of the NGN.DATA.Model defitions that can be interpreted\nfrom this schema.",
          "code": null,
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": null,
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        }
      }
    },
    "NGN.DATA.Store": {
      "type": "class",
      "label": "NGN.DATA.Store",
      "description": "An array of the field names for which the store maintains indexes.",
      "code": "class NGNDataStore extends EventEmitter { // eslint-disable-line\r\n  constructor (cfg = {}) {\r\n    if (NGN.typeof(cfg) === 'model') {\r\n      cfg = { model: cfg }\r\n    } else if (!cfg.model || !NGN.DATA.UTILITY.isDataModel(cfg.model)) {\r\n      throw new InvalidConfigurationError('Missing or invalid \"model\" configuration property.')\r\n    }\r\n\r\n    super()\r\n\r\n    const me = this\r\n\r\n    Object.defineProperties(this, {\r\n      /**\r\n       * @cfgproperty {string} [name]\r\n       * A descriptive name for the store. This is typically used for\r\n       * debugging, logging, and (somtimes) data proxies.\r\n       */\r\n      name: NGN.const(NGN.coalesce(cfg.name, 'Untitled Data Store')),\r\n\r\n      METADATA: NGN.private({\r\n        // Holds the models/records\r\n        records: [],\r\n\r\n        /**\r\n         * @cfgproperty {NGN.DATA.Model} model\r\n         * An NGN Data Model to which data records conform.\r\n         */\r\n        Model: NGN.coalesce(cfg.model),\r\n\r\n        /**\r\n         * @cfg {boolean} [allowDuplicates=true]\r\n         * Set to `false` to prevent duplicate records from being added.\r\n         * If a duplicate record is added, it will be ignored and an\r\n         * error will be thrown.\r\n         *\r\n         * **Identifying duplicates _may_ be slow** on data sets with 200+ records.\r\n         * Uniqueness is determined by a checksum of the current NGN.DATA.Model#data\r\n         * of a record. The amount of time required to generate a checksum can range\r\n         * from 3ms to 150ms per record depending on data complexity.\r\n         *\r\n         * In most scenarios, the performance impact will be negligible/indistinguishable\r\n         * to the naked eye. However; if an application experiences slow data\r\n         * load or processing times, setting this to `false` may help.\r\n         */\r\n        allowDuplicates: NGN.coalesce(cfg.allowDuplicates, true),\r\n\r\n        /**\r\n         * @cfg {boolean} [errorOnDuplicate=false]\r\n         * Set to `true` to throw an error when a duplicate record is detected.\r\n         * If this is not set, it will default to the value of #allowDuplicates.\r\n         * If #allowDuplicates is not defined either, this will be `true`\r\n         */\r\n        errorOnDuplicate: NGN.coalesce(cfg.errorOnDuplicate, cfg.allowDuplicates, false),\r\n\r\n        /**\r\n         * @cfg {boolean} [allowInvalid=true]\r\n         * Allow invalid records to be added to the store.\r\n         */\r\n        allowInvalid: NGN.coalesce(cfg.allowInvalid, true),\r\n\r\n        /**\r\n         * @cfg {boolean} [errorOnInvalid=false]\r\n         * Set to `true` to throw an error when an attempt is made to add an\r\n         * invalid record.\r\n         */\r\n        errorOnInvalid: NGN.coalesce(cfg.errorOnInvalid, cfg.allowInvalid, false),\r\n\r\n        /**\r\n         * @cfgproperty {boolean} [autoRemoveExpiredRecords=true]\r\n         * When set to `true`, the store will automatically delete expired records.\r\n         */\r\n        autoRemoveExpiredRecords: NGN.coalesce(cfg.autoRemoveExpiredRecords, true),\r\n\r\n        /**\r\n         * @cfg {boolean} [softDelete=false]\r\n         * When set to `true`, the store makes a copy of a record before removing\r\n         * it from the store. The store will still emit a `record.delete` event,\r\n         * and it will still behanve as though the record has been completely\r\n         * removed. However; the record copy can be retrieved using the #restore\r\n         * method.\r\n         *\r\n         * Since it is not always desirable to store a copy of every deleted\r\n         * record indefinitely, it is possible to expire and permanently remove\r\n         * records by setting the #softDeleteTtl.\r\n         *\r\n         * ```js\r\n         * var People = new NGN.DATA.Store({\r\n         *   model: Person,\r\n         *   softDelete: true,\r\n         *   softDeleteTtl: 10000\r\n         * })\r\n         *\r\n         * People.add(somePerson)\r\n         *\r\n         * var removedRecordId\r\n         * People.once('record.delete', function (record) {\r\n         *   removedRecordId = record.id\r\n         * })\r\n         *\r\n         * People.remove(somePerson)\r\n         *\r\n         * setTimeout(function () {\r\n         *   People.restore(removedRecordId)\r\n         * }, 5000)\r\n         *\r\n         * ```\r\n         *\r\n         * The code above creates a new store and adds a person to it.\r\n         * Then a placeholder variable (`removedRecordId`) is created.\r\n         * Next, a one-time event listener is added to the store, specifically\r\n         * for handling the removal of a record. Then the record is removed,\r\n         * which triggers the `record.delete` event, which populates\r\n         * `removedRecordId` with the ID of the record that was deleted.\r\n         * Finally, the code waits for 5 seconds, then restores the record. If\r\n         * the #restore method _wasn't_ called, the record would be purged\r\n         * from memory after 10 seconds (because `softDeleteTtl` is set to 10000\r\n         * milliseconds).\r\n         */\r\n        softDelete: NGN.coalesce(cfg.softDelete, false),\r\n\r\n        /**\r\n         * @cfg {number} [softDeleteTtl=-1]\r\n         * This is the number of milliseconds the store waits before purging a\r\n         * soft-deleted record from memory. `-1` = Infinite (no TTL).\r\n         */\r\n        softDeleteTtl: NGN.coalesce(cfg.softDeleteTtl, -1),\r\n\r\n        // ARCHIVE contains soft deleted records\r\n\r\n        /**\r\n         * @cfg {Number} [FIFO=-1]\r\n         * Configures the store to use \"**F**irst **I**n **F**irst **O**ut\"\r\n         * record processing when it reaches a maximum number of records.\r\n         *\r\n         * For example, assume `FIFO=10`. When the 11th record is added, it\r\n         * will replace the oldest record (i.e. the 1st). This guarantees the\r\n         * store will never have more than 10 records at any given time and it\r\n         * will always maintain the latest records.\r\n         *\r\n         * FIFO and LIFO cannot be applied at the same time.\r\n         *\r\n         * **BE CAREFUL** when using this in combination with #insert,\r\n         * #insertBefore, or #insertAfter. FIFO is applied _after_ the record\r\n         * is added to the store but _before_ it is moved to the desired index.\r\n         */\r\n        fifo: NGN.coalesce(cfg.FIFO, -1),\r\n\r\n        /**\r\n         * @cfg {Number} [LIFO=-1]\r\n         * Configures the store to use \"**L**ast **I**n **F**irst **O**ut\"\r\n         * record processing when it reaches a maximum number of records.\r\n         *\r\n         * This methos acts in the opposite manner as #FIFO. However; for\r\n         * all intents and purposes, this merely replaces the last record in\r\n         * the store when a new record is added.\r\n         *\r\n         * For example, assume `FIFO=10`. When the 11th record is added, it\r\n         * will replace the latest record (i.e. the 10th). This guarantees the\r\n         * store will never have more than 10 records at any given time. Every\r\n         * time a new record is added (assuming the store already has the maximum\r\n         * allowable records), it replaces the last record (10th) with the new\r\n         * record.\r\n         *\r\n         * LIFO and FIFO cannot be applied at the same time.\r\n         *\r\n         * **BE CAREFUL** when using this in combination with #insert,\r\n         * #insertBefore, or #insertAfter. LIFO is applied _after_ the record\r\n         * is added to the store but _before_ it is moved to the desired index.\r\n         */\r\n        lifo: NGN.coalesce(cfg.LIFO, -1),\r\n\r\n        /**\r\n         * @cfg {Number} [maxRecords=-1]\r\n         * Setting this will prevent new records from being added past this limit.\r\n         * Attempting to add a record to the store beyond it's maximum will throw\r\n         * an error.\r\n         */\r\n        maxRecords: NGN.coalesce(cfg.maxRecords, -1),\r\n\r\n        /**\r\n         * @cfg {Number} [minRecords=0]\r\n         * Setting this will prevent removal of records if the removal would\r\n         * decrease the count below this limit.\r\n         * Attempting to remove a record below the store's minimum will throw\r\n         * an error.\r\n         */\r\n        minRecords: NGN.coalesce(cfg.minRecords, 0),\r\n\r\n        /**\r\n         * @cfg {Number} [autocompact=50000]\r\n         * Identify the number of deletions that should occur before\r\n         * the store is compacted. See #compact. Set this to any value\r\n         * below `100` (the minimum) to disable autocompact.\r\n         */\r\n        autocompact: NGN.coalesce(cfg.autocompact, 50000),\r\n\r\n        /**\r\n         * @cfgproperty {object} fieldmap\r\n         * An object mapping model attribute names to data storage field names.\r\n         *\r\n         * _Example_\r\n         * ```\r\n         * {\r\n         *   ModelFieldName: 'inputName',\r\n         *   father: 'dad',\r\n         *   email: 'eml',\r\n         *   image: 'img',\r\n         *   displayName: 'dn',\r\n         *   firstName: 'gn',\r\n         *   lastName: 'sn',\r\n         *   middleName: 'mn',\r\n         *   gender: 'sex',\r\n         *   dob: 'bd'\r\n         * }\r\n         * ```\r\n         */\r\n        MAP: NGN.coalesce(cfg.fieldmap),\r\n\r\n        EVENTS: new Set([\r\n          'record.duplicate',\r\n          'record.create',\r\n          'record.update',\r\n          'record.delete',\r\n          'record.restored',\r\n          'record.purged',\r\n          'record.move',\r\n          'record.invalid',\r\n          'record.valid',\r\n          'clear',\r\n          'filter.create',\r\n          'filter.delete',\r\n          'index.create',\r\n          'index.delete',\r\n          'compact.start',\r\n          'compact.complete'\r\n        ]),\r\n\r\n        /**\r\n         * @cfg {boolean} [audit=false]\r\n         * Enable auditing to support #undo/#redo operations. This creates and\r\n         * manages a NGN.DATA.TransactionLog.\r\n         */\r\n        AUDITABLE: NGN.coalesce(cfg.audit, false),\r\n        AUDITLOG: NGN.coalesce(cfg.audit, false) ? new NGN.DATA.TransactionLog() : null,\r\n        AUDIT_HANDLER: (change) => {\r\n          if (change.hasOwnProperty('cursor')) {\r\n            this.METADATA.AUDITLOG.commit(this.METADATA.getAuditMap())\r\n          }\r\n        },\r\n\r\n        // The first and last indexes are maintained to determine which active\r\n        // record is considered first/last. Sometimes data is filtered out,\r\n        // so the first/last active record is not guaranteed to represent the\r\n        // first/last actual record. These indexes are maintained to prevent\r\n        // unnecessary iteration in large data sets.\r\n        FIRSTRECORDINDEX: 0,\r\n        LASTRECORDINDEX: 0,\r\n\r\n        /**\r\n         * @cfg {array} [index]\r\n         * An array of #model fields that will be indexed.\r\n         * See NGN.DATA.Index for details.\r\n         */\r\n        INDEX: null\r\n      }),\r\n\r\n      // Internal attributes that should not be extended.\r\n      PRIVATE: NGN.privateconst({\r\n        STUB: Symbol('record.stub'),\r\n\r\n        // A private indexing method\r\n        INDEX: function (record, delta) {\r\n          if (typeof this.event === 'symbol') {\r\n            switch (this.event) {\r\n              case me.PRIVATE.EVENT.CREATE_RECORD:\r\n                me.METADATA.INDEXFIELDS.forEach(field => me.METADATA.INDEX[field].add(record[field], record.OID))\r\n                break\r\n\r\n              case me.PRIVATE.EVENT.DELETE_RECORD:\r\n                me.METADATA.INDEXFIELDS.forEach(field => me.METADATA.INDEX[field].remove(record.OID, record[field]))\r\n                break\r\n\r\n              case me.PRIVATE.EVENT.LOAD_RECORDS:\r\n                for (let i = 0; i < me.METADATA.records.length; i++) {\r\n                  me.METADATA.INDEXFIELDS.forEach(field => me.METADATA.INDEX[field].add(me.METADATA.records[i][field], me.METADATA.records[i].OID))\r\n                }\r\n\r\n                break\r\n\r\n              case me.PRIVATE.EVENT.DELETE_RECORD_FIELD:\r\n                if (me.METADATA.INDEXFIELDS.has(record.field.name)) {\r\n                  me.METADATA.INDEX[record.field.name].remove(record.record.OID, record.field.value)\r\n                }\r\n\r\n                break\r\n            }\r\n          } else {\r\n            switch (this.event) {\r\n              case 'record.update':\r\n                if (me.METADATA.INDEXFIELDS.has(delta.field.name)) {\r\n                  me.METADATA.INDEX[delta.field.name].update(record.OID, delta.old, delta.new)\r\n                }\r\n                break\r\n\r\n              case 'clear':\r\n                me.METADATA.INDEXFIELDS.forEach(field => me.METADATA.INDEX[field].reset())\r\n                break\r\n            }\r\n          }\r\n        },\r\n\r\n        // Contains a map of all records\r\n        RECORDMAP: new Map(),\r\n\r\n        // A reference to active records\r\n        ACTIVERECORDMAP: null,\r\n\r\n        // A reference to filtered records (non-active/non-deleted)\r\n        FILTEREDRECORDMAP: null,\r\n\r\n        // Internal events\r\n        EVENT: {\r\n          CREATE_RECORD: Symbol('record.create'),\r\n          DELETE_RECORD: Symbol('record.delete'),\r\n          DELETE_RECORD_FIELD: Symbol('records.field.delete'),\r\n          LOAD_RECORDS: Symbol('records.load')\r\n        },\r\n\r\n        // Makes sure the model configuration specifies a valid and indexable field.\r\n        checkModelIndexField: (field) => {\r\n          let metaconfig = this.METADATA.Model.prototype.CONFIGURATION\r\n\r\n          if (metaconfig.fields && metaconfig.fields.hasOwnProperty(field)) {\r\n            if (metaconfig.fields[field] !== null) {\r\n              if (['model', 'store', 'entity', 'function'].indexOf(NGN.typeof(metaconfig.fields[field])) >= 0) {\r\n                throw new Error(`Cannot create index for \"${field}\" field. Only basic NGN.DATA.Field types can be indexed. Relationship and virtual fields cannot be indexed.`)\r\n              } else if (NGN.typeof(metaconfig.fields[field]) === 'object') {\r\n                if (['model', 'store', 'entity', 'function'].indexOf(NGN.typeof(NGN.coalesce(metaconfig.fields[field].type))) >= 0) {\r\n                  throw new Error(`Cannot create index for \"${field}\" field. Only basic NGN.DATA.Field types can be indexed. Relationship and virtual fields cannot be indexed.`)\r\n                }\r\n              }\r\n            }\r\n          } else {\r\n            throw new Error(`Cannot create index for unrecognized field \"${field}\".`)\r\n          }\r\n        },\r\n\r\n        // Get the type of field from the model definition\r\n        getModelFieldType: (field) => {\r\n          let metaconfig = this.METADATA.Model.prototype.CONFIGURATION\r\n\r\n          if (metaconfig.fields[field] === null) {\r\n            return NGN.typeof(metaconfig.fields[field])\r\n          }\r\n\r\n          if (metaconfig.fields[field].type) {\r\n            return NGN.typeof(metaconfig.fields[field].type)\r\n          }\r\n\r\n          if (metaconfig.fields[field].default) {\r\n            return NGN.typeof(metaconfig.fields[field].default)\r\n          }\r\n\r\n          return NGN.typeof(NGN.coalesce(metaconfig.fields[field]))\r\n        },\r\n\r\n        // Add a record\r\n        addRecord: (data, suppressEvents = false) => {\r\n          const record = new me.METADATA.Model(data)\r\n\r\n          if (!(record instanceof NGN.DATA.Entity)) {\r\n            throw new Error(`Only a NGN.DATA.Model or JSON object may be used in NGN.DATA.Store#add. Received a \"${NGN.typeof(data)}\" value.`)\r\n          }\r\n\r\n          // Prevent invalid record addition (if configured)\r\n          if (!me.METADATA.allowInvalid && !record.valid) {\r\n            NGN.WARN(`An attempt to add invalid data to the \"${this.name}\" store was prevented. The following fields are invalid: ${Array.from(record.METADATA.invalidFieldNames.keys()).join(', ')}`)\r\n\r\n            if (!suppressEvents) {\r\n              this.emit('record.invalid', record)\r\n            }\r\n\r\n            if (this.METADATA.errorOnInvalid) {\r\n              throw new Error(`Invalid data cannot be added to the \"${this.name}\" store.`)\r\n            }\r\n          }\r\n\r\n          // If duplicates are prevented, check the new data.\r\n          if (!me.METADATA.allowDuplicates) {\r\n            for (let i = 0; i < this.METADATA.records.length; i++) {\r\n              if (this.METADATA.records[i].checksum === record.checksum) {\r\n                NGN.WARN(`An attempt to add a duplicate record to the \"${this.name}\" store was prevented.`)\r\n\r\n                if (!suppressEvents) {\r\n                  this.emit('record.duplicate', record)\r\n                }\r\n\r\n                if (this.METADATA.errorOnDuplicate) {\r\n                  throw new Error(`Duplicate records are not allowed in the \"${this.name}\" data store.`)\r\n                }\r\n\r\n                break\r\n              }\r\n            }\r\n          }\r\n\r\n          // Handle special record count processing (LIFO/FIFO support)\r\n          if (me.METADATA.lifo > 0 && me.METADATA.records.length + 1 > me.METADATA.lifo) {\r\n            me.remove(me.METADATA.records.length - 1, suppressEvents)\r\n          } else if (this.METADATA.fifo > 0 && me.METADATA.records.length + 1 > me.METADATA.fifo) {\r\n            me.remove(0, suppressEvents)\r\n          }\r\n\r\n          // Relay model events to this store.\r\n          // record.relay('*', this, 'record.')\r\n          record.on('*', function () {\r\n            switch (this.event) {\r\n              // case 'field.update':\r\n              // case 'field.delete':\r\n              //   // TODO: Update indices\r\n              //   return\r\n\r\n              case 'field.invalid':\r\n              case 'field.valid':\r\n                return me.emit(this.event.replace('field.', 'record.'), record)\r\n\r\n              case 'expired':\r\n                // TODO: Handle expiration\r\n            }\r\n          })\r\n\r\n          delete record.METADATA.store\r\n          Object.defineProperty(record.METADATA, 'store', NGN.get(() => me))\r\n\r\n          // Indexing is handled in an internal event handler\r\n          me.METADATA.records.push(record)\r\n\r\n          // Add the record to the map for efficient retrievel by OID\r\n          me.PRIVATE.RECORDMAP.set(record.OID, me.METADATA.records.length - 1)\r\n\r\n          return record\r\n        },\r\n\r\n        convertStubToRecord: (index, record) => {\r\n          if (record.hasOwnProperty(this.PRIVATE.STUB)) {\r\n            let newRecord = this.PRIVATE.addRecord(record.metadata, false)\r\n            newRecord.OID = record.OID\r\n\r\n            this.METADATA.records[index] = newRecord\r\n\r\n            return newRecord\r\n          } else {\r\n            return record\r\n          }\r\n        }\r\n      }),\r\n\r\n      // Create a convenience alias for the remove method.\r\n      delete: NGN.const(NGN.deprecate(this.remove, 'Store.delete is deprecated. Use Store.remove instead.'))\r\n    })\r\n\r\n    // Create a smart reference to record lists\r\n    Object.defineProperties(this.PRIVATE, {\r\n      ACTIVERECORDS: NGN.get(() => {\r\n        if (this.PRIVATE.ACTIVERECORDMAP === null) {\r\n          return this.PRIVATE.RECORDMAP\r\n        }\r\n\r\n        return this.PRIVATE.ACTIVERECORDMAP\r\n      }),\r\n\r\n      FILTEREDRECORDS: NGN.get(() => {\r\n        if (this.PRIVATE.FILTEREDRECORDMAP === null) {\r\n          return this.PRIVATE.RECORDMAP\r\n        }\r\n\r\n        return this.PRIVATE.FILTEREDRECORDMAP\r\n      })\r\n    })\r\n\r\n    // Disallow modification of internal events\r\n    Object.freeze(this.PRIVATE.EVENT)\r\n\r\n    // Support LIFO (Last In First Out) & FIFO(First In First Out)\r\n    if (this.METADATA.lifo > 0 && this.METADATA.fifo > 0) {\r\n      throw new InvalidConfigurationError('NGN.DATA.Store can be configured to use FIFO or LIFO, but not both simultaneously.')\r\n    }\r\n\r\n    // If LIFO/FIFO is used, disable alternative record count limitations.\r\n    if (this.METADATA.lifo > 0 || this.METADATA.fifo > 0) {\r\n      this.METADATA.minRecords = 0\r\n      this.METADATA.maxRecords = -1\r\n    } else {\r\n      this.METADATA.minRecords = this.METADATA.minRecords < 0 ? 0 : this.METADATA.minRecords\r\n    }\r\n\r\n    // Bubble events to the BUS\r\n    // this.relay('*', NGN.BUS, 'store.')\r\n\r\n    // Configure Indices\r\n    if (NGN.coalesce(cfg.index) && NGN.typeof(this.METADATA.Model.prototype.CONFIGURATION.fields) === 'object') {\r\n      this.createIndex(cfg.index)\r\n    }\r\n\r\n    // Setup auto-compact\r\n    if (this.METADATA.autocompact < 100) {\r\n      this.METADATA.DELETECOUNT = 0\r\n      this.on(this.PRIVATE.EVENTS.DELETE_RECORD, () => {\r\n        this.METADATA.DELETECOUNT++\r\n\r\n        if (this.METADATA >= this.METADATA.autocompact) {\r\n          this.METADATA.DELETECOUNT = 0\r\n          this.compact()\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @property {array} snapshots\r\n   * Contains the data snapshot of the entire store.\r\n   * @readonly\r\n   * @private\r\n   */\r\n  get snapshots () {\r\n    return NGN.coalesce(this.snapshotarchive, [])\r\n  }\r\n\r\n  // Deprecation notice\r\n  get history () {\r\n    NGN.WARN('history is deprecated. Use NGN.DATA.Store#changelog instead.')\r\n    return this.changelog\r\n  }\r\n\r\n  // Deprecation notice\r\n  get recordCount () {\r\n    NGN.WARN('recordCount is deprecated. Use NGN.DATA.Store#size instead.')\r\n    return this.size\r\n  }\r\n\r\n  /**\r\n   * @property {number} count\r\n   * The total number of **active** records contained in the store.\r\n   * Active records are any records that aren't filtered out.\r\n   */\r\n  get size () {\r\n    return this.PRIVATE.ACTIVERECORDS.size\r\n  }\r\n\r\n  /**\r\n   * @property {number} length\r\n   * The total number of records contained in the store.\r\n   * This value does not include any soft-deleted/volatile records.\r\n   */\r\n  get length () {\r\n    return this.METADATA.records.length\r\n  }\r\n\r\n  /**\r\n   * @property {NGN.DATA.Model} first\r\n   * Return the first active record in the store. Returns `null`\r\n   * if the store is empty.\r\n   */\r\n  get first () {\r\n    let record = NGN.coalesce(this.METADATA.records[this.METADATA.FIRSTRECORDINDEX])\r\n\r\n    return this.PRIVATE.convertStubToRecord(this.METADATA.FIRSTRECORDINDEX, record)\r\n    // return NGN.coalesce(this.METADATA.records[this.METADATA.FIRSTRECORDINDEX])\r\n  }\r\n\r\n  /**\r\n   * @property {NGN.DATA.Model} last\r\n   * Return the last active record in the store. Returns `null`\r\n   * if the store is empty.\r\n   */\r\n  get last () {\r\n    let record = NGN.coalesce(this.METADATA.records[this.METADATA.LASTRECORDINDEX])\r\n\r\n    return this.PRIVATE.convertStubToRecord(this.METADATA.LASTRECORDINDEX, record)\r\n  }\r\n\r\n  /**\r\n   * @property {object} data\r\n   * A serialized version of the data represented by the store. This\r\n   * only includes non-virtual fields. See #representation to use\r\n   * a representation of data containing virtual fields.\r\n   */\r\n  get data () {\r\n    const recordList = this.PRIVATE.ACTIVERECORDS\r\n\r\n    // If no records exist, skip\r\n    if (recordList.size === 0) {\r\n      return []\r\n    }\r\n\r\n    let rec = this.PRIVATE.convertStubToRecord(this.METADATA.FIRSTRECORDINDEX, this.METADATA.records[this.METADATA.FIRSTRECORDINDEX])\r\n\r\n    if (this.METADATA.MAP === null) {\r\n      this.METADATA.MAP = NGN.coalesce(rec.MAP)\r\n    }\r\n\r\n    let defaults = null\r\n\r\n    if (rec instanceof NGN.DATA.Entity) {\r\n      let fieldDefinitions = rec.fieldDefinitions\r\n      let fields = Object.keys(fieldDefinitions)\r\n\r\n      defaults = {}\r\n\r\n      fields.forEach(field => {\r\n        if (!fieldDefinitions[field].hidden && !fieldDefinitions[field].virtual) {\r\n          defaults[field] = fieldDefinitions[field].default\r\n        }\r\n      })\r\n    }\r\n\r\n    const result = []\r\n    // const fields = defaults !== null ? Object.keys(defaults) : []\r\n\r\n    // Iterate through set\r\n    recordList.forEach(index => {\r\n      if (this.METADATA.records[index] !== null) {\r\n        // If the value is a stub, map it.\r\n        if (this.METADATA.records[index].hasOwnProperty(this.PRIVATE.STUB)) {\r\n          let applicableData = Object.assign({}, defaults)\r\n          let data = Object.assign(applicableData, this.METADATA.records[index].metadata)\r\n\r\n          if (this.METADATA.MAP !== null) {\r\n            result.push(this.METADATA.MAP.applyInverseMap(data))\r\n          } else {\r\n            result.push(data)\r\n          }\r\n        } else {\r\n          result.push(this.METADATA.records[index].data)\r\n        }\r\n      }\r\n    })\r\n\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * @property {array} representation\r\n   * The complete and unfiltered underlying representation dataset\r\n   * (data + virtuals of each model).\r\n   */\r\n  get representation () {\r\n    const result = []\r\n    const recordList = this.PRIVATE.ACTIVERECORDS\r\n\r\n    recordList.forEach(index => {\r\n      if (this.METADATA.records[index] !== null) {\r\n        result.push(this.METADATA.records[index].representation)\r\n      }\r\n    })\r\n\r\n    return result\r\n  }\r\n\r\n  get auditable () {\r\n    return this.METADATA.AUDITABLE\r\n  }\r\n\r\n  set auditable (value) {\r\n    value = NGN.forceBoolean(value)\r\n\r\n    if (value !== this.METADATA.AUDITABLE) {\r\n      this.METADATA.AUDITABLE = value\r\n      this.METADATA.AUDITLOG = value ? new NGN.DATA.TransactionLog() : null\r\n    }\r\n  }\r\n\r\n  get model () {\r\n    return this.METADATA.Model\r\n  }\r\n\r\n  // set model (value) {\r\n  //   if (value !== this.METADATA.Model) {\r\n  //     if (NGN.typeof(value) !== 'model') {\r\n  //       throw new InvalidConfigurationError(`\"${this.name}\" model could not be set because the value is a ${NGN.typeof(value)} type (requires NGN.DATA.Model).`)\r\n  //     }\r\n  //\r\n  //     this.METADATA.Model = value\r\n  //   }\r\n  // }\r\n\r\n  get map () {\r\n    return this.METADATA.MAP\r\n  }\r\n\r\n  /**\r\n   * @property {array} indexedFieldNames\r\n   * An array of the field names for which the store maintains indexes.\r\n   */\r\n  get indexedFieldNames () {\r\n    if (this.METADATA.INDEXFIELDS) {\r\n      return Array.from(this.METADATA.INDEXFIELDS)\r\n    } else {\r\n      return []\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method add\r\n   * Append a data record to the store. This adds the record to the end of the list.\r\n   * @param {NGN.DATA.Model|object} data\r\n   * Accepts an existing NGN Data Model or a JSON object.\r\n   * If a JSON object is supplied, it will be applied to\r\n   * the data model specified in #model.\r\n   * @param {boolean} [suppressEvents=false]\r\n   * Set this to `true` to prevent the `record.create` event\r\n   * from firing.\r\n   * @return {NGN.DATA.Model}\r\n   * Returns the new record.\r\n   */\r\n  add (data, suppressEvents = false) {\r\n    // Support array input\r\n    if (NGN.typeof(data) === 'array') {\r\n      let result = new Array(data.length)\r\n\r\n      for (let i = 0; i < data.length; i++) {\r\n        result[i] = this.add(data[i], suppressEvents)\r\n      }\r\n\r\n      return result\r\n    }\r\n\r\n    // Prevent creation if it will exceed maximum record count.\r\n    if (this.METADATA.maxRecords > 0 && this.METADATA.records.length + 1 > this.METADATA.maxRecords) {\r\n      throw new Error('Maximum record count exceeded.')\r\n    }\r\n\r\n    if (!(data instanceof this.METADATA.Model)) {\r\n      // Force a data model\r\n      if (NGN.typeof(data) === 'string') {\r\n        data = JSON.parse(data)\r\n      }\r\n\r\n      if (typeof data !== 'object') {\r\n        throw new Error(`${NGN.typeof(data)} is an invalid data type (must be an object conforming to the ${this.METADATA.Model.name} field configuration).`)\r\n      }\r\n    } else {\r\n      data = data.data\r\n    }\r\n\r\n    const record = this.PRIVATE.addRecord(data)\r\n\r\n    // TODO: Apply filters to new record before identifying the last record.\r\n    this.METADATA.LASTRECORDINDEX = this.METADATA.records.length - 1\r\n\r\n    this.emit(this.PRIVATE.EVENT.CREATE_RECORD, record)\r\n\r\n    if (!suppressEvents) {\r\n      this.emit('record.create', record)\r\n    }\r\n\r\n    return record\r\n  }\r\n\r\n  /**\r\n   * @method remove\r\n   * Remove a record.\r\n   * @param {NGN.DATA.Model|number|Symbol} record\r\n   * Accepts an existing NGN Data Model or index number.\r\n   * Using a model is slower than using an index number.\r\n   * This may also be the NGN.DATA.Model#OID value (for\r\n   * advanced use cases).\r\n   * @fires record.delete\r\n   * The record delete event sends 2 arguments to handler methods:\r\n   * `record` and `index`. The record refers to the model that was\r\n   * removed. The `index` refers to the position of the record within\r\n   * the store's data list. **NOTICE** the `index` refers to where\r\n   * the record _used to be_.\r\n   * @returns {NGN.DATA.Model}\r\n   * Returns the data model that was just removed. If a model\r\n   * is unavailable (i.e. remove didn't find the specified record),\r\n   * this will return `null`.\r\n   */\r\n  remove (record, suppressEvents = false) {\r\n    // Short-circuit processing if there are no records.\r\n    if (this.METADATA.records.length === 0) {\r\n      NGN.INFO(`\"${this.name}\" store called remove(), but the store contains no records.`)\r\n      return\r\n    }\r\n\r\n    // Support removal of simultaneously removing multiple records\r\n    if (NGN.typeof(record) === 'array') {\r\n      let result = new Array(record.length)\r\n\r\n      for (let i = 0; i < record.length; i++) {\r\n        result[i] = this.remove(record[i])\r\n      }\r\n\r\n      return result\r\n    }\r\n\r\n    // Prevent removal if it will exceed minimum record count.\r\n    if (this.minRecords > 0 && this.METADATA.records.length - 1 < this.minRecords) {\r\n      throw new Error('Removing this record would violate the minimum record count.')\r\n    }\r\n\r\n    // Identify which record will be removed.\r\n    let index\r\n\r\n    switch (NGN.typeof(record)) {\r\n      case 'number':\r\n        if (record < 0 || !this.METADATA.records[record]) {\r\n          NGN.ERROR(`Record removal failed (record not found at index ${(record || 'undefined').toString()}).`)\r\n          return null\r\n        }\r\n\r\n        index = record\r\n\r\n        break\r\n\r\n      // The default case comes before the symbol case specifically\r\n      // so the record can be converted to an OID value (for use with\r\n      // the RECORDMAP lookup).\r\n      default:\r\n        if (!(record instanceof NGN.DATA.Entity)) {\r\n          NGN.ERROR('Invalid record value passed to Store.remove() method.')\r\n          return null\r\n        }\r\n\r\n        record = record.OID\r\n\r\n      case 'symbol': // eslint-disable-line no-fallthrough\r\n        index = this.PRIVATE.ACTIVERECORDS.get(record)\r\n\r\n        if (index < 0) {\r\n          NGN.ERROR(`Record removal failed. Record OID not found (\"${record.toString()}\").`)\r\n          return null\r\n        }\r\n\r\n        break\r\n    }\r\n\r\n    // If nothing has been deleted yet, create an active record map.\r\n    // The active record map contains Model OID values with a reference\r\n    // to the actual record index.\r\n    if (this.PRIVATE.ACTIVERECORDMAP === null) {\r\n      // Copy the record map to initialize the active records\r\n      this.PRIVATE.ACTIVERECORDMAP = new Map(this.PRIVATE.RECORDMAP)\r\n    }\r\n\r\n    // Identify the record to be removed.\r\n    const removedRecord = this.METADATA.records[index]\r\n\r\n    // If the record isn't among the active records, do not remove it.\r\n    if (removedRecord === null) {\r\n      NGN.WARN('Specified record does not exist.')\r\n      return null\r\n    }\r\n\r\n    let activeIndex = this.PRIVATE.ACTIVERECORDS.get(removedRecord.OID)\r\n\r\n    if (isNaN(activeIndex)) {\r\n      NGN.WARN(`Record not found for \"${removedRecord.OID.toString()}\".`)\r\n      return null\r\n    }\r\n\r\n    this.PRIVATE.ACTIVERECORDS.delete(removedRecord.OID)\r\n\r\n    // If the store is configured to soft-delete,\r\n    // don't actually remove it until it expires.\r\n    if (this.METADATA.softDelete) {\r\n      if (this.METADATA.softDeleteTtl >= 0) {\r\n        removedRecord.once('expired', () => {\r\n          this.METADATA.records[this.PRIVATE.RECORDMAP.get(removedRecord.OID)] = null\r\n          this.PRIVATE.RECORDMAP.delete(removedRecord.OID)\r\n\r\n          if (!suppressEvents) {\r\n            this.emit('record.purge', removedRecord)\r\n          }\r\n        })\r\n\r\n        removedRecord.expires = this.METADATA.softDeleteTtl\r\n      }\r\n    } else {\r\n      this.METADATA.records[this.PRIVATE.RECORDMAP.get(removedRecord.OID)] = null\r\n      this.PRIVATE.RECORDMAP.delete(removedRecord.OID)\r\n    }\r\n\r\n    // Update cursor indexes (to quickly reference first and last active records)\r\n    if (this.METADATA.LASTRECORDINDEX === activeIndex) {\r\n      if (this.PRIVATE.ACTIVERECORDS.size <= 1) {\r\n        this.METADATA.LASTRECORDINDEX = this.PRIVATE.ACTIVERECORDS.values().next().value\r\n        this.METADATA.FIRSTRECORDINDEX = this.METADATA.LASTRECORDINDEX\r\n      } else if (activeIndex !== 0) {\r\n        for (let i = (activeIndex - 1); i >= 0; i--) {\r\n          if (i === 0) {\r\n            this.METADATA.LASTRECORDINDEX = 0\r\n            break\r\n          }\r\n\r\n          const examinedRecord = this.METADATA.records[i]\r\n\r\n          if (examinedRecord !== null) {\r\n            if (this.PRIVATE.ACTIVERECORDS.has(examinedRecord.OID)) {\r\n              this.METADATA.LASTRECORDINDEX = this.PRIVATE.ACTIVERECORDS.get(examinedRecord.OID)\r\n              break\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else if (this.METADATA.FIRSTRECORDINDEX === activeIndex) {\r\n      let totalSize = this.PRIVATE.ACTIVERECORDS.size\r\n\r\n      for (let i = (activeIndex + 1); i < totalSize; i++) {\r\n        const examinedRecord = this.METADATA.records[i]\r\n\r\n        if (examinedRecord !== null) {\r\n          if (this.PRIVATE.ACTIVERECORDS.has(examinedRecord.OID)) {\r\n            this.METADATA.FIRSTRECORDINDEX = this.PRIVATE.ACTIVERECORDS.get(examinedRecord.OID)\r\n            break\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.emit(this.PRIVATE.EVENT.DELETE_RECORD, removedRecord)\r\n\r\n    if (!suppressEvents) {\r\n      this.emit('record.delete', removedRecord)\r\n    }\r\n\r\n    return removedRecord\r\n  }\r\n\r\n  /**\r\n   * Create a new index on the store.\r\n   * @param  {string} field\r\n   * The name of the field to index.\r\n   * @fires index.create\r\n   * Triggered when an index is created. The name of field is passed\r\n   * as the only argument.\r\n   */\r\n  createIndex (field) {\r\n    // Support multiple indexes\r\n    if (NGN.typeof(field) === 'array') {\r\n      for (let i = 0; i < field.length; i++) {\r\n        this.createIndex(field[i])\r\n      }\r\n\r\n      return\r\n    }\r\n\r\n    // Make sure index fields are known to the store\r\n    if (!this.METADATA.INDEXFIELDS) {\r\n      this.METADATA.INDEXFIELDS = new Set()\r\n\r\n      // this.on('record.*', this.PRIVATE.INDEX)\r\n      this.on([\r\n        this.PRIVATE.EVENT.CREATE_RECORD,\r\n        this.PRIVATE.EVENT.DELETE_RECORD,\r\n        this.PRIVATE.EVENT.LOAD_RECORDS,\r\n        this.PRIVATE.EVENT.DELETE_RECORD_FIELD,\r\n        'clear'\r\n      ], this.PRIVATE.INDEX)\r\n    }\r\n\r\n    // In an index already exists, ignore it.\r\n    if (this.METADATA.INDEXFIELDS.has(field)) {\r\n      return\r\n    }\r\n\r\n    // Guarantee the existance of the index list\r\n    this.METADATA.INDEX = NGN.coalesce(this.METADATA.INDEX, {})\r\n\r\n    this.PRIVATE.checkModelIndexField(field)\r\n\r\n    this.METADATA.INDEXFIELDS.add(field)\r\n\r\n    // Identify BTree\r\n    let btree = ['number', 'date'].indexOf(this.PRIVATE.getModelFieldType(field)) >= 0\r\n\r\n    this.METADATA.INDEX[field] = new NGN.DATA.Index(btree, `${field.toUpperCase()} ${btree ? 'BTREE ' : ''}INDEX`)\r\n\r\n    // Apply to any existing records\r\n    if (this.METADATA.records.length > 0) {\r\n      this.PRIVATE.INDEX.apply({ event: this.PRIVATE.EVENT.LOAD_RECORDS })\r\n    }\r\n\r\n    this.emit('index.created', field)\r\n  }\r\n\r\n  /**\r\n   * Remove an existing index from the store.\r\n   * @param  {string} [field=null]\r\n   * The name of the indexed field. Set this to `null` (or leave blank) to\r\n   * remove all existing indexes.\r\n   * @fires index.delete\r\n   * Triggered when an index is removed. The name of field is passed\r\n   * as the only argument.\r\n   */\r\n  removeIndex (field = null) {\r\n    if (!this.METADATA.INDEXFIELDS) {\r\n      return\r\n    }\r\n\r\n    if (NGN.coalesce(field) === null) {\r\n      field = this.indexedFieldNames\r\n    }\r\n\r\n    // Support multiple indexes\r\n    if (NGN.typeof(field) === 'array') {\r\n      for (let i = 0; i < field.length; i++) {\r\n        this.removeIndex(field[i])\r\n      }\r\n\r\n      return\r\n    }\r\n\r\n    // Remove the specific index.\r\n    this.METADATA.INDEXFIELDS.delete(field)\r\n    delete this.METADATA.INDEX[field]\r\n    this.emit('index.delete', field)\r\n\r\n    // When there are no more indexes, clear out event\r\n    // listeners and fields.\r\n    if (this.METADATA.INDEXFIELDS.size === 0) {\r\n      this.METADATA.INDEX = null\r\n      delete this.METADATA.INDEXFIELDS\r\n\r\n      this.off([\r\n        this.PRIVATE.EVENT.CREATE_RECORD,\r\n        this.PRIVATE.EVENT.DELETE_RECORD,\r\n        this.PRIVATE.EVENT.LOAD_RECORDS,\r\n        this.PRIVATE.EVENT.DELETE_RECORD_FIELD\r\n      ], this.PRIVATE.INDEX)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieve a record based on it's relative position to another\r\n   * record. This method is used by NGN.DATA.Model#next and NGN.DATA.Model#previous\r\n   * to support \"doubly linked list\" approach to record iteration.\r\n   * @param  {[type]}  currentRecord [description]\r\n   * @param  {Number}  [count=1]     [description]\r\n   * @param  {Boolean} [cycle=false] [description]\r\n   * @return {[type]}                [description]\r\n   */\r\n  getRecordSibling (currentRecord, count = 1, cycle = false) {\r\n    let size = this.size\r\n\r\n    if (size === 0) {\r\n      NGN.WARN('Attempted to execute getRecordSibling with no active records.')\r\n      return null\r\n    }\r\n\r\n    // Make sure the iterator fits within the range\r\n    if (Math.abs(count) > size) {\r\n      count = count % size\r\n    }\r\n\r\n    if (size === 1 || count === 0) {\r\n      return currentRecord\r\n    }\r\n\r\n    let ActiveRecords = Array.from(this.PRIVATE.ACTIVERECORDS)\r\n    let currentIndex = ActiveRecords.findIndex(item => currentRecord.OID === item[0])\r\n\r\n    if (currentIndex < 0) {\r\n      throw new Error('Record not found.')\r\n    }\r\n\r\n    currentIndex += count\r\n\r\n    // Support cycling through records.\r\n    if ((currentIndex >= ActiveRecords.length || currentIndex < 0) && cycle) {\r\n      // Cycle forwards\r\n      if (count > 0) {\r\n        currentIndex = currentIndex % ActiveRecords.length\r\n      } else {\r\n        // Cycle Backwards\r\n        currentIndex = ActiveRecords.length - Math.abs(currentIndex)\r\n      }\r\n    }\r\n\r\n    if (currentIndex < 0 || currentIndex >= ActiveRecords.length) {\r\n      return null\r\n    }\r\n\r\n    return this.METADATA.records[ActiveRecords[currentIndex][1]]\r\n  }\r\n\r\n  /**\r\n   * Returns the index number of the model. If the same\r\n   * model exists more than once (duplicate records), only\r\n   * the first index is returned.\r\n   * @param  {NGN.DATA.Model} model\r\n   * The model/record to retrieve an index number for.\r\n   * @return {number}\r\n   * The zero-based index number of the model.\r\n   */\r\n  indexOf (record) {\r\n    return this.PRIVATE.RECORDMAP.get(record.OID)\r\n  }\r\n\r\n  /**\r\n   * Determine whether the store contains a record.\r\n   * This only checks the active record set (ignores filtered records).\r\n   * @param  {NGN.DATA.Model} record\r\n   * The record to test for inclusion.\r\n   * @return {boolean}\r\n   */\r\n  contains (record) {\r\n    return this.PRIVATE.ACTIVERECORDS.has(record.OID)\r\n  }\r\n\r\n  /**\r\n   * Get the list of records for the given value.\r\n   * @param {string} fieldName\r\n   * The name of the indexed field.\r\n   * @param  {any} fieldValue\r\n   * The value of the index field. This is used to lookup\r\n   * the list of records/models whose field is equal to\r\n   * the specified value.\r\n   * @return {NGN.DATA.Model[]}\r\n   * Returns an array of models/records within the index for\r\n   * the given value.\r\n   */\r\n  getIndexRecords (field, value) {\r\n    if (this.METADATA.INDEX && this.METADATA.INDEX.hasOwnProperty(field)) {\r\n      let oid = this.METADATA.INDEX[field].recordsFor(value)\r\n      let result = new Array(oid.length)\r\n\r\n      for (let i = 0; i < oid.length; i++) {\r\n        result[i] = this.METADATA.records[this.PRIVATE.RECORDMAP.get(oid[i])]\r\n      }\r\n\r\n      return result\r\n    }\r\n\r\n    return []\r\n  }\r\n\r\n  /**\r\n   * Retrieve an active record by index number (0-based, similar to an array).\r\n   * @param  {number} [index=0]\r\n   * The index of the record to retrieve.\r\n   */\r\n  getRecord (index = 0) {\r\n    if (typeof index === 'symbol') {\r\n      index = this.PRIVATE.ACTIVERECORDS.get(index)\r\n    }\r\n\r\n    if (index < 0) {\r\n      NGN.WARN('Cannot retrieve a record for a negative index.')\r\n      return null\r\n    }\r\n\r\n    if (index >= this.PRIVATE.ACTIVERECORDS.size) {\r\n      NGN.WARN('Cannot retrieve a record for an out-of-scope index (index greater than total record count.)')\r\n      return null\r\n    }\r\n\r\n    return this.METADATA.records[Array.from(this.PRIVATE.ACTIVERECORDS)[index][1]]\r\n  }\r\n\r\n  /**\r\n   * @method clear\r\n   * Removes all data. If auditing is enabled, the transaction log is reset.\r\n   * @param {boolean} [purgeSoftDelete=true]\r\n   * Purge soft deleted records from memory.\r\n   * @param {boolean} [suppressEvents=false]\r\n   * Set to `true` to prevent events from triggering when this method is run.\r\n   * @fires clear\r\n   * Fired when all data is removed\r\n   */\r\n  clear (purge = true, suppressEvents = false) {\r\n    if (this.METADATA.ARCHIVE) {\r\n      if (!purge) {\r\n        this.METADATA.ARCHIVE = this.records\r\n      } else {\r\n        delete this.METADATA.ARCHIVE\r\n      }\r\n    }\r\n\r\n    this.METADATA.records = []\r\n    this.PRIVATE.RECORDMAP = new Map()\r\n    this.PRIVATE.ACTIVERECORDMAP = null\r\n    this.PRIVATE.FILTEREDRECORDMAP = null\r\n    this.METADATA.LASTRECORDINDEX = 0\r\n    this.METADATA.FIRSTRECORDINDEX = 0\r\n\r\n    if (this.METADATA.AUDITABLE) {\r\n      this.METADATA.AUDITLOG.reset()\r\n    }\r\n\r\n    // Indexes updated automatically (listening for 'clear' event)\r\n\r\n    if (!suppressEvents) {\r\n      this.emit('clear')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A special method to clear events from the underlying event emitter.\r\n   * This exists because #clear has a special meaning in a data store (removing\r\n   * all data records vs removing all events).\r\n   * @private\r\n   */\r\n  clearEvents () {\r\n    super.clear(...arguments)\r\n  }\r\n\r\n  /**\r\n   * Replace a model.\r\n   * @deprecated 2.0.0\r\n   * @param  {NGN.DATA.Model} newModel\r\n   * The new model.\r\n   */\r\n  replaceModel (newModel) {\r\n    NGN.deprecate(\r\n      () => { this.model = newModel },\r\n      'replaceModel has been deprected. Set the model directly instead.'\r\n    )\r\n  }\r\n\r\n  /**\r\n   * @method snapshot\r\n   * Add a snapshot of the current store to the #snapshot archive.\r\n   * This can potentially be a computationally/memory-expensive operation.\r\n   * The method creates a copy of all data in the store along with checksums\r\n   * of each element and holds the snapshot in RAM. Large stores may consume\r\n   * large amounts of RAM until the snapshots are released/cleared.\r\n   * Snapshots are most commonly used with data proxies to calculate\r\n   * differences in a data set before persisting them to a database.\r\n   * @fires snapshot\r\n   * Triggered when a new snapshot is created. The snapshot dataset is\r\n   * passed as the only argument to event handlers.\r\n   * @returns {object}\r\n   * Returns an object containing the following fields:\r\n   *\r\n   * ```js\r\n   * {\r\n   *   timestamp: 'ex: 2018-01-19T16:43:03.279Z',\r\n   *   checksum: 'snapshotchecksum',\r\n   *   modelChecksums: [\r\n   *     'record1_checksum',\r\n   *     'record2_checksum'\r\n   *   ],\r\n   *   data: { ... } // Actual data at the time of the snapshot\r\n   * }\r\n   * ```\r\n   */\r\n  snapshot () {\r\n    this.METADATA.snapshotarchive = NGN.coalesce(this.METADATA.snapshotarchive, [])\r\n\r\n    let data = this.data\r\n    let dataset = {\r\n      id: NGN.DATA.UTILITY.GUID(),\r\n      timestamp: (new Date()).toISOString(),\r\n      checksum: NGN.DATA.UTILITY.checksum(JSON.stringify(data)).toString(),\r\n      modelChecksums: this.data.map((item) => {\r\n        return NGN.DATA.UTILITY.checksum(JSON.stringify(item)).toString()\r\n      }),\r\n      data: data\r\n    }\r\n\r\n    this.METADATA.snapshotarchive.unshift(dataset)\r\n    this.emit('snapshot', dataset)\r\n\r\n    return dataset\r\n  }\r\n\r\n  /**\r\n   * @method clearSnapshots\r\n   * Remove all archived snapshots.\r\n   */\r\n  clearSnapshots () {\r\n    this.snapshotarchive = null\r\n  }\r\n\r\n  load (data) {\r\n    console.time('load')\r\n    let insertableData\r\n\r\n    // Guarantee unique records amongst only the new records\r\n    if (!this.METADATA.allowDuplicates) {\r\n      let uniqueValues = new Set()\r\n\r\n      insertableData = []\r\n\r\n      for (let i = 0; i < data.length; i++) {\r\n        if (!uniqueValues.has(JSON.stringify(data[i]))) {\r\n          uniqueValues.add(JSON.stringify(data[i]))\r\n          insertableData.push(data[i])\r\n        } else if (this.METADATA.errorOnDuplicate) {\r\n          throw new NGNDuplicateRecordError()\r\n        }\r\n      }\r\n    } else {\r\n      insertableData = data\r\n    }\r\n\r\n    let newRecordCount = insertableData.length + this.METADATA.records.length\r\n\r\n    // Don't exceed the maximum record count if it exists.\r\n    if (this.METADATA.maxRecords > 0 && newRecordCount > this.METADATA.maxRecords) {\r\n      throw new Error('Maximum record count exceeded.')\r\n    }\r\n\r\n    if (newRecordCount > 4000000) {\r\n      throw new Error('Maximum load size exceeded. A store may contain a maximum of 4M records.')\r\n    }\r\n\r\n    for (let i = 0; i < insertableData.length; i++) {\r\n      let oid = Symbol('model.id')\r\n      this.METADATA.records.push({\r\n        [this.PRIVATE.STUB]: true,\r\n        OID: oid,\r\n        metadata: insertableData[i]\r\n      })\r\n\r\n      // Add the record to the map for efficient retrievel by OID\r\n      this.PRIVATE.RECORDMAP.set(oid, this.METADATA.records.length - 1)\r\n    }\r\n\r\n    // TODO: Apply filters to new record before identifying the last record.\r\n    this.METADATA.LASTRECORDINDEX = this.METADATA.records.length - 1\r\n\r\n    // this.emit(this.PRIVATE.EVENT.LOAD_RECORDS)\r\n  }\r\n\r\n  /**\r\n   * This rebuilds the local index of records, removing any dead records.\r\n   * While deleted records are destroyed (in accordance to #softDeleteTtl),\r\n   * the active record table contains a `null` or `undefined` value for each\r\n   * deleted/dead record. This method removes such records, akin in nature to\r\n   * the common JavaScript garbage collection process.\r\n   *\r\n   * This method almost never needs to be run, since stores\r\n   * attempt to manage this process for themselves automatically. However; if\r\n   * large volume deletions occur rapidly (50K+), it's possible (though not assured)\r\n   * performance could be negatively impacted. Compacting the store can\r\n   * improve performance in these cases. However; running this too often or\r\n   * excessively may degrade performance since it is essentially rewriting\r\n   * the store data each time.\r\n   *\r\n   * When in doubt, *don't* use this method.\r\n   * @info This method will not run when fewer than 100 cumulative records have\r\n   * existed in the store, due to the inefficient nature at such low volume.\r\n   * @fires compact.start\r\n   * Triggered when the compact process begins.\r\n   * @fires compact.complete\r\n   * Triggered when the compact process completes.\r\n   */\r\n  compact () {\r\n    this.emit('compact.start')\r\n\r\n    if (this.METADATA.records.length < 100) {\r\n      this.emit('compact.complete')\r\n\r\n      if (this.METADATA.records.length !== 0) {\r\n        NGN.WARN(`compact() called on ${this.name} with fewer than 100 elements.`)\r\n      }\r\n\r\n      return\r\n    }\r\n\r\n    let ranges = []\r\n    let currentRange = []\r\n    let empty = 0\r\n\r\n    // Identify null ranges (dead records)\r\n    for (let i = 0; i < this.METADATA.records.length; i++) {\r\n      if (this.METADATA.records[i] === null) {\r\n        empty++\r\n\r\n        if (currentRange.length === 0) {\r\n          currentRange.push(i)\r\n        }\r\n      } else {\r\n        // Identify new index values for remaining records\r\n        if (empty > 0) {\r\n          this.PRIVATE.RECORDMAP.set(this.METADATA.records[i].OID, i - empty)\r\n\r\n          if (this.METADATA.FIRSTRECORDINDEX === i) {\r\n            this.METADATA.FIRSTRECORDINDEX = i - empty\r\n          }\r\n\r\n          if (this.METADATA.LASTRECORDINDEX === i) {\r\n            this.METADATA.LASTRECORDINDEX = i - empty\r\n          }\r\n        }\r\n\r\n        if (currentRange.length === 1) {\r\n          currentRange.push(i - 1)\r\n          ranges.push(currentRange)\r\n          currentRange = []\r\n        }\r\n      }\r\n    }\r\n\r\n    // Clear null ranges\r\n    empty = 0\r\n    while (ranges.length > 0) {\r\n      this.METADATA.records.splice(ranges[0][0] - empty, ranges[0][1] - ranges[0][0] + 1)\r\n      empty += ranges[0][1] - ranges[0][0] + 1\r\n      ranges.shift()\r\n    }\r\n\r\n    // Reset the active record map\r\n    this.PRIVATE.ACTIVERECORDMAP = null\r\n\r\n    this.emit('compact.complete')\r\n  }\r\n\r\n  /**\r\n   * Performs executes the callback method on each active record\r\n   * within the store. For example:\r\n   *\r\n   * ```js\r\n   * Store.forEach(function (record) {\r\n   *   // Do Something\r\n   * })\r\n   * ```\r\n   * @param  {Function} callback\r\n   * The callback method is applied to each record.\r\n   */\r\n  forEach (fn) {\r\n    if (!NGN.isFn(fn)) {\r\n      throw new Error(`A ${NGN.typeof(fn)} was applied to ${this.name}'s each() method when a function was expected.`)\r\n    }\r\n\r\n    this.PRIVATE.ACTIVERECORDS.forEach((value, key, map) => {\r\n      fn(this.METADATA.records[value])\r\n    })\r\n  }\r\n}",
      "tags": {},
      "exceptions": {},
      "events": {
        "record.create": {
          "type": "event",
          "label": "record.create",
          "description": null,
          "code": "this.emit('record.create', record)",
          "start": {
            "line": 786,
            "column": 6
          },
          "end": {
            "line": 786,
            "column": 40
          },
          "flags": [],
          "authors": [],
          "parameters": {
            "record": {
              "type": "argument",
              "label": "record",
              "description": null,
              "code": "record",
              "start": {
                "line": 786,
                "column": 33
              },
              "end": {
                "line": 786,
                "column": 39
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "deprecated": false,
          "deprecationReplacement": null
        },
        "record.delete": {
          "type": "event",
          "label": "record.delete",
          "description": "The record delete event sends 2 arguments to handler methods:\n`record` and `index`. The record refers to the model that was\nremoved. The `index` refers to the position of the record within\nthe store's data list. **NOTICE** the `index` refers to where\nthe record _used to be_.",
          "code": "@fires record.delete\nThe record delete event sends 2 arguments to handler methods:\n`record` and `index`. The record refers to the model that was\nremoved. The `index` refers to the position of the record within\nthe store's data list. **NOTICE** the `index` refers to where\nthe record _used to be_.",
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "parameters": {
            "payload": {
              "type": "argument",
              "label": "payload",
              "description": null,
              "code": null,
              "start": {
                "line": 0,
                "column": 0
              },
              "end": {
                "line": 0,
                "column": 0
              },
              "flags": [],
              "authors": [],
              "datatype": "",
              "required": false,
              "enum": null
            }
          },
          "deprecated": false,
          "deprecationReplacement": null
        },
        "record.update": {
          "type": "event",
          "label": "record.update",
          "description": "Fired when a record is modified. A change object\nis provided as an argument to event handlers. The object\ncontains a reference to the store, the old record, and\nthe new record.\n\n```\n{\nstore: <current data store>,\nnew: <NGN.DATA.Model>,\nold: <NGN.DATA.Model>\n}\n```",
          "code": "@fires record.update\nFired when a record(s) is modified. A change object\nis provided as an argument to event handlers. The object\ncontains a reference to the store, the old record, and\nthe new record.\n\n```\n{\nstore: <current data store>,\nnew: <NGN.DATA.Model>,\nold: <NGN.DATA.Model>\n}\n```",
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "parameters": {
            "payload": {
              "type": "argument",
              "label": "payload",
              "description": null,
              "code": null,
              "start": {
                "line": 0,
                "column": 0
              },
              "end": {
                "line": 0,
                "column": 0
              },
              "flags": [],
              "authors": [],
              "datatype": "",
              "required": false,
              "enum": null
            }
          },
          "deprecated": false,
          "deprecationReplacement": null
        },
        "record.invalid": {
          "type": "event",
          "label": "record.invalid",
          "description": null,
          "code": "this.emit('record.invalid', record)",
          "start": {
            "line": 412,
            "column": 14
          },
          "end": {
            "line": 412,
            "column": 49
          },
          "flags": [],
          "authors": [],
          "parameters": {
            "record": {
              "type": "argument",
              "label": "record",
              "description": null,
              "code": "record",
              "start": {
                "line": 412,
                "column": 42
              },
              "end": {
                "line": 412,
                "column": 48
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "deprecated": false,
          "deprecationReplacement": null
        },
        "record.duplicate": {
          "type": "event",
          "label": "record.duplicate",
          "description": null,
          "code": "this.emit('record.duplicate', record)",
          "start": {
            "line": 427,
            "column": 18
          },
          "end": {
            "line": 427,
            "column": 55
          },
          "flags": [],
          "authors": [],
          "parameters": {
            "record": {
              "type": "argument",
              "label": "record",
              "description": null,
              "code": "record",
              "start": {
                "line": 427,
                "column": 48
              },
              "end": {
                "line": 427,
                "column": 54
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "deprecated": false,
          "deprecationReplacement": null
        },
        "record.purge": {
          "type": "event",
          "label": "record.purge",
          "description": null,
          "code": "this.emit('record.purge', removedRecord)",
          "start": {
            "line": 905,
            "column": 12
          },
          "end": {
            "line": 905,
            "column": 52
          },
          "flags": [],
          "authors": [],
          "parameters": {
            "removedRecord": {
              "type": "argument",
              "label": "removedRecord",
              "description": null,
              "code": "removedRecord",
              "start": {
                "line": 905,
                "column": 38
              },
              "end": {
                "line": 905,
                "column": 51
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "deprecated": false,
          "deprecationReplacement": null
        },
        "index.created": {
          "type": "event",
          "label": "index.created",
          "description": null,
          "code": "this.emit('index.created', field)",
          "start": {
            "line": 1016,
            "column": 4
          },
          "end": {
            "line": 1016,
            "column": 37
          },
          "flags": [],
          "authors": [],
          "parameters": {
            "field": {
              "type": "argument",
              "label": "field",
              "description": null,
              "code": "field",
              "start": {
                "line": 1016,
                "column": 31
              },
              "end": {
                "line": 1016,
                "column": 36
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "deprecated": false,
          "deprecationReplacement": null
        },
        "index.create": {
          "type": "event",
          "label": "index.create",
          "description": "Triggered when an index is created. The name of field is passed\nas the only argument.",
          "code": "@fires index.create\nTriggered when an index is created. The name of field is passed\nas the only argument.",
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "parameters": {
            "payload": {
              "type": "argument",
              "label": "payload",
              "description": null,
              "code": null,
              "start": {
                "line": 0,
                "column": 0
              },
              "end": {
                "line": 0,
                "column": 0
              },
              "flags": [],
              "authors": [],
              "datatype": "",
              "required": false,
              "enum": null
            }
          },
          "deprecated": false,
          "deprecationReplacement": null
        },
        "index.delete": {
          "type": "event",
          "label": "index.delete",
          "description": "Triggered when an index is removed. The name of field is passed\nas the only argument.",
          "code": "@fires index.delete\nTriggered when an index is removed. The name of field is passed\nas the only argument.",
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "parameters": {
            "payload": {
              "type": "argument",
              "label": "payload",
              "description": null,
              "code": null,
              "start": {
                "line": 0,
                "column": 0
              },
              "end": {
                "line": 0,
                "column": 0
              },
              "flags": [],
              "authors": [],
              "datatype": "",
              "required": false,
              "enum": null
            }
          },
          "deprecated": false,
          "deprecationReplacement": null
        },
        "clear": {
          "type": "event",
          "label": "clear",
          "description": "Fired when all data is removed",
          "code": "@fires clear\nFired when all data is removed",
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "parameters": {
            "payload": {
              "type": "argument",
              "label": "payload",
              "description": null,
              "code": null,
              "start": {
                "line": 0,
                "column": 0
              },
              "end": {
                "line": 0,
                "column": 0
              },
              "flags": [],
              "authors": [],
              "datatype": "",
              "required": false,
              "enum": null
            }
          },
          "deprecated": false,
          "deprecationReplacement": null
        },
        "snapshot": {
          "type": "event",
          "label": "snapshot",
          "description": "Triggered when a new snapshot is created. The snapshot dataset is\npassed as the only argument to event handlers.",
          "code": "@fires snapshot\nTriggered when a new snapshot is created. The snapshot dataset is\npassed as the only argument to event handlers.",
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "parameters": {
            "payload": {
              "type": "argument",
              "label": "payload",
              "description": null,
              "code": null,
              "start": {
                "line": 0,
                "column": 0
              },
              "end": {
                "line": 0,
                "column": 0
              },
              "flags": [],
              "authors": [],
              "datatype": "",
              "required": false,
              "enum": null
            }
          },
          "deprecated": false,
          "deprecationReplacement": null
        },
        "compact.start": {
          "type": "event",
          "label": "compact.start",
          "description": "Triggered when the compact process begins.",
          "code": "@fires compact.start\nTriggered when the compact process begins.",
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "parameters": {
            "payload": {
              "type": "argument",
              "label": "payload",
              "description": null,
              "code": null,
              "start": {
                "line": 0,
                "column": 0
              },
              "end": {
                "line": 0,
                "column": 0
              },
              "flags": [],
              "authors": [],
              "datatype": "",
              "required": false,
              "enum": null
            }
          },
          "deprecated": false,
          "deprecationReplacement": null
        },
        "compact.complete": {
          "type": "event",
          "label": "compact.complete",
          "description": "Triggered when the compact process completes.",
          "code": "@fires compact.complete\nTriggered when the compact process completes.",
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "parameters": {
            "payload": {
              "type": "argument",
              "label": "payload",
              "description": null,
              "code": null,
              "start": {
                "line": 0,
                "column": 0
              },
              "end": {
                "line": 0,
                "column": 0
              },
              "flags": [],
              "authors": [],
              "datatype": "",
              "required": false,
              "enum": null
            }
          },
          "deprecated": false,
          "deprecationReplacement": null
        }
      },
      "start": {
        "line": 32,
        "column": 15
      },
      "end": {
        "line": 1464,
        "column": 1
      },
      "flags": [],
      "authors": [],
      "sourcefile": "./\\data\\Store.js",
      "extends": "EventEmitter",
      "configuration": {
        "name": {
          "type": "property",
          "label": "name",
          "description": "A descriptive name for the store. This is typically used for\ndebugging, logging, and  data proxies.",
          "code": "name: NGN.const(NGN.coalesce(cfg.name, 'Untitled Data Store'))",
          "start": {
            "line": 50,
            "column": 6
          },
          "end": {
            "line": 50,
            "column": 68
          },
          "flags": [],
          "authors": [],
          "default": null,
          "datatype": "string",
          "readable": true,
          "writable": false,
          "configuration": true,
          "private": false
        }
      },
      "properties": {
        "name": {
          "type": "property",
          "label": "name",
          "description": "A descriptive name for the store. This is typically used for\ndebugging, logging, and  data proxies.",
          "code": "name: NGN.const(NGN.coalesce(cfg.name, 'Untitled Data Store'))",
          "start": {
            "line": 50,
            "column": 6
          },
          "end": {
            "line": 50,
            "column": 68
          },
          "flags": [],
          "authors": [],
          "default": null,
          "datatype": "string",
          "readable": true,
          "writable": false,
          "configuration": true,
          "private": false
        },
        "METADATA": {
          "type": "property",
          "label": "METADATA",
          "description": null,
          "code": "METADATA: NGN.private({\r\n        // Holds the models/records\r\n        records: [],\r\n\r\n        /**\r\n         * @cfgproperty {NGN.DATA.Model} model\r\n         * An NGN Data Model to which data records conform.\r\n         */\r\n        Model: NGN.coalesce(cfg.model),\r\n\r\n        /**\r\n         * @cfg {boolean} [allowDuplicates=true]\r\n         * Set to `false` to prevent duplicate records from being added.\r\n         * If a duplicate record is added, it will be ignored and an\r\n         * error will be thrown.\r\n         *\r\n         * **Identifying duplicates _may_ be slow** on data sets with 200+ records.\r\n         * Uniqueness is determined by a checksum of the current NGN.DATA.Model#data\r\n         * of a record. The amount of time required to generate a checksum can range\r\n         * from 3ms to 150ms per record depending on data complexity.\r\n         *\r\n         * In most scenarios, the performance impact will be negligible/indistinguishable\r\n         * to the naked eye. However; if an application experiences slow data\r\n         * load or processing times, setting this to `false` may help.\r\n         */\r\n        allowDuplicates: NGN.coalesce(cfg.allowDuplicates, true),\r\n\r\n        /**\r\n         * @cfg {boolean} [errorOnDuplicate=false]\r\n         * Set to `true` to throw an error when a duplicate record is detected.\r\n         * If this is not set, it will default to the value of #allowDuplicates.\r\n         * If #allowDuplicates is not defined either, this will be `true`\r\n         */\r\n        errorOnDuplicate: NGN.coalesce(cfg.errorOnDuplicate, cfg.allowDuplicates, false),\r\n\r\n        /**\r\n         * @cfg {boolean} [allowInvalid=true]\r\n         * Allow invalid records to be added to the store.\r\n         */\r\n        allowInvalid: NGN.coalesce(cfg.allowInvalid, true),\r\n\r\n        /**\r\n         * @cfg {boolean} [errorOnInvalid=false]\r\n         * Set to `true` to throw an error when an attempt is made to add an\r\n         * invalid record.\r\n         */\r\n        errorOnInvalid: NGN.coalesce(cfg.errorOnInvalid, cfg.allowInvalid, false),\r\n\r\n        /**\r\n         * @cfgproperty {boolean} [autoRemoveExpiredRecords=true]\r\n         * When set to `true`, the store will automatically delete expired records.\r\n         */\r\n        autoRemoveExpiredRecords: NGN.coalesce(cfg.autoRemoveExpiredRecords, true),\r\n\r\n        /**\r\n         * @cfg {boolean} [softDelete=false]\r\n         * When set to `true`, the store makes a copy of a record before removing\r\n         * it from the store. The store will still emit a `record.delete` event,\r\n         * and it will still behanve as though the record has been completely\r\n         * removed. However; the record copy can be retrieved using the #restore\r\n         * method.\r\n         *\r\n         * Since it is not always desirable to store a copy of every deleted\r\n         * record indefinitely, it is possible to expire and permanently remove\r\n         * records by setting the #softDeleteTtl.\r\n         *\r\n         * ```js\r\n         * var People = new NGN.DATA.Store({\r\n         *   model: Person,\r\n         *   softDelete: true,\r\n         *   softDeleteTtl: 10000\r\n         * })\r\n         *\r\n         * People.add(somePerson)\r\n         *\r\n         * var removedRecordId\r\n         * People.once('record.delete', function (record) {\r\n         *   removedRecordId = record.id\r\n         * })\r\n         *\r\n         * People.remove(somePerson)\r\n         *\r\n         * setTimeout(function () {\r\n         *   People.restore(removedRecordId)\r\n         * }, 5000)\r\n         *\r\n         * ```\r\n         *\r\n         * The code above creates a new store and adds a person to it.\r\n         * Then a placeholder variable (`removedRecordId`) is created.\r\n         * Next, a one-time event listener is added to the store, specifically\r\n         * for handling the removal of a record. Then the record is removed,\r\n         * which triggers the `record.delete` event, which populates\r\n         * `removedRecordId` with the ID of the record that was deleted.\r\n         * Finally, the code waits for 5 seconds, then restores the record. If\r\n         * the #restore method _wasn't_ called, the record would be purged\r\n         * from memory after 10 seconds (because `softDeleteTtl` is set to 10000\r\n         * milliseconds).\r\n         */\r\n        softDelete: NGN.coalesce(cfg.softDelete, false),\r\n\r\n        /**\r\n         * @cfg {number} [softDeleteTtl=-1]\r\n         * This is the number of milliseconds the store waits before purging a\r\n         * soft-deleted record from memory. `-1` = Infinite (no TTL).\r\n         */\r\n        softDeleteTtl: NGN.coalesce(cfg.softDeleteTtl, -1),\r\n\r\n        // ARCHIVE contains soft deleted records\r\n\r\n        /**\r\n         * @cfg {Number} [FIFO=-1]\r\n         * Configures the store to use \"**F**irst **I**n **F**irst **O**ut\"\r\n         * record processing when it reaches a maximum number of records.\r\n         *\r\n         * For example, assume `FIFO=10`. When the 11th record is added, it\r\n         * will replace the oldest record (i.e. the 1st). This guarantees the\r\n         * store will never have more than 10 records at any given time and it\r\n         * will always maintain the latest records.\r\n         *\r\n         * FIFO and LIFO cannot be applied at the same time.\r\n         *\r\n         * **BE CAREFUL** when using this in combination with #insert,\r\n         * #insertBefore, or #insertAfter. FIFO is applied _after_ the record\r\n         * is added to the store but _before_ it is moved to the desired index.\r\n         */\r\n        fifo: NGN.coalesce(cfg.FIFO, -1),\r\n\r\n        /**\r\n         * @cfg {Number} [LIFO=-1]\r\n         * Configures the store to use \"**L**ast **I**n **F**irst **O**ut\"\r\n         * record processing when it reaches a maximum number of records.\r\n         *\r\n         * This methos acts in the opposite manner as #FIFO. However; for\r\n         * all intents and purposes, this merely replaces the last record in\r\n         * the store when a new record is added.\r\n         *\r\n         * For example, assume `FIFO=10`. When the 11th record is added, it\r\n         * will replace the latest record (i.e. the 10th). This guarantees the\r\n         * store will never have more than 10 records at any given time. Every\r\n         * time a new record is added (assuming the store already has the maximum\r\n         * allowable records), it replaces the last record (10th) with the new\r\n         * record.\r\n         *\r\n         * LIFO and FIFO cannot be applied at the same time.\r\n         *\r\n         * **BE CAREFUL** when using this in combination with #insert,\r\n         * #insertBefore, or #insertAfter. LIFO is applied _after_ the record\r\n         * is added to the store but _before_ it is moved to the desired index.\r\n         */\r\n        lifo: NGN.coalesce(cfg.LIFO, -1),\r\n\r\n        /**\r\n         * @cfg {Number} [maxRecords=-1]\r\n         * Setting this will prevent new records from being added past this limit.\r\n         * Attempting to add a record to the store beyond it's maximum will throw\r\n         * an error.\r\n         */\r\n        maxRecords: NGN.coalesce(cfg.maxRecords, -1),\r\n\r\n        /**\r\n         * @cfg {Number} [minRecords=0]\r\n         * Setting this will prevent removal of records if the removal would\r\n         * decrease the count below this limit.\r\n         * Attempting to remove a record below the store's minimum will throw\r\n         * an error.\r\n         */\r\n        minRecords: NGN.coalesce(cfg.minRecords, 0),\r\n\r\n        /**\r\n         * @cfg {Number} [autocompact=50000]\r\n         * Identify the number of deletions that should occur before\r\n         * the store is compacted. See #compact. Set this to any value\r\n         * below `100` (the minimum) to disable autocompact.\r\n         */\r\n        autocompact: NGN.coalesce(cfg.autocompact, 50000),\r\n\r\n        /**\r\n         * @cfgproperty {object} fieldmap\r\n         * An object mapping model attribute names to data storage field names.\r\n         *\r\n         * _Example_\r\n         * ```\r\n         * {\r\n         *   ModelFieldName: 'inputName',\r\n         *   father: 'dad',\r\n         *   email: 'eml',\r\n         *   image: 'img',\r\n         *   displayName: 'dn',\r\n         *   firstName: 'gn',\r\n         *   lastName: 'sn',\r\n         *   middleName: 'mn',\r\n         *   gender: 'sex',\r\n         *   dob: 'bd'\r\n         * }\r\n         * ```\r\n         */\r\n        MAP: NGN.coalesce(cfg.fieldmap),\r\n\r\n        EVENTS: new Set([\r\n          'record.duplicate',\r\n          'record.create',\r\n          'record.update',\r\n          'record.delete',\r\n          'record.restored',\r\n          'record.purged',\r\n          'record.move',\r\n          'record.invalid',\r\n          'record.valid',\r\n          'clear',\r\n          'filter.create',\r\n          'filter.delete',\r\n          'index.create',\r\n          'index.delete',\r\n          'compact.start',\r\n          'compact.complete'\r\n        ]),\r\n\r\n        /**\r\n         * @cfg {boolean} [audit=false]\r\n         * Enable auditing to support #undo/#redo operations. This creates and\r\n         * manages a NGN.DATA.TransactionLog.\r\n         */\r\n        AUDITABLE: NGN.coalesce(cfg.audit, false),\r\n        AUDITLOG: NGN.coalesce(cfg.audit, false) ? new NGN.DATA.TransactionLog() : null,\r\n        AUDIT_HANDLER: (change) => {\r\n          if (change.hasOwnProperty('cursor')) {\r\n            this.METADATA.AUDITLOG.commit(this.METADATA.getAuditMap())\r\n          }\r\n        },\r\n\r\n        // The first and last indexes are maintained to determine which active\r\n        // record is considered first/last. Sometimes data is filtered out,\r\n        // so the first/last active record is not guaranteed to represent the\r\n        // first/last actual record. These indexes are maintained to prevent\r\n        // unnecessary iteration in large data sets.\r\n        FIRSTRECORDINDEX: 0,\r\n        LASTRECORDINDEX: 0,\r\n\r\n        /**\r\n         * @cfg {array} [index]\r\n         * An array of #model fields that will be indexed.\r\n         * See NGN.DATA.Index for details.\r\n         */\r\n        INDEX: null\r\n      })",
          "start": {
            "line": 52,
            "column": 6
          },
          "end": {
            "line": 297,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": true
        },
        "PRIVATE": {
          "type": "property",
          "label": "PRIVATE",
          "description": null,
          "code": "PRIVATE: NGN.privateconst({\r\n        STUB: Symbol('record.stub'),\r\n\r\n        // A private indexing method\r\n        INDEX: function (record, delta) {\r\n          if (typeof this.event === 'symbol') {\r\n            switch (this.event) {\r\n              case me.PRIVATE.EVENT.CREATE_RECORD:\r\n                me.METADATA.INDEXFIELDS.forEach(field => me.METADATA.INDEX[field].add(record[field], record.OID))\r\n                break\r\n\r\n              case me.PRIVATE.EVENT.DELETE_RECORD:\r\n                me.METADATA.INDEXFIELDS.forEach(field => me.METADATA.INDEX[field].remove(record.OID, record[field]))\r\n                break\r\n\r\n              case me.PRIVATE.EVENT.LOAD_RECORDS:\r\n                for (let i = 0; i < me.METADATA.records.length; i++) {\r\n                  me.METADATA.INDEXFIELDS.forEach(field => me.METADATA.INDEX[field].add(me.METADATA.records[i][field], me.METADATA.records[i].OID))\r\n                }\r\n\r\n                break\r\n\r\n              case me.PRIVATE.EVENT.DELETE_RECORD_FIELD:\r\n                if (me.METADATA.INDEXFIELDS.has(record.field.name)) {\r\n                  me.METADATA.INDEX[record.field.name].remove(record.record.OID, record.field.value)\r\n                }\r\n\r\n                break\r\n            }\r\n          } else {\r\n            switch (this.event) {\r\n              case 'record.update':\r\n                if (me.METADATA.INDEXFIELDS.has(delta.field.name)) {\r\n                  me.METADATA.INDEX[delta.field.name].update(record.OID, delta.old, delta.new)\r\n                }\r\n                break\r\n\r\n              case 'clear':\r\n                me.METADATA.INDEXFIELDS.forEach(field => me.METADATA.INDEX[field].reset())\r\n                break\r\n            }\r\n          }\r\n        },\r\n\r\n        // Contains a map of all records\r\n        RECORDMAP: new Map(),\r\n\r\n        // A reference to active records\r\n        ACTIVERECORDMAP: null,\r\n\r\n        // A reference to filtered records (non-active/non-deleted)\r\n        FILTEREDRECORDMAP: null,\r\n\r\n        // Internal events\r\n        EVENT: {\r\n          CREATE_RECORD: Symbol('record.create'),\r\n          DELETE_RECORD: Symbol('record.delete'),\r\n          DELETE_RECORD_FIELD: Symbol('records.field.delete'),\r\n          LOAD_RECORDS: Symbol('records.load')\r\n        },\r\n\r\n        // Makes sure the model configuration specifies a valid and indexable field.\r\n        checkModelIndexField: (field) => {\r\n          let metaconfig = this.METADATA.Model.prototype.CONFIGURATION\r\n\r\n          if (metaconfig.fields && metaconfig.fields.hasOwnProperty(field)) {\r\n            if (metaconfig.fields[field] !== null) {\r\n              if (['model', 'store', 'entity', 'function'].indexOf(NGN.typeof(metaconfig.fields[field])) >= 0) {\r\n                throw new Error(`Cannot create index for \"${field}\" field. Only basic NGN.DATA.Field types can be indexed. Relationship and virtual fields cannot be indexed.`)\r\n              } else if (NGN.typeof(metaconfig.fields[field]) === 'object') {\r\n                if (['model', 'store', 'entity', 'function'].indexOf(NGN.typeof(NGN.coalesce(metaconfig.fields[field].type))) >= 0) {\r\n                  throw new Error(`Cannot create index for \"${field}\" field. Only basic NGN.DATA.Field types can be indexed. Relationship and virtual fields cannot be indexed.`)\r\n                }\r\n              }\r\n            }\r\n          } else {\r\n            throw new Error(`Cannot create index for unrecognized field \"${field}\".`)\r\n          }\r\n        },\r\n\r\n        // Get the type of field from the model definition\r\n        getModelFieldType: (field) => {\r\n          let metaconfig = this.METADATA.Model.prototype.CONFIGURATION\r\n\r\n          if (metaconfig.fields[field] === null) {\r\n            return NGN.typeof(metaconfig.fields[field])\r\n          }\r\n\r\n          if (metaconfig.fields[field].type) {\r\n            return NGN.typeof(metaconfig.fields[field].type)\r\n          }\r\n\r\n          if (metaconfig.fields[field].default) {\r\n            return NGN.typeof(metaconfig.fields[field].default)\r\n          }\r\n\r\n          return NGN.typeof(NGN.coalesce(metaconfig.fields[field]))\r\n        },\r\n\r\n        // Add a record\r\n        addRecord: (data, suppressEvents = false) => {\r\n          const record = new me.METADATA.Model(data)\r\n\r\n          if (!(record instanceof NGN.DATA.Entity)) {\r\n            throw new Error(`Only a NGN.DATA.Model or JSON object may be used in NGN.DATA.Store#add. Received a \"${NGN.typeof(data)}\" value.`)\r\n          }\r\n\r\n          // Prevent invalid record addition (if configured)\r\n          if (!me.METADATA.allowInvalid && !record.valid) {\r\n            NGN.WARN(`An attempt to add invalid data to the \"${this.name}\" store was prevented. The following fields are invalid: ${Array.from(record.METADATA.invalidFieldNames.keys()).join(', ')}`)\r\n\r\n            if (!suppressEvents) {\r\n              this.emit('record.invalid', record)\r\n            }\r\n\r\n            if (this.METADATA.errorOnInvalid) {\r\n              throw new Error(`Invalid data cannot be added to the \"${this.name}\" store.`)\r\n            }\r\n          }\r\n\r\n          // If duplicates are prevented, check the new data.\r\n          if (!me.METADATA.allowDuplicates) {\r\n            for (let i = 0; i < this.METADATA.records.length; i++) {\r\n              if (this.METADATA.records[i].checksum === record.checksum) {\r\n                NGN.WARN(`An attempt to add a duplicate record to the \"${this.name}\" store was prevented.`)\r\n\r\n                if (!suppressEvents) {\r\n                  this.emit('record.duplicate', record)\r\n                }\r\n\r\n                if (this.METADATA.errorOnDuplicate) {\r\n                  throw new Error(`Duplicate records are not allowed in the \"${this.name}\" data store.`)\r\n                }\r\n\r\n                break\r\n              }\r\n            }\r\n          }\r\n\r\n          // Handle special record count processing (LIFO/FIFO support)\r\n          if (me.METADATA.lifo > 0 && me.METADATA.records.length + 1 > me.METADATA.lifo) {\r\n            me.remove(me.METADATA.records.length - 1, suppressEvents)\r\n          } else if (this.METADATA.fifo > 0 && me.METADATA.records.length + 1 > me.METADATA.fifo) {\r\n            me.remove(0, suppressEvents)\r\n          }\r\n\r\n          // Relay model events to this store.\r\n          // record.relay('*', this, 'record.')\r\n          record.on('*', function () {\r\n            switch (this.event) {\r\n              // case 'field.update':\r\n              // case 'field.delete':\r\n              //   // TODO: Update indices\r\n              //   return\r\n\r\n              case 'field.invalid':\r\n              case 'field.valid':\r\n                return me.emit(this.event.replace('field.', 'record.'), record)\r\n\r\n              case 'expired':\r\n                // TODO: Handle expiration\r\n            }\r\n          })\r\n\r\n          delete record.METADATA.store\r\n          Object.defineProperty(record.METADATA, 'store', NGN.get(() => me))\r\n\r\n          // Indexing is handled in an internal event handler\r\n          me.METADATA.records.push(record)\r\n\r\n          // Add the record to the map for efficient retrievel by OID\r\n          me.PRIVATE.RECORDMAP.set(record.OID, me.METADATA.records.length - 1)\r\n\r\n          return record\r\n        },\r\n\r\n        convertStubToRecord: (index, record) => {\r\n          if (record.hasOwnProperty(this.PRIVATE.STUB)) {\r\n            let newRecord = this.PRIVATE.addRecord(record.metadata, false)\r\n            newRecord.OID = record.OID\r\n\r\n            this.METADATA.records[index] = newRecord\r\n\r\n            return newRecord\r\n          } else {\r\n            return record\r\n          }\r\n        }\r\n      })",
          "start": {
            "line": 300,
            "column": 6
          },
          "end": {
            "line": 488,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        },
        "delete": {
          "type": "property",
          "label": "delete",
          "description": null,
          "code": "delete: NGN.const(NGN.deprecate(this.remove, 'Store.delete is deprecated. Use Store.remove instead.'))",
          "start": {
            "line": 491,
            "column": 6
          },
          "end": {
            "line": 491,
            "column": 108
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "snapshots": {
          "type": "property",
          "label": "snapshots",
          "description": null,
          "code": "get snapshots () {\r\n    return NGN.coalesce(this.snapshotarchive, [])\r\n  }",
          "start": {
            "line": 557,
            "column": 2
          },
          "end": {
            "line": 559,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "history": {
          "type": "property",
          "label": "history",
          "description": null,
          "code": "get history () {\r\n    NGN.WARN('history is deprecated. Use NGN.DATA.Store#changelog instead.')\r\n    return this.changelog\r\n  }",
          "start": {
            "line": 562,
            "column": 2
          },
          "end": {
            "line": 565,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "recordCount": {
          "type": "property",
          "label": "recordCount",
          "description": null,
          "code": "get recordCount () {\r\n    NGN.WARN('recordCount is deprecated. Use NGN.DATA.Store#size instead.')\r\n    return this.size\r\n  }",
          "start": {
            "line": 568,
            "column": 2
          },
          "end": {
            "line": 571,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "size": {
          "type": "property",
          "label": "size",
          "description": null,
          "code": "get size () {\r\n    return this.PRIVATE.ACTIVERECORDS.size\r\n  }",
          "start": {
            "line": 578,
            "column": 2
          },
          "end": {
            "line": 580,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "length": {
          "type": "property",
          "label": "length",
          "description": null,
          "code": "get length () {\r\n    return this.METADATA.records.length\r\n  }",
          "start": {
            "line": 587,
            "column": 2
          },
          "end": {
            "line": 589,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "first": {
          "type": "property",
          "label": "first",
          "description": null,
          "code": "get first () {\r\n    let record = NGN.coalesce(this.METADATA.records[this.METADATA.FIRSTRECORDINDEX])\r\n\r\n    return this.PRIVATE.convertStubToRecord(this.METADATA.FIRSTRECORDINDEX, record)\r\n    // return NGN.coalesce(this.METADATA.records[this.METADATA.FIRSTRECORDINDEX])\r\n  }",
          "start": {
            "line": 596,
            "column": 2
          },
          "end": {
            "line": 601,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "last": {
          "type": "property",
          "label": "last",
          "description": null,
          "code": "get last () {\r\n    let record = NGN.coalesce(this.METADATA.records[this.METADATA.LASTRECORDINDEX])\r\n\r\n    return this.PRIVATE.convertStubToRecord(this.METADATA.LASTRECORDINDEX, record)\r\n  }",
          "start": {
            "line": 608,
            "column": 2
          },
          "end": {
            "line": 612,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "data": {
          "type": "property",
          "label": "data",
          "description": null,
          "code": "get data () {\r\n    const recordList = this.PRIVATE.ACTIVERECORDS\r\n\r\n    // If no records exist, skip\r\n    if (recordList.size === 0) {\r\n      return []\r\n    }\r\n\r\n    let rec = this.PRIVATE.convertStubToRecord(this.METADATA.FIRSTRECORDINDEX, this.METADATA.records[this.METADATA.FIRSTRECORDINDEX])\r\n\r\n    if (this.METADATA.MAP === null) {\r\n      this.METADATA.MAP = NGN.coalesce(rec.MAP)\r\n    }\r\n\r\n    let defaults = null\r\n\r\n    if (rec instanceof NGN.DATA.Entity) {\r\n      let fieldDefinitions = rec.fieldDefinitions\r\n      let fields = Object.keys(fieldDefinitions)\r\n\r\n      defaults = {}\r\n\r\n      fields.forEach(field => {\r\n        if (!fieldDefinitions[field].hidden && !fieldDefinitions[field].virtual) {\r\n          defaults[field] = fieldDefinitions[field].default\r\n        }\r\n      })\r\n    }\r\n\r\n    const result = []\r\n    // const fields = defaults !== null ? Object.keys(defaults) : []\r\n\r\n    // Iterate through set\r\n    recordList.forEach(index => {\r\n      if (this.METADATA.records[index] !== null) {\r\n        // If the value is a stub, map it.\r\n        if (this.METADATA.records[index].hasOwnProperty(this.PRIVATE.STUB)) {\r\n          let applicableData = Object.assign({}, defaults)\r\n          let data = Object.assign(applicableData, this.METADATA.records[index].metadata)\r\n\r\n          if (this.METADATA.MAP !== null) {\r\n            result.push(this.METADATA.MAP.applyInverseMap(data))\r\n          } else {\r\n            result.push(data)\r\n          }\r\n        } else {\r\n          result.push(this.METADATA.records[index].data)\r\n        }\r\n      }\r\n    })\r\n\r\n    return result\r\n  }",
          "start": {
            "line": 620,
            "column": 2
          },
          "end": {
            "line": 672,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "representation": {
          "type": "property",
          "label": "representation",
          "description": null,
          "code": "get representation () {\r\n    const result = []\r\n    const recordList = this.PRIVATE.ACTIVERECORDS\r\n\r\n    recordList.forEach(index => {\r\n      if (this.METADATA.records[index] !== null) {\r\n        result.push(this.METADATA.records[index].representation)\r\n      }\r\n    })\r\n\r\n    return result\r\n  }",
          "start": {
            "line": 679,
            "column": 2
          },
          "end": {
            "line": 690,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "auditable": {
          "type": "property",
          "label": "auditable",
          "description": null,
          "code": "set auditable (value) {\r\n    value = NGN.forceBoolean(value)\r\n\r\n    if (value !== this.METADATA.AUDITABLE) {\r\n      this.METADATA.AUDITABLE = value\r\n      this.METADATA.AUDITLOG = value ? new NGN.DATA.TransactionLog() : null\r\n    }\r\n  }",
          "start": {
            "line": 696,
            "column": 2
          },
          "end": {
            "line": 703,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": false,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "model": {
          "type": "property",
          "label": "model",
          "description": null,
          "code": "get model () {\r\n    return this.METADATA.Model\r\n  }",
          "start": {
            "line": 705,
            "column": 2
          },
          "end": {
            "line": 707,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "map": {
          "type": "property",
          "label": "map",
          "description": null,
          "code": "get map () {\r\n    return this.METADATA.MAP\r\n  }",
          "start": {
            "line": 719,
            "column": 2
          },
          "end": {
            "line": 721,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "indexedFieldNames": {
          "type": "property",
          "label": "indexedFieldNames",
          "description": null,
          "code": "get indexedFieldNames () {\r\n    if (this.METADATA.INDEXFIELDS) {\r\n      return Array.from(this.METADATA.INDEXFIELDS)\r\n    } else {\r\n      return []\r\n    }\r\n  }",
          "start": {
            "line": 727,
            "column": 2
          },
          "end": {
            "line": 733,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        }
      },
      "methods": {
        "constructor": {
          "type": "method",
          "label": "constructor",
          "description": null,
          "code": "constructor (cfg = {}) {\r\n    if (NGN.typeof(cfg) === 'model') {\r\n      cfg = { model: cfg }\r\n    } else if (!cfg.model || !NGN.DATA.UTILITY.isDataModel(cfg.model)) {\r\n      throw new InvalidConfigurationError('Missing or invalid \"model\" configuration property.')\r\n    }\r\n\r\n    super()\r\n\r\n    const me = this\r\n\r\n    Object.defineProperties(this, {\r\n      /**\r\n       * @cfgproperty {string} [name]\r\n       * A descriptive name for the store. This is typically used for\r\n       * debugging, logging, and (somtimes) data proxies.\r\n       */\r\n      name: NGN.const(NGN.coalesce(cfg.name, 'Untitled Data Store')),\r\n\r\n      METADATA: NGN.private({\r\n        // Holds the models/records\r\n        records: [],\r\n\r\n        /**\r\n         * @cfgproperty {NGN.DATA.Model} model\r\n         * An NGN Data Model to which data records conform.\r\n         */\r\n        Model: NGN.coalesce(cfg.model),\r\n\r\n        /**\r\n         * @cfg {boolean} [allowDuplicates=true]\r\n         * Set to `false` to prevent duplicate records from being added.\r\n         * If a duplicate record is added, it will be ignored and an\r\n         * error will be thrown.\r\n         *\r\n         * **Identifying duplicates _may_ be slow** on data sets with 200+ records.\r\n         * Uniqueness is determined by a checksum of the current NGN.DATA.Model#data\r\n         * of a record. The amount of time required to generate a checksum can range\r\n         * from 3ms to 150ms per record depending on data complexity.\r\n         *\r\n         * In most scenarios, the performance impact will be negligible/indistinguishable\r\n         * to the naked eye. However; if an application experiences slow data\r\n         * load or processing times, setting this to `false` may help.\r\n         */\r\n        allowDuplicates: NGN.coalesce(cfg.allowDuplicates, true),\r\n\r\n        /**\r\n         * @cfg {boolean} [errorOnDuplicate=false]\r\n         * Set to `true` to throw an error when a duplicate record is detected.\r\n         * If this is not set, it will default to the value of #allowDuplicates.\r\n         * If #allowDuplicates is not defined either, this will be `true`\r\n         */\r\n        errorOnDuplicate: NGN.coalesce(cfg.errorOnDuplicate, cfg.allowDuplicates, false),\r\n\r\n        /**\r\n         * @cfg {boolean} [allowInvalid=true]\r\n         * Allow invalid records to be added to the store.\r\n         */\r\n        allowInvalid: NGN.coalesce(cfg.allowInvalid, true),\r\n\r\n        /**\r\n         * @cfg {boolean} [errorOnInvalid=false]\r\n         * Set to `true` to throw an error when an attempt is made to add an\r\n         * invalid record.\r\n         */\r\n        errorOnInvalid: NGN.coalesce(cfg.errorOnInvalid, cfg.allowInvalid, false),\r\n\r\n        /**\r\n         * @cfgproperty {boolean} [autoRemoveExpiredRecords=true]\r\n         * When set to `true`, the store will automatically delete expired records.\r\n         */\r\n        autoRemoveExpiredRecords: NGN.coalesce(cfg.autoRemoveExpiredRecords, true),\r\n\r\n        /**\r\n         * @cfg {boolean} [softDelete=false]\r\n         * When set to `true`, the store makes a copy of a record before removing\r\n         * it from the store. The store will still emit a `record.delete` event,\r\n         * and it will still behanve as though the record has been completely\r\n         * removed. However; the record copy can be retrieved using the #restore\r\n         * method.\r\n         *\r\n         * Since it is not always desirable to store a copy of every deleted\r\n         * record indefinitely, it is possible to expire and permanently remove\r\n         * records by setting the #softDeleteTtl.\r\n         *\r\n         * ```js\r\n         * var People = new NGN.DATA.Store({\r\n         *   model: Person,\r\n         *   softDelete: true,\r\n         *   softDeleteTtl: 10000\r\n         * })\r\n         *\r\n         * People.add(somePerson)\r\n         *\r\n         * var removedRecordId\r\n         * People.once('record.delete', function (record) {\r\n         *   removedRecordId = record.id\r\n         * })\r\n         *\r\n         * People.remove(somePerson)\r\n         *\r\n         * setTimeout(function () {\r\n         *   People.restore(removedRecordId)\r\n         * }, 5000)\r\n         *\r\n         * ```\r\n         *\r\n         * The code above creates a new store and adds a person to it.\r\n         * Then a placeholder variable (`removedRecordId`) is created.\r\n         * Next, a one-time event listener is added to the store, specifically\r\n         * for handling the removal of a record. Then the record is removed,\r\n         * which triggers the `record.delete` event, which populates\r\n         * `removedRecordId` with the ID of the record that was deleted.\r\n         * Finally, the code waits for 5 seconds, then restores the record. If\r\n         * the #restore method _wasn't_ called, the record would be purged\r\n         * from memory after 10 seconds (because `softDeleteTtl` is set to 10000\r\n         * milliseconds).\r\n         */\r\n        softDelete: NGN.coalesce(cfg.softDelete, false),\r\n\r\n        /**\r\n         * @cfg {number} [softDeleteTtl=-1]\r\n         * This is the number of milliseconds the store waits before purging a\r\n         * soft-deleted record from memory. `-1` = Infinite (no TTL).\r\n         */\r\n        softDeleteTtl: NGN.coalesce(cfg.softDeleteTtl, -1),\r\n\r\n        // ARCHIVE contains soft deleted records\r\n\r\n        /**\r\n         * @cfg {Number} [FIFO=-1]\r\n         * Configures the store to use \"**F**irst **I**n **F**irst **O**ut\"\r\n         * record processing when it reaches a maximum number of records.\r\n         *\r\n         * For example, assume `FIFO=10`. When the 11th record is added, it\r\n         * will replace the oldest record (i.e. the 1st). This guarantees the\r\n         * store will never have more than 10 records at any given time and it\r\n         * will always maintain the latest records.\r\n         *\r\n         * FIFO and LIFO cannot be applied at the same time.\r\n         *\r\n         * **BE CAREFUL** when using this in combination with #insert,\r\n         * #insertBefore, or #insertAfter. FIFO is applied _after_ the record\r\n         * is added to the store but _before_ it is moved to the desired index.\r\n         */\r\n        fifo: NGN.coalesce(cfg.FIFO, -1),\r\n\r\n        /**\r\n         * @cfg {Number} [LIFO=-1]\r\n         * Configures the store to use \"**L**ast **I**n **F**irst **O**ut\"\r\n         * record processing when it reaches a maximum number of records.\r\n         *\r\n         * This methos acts in the opposite manner as #FIFO. However; for\r\n         * all intents and purposes, this merely replaces the last record in\r\n         * the store when a new record is added.\r\n         *\r\n         * For example, assume `FIFO=10`. When the 11th record is added, it\r\n         * will replace the latest record (i.e. the 10th). This guarantees the\r\n         * store will never have more than 10 records at any given time. Every\r\n         * time a new record is added (assuming the store already has the maximum\r\n         * allowable records), it replaces the last record (10th) with the new\r\n         * record.\r\n         *\r\n         * LIFO and FIFO cannot be applied at the same time.\r\n         *\r\n         * **BE CAREFUL** when using this in combination with #insert,\r\n         * #insertBefore, or #insertAfter. LIFO is applied _after_ the record\r\n         * is added to the store but _before_ it is moved to the desired index.\r\n         */\r\n        lifo: NGN.coalesce(cfg.LIFO, -1),\r\n\r\n        /**\r\n         * @cfg {Number} [maxRecords=-1]\r\n         * Setting this will prevent new records from being added past this limit.\r\n         * Attempting to add a record to the store beyond it's maximum will throw\r\n         * an error.\r\n         */\r\n        maxRecords: NGN.coalesce(cfg.maxRecords, -1),\r\n\r\n        /**\r\n         * @cfg {Number} [minRecords=0]\r\n         * Setting this will prevent removal of records if the removal would\r\n         * decrease the count below this limit.\r\n         * Attempting to remove a record below the store's minimum will throw\r\n         * an error.\r\n         */\r\n        minRecords: NGN.coalesce(cfg.minRecords, 0),\r\n\r\n        /**\r\n         * @cfg {Number} [autocompact=50000]\r\n         * Identify the number of deletions that should occur before\r\n         * the store is compacted. See #compact. Set this to any value\r\n         * below `100` (the minimum) to disable autocompact.\r\n         */\r\n        autocompact: NGN.coalesce(cfg.autocompact, 50000),\r\n\r\n        /**\r\n         * @cfgproperty {object} fieldmap\r\n         * An object mapping model attribute names to data storage field names.\r\n         *\r\n         * _Example_\r\n         * ```\r\n         * {\r\n         *   ModelFieldName: 'inputName',\r\n         *   father: 'dad',\r\n         *   email: 'eml',\r\n         *   image: 'img',\r\n         *   displayName: 'dn',\r\n         *   firstName: 'gn',\r\n         *   lastName: 'sn',\r\n         *   middleName: 'mn',\r\n         *   gender: 'sex',\r\n         *   dob: 'bd'\r\n         * }\r\n         * ```\r\n         */\r\n        MAP: NGN.coalesce(cfg.fieldmap),\r\n\r\n        EVENTS: new Set([\r\n          'record.duplicate',\r\n          'record.create',\r\n          'record.update',\r\n          'record.delete',\r\n          'record.restored',\r\n          'record.purged',\r\n          'record.move',\r\n          'record.invalid',\r\n          'record.valid',\r\n          'clear',\r\n          'filter.create',\r\n          'filter.delete',\r\n          'index.create',\r\n          'index.delete',\r\n          'compact.start',\r\n          'compact.complete'\r\n        ]),\r\n\r\n        /**\r\n         * @cfg {boolean} [audit=false]\r\n         * Enable auditing to support #undo/#redo operations. This creates and\r\n         * manages a NGN.DATA.TransactionLog.\r\n         */\r\n        AUDITABLE: NGN.coalesce(cfg.audit, false),\r\n        AUDITLOG: NGN.coalesce(cfg.audit, false) ? new NGN.DATA.TransactionLog() : null,\r\n        AUDIT_HANDLER: (change) => {\r\n          if (change.hasOwnProperty('cursor')) {\r\n            this.METADATA.AUDITLOG.commit(this.METADATA.getAuditMap())\r\n          }\r\n        },\r\n\r\n        // The first and last indexes are maintained to determine which active\r\n        // record is considered first/last. Sometimes data is filtered out,\r\n        // so the first/last active record is not guaranteed to represent the\r\n        // first/last actual record. These indexes are maintained to prevent\r\n        // unnecessary iteration in large data sets.\r\n        FIRSTRECORDINDEX: 0,\r\n        LASTRECORDINDEX: 0,\r\n\r\n        /**\r\n         * @cfg {array} [index]\r\n         * An array of #model fields that will be indexed.\r\n         * See NGN.DATA.Index for details.\r\n         */\r\n        INDEX: null\r\n      }),\r\n\r\n      // Internal attributes that should not be extended.\r\n      PRIVATE: NGN.privateconst({\r\n        STUB: Symbol('record.stub'),\r\n\r\n        // A private indexing method\r\n        INDEX: function (record, delta) {\r\n          if (typeof this.event === 'symbol') {\r\n            switch (this.event) {\r\n              case me.PRIVATE.EVENT.CREATE_RECORD:\r\n                me.METADATA.INDEXFIELDS.forEach(field => me.METADATA.INDEX[field].add(record[field], record.OID))\r\n                break\r\n\r\n              case me.PRIVATE.EVENT.DELETE_RECORD:\r\n                me.METADATA.INDEXFIELDS.forEach(field => me.METADATA.INDEX[field].remove(record.OID, record[field]))\r\n                break\r\n\r\n              case me.PRIVATE.EVENT.LOAD_RECORDS:\r\n                for (let i = 0; i < me.METADATA.records.length; i++) {\r\n                  me.METADATA.INDEXFIELDS.forEach(field => me.METADATA.INDEX[field].add(me.METADATA.records[i][field], me.METADATA.records[i].OID))\r\n                }\r\n\r\n                break\r\n\r\n              case me.PRIVATE.EVENT.DELETE_RECORD_FIELD:\r\n                if (me.METADATA.INDEXFIELDS.has(record.field.name)) {\r\n                  me.METADATA.INDEX[record.field.name].remove(record.record.OID, record.field.value)\r\n                }\r\n\r\n                break\r\n            }\r\n          } else {\r\n            switch (this.event) {\r\n              case 'record.update':\r\n                if (me.METADATA.INDEXFIELDS.has(delta.field.name)) {\r\n                  me.METADATA.INDEX[delta.field.name].update(record.OID, delta.old, delta.new)\r\n                }\r\n                break\r\n\r\n              case 'clear':\r\n                me.METADATA.INDEXFIELDS.forEach(field => me.METADATA.INDEX[field].reset())\r\n                break\r\n            }\r\n          }\r\n        },\r\n\r\n        // Contains a map of all records\r\n        RECORDMAP: new Map(),\r\n\r\n        // A reference to active records\r\n        ACTIVERECORDMAP: null,\r\n\r\n        // A reference to filtered records (non-active/non-deleted)\r\n        FILTEREDRECORDMAP: null,\r\n\r\n        // Internal events\r\n        EVENT: {\r\n          CREATE_RECORD: Symbol('record.create'),\r\n          DELETE_RECORD: Symbol('record.delete'),\r\n          DELETE_RECORD_FIELD: Symbol('records.field.delete'),\r\n          LOAD_RECORDS: Symbol('records.load')\r\n        },\r\n\r\n        // Makes sure the model configuration specifies a valid and indexable field.\r\n        checkModelIndexField: (field) => {\r\n          let metaconfig = this.METADATA.Model.prototype.CONFIGURATION\r\n\r\n          if (metaconfig.fields && metaconfig.fields.hasOwnProperty(field)) {\r\n            if (metaconfig.fields[field] !== null) {\r\n              if (['model', 'store', 'entity', 'function'].indexOf(NGN.typeof(metaconfig.fields[field])) >= 0) {\r\n                throw new Error(`Cannot create index for \"${field}\" field. Only basic NGN.DATA.Field types can be indexed. Relationship and virtual fields cannot be indexed.`)\r\n              } else if (NGN.typeof(metaconfig.fields[field]) === 'object') {\r\n                if (['model', 'store', 'entity', 'function'].indexOf(NGN.typeof(NGN.coalesce(metaconfig.fields[field].type))) >= 0) {\r\n                  throw new Error(`Cannot create index for \"${field}\" field. Only basic NGN.DATA.Field types can be indexed. Relationship and virtual fields cannot be indexed.`)\r\n                }\r\n              }\r\n            }\r\n          } else {\r\n            throw new Error(`Cannot create index for unrecognized field \"${field}\".`)\r\n          }\r\n        },\r\n\r\n        // Get the type of field from the model definition\r\n        getModelFieldType: (field) => {\r\n          let metaconfig = this.METADATA.Model.prototype.CONFIGURATION\r\n\r\n          if (metaconfig.fields[field] === null) {\r\n            return NGN.typeof(metaconfig.fields[field])\r\n          }\r\n\r\n          if (metaconfig.fields[field].type) {\r\n            return NGN.typeof(metaconfig.fields[field].type)\r\n          }\r\n\r\n          if (metaconfig.fields[field].default) {\r\n            return NGN.typeof(metaconfig.fields[field].default)\r\n          }\r\n\r\n          return NGN.typeof(NGN.coalesce(metaconfig.fields[field]))\r\n        },\r\n\r\n        // Add a record\r\n        addRecord: (data, suppressEvents = false) => {\r\n          const record = new me.METADATA.Model(data)\r\n\r\n          if (!(record instanceof NGN.DATA.Entity)) {\r\n            throw new Error(`Only a NGN.DATA.Model or JSON object may be used in NGN.DATA.Store#add. Received a \"${NGN.typeof(data)}\" value.`)\r\n          }\r\n\r\n          // Prevent invalid record addition (if configured)\r\n          if (!me.METADATA.allowInvalid && !record.valid) {\r\n            NGN.WARN(`An attempt to add invalid data to the \"${this.name}\" store was prevented. The following fields are invalid: ${Array.from(record.METADATA.invalidFieldNames.keys()).join(', ')}`)\r\n\r\n            if (!suppressEvents) {\r\n              this.emit('record.invalid', record)\r\n            }\r\n\r\n            if (this.METADATA.errorOnInvalid) {\r\n              throw new Error(`Invalid data cannot be added to the \"${this.name}\" store.`)\r\n            }\r\n          }\r\n\r\n          // If duplicates are prevented, check the new data.\r\n          if (!me.METADATA.allowDuplicates) {\r\n            for (let i = 0; i < this.METADATA.records.length; i++) {\r\n              if (this.METADATA.records[i].checksum === record.checksum) {\r\n                NGN.WARN(`An attempt to add a duplicate record to the \"${this.name}\" store was prevented.`)\r\n\r\n                if (!suppressEvents) {\r\n                  this.emit('record.duplicate', record)\r\n                }\r\n\r\n                if (this.METADATA.errorOnDuplicate) {\r\n                  throw new Error(`Duplicate records are not allowed in the \"${this.name}\" data store.`)\r\n                }\r\n\r\n                break\r\n              }\r\n            }\r\n          }\r\n\r\n          // Handle special record count processing (LIFO/FIFO support)\r\n          if (me.METADATA.lifo > 0 && me.METADATA.records.length + 1 > me.METADATA.lifo) {\r\n            me.remove(me.METADATA.records.length - 1, suppressEvents)\r\n          } else if (this.METADATA.fifo > 0 && me.METADATA.records.length + 1 > me.METADATA.fifo) {\r\n            me.remove(0, suppressEvents)\r\n          }\r\n\r\n          // Relay model events to this store.\r\n          // record.relay('*', this, 'record.')\r\n          record.on('*', function () {\r\n            switch (this.event) {\r\n              // case 'field.update':\r\n              // case 'field.delete':\r\n              //   // TODO: Update indices\r\n              //   return\r\n\r\n              case 'field.invalid':\r\n              case 'field.valid':\r\n                return me.emit(this.event.replace('field.', 'record.'), record)\r\n\r\n              case 'expired':\r\n                // TODO: Handle expiration\r\n            }\r\n          })\r\n\r\n          delete record.METADATA.store\r\n          Object.defineProperty(record.METADATA, 'store', NGN.get(() => me))\r\n\r\n          // Indexing is handled in an internal event handler\r\n          me.METADATA.records.push(record)\r\n\r\n          // Add the record to the map for efficient retrievel by OID\r\n          me.PRIVATE.RECORDMAP.set(record.OID, me.METADATA.records.length - 1)\r\n\r\n          return record\r\n        },\r\n\r\n        convertStubToRecord: (index, record) => {\r\n          if (record.hasOwnProperty(this.PRIVATE.STUB)) {\r\n            let newRecord = this.PRIVATE.addRecord(record.metadata, false)\r\n            newRecord.OID = record.OID\r\n\r\n            this.METADATA.records[index] = newRecord\r\n\r\n            return newRecord\r\n          } else {\r\n            return record\r\n          }\r\n        }\r\n      }),\r\n\r\n      // Create a convenience alias for the remove method.\r\n      delete: NGN.const(NGN.deprecate(this.remove, 'Store.delete is deprecated. Use Store.remove instead.'))\r\n    })\r\n\r\n    // Create a smart reference to record lists\r\n    Object.defineProperties(this.PRIVATE, {\r\n      ACTIVERECORDS: NGN.get(() => {\r\n        if (this.PRIVATE.ACTIVERECORDMAP === null) {\r\n          return this.PRIVATE.RECORDMAP\r\n        }\r\n\r\n        return this.PRIVATE.ACTIVERECORDMAP\r\n      }),\r\n\r\n      FILTEREDRECORDS: NGN.get(() => {\r\n        if (this.PRIVATE.FILTEREDRECORDMAP === null) {\r\n          return this.PRIVATE.RECORDMAP\r\n        }\r\n\r\n        return this.PRIVATE.FILTEREDRECORDMAP\r\n      })\r\n    })\r\n\r\n    // Disallow modification of internal events\r\n    Object.freeze(this.PRIVATE.EVENT)\r\n\r\n    // Support LIFO (Last In First Out) & FIFO(First In First Out)\r\n    if (this.METADATA.lifo > 0 && this.METADATA.fifo > 0) {\r\n      throw new InvalidConfigurationError('NGN.DATA.Store can be configured to use FIFO or LIFO, but not both simultaneously.')\r\n    }\r\n\r\n    // If LIFO/FIFO is used, disable alternative record count limitations.\r\n    if (this.METADATA.lifo > 0 || this.METADATA.fifo > 0) {\r\n      this.METADATA.minRecords = 0\r\n      this.METADATA.maxRecords = -1\r\n    } else {\r\n      this.METADATA.minRecords = this.METADATA.minRecords < 0 ? 0 : this.METADATA.minRecords\r\n    }\r\n\r\n    // Bubble events to the BUS\r\n    // this.relay('*', NGN.BUS, 'store.')\r\n\r\n    // Configure Indices\r\n    if (NGN.coalesce(cfg.index) && NGN.typeof(this.METADATA.Model.prototype.CONFIGURATION.fields) === 'object') {\r\n      this.createIndex(cfg.index)\r\n    }\r\n\r\n    // Setup auto-compact\r\n    if (this.METADATA.autocompact < 100) {\r\n      this.METADATA.DELETECOUNT = 0\r\n      this.on(this.PRIVATE.EVENTS.DELETE_RECORD, () => {\r\n        this.METADATA.DELETECOUNT++\r\n\r\n        if (this.METADATA >= this.METADATA.autocompact) {\r\n          this.METADATA.DELETECOUNT = 0\r\n          this.compact()\r\n        }\r\n      })\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 33,
            "column": 2
          },
          "end": {
            "line": 549,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "cfg": {
              "type": "argument",
              "label": "cfg",
              "description": null,
              "code": "cfg = {}",
              "start": {
                "line": 33,
                "column": 15
              },
              "end": {
                "line": 33,
                "column": 23
              },
              "flags": [],
              "authors": [],
              "default": "{}",
              "datatype": "object",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "constructor",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "add": {
          "type": "method",
          "label": "add",
          "description": "Append a data record to the store. This adds the record to the end of the list.",
          "code": "add (data, suppressEvents = false) {\r\n    // Support array input\r\n    if (NGN.typeof(data) === 'array') {\r\n      let result = new Array(data.length)\r\n\r\n      for (let i = 0; i < data.length; i++) {\r\n        result[i] = this.add(data[i], suppressEvents)\r\n      }\r\n\r\n      return result\r\n    }\r\n\r\n    // Prevent creation if it will exceed maximum record count.\r\n    if (this.METADATA.maxRecords > 0 && this.METADATA.records.length + 1 > this.METADATA.maxRecords) {\r\n      throw new Error('Maximum record count exceeded.')\r\n    }\r\n\r\n    if (!(data instanceof this.METADATA.Model)) {\r\n      // Force a data model\r\n      if (NGN.typeof(data) === 'string') {\r\n        data = JSON.parse(data)\r\n      }\r\n\r\n      if (typeof data !== 'object') {\r\n        throw new Error(`${NGN.typeof(data)} is an invalid data type (must be an object conforming to the ${this.METADATA.Model.name} field configuration).`)\r\n      }\r\n    } else {\r\n      data = data.data\r\n    }\r\n\r\n    const record = this.PRIVATE.addRecord(data)\r\n\r\n    // TODO: Apply filters to new record before identifying the last record.\r\n    this.METADATA.LASTRECORDINDEX = this.METADATA.records.length - 1\r\n\r\n    this.emit(this.PRIVATE.EVENT.CREATE_RECORD, record)\r\n\r\n    if (!suppressEvents) {\r\n      this.emit('record.create', record)\r\n    }\r\n\r\n    return record\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 748,
            "column": 2
          },
          "end": {
            "line": 790,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "data": {
              "type": "argument",
              "label": "data",
              "description": "Accepts an existing NGN Data Model or a JSON object.\nIf a JSON object is supplied, it will be applied to\nthe data model specified in #model.",
              "code": "data",
              "start": {
                "line": 748,
                "column": 7
              },
              "end": {
                "line": 748,
                "column": 11
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "ngn.data.model|object",
              "required": true,
              "enum": null
            },
            "suppressEvents": {
              "type": "argument",
              "label": "suppressEvents",
              "description": "Set this to `true` to prevent the `record.create` event\nfrom firing.",
              "code": "suppressEvents = false",
              "start": {
                "line": 748,
                "column": 13
              },
              "end": {
                "line": 748,
                "column": 35
              },
              "flags": [],
              "authors": [],
              "default": "false",
              "datatype": "boolean",
              "required": false,
              "enum": null
            }
          },
          "returnType": "NGN.DATA.Model",
          "returnDescription": "null Returns the new record.",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "remove": {
          "type": "method",
          "label": "remove",
          "description": "Remove a record.",
          "code": "remove (record, suppressEvents = false) {\r\n    // Short-circuit processing if there are no records.\r\n    if (this.METADATA.records.length === 0) {\r\n      NGN.INFO(`\"${this.name}\" store called remove(), but the store contains no records.`)\r\n      return\r\n    }\r\n\r\n    // Support removal of simultaneously removing multiple records\r\n    if (NGN.typeof(record) === 'array') {\r\n      let result = new Array(record.length)\r\n\r\n      for (let i = 0; i < record.length; i++) {\r\n        result[i] = this.remove(record[i])\r\n      }\r\n\r\n      return result\r\n    }\r\n\r\n    // Prevent removal if it will exceed minimum record count.\r\n    if (this.minRecords > 0 && this.METADATA.records.length - 1 < this.minRecords) {\r\n      throw new Error('Removing this record would violate the minimum record count.')\r\n    }\r\n\r\n    // Identify which record will be removed.\r\n    let index\r\n\r\n    switch (NGN.typeof(record)) {\r\n      case 'number':\r\n        if (record < 0 || !this.METADATA.records[record]) {\r\n          NGN.ERROR(`Record removal failed (record not found at index ${(record || 'undefined').toString()}).`)\r\n          return null\r\n        }\r\n\r\n        index = record\r\n\r\n        break\r\n\r\n      // The default case comes before the symbol case specifically\r\n      // so the record can be converted to an OID value (for use with\r\n      // the RECORDMAP lookup).\r\n      default:\r\n        if (!(record instanceof NGN.DATA.Entity)) {\r\n          NGN.ERROR('Invalid record value passed to Store.remove() method.')\r\n          return null\r\n        }\r\n\r\n        record = record.OID\r\n\r\n      case 'symbol': // eslint-disable-line no-fallthrough\r\n        index = this.PRIVATE.ACTIVERECORDS.get(record)\r\n\r\n        if (index < 0) {\r\n          NGN.ERROR(`Record removal failed. Record OID not found (\"${record.toString()}\").`)\r\n          return null\r\n        }\r\n\r\n        break\r\n    }\r\n\r\n    // If nothing has been deleted yet, create an active record map.\r\n    // The active record map contains Model OID values with a reference\r\n    // to the actual record index.\r\n    if (this.PRIVATE.ACTIVERECORDMAP === null) {\r\n      // Copy the record map to initialize the active records\r\n      this.PRIVATE.ACTIVERECORDMAP = new Map(this.PRIVATE.RECORDMAP)\r\n    }\r\n\r\n    // Identify the record to be removed.\r\n    const removedRecord = this.METADATA.records[index]\r\n\r\n    // If the record isn't among the active records, do not remove it.\r\n    if (removedRecord === null) {\r\n      NGN.WARN('Specified record does not exist.')\r\n      return null\r\n    }\r\n\r\n    let activeIndex = this.PRIVATE.ACTIVERECORDS.get(removedRecord.OID)\r\n\r\n    if (isNaN(activeIndex)) {\r\n      NGN.WARN(`Record not found for \"${removedRecord.OID.toString()}\".`)\r\n      return null\r\n    }\r\n\r\n    this.PRIVATE.ACTIVERECORDS.delete(removedRecord.OID)\r\n\r\n    // If the store is configured to soft-delete,\r\n    // don't actually remove it until it expires.\r\n    if (this.METADATA.softDelete) {\r\n      if (this.METADATA.softDeleteTtl >= 0) {\r\n        removedRecord.once('expired', () => {\r\n          this.METADATA.records[this.PRIVATE.RECORDMAP.get(removedRecord.OID)] = null\r\n          this.PRIVATE.RECORDMAP.delete(removedRecord.OID)\r\n\r\n          if (!suppressEvents) {\r\n            this.emit('record.purge', removedRecord)\r\n          }\r\n        })\r\n\r\n        removedRecord.expires = this.METADATA.softDeleteTtl\r\n      }\r\n    } else {\r\n      this.METADATA.records[this.PRIVATE.RECORDMAP.get(removedRecord.OID)] = null\r\n      this.PRIVATE.RECORDMAP.delete(removedRecord.OID)\r\n    }\r\n\r\n    // Update cursor indexes (to quickly reference first and last active records)\r\n    if (this.METADATA.LASTRECORDINDEX === activeIndex) {\r\n      if (this.PRIVATE.ACTIVERECORDS.size <= 1) {\r\n        this.METADATA.LASTRECORDINDEX = this.PRIVATE.ACTIVERECORDS.values().next().value\r\n        this.METADATA.FIRSTRECORDINDEX = this.METADATA.LASTRECORDINDEX\r\n      } else if (activeIndex !== 0) {\r\n        for (let i = (activeIndex - 1); i >= 0; i--) {\r\n          if (i === 0) {\r\n            this.METADATA.LASTRECORDINDEX = 0\r\n            break\r\n          }\r\n\r\n          const examinedRecord = this.METADATA.records[i]\r\n\r\n          if (examinedRecord !== null) {\r\n            if (this.PRIVATE.ACTIVERECORDS.has(examinedRecord.OID)) {\r\n              this.METADATA.LASTRECORDINDEX = this.PRIVATE.ACTIVERECORDS.get(examinedRecord.OID)\r\n              break\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else if (this.METADATA.FIRSTRECORDINDEX === activeIndex) {\r\n      let totalSize = this.PRIVATE.ACTIVERECORDS.size\r\n\r\n      for (let i = (activeIndex + 1); i < totalSize; i++) {\r\n        const examinedRecord = this.METADATA.records[i]\r\n\r\n        if (examinedRecord !== null) {\r\n          if (this.PRIVATE.ACTIVERECORDS.has(examinedRecord.OID)) {\r\n            this.METADATA.FIRSTRECORDINDEX = this.PRIVATE.ACTIVERECORDS.get(examinedRecord.OID)\r\n            break\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.emit(this.PRIVATE.EVENT.DELETE_RECORD, removedRecord)\r\n\r\n    if (!suppressEvents) {\r\n      this.emit('record.delete', removedRecord)\r\n    }\r\n\r\n    return removedRecord\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 811,
            "column": 2
          },
          "end": {
            "line": 960,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "record": {
              "type": "argument",
              "label": "record",
              "description": "Accepts an existing NGN Data Model or index number.\nUsing a model is slower than using an index number.\nThis may also be the NGN.DATA.Model#OID value (for\nadvanced use cases).",
              "code": "record",
              "start": {
                "line": 811,
                "column": 10
              },
              "end": {
                "line": 811,
                "column": 16
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "ngn.data.model|number|symbol",
              "required": true,
              "enum": null
            },
            "suppressEvents": {
              "type": "argument",
              "label": "suppressEvents",
              "description": null,
              "code": "suppressEvents = false",
              "start": {
                "line": 811,
                "column": 18
              },
              "end": {
                "line": 811,
                "column": 40
              },
              "flags": [],
              "authors": [],
              "default": false,
              "datatype": "boolean",
              "required": false,
              "enum": null
            }
          },
          "returnType": "NGN.DATA.Model",
          "returnDescription": "null Returns the data model that was just removed. If a model\nis unavailable ,\nthis will return `null`.",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "createIndex": {
          "type": "method",
          "label": "createIndex",
          "description": "Create a new index on the store.\r\n  \r\n  The name of the field to index.\r\n  \r\n  Triggered when an index is created. The name of field is passed\r\n  as the only argument.",
          "code": "createIndex (field) {\r\n    // Support multiple indexes\r\n    if (NGN.typeof(field) === 'array') {\r\n      for (let i = 0; i < field.length; i++) {\r\n        this.createIndex(field[i])\r\n      }\r\n\r\n      return\r\n    }\r\n\r\n    // Make sure index fields are known to the store\r\n    if (!this.METADATA.INDEXFIELDS) {\r\n      this.METADATA.INDEXFIELDS = new Set()\r\n\r\n      // this.on('record.*', this.PRIVATE.INDEX)\r\n      this.on([\r\n        this.PRIVATE.EVENT.CREATE_RECORD,\r\n        this.PRIVATE.EVENT.DELETE_RECORD,\r\n        this.PRIVATE.EVENT.LOAD_RECORDS,\r\n        this.PRIVATE.EVENT.DELETE_RECORD_FIELD,\r\n        'clear'\r\n      ], this.PRIVATE.INDEX)\r\n    }\r\n\r\n    // In an index already exists, ignore it.\r\n    if (this.METADATA.INDEXFIELDS.has(field)) {\r\n      return\r\n    }\r\n\r\n    // Guarantee the existance of the index list\r\n    this.METADATA.INDEX = NGN.coalesce(this.METADATA.INDEX, {})\r\n\r\n    this.PRIVATE.checkModelIndexField(field)\r\n\r\n    this.METADATA.INDEXFIELDS.add(field)\r\n\r\n    // Identify BTree\r\n    let btree = ['number', 'date'].indexOf(this.PRIVATE.getModelFieldType(field)) >= 0\r\n\r\n    this.METADATA.INDEX[field] = new NGN.DATA.Index(btree, `${field.toUpperCase()} ${btree ? 'BTREE ' : ''}INDEX`)\r\n\r\n    // Apply to any existing records\r\n    if (this.METADATA.records.length > 0) {\r\n      this.PRIVATE.INDEX.apply({ event: this.PRIVATE.EVENT.LOAD_RECORDS })\r\n    }\r\n\r\n    this.emit('index.created', field)\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 970,
            "column": 2
          },
          "end": {
            "line": 1017,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "field": {
              "type": "argument",
              "label": "field",
              "description": "The name of the field to index.",
              "code": "field",
              "start": {
                "line": 970,
                "column": 15
              },
              "end": {
                "line": 970,
                "column": 20
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "removeIndex": {
          "type": "method",
          "label": "removeIndex",
          "description": "Remove an existing index from the store.\r\n  \r\n  The name of the indexed field. Set this to `null` (or leave blank) to\r\n  remove all existing indexes.\r\n  \r\n  Triggered when an index is removed. The name of field is passed\r\n  as the only argument.",
          "code": "removeIndex (field = null) {\r\n    if (!this.METADATA.INDEXFIELDS) {\r\n      return\r\n    }\r\n\r\n    if (NGN.coalesce(field) === null) {\r\n      field = this.indexedFieldNames\r\n    }\r\n\r\n    // Support multiple indexes\r\n    if (NGN.typeof(field) === 'array') {\r\n      for (let i = 0; i < field.length; i++) {\r\n        this.removeIndex(field[i])\r\n      }\r\n\r\n      return\r\n    }\r\n\r\n    // Remove the specific index.\r\n    this.METADATA.INDEXFIELDS.delete(field)\r\n    delete this.METADATA.INDEX[field]\r\n    this.emit('index.delete', field)\r\n\r\n    // When there are no more indexes, clear out event\r\n    // listeners and fields.\r\n    if (this.METADATA.INDEXFIELDS.size === 0) {\r\n      this.METADATA.INDEX = null\r\n      delete this.METADATA.INDEXFIELDS\r\n\r\n      this.off([\r\n        this.PRIVATE.EVENT.CREATE_RECORD,\r\n        this.PRIVATE.EVENT.DELETE_RECORD,\r\n        this.PRIVATE.EVENT.LOAD_RECORDS,\r\n        this.PRIVATE.EVENT.DELETE_RECORD_FIELD\r\n      ], this.PRIVATE.INDEX)\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 1028,
            "column": 2
          },
          "end": {
            "line": 1064,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "field": {
              "type": "argument",
              "label": "field",
              "description": "The name of the indexed field. Set this to `null`  to\nremove all existing indexes.",
              "code": "field = null",
              "start": {
                "line": 1028,
                "column": 15
              },
              "end": {
                "line": 1028,
                "column": 27
              },
              "flags": [],
              "authors": [],
              "default": "null",
              "datatype": "string",
              "required": false,
              "enum": [
                "or leave blank"
              ]
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "getRecordSibling": {
          "type": "method",
          "label": "getRecordSibling",
          "description": "Retrieve a record based on it's relative position to another\r\n  record. This method is used by NGN.DATA.Model#next and NGN.DATA.Model#previous\r\n  to support \"doubly linked list\" approach to record iteration.",
          "code": "getRecordSibling (currentRecord, count = 1, cycle = false) {\r\n    let size = this.size\r\n\r\n    if (size === 0) {\r\n      NGN.WARN('Attempted to execute getRecordSibling with no active records.')\r\n      return null\r\n    }\r\n\r\n    // Make sure the iterator fits within the range\r\n    if (Math.abs(count) > size) {\r\n      count = count % size\r\n    }\r\n\r\n    if (size === 1 || count === 0) {\r\n      return currentRecord\r\n    }\r\n\r\n    let ActiveRecords = Array.from(this.PRIVATE.ACTIVERECORDS)\r\n    let currentIndex = ActiveRecords.findIndex(item => currentRecord.OID === item[0])\r\n\r\n    if (currentIndex < 0) {\r\n      throw new Error('Record not found.')\r\n    }\r\n\r\n    currentIndex += count\r\n\r\n    // Support cycling through records.\r\n    if ((currentIndex >= ActiveRecords.length || currentIndex < 0) && cycle) {\r\n      // Cycle forwards\r\n      if (count > 0) {\r\n        currentIndex = currentIndex % ActiveRecords.length\r\n      } else {\r\n        // Cycle Backwards\r\n        currentIndex = ActiveRecords.length - Math.abs(currentIndex)\r\n      }\r\n    }\r\n\r\n    if (currentIndex < 0 || currentIndex >= ActiveRecords.length) {\r\n      return null\r\n    }\r\n\r\n    return this.METADATA.records[ActiveRecords[currentIndex][1]]\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 1075,
            "column": 2
          },
          "end": {
            "line": 1117,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "currentRecord": {
              "type": "argument",
              "label": "currentRecord",
              "description": "[description]",
              "code": "currentRecord",
              "start": {
                "line": 1075,
                "column": 20
              },
              "end": {
                "line": 1075,
                "column": 33
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "[type]",
              "required": true,
              "enum": null
            },
            "count": {
              "type": "argument",
              "label": "count",
              "description": "[description]",
              "code": "count = 1",
              "start": {
                "line": 1075,
                "column": 35
              },
              "end": {
                "line": 1075,
                "column": 44
              },
              "flags": [],
              "authors": [],
              "default": "1",
              "datatype": "number",
              "required": false,
              "enum": null
            },
            "cycle": {
              "type": "argument",
              "label": "cycle",
              "description": "[description]",
              "code": "cycle = false",
              "start": {
                "line": 1075,
                "column": 46
              },
              "end": {
                "line": 1075,
                "column": 59
              },
              "flags": [],
              "authors": [],
              "default": "false",
              "datatype": "boolean",
              "required": false,
              "enum": null
            }
          },
          "returnType": "[type]",
          "returnDescription": "description",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "indexOf": {
          "type": "method",
          "label": "indexOf",
          "description": "Returns the index number of the model. If the same\r\n  model exists more than once (duplicate records), only\r\n  the first index is returned.\r\n  \r\n  The model/record to retrieve an index number for.\r\n  \r\n  The zero-based index number of the model.",
          "code": "indexOf (record) {\r\n    return this.PRIVATE.RECORDMAP.get(record.OID)\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 1128,
            "column": 2
          },
          "end": {
            "line": 1130,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "record": {
              "type": "argument",
              "label": "model",
              "description": "The model/record to retrieve an index number for.",
              "code": "record",
              "start": {
                "line": 1128,
                "column": 11
              },
              "end": {
                "line": 1128,
                "column": 17
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "ngn.data.model",
              "required": true,
              "enum": null
            },
            "model": {
              "type": "argument",
              "label": "model",
              "description": "The model/record to retrieve an index number for.",
              "code": "record",
              "start": {
                "line": 1128,
                "column": 11
              },
              "end": {
                "line": 1128,
                "column": 17
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "ngn.data.model",
              "required": true,
              "enum": null
            }
          },
          "returnType": "number",
          "returnDescription": "null The zero-based index number of the model.",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "contains": {
          "type": "method",
          "label": "contains",
          "description": "Determine whether the store contains a record.\r\n  This only checks the active record set (ignores filtered records).\r\n  \r\n  The record to test for inclusion.",
          "code": "contains (record) {\r\n    return this.PRIVATE.ACTIVERECORDS.has(record.OID)\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 1139,
            "column": 2
          },
          "end": {
            "line": 1141,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "record": {
              "type": "argument",
              "label": "record",
              "description": "The record to test for inclusion.",
              "code": "record",
              "start": {
                "line": 1139,
                "column": 12
              },
              "end": {
                "line": 1139,
                "column": 18
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "ngn.data.model",
              "required": true,
              "enum": null
            }
          },
          "returnType": "boolean",
          "returnDescription": "",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "getIndexRecords": {
          "type": "method",
          "label": "getIndexRecords",
          "description": "Get the list of records for the given value.\r\n  \r\n  The name of the indexed field.\r\n  \r\n  The value of the index field. This is used to lookup\r\n  the list of records/models whose field is equal to\r\n  the specified value.\r\n  \r\n  Returns an array of models/records within the index for\r\n  the given value.",
          "code": "getIndexRecords (field, value) {\r\n    if (this.METADATA.INDEX && this.METADATA.INDEX.hasOwnProperty(field)) {\r\n      let oid = this.METADATA.INDEX[field].recordsFor(value)\r\n      let result = new Array(oid.length)\r\n\r\n      for (let i = 0; i < oid.length; i++) {\r\n        result[i] = this.METADATA.records[this.PRIVATE.RECORDMAP.get(oid[i])]\r\n      }\r\n\r\n      return result\r\n    }\r\n\r\n    return []\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 1155,
            "column": 2
          },
          "end": {
            "line": 1168,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "field": {
              "type": "argument",
              "label": "fieldName",
              "description": "The name of the indexed field.",
              "code": "field",
              "start": {
                "line": 1155,
                "column": 19
              },
              "end": {
                "line": 1155,
                "column": 24
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "value": {
              "type": "argument",
              "label": "fieldValue",
              "description": "The value of the index field. This is used to lookup\nthe list of records/models whose field is equal to\nthe specified value.",
              "code": "value",
              "start": {
                "line": 1155,
                "column": 26
              },
              "end": {
                "line": 1155,
                "column": 31
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "any",
              "required": true,
              "enum": null
            },
            "fieldName": {
              "type": "argument",
              "label": "fieldName",
              "description": "The name of the indexed field.",
              "code": "field",
              "start": {
                "line": 1155,
                "column": 19
              },
              "end": {
                "line": 1155,
                "column": 24
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "fieldValue": {
              "type": "argument",
              "label": "fieldValue",
              "description": "The value of the index field. This is used to lookup\nthe list of records/models whose field is equal to\nthe specified value.",
              "code": "value",
              "start": {
                "line": 1155,
                "column": 26
              },
              "end": {
                "line": 1155,
                "column": 31
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "returnType": "NGN.DATA.Model[]",
          "returnDescription": "null Returns an array of models/records within the index for\nthe given value.",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "getRecord": {
          "type": "method",
          "label": "getRecord",
          "description": "Retrieve an active record by index number (0-based, similar to an array).\r\n  \r\n  The index of the record to retrieve.",
          "code": "getRecord (index = 0) {\r\n    if (typeof index === 'symbol') {\r\n      index = this.PRIVATE.ACTIVERECORDS.get(index)\r\n    }\r\n\r\n    if (index < 0) {\r\n      NGN.WARN('Cannot retrieve a record for a negative index.')\r\n      return null\r\n    }\r\n\r\n    if (index >= this.PRIVATE.ACTIVERECORDS.size) {\r\n      NGN.WARN('Cannot retrieve a record for an out-of-scope index (index greater than total record count.)')\r\n      return null\r\n    }\r\n\r\n    return this.METADATA.records[Array.from(this.PRIVATE.ACTIVERECORDS)[index][1]]\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 1175,
            "column": 2
          },
          "end": {
            "line": 1191,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "index": {
              "type": "argument",
              "label": "index",
              "description": "The index of the record to retrieve.",
              "code": "index = 0",
              "start": {
                "line": 1175,
                "column": 13
              },
              "end": {
                "line": 1175,
                "column": 22
              },
              "flags": [],
              "authors": [],
              "default": "0",
              "datatype": "number",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "clear": {
          "type": "method",
          "label": "clear",
          "description": "Removes all data. If auditing is enabled, the transaction log is reset.",
          "code": "clear (purge = true, suppressEvents = false) {\r\n    if (this.METADATA.ARCHIVE) {\r\n      if (!purge) {\r\n        this.METADATA.ARCHIVE = this.records\r\n      } else {\r\n        delete this.METADATA.ARCHIVE\r\n      }\r\n    }\r\n\r\n    this.METADATA.records = []\r\n    this.PRIVATE.RECORDMAP = new Map()\r\n    this.PRIVATE.ACTIVERECORDMAP = null\r\n    this.PRIVATE.FILTEREDRECORDMAP = null\r\n    this.METADATA.LASTRECORDINDEX = 0\r\n    this.METADATA.FIRSTRECORDINDEX = 0\r\n\r\n    if (this.METADATA.AUDITABLE) {\r\n      this.METADATA.AUDITLOG.reset()\r\n    }\r\n\r\n    // Indexes updated automatically (listening for 'clear' event)\r\n\r\n    if (!suppressEvents) {\r\n      this.emit('clear')\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 1203,
            "column": 2
          },
          "end": {
            "line": 1228,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "purge": {
              "type": "argument",
              "label": "purgeSoftDelete",
              "description": "Purge soft deleted records from memory.",
              "code": "purge = true",
              "start": {
                "line": 1203,
                "column": 9
              },
              "end": {
                "line": 1203,
                "column": 21
              },
              "flags": [],
              "authors": [],
              "default": "true",
              "datatype": "boolean",
              "required": false,
              "enum": null
            },
            "suppressEvents": {
              "type": "argument",
              "label": "suppressEvents",
              "description": "Set to `true` to prevent events from triggering when this method is run.",
              "code": "suppressEvents = false",
              "start": {
                "line": 1203,
                "column": 23
              },
              "end": {
                "line": 1203,
                "column": 45
              },
              "flags": [],
              "authors": [],
              "default": "false",
              "datatype": "boolean",
              "required": false,
              "enum": null
            },
            "purgeSoftDelete": {
              "type": "argument",
              "label": "purgeSoftDelete",
              "description": "Purge soft deleted records from memory.",
              "code": "purge = true",
              "start": {
                "line": 1203,
                "column": 9
              },
              "end": {
                "line": 1203,
                "column": 21
              },
              "flags": [],
              "authors": [],
              "default": "true",
              "datatype": "boolean",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "clearEvents": {
          "type": "method",
          "label": "clearEvents",
          "description": "A special method to clear events from the underlying event emitter.\r\n  This exists because #clear has a special meaning in a data store (removing\r\n  all data records vs removing all events).",
          "code": "clearEvents () {\r\n    super.clear(...arguments)\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 1236,
            "column": 2
          },
          "end": {
            "line": 1238,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": true
        },
        "replaceModel": {
          "type": "method",
          "label": "replaceModel",
          "description": "Replace a model.\r\n  \r\n  \r\n  The new model.",
          "code": "replaceModel (newModel) {\r\n    NGN.deprecate(\r\n      () => { this.model = newModel },\r\n      'replaceModel has been deprected. Set the model directly instead.'\r\n    )\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 1246,
            "column": 2
          },
          "end": {
            "line": 1251,
            "column": 3
          },
          "flags": [
            "2.0.0"
          ],
          "authors": [],
          "arguments": {
            "newModel": {
              "type": "argument",
              "label": "newModel",
              "description": "The new model.",
              "code": "newModel",
              "start": {
                "line": 1246,
                "column": 16
              },
              "end": {
                "line": 1246,
                "column": 24
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "ngn.data.model",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "snapshot": {
          "type": "method",
          "label": "snapshot",
          "description": "Add a snapshot of the current store to the #snapshot archive.\nThis can potentially be a computationally/memory-expensive operation.\nThe method creates a copy of all data in the store along with checksums\nof each element and holds the snapshot in RAM. Large stores may consume\nlarge amounts of RAM until the snapshots are released/cleared.\nSnapshots are most commonly used with data proxies to calculate\ndifferences in a data set before persisting them to a database.",
          "code": "snapshot () {\r\n    this.METADATA.snapshotarchive = NGN.coalesce(this.METADATA.snapshotarchive, [])\r\n\r\n    let data = this.data\r\n    let dataset = {\r\n      id: NGN.DATA.UTILITY.GUID(),\r\n      timestamp: (new Date()).toISOString(),\r\n      checksum: NGN.DATA.UTILITY.checksum(JSON.stringify(data)).toString(),\r\n      modelChecksums: this.data.map((item) => {\r\n        return NGN.DATA.UTILITY.checksum(JSON.stringify(item)).toString()\r\n      }),\r\n      data: data\r\n    }\r\n\r\n    this.METADATA.snapshotarchive.unshift(dataset)\r\n    this.emit('snapshot', dataset)\r\n\r\n    return dataset\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 1280,
            "column": 2
          },
          "end": {
            "line": 1298,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "object",
          "returnDescription": "null Returns an object containing the following fields:\n\n```js\n{\ntimestamp: 'ex: 2018-01-19T16:43:03.279Z',\nchecksum: 'snapshotchecksum',\nmodelChecksums: [\n'record1_checksum',\n'record2_checksum'\n],\ndata: { ... } // Actual data at the time of the snapshot\n}\n```",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "clearSnapshots": {
          "type": "method",
          "label": "clearSnapshots",
          "description": "Remove all archived snapshots.",
          "code": "clearSnapshots () {\r\n    this.snapshotarchive = null\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 1304,
            "column": 2
          },
          "end": {
            "line": 1306,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "load": {
          "type": "method",
          "label": "load",
          "description": null,
          "code": "load (data) {\r\n    console.time('load')\r\n    let insertableData\r\n\r\n    // Guarantee unique records amongst only the new records\r\n    if (!this.METADATA.allowDuplicates) {\r\n      let uniqueValues = new Set()\r\n\r\n      insertableData = []\r\n\r\n      for (let i = 0; i < data.length; i++) {\r\n        if (!uniqueValues.has(JSON.stringify(data[i]))) {\r\n          uniqueValues.add(JSON.stringify(data[i]))\r\n          insertableData.push(data[i])\r\n        } else if (this.METADATA.errorOnDuplicate) {\r\n          throw new NGNDuplicateRecordError()\r\n        }\r\n      }\r\n    } else {\r\n      insertableData = data\r\n    }\r\n\r\n    let newRecordCount = insertableData.length + this.METADATA.records.length\r\n\r\n    // Don't exceed the maximum record count if it exists.\r\n    if (this.METADATA.maxRecords > 0 && newRecordCount > this.METADATA.maxRecords) {\r\n      throw new Error('Maximum record count exceeded.')\r\n    }\r\n\r\n    if (newRecordCount > 4000000) {\r\n      throw new Error('Maximum load size exceeded. A store may contain a maximum of 4M records.')\r\n    }\r\n\r\n    for (let i = 0; i < insertableData.length; i++) {\r\n      let oid = Symbol('model.id')\r\n      this.METADATA.records.push({\r\n        [this.PRIVATE.STUB]: true,\r\n        OID: oid,\r\n        metadata: insertableData[i]\r\n      })\r\n\r\n      // Add the record to the map for efficient retrievel by OID\r\n      this.PRIVATE.RECORDMAP.set(oid, this.METADATA.records.length - 1)\r\n    }\r\n\r\n    // TODO: Apply filters to new record before identifying the last record.\r\n    this.METADATA.LASTRECORDINDEX = this.METADATA.records.length - 1\r\n\r\n    // this.emit(this.PRIVATE.EVENT.LOAD_RECORDS)\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 1308,
            "column": 2
          },
          "end": {
            "line": 1357,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "data": {
              "type": "argument",
              "label": "data",
              "description": null,
              "code": "data",
              "start": {
                "line": 1308,
                "column": 8
              },
              "end": {
                "line": 1308,
                "column": 12
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "compact": {
          "type": "method",
          "label": "compact",
          "description": "This rebuilds the local index of records, removing any dead records.\r\n  While deleted records are destroyed (in accordance to #softDeleteTtl),\r\n  the active record table contains a `null` or `undefined` value for each\r\n  deleted/dead record. This method removes such records, akin in nature to\r\n  the common JavaScript garbage collection process.\r\n  \n  This method almost never needs to be run, since stores\r\n  attempt to manage this process for themselves automatically. However; if\r\n  large volume deletions occur rapidly (50K+), it's possible (though not assured)\r\n  performance could be negatively impacted. Compacting the store can\r\n  improve performance in these cases. However; running this too often or\r\n  excessively may degrade performance since it is essentially rewriting\r\n  the store data each time.\r\n  \n  When in doubt,don'tuse this method.\r\n  \r\n  existed in the store, due to the inefficient nature at such low volume.\r\n  \r\n  Triggered when the compact process begins.\r\n  \r\n  Triggered when the compact process completes.",
          "code": "compact () {\r\n    this.emit('compact.start')\r\n\r\n    if (this.METADATA.records.length < 100) {\r\n      this.emit('compact.complete')\r\n\r\n      if (this.METADATA.records.length !== 0) {\r\n        NGN.WARN(`compact() called on ${this.name} with fewer than 100 elements.`)\r\n      }\r\n\r\n      return\r\n    }\r\n\r\n    let ranges = []\r\n    let currentRange = []\r\n    let empty = 0\r\n\r\n    // Identify null ranges (dead records)\r\n    for (let i = 0; i < this.METADATA.records.length; i++) {\r\n      if (this.METADATA.records[i] === null) {\r\n        empty++\r\n\r\n        if (currentRange.length === 0) {\r\n          currentRange.push(i)\r\n        }\r\n      } else {\r\n        // Identify new index values for remaining records\r\n        if (empty > 0) {\r\n          this.PRIVATE.RECORDMAP.set(this.METADATA.records[i].OID, i - empty)\r\n\r\n          if (this.METADATA.FIRSTRECORDINDEX === i) {\r\n            this.METADATA.FIRSTRECORDINDEX = i - empty\r\n          }\r\n\r\n          if (this.METADATA.LASTRECORDINDEX === i) {\r\n            this.METADATA.LASTRECORDINDEX = i - empty\r\n          }\r\n        }\r\n\r\n        if (currentRange.length === 1) {\r\n          currentRange.push(i - 1)\r\n          ranges.push(currentRange)\r\n          currentRange = []\r\n        }\r\n      }\r\n    }\r\n\r\n    // Clear null ranges\r\n    empty = 0\r\n    while (ranges.length > 0) {\r\n      this.METADATA.records.splice(ranges[0][0] - empty, ranges[0][1] - ranges[0][0] + 1)\r\n      empty += ranges[0][1] - ranges[0][0] + 1\r\n      ranges.shift()\r\n    }\r\n\r\n    // Reset the active record map\r\n    this.PRIVATE.ACTIVERECORDMAP = null\r\n\r\n    this.emit('compact.complete')\r\n  }",
          "tags": {
            "info": [
              "This method will not run when fewer than 100 cumulative records have\nexisted in the store, due to the inefficient nature at such low volume."
            ]
          },
          "exceptions": {},
          "start": {
            "line": 1382,
            "column": 2
          },
          "end": {
            "line": 1441,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "forEach": {
          "type": "method",
          "label": "forEach",
          "description": "Performs executes the callback method on each active record\r\n  within the store. For example:\r\n  \n  ```js\r\n  Store.forEach(function (record) {\r\n    // Do Something\r\n  })\r\n  ```\r\n  \r\n  The callback method is applied to each record.",
          "code": "forEach (fn) {\r\n    if (!NGN.isFn(fn)) {\r\n      throw new Error(`A ${NGN.typeof(fn)} was applied to ${this.name}'s each() method when a function was expected.`)\r\n    }\r\n\r\n    this.PRIVATE.ACTIVERECORDS.forEach((value, key, map) => {\r\n      fn(this.METADATA.records[value])\r\n    })\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 1455,
            "column": 2
          },
          "end": {
            "line": 1463,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "callback": {
              "type": "method",
              "label": "callback",
              "description": "The callback method is applied to each record.",
              "code": "@param  {Function} callback\nThe callback method is applied to each record.",
              "start": {
                "line": 1455,
                "column": 2
              },
              "end": {
                "line": 1463,
                "column": 3
              },
              "flags": [],
              "authors": [],
              "arguments": {},
              "returnType": "void",
              "returnDescription": "void",
              "kind": null,
              "generator": false,
              "static": false,
              "computed": false,
              "async": false,
              "super": null,
              "override": false,
              "private": false
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        }
      }
    },
    "NGN.DATA.TransactionLog": {
      "type": "class",
      "label": "NGN.DATA.TransactionLog",
      "description": "Returns the entire log, in ascending historical order (oldest first).\r\n  This may be a time-consuming operation if the log is large.\r\n  \n  Example:\n  \n  ```js\r\n  [{\r\n    timestamp: Date,\r\n    value: 'some value'\r\n  },{\r\n    timestamp: Date,\r\n    value: 'some other value'\r\n  }]",
      "code": "class NGNTransactionLog extends EventEmitter { // eslint-disable-line\r\n  /**\r\n   * Create a new transaction log.\r\n   * @param  {number} [maxEntryCount=10]\r\n   * The maximum number of entries to keep in the log. Set this to `-1` to keep\r\n   * an unlimited number of logs.\r\n   */\r\n  constructor (maxEntryCount) {\r\n    super()\r\n\r\n    Object.defineProperties(this, {\r\n      METADATA: NGN.private({\r\n        transaction: {},\r\n        changeOrder: [],\r\n        cursor: null,\r\n        max: NGN.coalesce(maxEntryCount, 10)\r\n      })\r\n    })\r\n  }\r\n\r\n  get length () {\r\n    return this.METADATA.changeOrder.length\r\n  }\r\n\r\n  /**\r\n   * @property {Symbol} cursor\r\n   * The active cursor of the log.\r\n   */\r\n  get cursor () {\r\n    return this.METADATA.cursor\r\n  }\r\n\r\n  set cursor (value) {\r\n    if (value !== null && !this.METADATA.transaction.hasOwnProperty(value)) {\r\n      throw new Error('Cannot set cursor for transaction log (does not exist).')\r\n    }\r\n\r\n    this.METADATA.cursor = value\r\n  }\r\n\r\n  /**\r\n   * @property {any} currentValue\r\n   * Returns the value at the current cursor position.\r\n   */\r\n  get currentValue () {\r\n    if (this.METADATA.cursor === null) {\r\n      return undefined\r\n    }\r\n\r\n    return this.getCommit(this.METADATA.cursor).value\r\n  }\r\n\r\n  /**\r\n   * @property {Number}\r\n   * The index of the log entry at the current cursor position.\r\n   */\r\n  get cursorIndex () {\r\n    if (this.METADATA.cursor === null) {\r\n      return undefined\r\n    }\r\n\r\n    return this.METADATA.changeOrder.indexOf(this.METADATA.cursor)\r\n  }\r\n\r\n  /**\r\n   * Add a new value to the transaction log.\r\n   * @param {Any} value\r\n   * The value to assign to the log (record).\r\n   * @return {Number}\r\n   * Returns the transaction number\r\n   * @fires log {Symbol}\r\n   * Fires a log event with the transaction ID (symbol) for reference.\r\n   */\r\n  commit (value) {\r\n    let id = typeof value === 'symbol' ? Symbol(String(value)) : Symbol(NGN.coalesce(value, NGN.typeof(value)).toString())\r\n\r\n    this.METADATA.transaction[id] = [\r\n      new Date(),\r\n      value\r\n    ]\r\n\r\n    this.flush()\r\n\r\n    this.METADATA.changeOrder.push(id)\r\n    this.METADATA.cursor = id\r\n\r\n    if (this.METADATA.max > 0 && this.METADATA.changeOrder.length > this.METADATA.max) {\r\n      let removedId = this.METADATA.changeOrder.shift()\r\n      delete this.METADATA.transaction[removedId]\r\n    }\r\n\r\n    this.emit('commit', id, null)\r\n\r\n    return id\r\n  }\r\n\r\n  /**\r\n   * Return the entry for the specified commit ID.\r\n   * @param  {Symbol} id\r\n   * The transaction ID.\r\n   * @return {Object}\r\n   * Returns an object with `timestamp` and `value` keys.\r\n   */\r\n  getCommit (id = null) {\r\n    if (!this.METADATA.transaction.hasOwnProperty(id)) {\r\n      return undefined\r\n    }\r\n\r\n    return {\r\n      timestamp: this.METADATA.transaction[id][0],\r\n      value: this.METADATA.transaction[id][1]\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove all transaction log entries from the current cursor onward.\r\n   */\r\n  flush () {\r\n    if (this.METADATA.cursor === null) {\r\n      return\r\n    }\r\n\r\n    let position = this.METADATA.changeOrder.indexOf(this.METADATA.cursor)\r\n\r\n    // If the whole log is cleared, reset it silently.\r\n    if (position === 0) {\r\n      return\r\n    }\r\n\r\n    let removedEntries = this.METADATA.changeOrder.splice(position + 1)\r\n\r\n    for (let i = 0; i < removedEntries.length; i++) {\r\n      delete this.METADATA.transaction[removedEntries[i]]\r\n    }\r\n\r\n    this.METADATA.cursor = this.METADATA.changeOrder[this.METADATA.changeOrder.length - 1]\r\n  }\r\n\r\n  /**\r\n   * Rollback the log to the specified index/cursor.\r\n   * @param  {Number|Symbol} [index=1]\r\n   * The index may be a number or a commit ID (symbol).\r\n   *\r\n   * **Specifying a number** will rollback the log by the specified number of\r\n   * commits. By default, the index is `1`, which is the equivalent of a simple\r\n   * \"undo\" operation. Specifying `2` would \"undo\" two operations. Values less\r\n   * than or equal to zero are ignored. Values greater than the total number of\r\n   * committed transactions trigger a reset.\r\n   *\r\n   * **Specifying a symbol** will rollback the log to the specified commit log\r\n   * (the symbol is the commit log ID).\r\n   * @fires rollback {Object}\r\n   * This fires a `rollback` event containing the active cursor.\r\n   * @return {Symbol}\r\n   * Returns the active cursor upon completion of rollback.\r\n   */\r\n  rollback (index = 1) {\r\n    // If the log is empty, ignore the rollback\r\n    if (this.METADATA.changeOrder.length === 0) {\r\n      return null\r\n    }\r\n\r\n    if (typeof index === 'symbol') {\r\n      this.cursor = index\r\n      return index\r\n    }\r\n\r\n    if (index >= this.METADATA.changeOrder.length) {\r\n      this.METADATA.cursor = this.METADATA.changeOrder[0]\r\n    } else {\r\n      // Make sure the index is a symbol\r\n      if (typeof index === 'number') {\r\n        if (index <= 0) {\r\n          return this.METADATA.cursor\r\n        }\r\n\r\n        let currentPosition = this.METADATA.changeOrder.indexOf(this.METADATA.cursor)\r\n        currentPosition -= index\r\n\r\n        if (currentPosition <= 0) {\r\n          currentPosition = 0\r\n        }\r\n\r\n        index = this.METADATA.changeOrder[currentPosition]\r\n      }\r\n\r\n      this.METADATA.cursor = index\r\n    }\r\n\r\n    this.emit('rollback', this.METADATA.cursor, null)\r\n\r\n    return this.METADATA.cursor\r\n  }\r\n\r\n  /**\r\n   * Advance the log to the specified index/cursor.\r\n   * @param  {Number|Symbol} [index=1]\r\n   * The index may be a number or a commit ID (symbol).\r\n   *\r\n   * **Specifying a number** will advance the log by the specified number of\r\n   * commits. By default, the index is `1`, which is the equivalent of a simple\r\n   * \"redo\" operation. Specifying `2` would \"redo\" two operations. Values less\r\n   * than or equal to zero are ignored. Values greater than the total number of\r\n   * committed transactions will advance the cursor to the last entry.\r\n   *\r\n   * **Specifying a symbol** will advance the log to the specified commit log\r\n   * record (the symbol is the commit log ID).\r\n   * @fires advance {Object}\r\n   * This fires a `advance` event containing the active cursor.\r\n   * @return {Symbol}\r\n   * Returns the active cursor upon completion of rollback.\r\n   */\r\n  advance (index = 1) {\r\n    // If the log is empty, ignore the rollback\r\n    if (this.METADATA.changeOrder.length === 0) {\r\n      return null\r\n    }\r\n\r\n    // Make sure the index is a symbol\r\n    if (typeof index === 'number') {\r\n      if (index <= 0) {\r\n        return this.METADATA.cursor\r\n      }\r\n\r\n      let currentPosition = this.METADATA.changeOrder.indexOf(this.METADATA.cursor)\r\n      currentPosition += index\r\n\r\n      if (currentPosition >= this.METADATA.changeOrder.length) {\r\n        currentPosition = this.METADATA.changeOrder.length - 1\r\n      }\r\n\r\n      index = this.METADATA.changeOrder[currentPosition]\r\n    }\r\n\r\n    this.METADATA.cursor = index\r\n\r\n    this.emit('advance', this.METADATA.cursor, null)\r\n\r\n    return this.METADATA.cursor\r\n  }\r\n\r\n  /**\r\n   * Clear the transaction log.\r\n   */\r\n  reset (suppressEvents = false) {\r\n    this.METADATA.transaction = {}\r\n    this.METADATA.changeOrder = []\r\n    this.METADATA.cursor = null\r\n\r\n    if (!suppressEvents) {\r\n      this.emit('reset')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @property {Array} log\r\n   * Returns the entire log, in ascending historical order (oldest first).\r\n   * This may be a time-consuming operation if the log is large.\r\n   *\r\n   * **Example:**\r\n   *\r\n   * ```js\r\n   * [{\r\n   *   timestamp: Date,\r\n   *   value: 'some value'\r\n   * },{\r\n   *   timestamp: Date,\r\n   *   value: 'some other value'\r\n   * }]\r\n   */\r\n  get log () {\r\n    return this.METADATA.changeOrder.map(entry => {\r\n      return {\r\n        timestamp: this.METADATA.transaction[entry][0],\r\n        value: this.METADATA.transaction[entry][1],\r\n        activeCursor: this.METADATA.cursor === entry\r\n      }\r\n    })\r\n  }\r\n}",
      "tags": {},
      "exceptions": {},
      "events": {
        "commit": {
          "type": "event",
          "label": "commit",
          "description": null,
          "code": "this.emit('commit', id, null)",
          "start": {
            "line": 144,
            "column": 4
          },
          "end": {
            "line": 144,
            "column": 33
          },
          "flags": [],
          "authors": [],
          "parameters": {
            "id": {
              "type": "argument",
              "label": "id",
              "description": null,
              "code": "id",
              "start": {
                "line": 144,
                "column": 24
              },
              "end": {
                "line": 144,
                "column": 26
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            },
            "payload2": {
              "type": "argument",
              "label": "payload2",
              "description": null,
              "code": "null",
              "start": {
                "line": 144,
                "column": 28
              },
              "end": {
                "line": 144,
                "column": 32
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "deprecated": false,
          "deprecationReplacement": null
        },
        "log": {
          "type": "event",
          "label": "log",
          "description": "{Symbol}\nFires a log event with the transaction ID  for reference.",
          "code": "@fires log {Symbol}\nFires a log event with the transaction ID (symbol) for reference.",
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "parameters": {
            "payload": {
              "type": "argument",
              "label": "payload",
              "description": null,
              "code": null,
              "start": {
                "line": 0,
                "column": 0
              },
              "end": {
                "line": 0,
                "column": 0
              },
              "flags": [],
              "authors": [],
              "datatype": "",
              "required": false,
              "enum": null
            }
          },
          "deprecated": false,
          "deprecationReplacement": null
        },
        "rollback": {
          "type": "event",
          "label": "rollback",
          "description": "{Object}\nThis fires a `rollback` event containing the active cursor.",
          "code": "@fires rollback {Object}\nThis fires a `rollback` event containing the active cursor.",
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "parameters": {
            "payload": {
              "type": "argument",
              "label": "payload",
              "description": null,
              "code": null,
              "start": {
                "line": 0,
                "column": 0
              },
              "end": {
                "line": 0,
                "column": 0
              },
              "flags": [],
              "authors": [],
              "datatype": "",
              "required": false,
              "enum": null
            }
          },
          "deprecated": false,
          "deprecationReplacement": null
        },
        "advance": {
          "type": "event",
          "label": "advance",
          "description": "{Object}\nThis fires a `advance` event containing the active cursor.",
          "code": "@fires advance {Object}\nThis fires a `advance` event containing the active cursor.",
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "parameters": {
            "payload": {
              "type": "argument",
              "label": "payload",
              "description": null,
              "code": null,
              "start": {
                "line": 0,
                "column": 0
              },
              "end": {
                "line": 0,
                "column": 0
              },
              "flags": [],
              "authors": [],
              "datatype": "",
              "required": false,
              "enum": null
            }
          },
          "deprecated": false,
          "deprecationReplacement": null
        },
        "reset": {
          "type": "event",
          "label": "reset",
          "description": null,
          "code": "this.emit('reset')",
          "start": {
            "line": 303,
            "column": 6
          },
          "end": {
            "line": 303,
            "column": 24
          },
          "flags": [],
          "authors": [],
          "parameters": {},
          "deprecated": false,
          "deprecationReplacement": null
        }
      },
      "start": {
        "line": 53,
        "column": 15
      },
      "end": {
        "line": 332,
        "column": 1
      },
      "flags": [],
      "authors": [],
      "sourcefile": "./\\data\\TransactionLog.js",
      "extends": "EventEmitter",
      "configuration": {},
      "properties": {
        "METADATA": {
          "type": "property",
          "label": "METADATA",
          "description": null,
          "code": "METADATA: NGN.private({\r\n        transaction: {},\r\n        changeOrder: [],\r\n        cursor: null,\r\n        max: NGN.coalesce(maxEntryCount, 10)\r\n      })",
          "start": {
            "line": 64,
            "column": 6
          },
          "end": {
            "line": 69,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": true
        },
        "length": {
          "type": "property",
          "label": "length",
          "description": null,
          "code": "get length () {\r\n    return this.METADATA.changeOrder.length\r\n  }",
          "start": {
            "line": 73,
            "column": 2
          },
          "end": {
            "line": 75,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "cursor": {
          "type": "property",
          "label": "cursor",
          "description": null,
          "code": "set cursor (value) {\r\n    if (value !== null && !this.METADATA.transaction.hasOwnProperty(value)) {\r\n      throw new Error('Cannot set cursor for transaction log (does not exist).')\r\n    }\r\n\r\n    this.METADATA.cursor = value\r\n  }",
          "start": {
            "line": 85,
            "column": 2
          },
          "end": {
            "line": 91,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": false,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "currentValue": {
          "type": "property",
          "label": "currentValue",
          "description": null,
          "code": "get currentValue () {\r\n    if (this.METADATA.cursor === null) {\r\n      return undefined\r\n    }\r\n\r\n    return this.getCommit(this.METADATA.cursor).value\r\n  }",
          "start": {
            "line": 97,
            "column": 2
          },
          "end": {
            "line": 103,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "cursorIndex": {
          "type": "property",
          "label": "cursorIndex",
          "description": null,
          "code": "get cursorIndex () {\r\n    if (this.METADATA.cursor === null) {\r\n      return undefined\r\n    }\r\n\r\n    return this.METADATA.changeOrder.indexOf(this.METADATA.cursor)\r\n  }",
          "start": {
            "line": 109,
            "column": 2
          },
          "end": {
            "line": 115,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "log": {
          "type": "property",
          "label": "log",
          "description": null,
          "code": "get log () {\r\n    return this.METADATA.changeOrder.map(entry => {\r\n      return {\r\n        timestamp: this.METADATA.transaction[entry][0],\r\n        value: this.METADATA.transaction[entry][1],\r\n        activeCursor: this.METADATA.cursor === entry\r\n      }\r\n    })\r\n  }",
          "start": {
            "line": 323,
            "column": 2
          },
          "end": {
            "line": 331,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        }
      },
      "methods": {
        "constructor": {
          "type": "method",
          "label": "constructor",
          "description": "Create a new transaction log.\r\n  \r\n  The maximum number of entries to keep in the log. Set this to `-1` to keep\r\n  an unlimited number of logs.",
          "code": "constructor (maxEntryCount) {\r\n    super()\r\n\r\n    Object.defineProperties(this, {\r\n      METADATA: NGN.private({\r\n        transaction: {},\r\n        changeOrder: [],\r\n        cursor: null,\r\n        max: NGN.coalesce(maxEntryCount, 10)\r\n      })\r\n    })\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 60,
            "column": 2
          },
          "end": {
            "line": 71,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "maxEntryCount": {
              "type": "argument",
              "label": "maxEntryCount",
              "description": "The maximum number of entries to keep in the log. Set this to `-1` to keep\nan unlimited number of logs.",
              "code": "maxEntryCount",
              "start": {
                "line": 60,
                "column": 15
              },
              "end": {
                "line": 60,
                "column": 28
              },
              "flags": [],
              "authors": [],
              "default": "10",
              "datatype": "number",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "constructor",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "commit": {
          "type": "method",
          "label": "commit",
          "description": "Add a new value to the transaction log.\r\n  \r\n  The value to assign to the log (record).\r\n  \r\n  Returns the transaction number\r\n  \r\n  Fires a log event with the transaction ID (symbol) for reference.",
          "code": "commit (value) {\r\n    let id = typeof value === 'symbol' ? Symbol(String(value)) : Symbol(NGN.coalesce(value, NGN.typeof(value)).toString())\r\n\r\n    this.METADATA.transaction[id] = [\r\n      new Date(),\r\n      value\r\n    ]\r\n\r\n    this.flush()\r\n\r\n    this.METADATA.changeOrder.push(id)\r\n    this.METADATA.cursor = id\r\n\r\n    if (this.METADATA.max > 0 && this.METADATA.changeOrder.length > this.METADATA.max) {\r\n      let removedId = this.METADATA.changeOrder.shift()\r\n      delete this.METADATA.transaction[removedId]\r\n    }\r\n\r\n    this.emit('commit', id, null)\r\n\r\n    return id\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 126,
            "column": 2
          },
          "end": {
            "line": 147,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "value": {
              "type": "argument",
              "label": "value",
              "description": "The value to assign to the log .",
              "code": "value",
              "start": {
                "line": 126,
                "column": 10
              },
              "end": {
                "line": 126,
                "column": 15
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "any",
              "required": true,
              "enum": [
                "record"
              ]
            }
          },
          "returnType": "Number",
          "returnDescription": "null Returns the transaction number",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "getCommit": {
          "type": "method",
          "label": "getCommit",
          "description": "Return the entry for the specified commit ID.\r\n  \r\n  The transaction ID.\r\n  \r\n  Returns an object with `timestamp` and `value` keys.",
          "code": "getCommit (id = null) {\r\n    if (!this.METADATA.transaction.hasOwnProperty(id)) {\r\n      return undefined\r\n    }\r\n\r\n    return {\r\n      timestamp: this.METADATA.transaction[id][0],\r\n      value: this.METADATA.transaction[id][1]\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 156,
            "column": 2
          },
          "end": {
            "line": 165,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "id": {
              "type": "argument",
              "label": "id",
              "description": "The transaction ID.",
              "code": "id = null",
              "start": {
                "line": 156,
                "column": 13
              },
              "end": {
                "line": 156,
                "column": 22
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "symbol",
              "required": true,
              "enum": null
            }
          },
          "returnType": "Object",
          "returnDescription": "null Returns an object with `timestamp` and `value` keys.",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "flush": {
          "type": "method",
          "label": "flush",
          "description": "Remove all transaction log entries from the current cursor onward.",
          "code": "flush () {\r\n    if (this.METADATA.cursor === null) {\r\n      return\r\n    }\r\n\r\n    let position = this.METADATA.changeOrder.indexOf(this.METADATA.cursor)\r\n\r\n    // If the whole log is cleared, reset it silently.\r\n    if (position === 0) {\r\n      return\r\n    }\r\n\r\n    let removedEntries = this.METADATA.changeOrder.splice(position + 1)\r\n\r\n    for (let i = 0; i < removedEntries.length; i++) {\r\n      delete this.METADATA.transaction[removedEntries[i]]\r\n    }\r\n\r\n    this.METADATA.cursor = this.METADATA.changeOrder[this.METADATA.changeOrder.length - 1]\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 170,
            "column": 2
          },
          "end": {
            "line": 189,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "rollback": {
          "type": "method",
          "label": "rollback",
          "description": "Rollback the log to the specified index/cursor.\r\n  \r\n  The index may be a number or a commit ID (symbol).\r\n  \n  Specifying a numberwill rollback the log by the specified number of\r\n  commits. By default, the index is `1`, which is the equivalent of a simple\r\n  \"undo\" operation. Specifying `2` would \"undo\" two operations. Values less\r\n  than or equal to zero are ignored. Values greater than the total number of\r\n  committed transactions trigger a reset.\r\n  \n  Specifying a symbolwill rollback the log to the specified commit log\r\n  (the symbol is the commit log ID).\r\n  \r\n  This fires a `rollback` event containing the active cursor.\r\n  \r\n  Returns the active cursor upon completion of rollback.",
          "code": "rollback (index = 1) {\r\n    // If the log is empty, ignore the rollback\r\n    if (this.METADATA.changeOrder.length === 0) {\r\n      return null\r\n    }\r\n\r\n    if (typeof index === 'symbol') {\r\n      this.cursor = index\r\n      return index\r\n    }\r\n\r\n    if (index >= this.METADATA.changeOrder.length) {\r\n      this.METADATA.cursor = this.METADATA.changeOrder[0]\r\n    } else {\r\n      // Make sure the index is a symbol\r\n      if (typeof index === 'number') {\r\n        if (index <= 0) {\r\n          return this.METADATA.cursor\r\n        }\r\n\r\n        let currentPosition = this.METADATA.changeOrder.indexOf(this.METADATA.cursor)\r\n        currentPosition -= index\r\n\r\n        if (currentPosition <= 0) {\r\n          currentPosition = 0\r\n        }\r\n\r\n        index = this.METADATA.changeOrder[currentPosition]\r\n      }\r\n\r\n      this.METADATA.cursor = index\r\n    }\r\n\r\n    this.emit('rollback', this.METADATA.cursor, null)\r\n\r\n    return this.METADATA.cursor\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 209,
            "column": 2
          },
          "end": {
            "line": 245,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "index": {
              "type": "argument",
              "label": "index",
              "description": "The index may be a number or a commit ID .\n\n**Specifying a number** will rollback the log by the specified number of\ncommits. By default, the index is `1`, which is the equivalent of a simple\n\"undo\" operation. Specifying `2` would \"undo\" two operations. Values less\nthan or equal to zero are ignored. Values greater than the total number of\ncommitted transactions trigger a reset.\n\n**Specifying a symbol** will rollback the log to the specified commit log\n(the symbol is the commit log ID).",
              "code": "index = 1",
              "start": {
                "line": 209,
                "column": 12
              },
              "end": {
                "line": 209,
                "column": 21
              },
              "flags": [],
              "authors": [],
              "default": "1",
              "datatype": "number|symbol",
              "required": false,
              "enum": [
                "symbol"
              ]
            }
          },
          "returnType": "Symbol",
          "returnDescription": "null Returns the active cursor upon completion of rollback.",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "advance": {
          "type": "method",
          "label": "advance",
          "description": "Advance the log to the specified index/cursor.\r\n  \r\n  The index may be a number or a commit ID (symbol).\r\n  \n  Specifying a numberwill advance the log by the specified number of\r\n  commits. By default, the index is `1`, which is the equivalent of a simple\r\n  \"redo\" operation. Specifying `2` would \"redo\" two operations. Values less\r\n  than or equal to zero are ignored. Values greater than the total number of\r\n  committed transactions will advance the cursor to the last entry.\r\n  \n  Specifying a symbolwill advance the log to the specified commit log\r\n  record (the symbol is the commit log ID).\r\n  \r\n  This fires a `advance` event containing the active cursor.\r\n  \r\n  Returns the active cursor upon completion of rollback.",
          "code": "advance (index = 1) {\r\n    // If the log is empty, ignore the rollback\r\n    if (this.METADATA.changeOrder.length === 0) {\r\n      return null\r\n    }\r\n\r\n    // Make sure the index is a symbol\r\n    if (typeof index === 'number') {\r\n      if (index <= 0) {\r\n        return this.METADATA.cursor\r\n      }\r\n\r\n      let currentPosition = this.METADATA.changeOrder.indexOf(this.METADATA.cursor)\r\n      currentPosition += index\r\n\r\n      if (currentPosition >= this.METADATA.changeOrder.length) {\r\n        currentPosition = this.METADATA.changeOrder.length - 1\r\n      }\r\n\r\n      index = this.METADATA.changeOrder[currentPosition]\r\n    }\r\n\r\n    this.METADATA.cursor = index\r\n\r\n    this.emit('advance', this.METADATA.cursor, null)\r\n\r\n    return this.METADATA.cursor\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 265,
            "column": 2
          },
          "end": {
            "line": 292,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "index": {
              "type": "argument",
              "label": "index",
              "description": "The index may be a number or a commit ID .\n\n**Specifying a number** will advance the log by the specified number of\ncommits. By default, the index is `1`, which is the equivalent of a simple\n\"redo\" operation. Specifying `2` would \"redo\" two operations. Values less\nthan or equal to zero are ignored. Values greater than the total number of\ncommitted transactions will advance the cursor to the last entry.\n\n**Specifying a symbol** will advance the log to the specified commit log\nrecord (the symbol is the commit log ID).",
              "code": "index = 1",
              "start": {
                "line": 265,
                "column": 11
              },
              "end": {
                "line": 265,
                "column": 20
              },
              "flags": [],
              "authors": [],
              "default": "1",
              "datatype": "number|symbol",
              "required": false,
              "enum": [
                "symbol"
              ]
            }
          },
          "returnType": "Symbol",
          "returnDescription": "null Returns the active cursor upon completion of rollback.",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "reset": {
          "type": "method",
          "label": "reset",
          "description": "Clear the transaction log.",
          "code": "reset (suppressEvents = false) {\r\n    this.METADATA.transaction = {}\r\n    this.METADATA.changeOrder = []\r\n    this.METADATA.cursor = null\r\n\r\n    if (!suppressEvents) {\r\n      this.emit('reset')\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 297,
            "column": 2
          },
          "end": {
            "line": 305,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "suppressEvents": {
              "type": "argument",
              "label": "suppressEvents",
              "description": null,
              "code": "suppressEvents = false",
              "start": {
                "line": 297,
                "column": 9
              },
              "end": {
                "line": 297,
                "column": 31
              },
              "flags": [],
              "authors": [],
              "default": false,
              "datatype": "boolean",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        }
      }
    },
    "NGN.DATA.UTILITY": {
      "type": "class",
      "label": "NGN.DATA.UTILITY",
      "description": "A utility library of functions relevant to data management.",
      "code": "class Utility { // eslint-disable-line\r\n  static diff () {\r\n    return ObjectDiff.compare(...arguments) // eslint-disable-line no-undef\r\n  }\r\n\r\n  /**\r\n   * @method checksum\r\n   * Create the checksum of the specified string.\r\n   * @param  {string} content\r\n   * The content to generate a checksum for.\r\n   * @return {string}\r\n   * Generates a checksum value.\r\n   */\r\n  static checksum (str) {\r\n    if (typeof str === 'object') {\r\n      str = JSON.stringify(this.serialize(str))\r\n    }\r\n\r\n    if (!crcTable) {\r\n      crcTable = makeCRCTable()\r\n    }\r\n\r\n    let crc = 0 ^ (-1)\r\n\r\n    for (let i = 0; i < str.length; i++) {\r\n      crc = (crc >>> 8) ^ crcTable[(crc ^ str.charCodeAt(i)) & 0xFF]\r\n    }\r\n\r\n    return (crc ^ (-1)) >>> 0\r\n  }\r\n\r\n  /**\r\n   * @method UUID\r\n   * Generate a universally unique identifier (v4).\r\n   *\r\n   * This is a \"fast\" UUID generator, designed to work in the browser.\r\n   * This will generate a UUID in less than 20ms on Chrome, as of Nov 6, 2017.\r\n   * Code courtesy of @broofa on StackOverflow.\r\n   *\r\n   * While this method cannot absolutely guarantee there will be no collisions\r\n   * (duplicates), the chances are 1:5.3x10^^36 (1 in over 100 quadrillion).\r\n   * You are over 30 _octillion_ times more likely to win the Powerball than to\r\n   * generate two identical \"random\" UUIDs using the version 4 scheme.\r\n   * @return {string}\r\n   * Returns a [V4 GUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_.28random.29).\r\n   */\r\n  static UUID () {\r\n    /* node-only */\r\n    return this.GUID()\r\n    /* end-node-only */\r\n    /* browser-only */\r\n    return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c => // eslint-disable-line\r\n      (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16) // eslint-disable-line\r\n    )\r\n    /* end-browser-only */\r\n  }\r\n\r\n  /**\r\n   * @method GUID\r\n   * Generate a globally unique identifier. A GUID is the Microsoft\r\n   * implementation of a UUIDv4.\r\n   *\r\n   * The likelihood of an ID collision, according to the original author (Jeff\r\n   * Ward) is 1:3.26x10^15 (1 in 3.26 quadrillion). Results are generated between\r\n   * approximately 105ms (Desktop) and 726ms (Android) as of May 2016.\r\n   * @return {string} [description]\r\n   */\r\n  static GUID () {\r\n    let lut = []\r\n\r\n    for (let i = 0; i < 256; i++) {\r\n      lut[i] = (i < 16 ? '0' : '') + (i).toString(16)\r\n    }\r\n\r\n    const d0 = Math.random() * 0xffffffff | 0\r\n    const d1 = Math.random() * 0xffffffff | 0\r\n    const d2 = Math.random() * 0xffffffff | 0\r\n    const d3 = Math.random() * 0xffffffff | 0\r\n\r\n    return lut[d0 & 0xff] + lut[d0 >> 8 & 0xff] + lut[d0 >> 16 & 0xff] + lut[d0 >> 24 & 0xff] +\r\n      '-' + lut[d1 & 0xff] + lut[d1 >> 8 & 0xff] + '-' + lut[d1 >> 16 & 0x0f | 0x40] +\r\n      lut[d1 >> 24 & 0xff] + '-' + lut[d2 & 0x3f | 0x80] + lut[d2 >> 8 & 0xff] + '-' +\r\n      lut[d2 >> 16 & 0xff] + lut[d2 >> 24 & 0xff] + lut[d3 & 0xff] + lut[d3 >> 8 & 0xff] +\r\n      lut[d3 >> 16 & 0xff] + lut[d3 >> 24 & 0xff]\r\n  }\r\n\r\n  /**\r\n   * @method serialize\r\n   * Creates a JSON data object with no functions. Only uses enumerable\r\n   * attributes of the object.\r\n   *\r\n   * Functions & Setters are always ignored. Getters are evaluated recursively\r\n   * until a simple object type is found or there are no further nested\r\n   * attributes.\r\n   * @param {object|array} object\r\n   * Supports an object or array.\r\n   */\r\n  static serialize (data) {\r\n    if (typeof data !== 'object') {\r\n      throw new Error(`Cannot serialize ${NGN.typeof(data)} value. Must be an object.`)\r\n    }\r\n\r\n    // Force an object for parsing\r\n    let SERIALIZED_ARRAY_DATA = Symbol('array.data')\r\n\r\n    if (NGN.typeof(data) === 'array') {\r\n      data = {\r\n        [SERIALIZED_ARRAY_DATA]: data\r\n      }\r\n    }\r\n\r\n    let result = {}\r\n    let attribute = Object.keys(data)\r\n\r\n    for (let i = 0; i < attribute.length; i++) {\r\n      if (data[attribute[i]] !== undefined) {\r\n        switch (NGN.typeof(data[attribute[i]])) {\r\n          case 'object':\r\n            Object.defineProperty(\r\n              result,\r\n              attribute[i],\r\n              NGN.public(NGN.DATA.UTIL.serialize(data[attribute[i]]))\r\n            )\r\n\r\n            break\r\n\r\n          case 'array':\r\n            result[attribute[i]] = []\r\n\r\n            for (let a = 0; a < data[attribute[i]].length; a++) {\r\n              result[attribute[i]].push(NGN.DATA.UTIL.serialize(data[attribute[i]]))\r\n            }\r\n\r\n            break\r\n\r\n          case 'date':\r\n            Object.defineProperty(result, attribute[i], NGN.public(data[attribute[i]].toISOString()))\r\n\r\n            break\r\n\r\n          case 'symbol':\r\n            if (SERIALIZED_ARRAY_DATA !== attribute[i]) {\r\n              result[attribute[i]] = data[attribute[i]].toString()\r\n            }\r\n\r\n            break\r\n\r\n          case 'regexp':\r\n            Object.defineProperty(result, attribute[i], NGN.public(data[attribute[i]].toString()))\r\n\r\n            break\r\n\r\n          case 'weakmap':\r\n          case 'map':\r\n            let mapResult = {}\r\n\r\n            data[attribute[i]].forEach((value, key) => {\r\n              mapResult[key.toString()] = this.serialize(value)\r\n            })\r\n\r\n            result[attribute[i]] = mapResult\r\n\r\n            break\r\n\r\n          case 'weakset':\r\n          case 'set':\r\n            if (data[attribute[i]].size === 0) {\r\n              result[attribute[i]] = []\r\n              break\r\n            }\r\n\r\n            result[attribute[i]] = this.serialize(Array.from(data[attribute[i]].values()))\r\n\r\n            break\r\n\r\n          case 'function':\r\n            break\r\n\r\n          default:\r\n            result[attribute[i]] = data[attribute[i]]\r\n        }\r\n      }\r\n    }\r\n\r\n    return result[SERIALIZED_ARRAY_DATA] !== undefined ? result[SERIALIZED_ARRAY_DATA] : result\r\n  }\r\n\r\n  /**\r\n   * @method isModel\r\n   * Determines whether an object is an instance of NGN.DATA.Model.\r\n   * @param {function} PossibleModel\r\n   * The class or function to be checked.\r\n   * @returns {boolean}\r\n   */\r\n   static isDataModel (Model) {\r\n     if (Model instanceof NGN.DATA.Model || NGN.typeof(Model) === 'model') {\r\n       return true\r\n     }\r\n\r\n     if (Model.hasOwnProperty('prototype') && Model.prototype !== null) {\r\n       let currentElement = Model;\r\n       let count = 0;\r\n\r\n       while (currentElement.prototype !== null && count < 30) {\r\n         count++;\r\n\r\n         currentElement = currentElement.prototype;\r\n\r\n         if (currentElement instanceof NGN.DATA.Model || NGN.typeof(currentElement) === 'model') {\r\n           return true\r\n         }\r\n       }\r\n     }\r\n\r\n     return Model instanceof NGN.DATA.Entity\r\n   }\r\n\r\n  // /**\r\n  //  * @method objectByteSize\r\n  //  * Calculates the _estimated_ size (in bytes) of primitive key/value objects,\r\n  //  * meaning those that do not contain functions, accessors (getters/setters),\r\n  //  * or other attributes other than `String`, `Number`, or `Boolean` values.\r\n  //  * NGN treats dates as `String` values.\r\n  //  *\r\n  //  * JavaScript engines differ in how they manage memory, but most do not\r\n  //  * calculate the size of functions. If a value of type `function` is found in\r\n  //  * the object, NGN will calculate the size of it's `String` representation.\r\n  //  * This is a weak measure of function size since most JavaScript engines\r\n  //  * do not expose enough realtime heap data to know calculate with accuracy at\r\n  //  * any given point in time.\r\n  //  *\r\n  //  * This method attempts to implement similar principles to C's `sizeOf` method.\r\n  //  *\r\n  //  * Consider this method to provide a **best guess based on the available data**.\r\n  //  *\r\n  //  * @param {Object} object\r\n  //  * The primitive key/value object upon which the bytesize estimation will be made.\r\n  //  * @param {Boolean} [ignoreFunctionEstimate=false]\r\n  //  * By default, NGN will calculate the `String` representation of any functions\r\n  //  * it encounters in the key/value object. Setting this to `true` will prevent\r\n  //  * this behavior, effectively using a `0` to calculate function size.\r\n  //  */\r\n  // static objectByteSize (obj, ignore=false) {\r\n  //   switch (typeof obj) {\r\n  //     case null:\r\n  //       return 4\r\n  //\r\n  //     case 'string':\r\n  //       return obj.length * 2\r\n  //\r\n  //     case 'boolean':\r\n  //       return 4\r\n  //\r\n  //     case 'number':\r\n  //       return 8\r\n  //\r\n  //     case 'function':\r\n  //       if (!ignore) {\r\n  //         return obj.toString().length * 2\r\n  //       }\r\n  //\r\n  //       return 0\r\n  //   }\r\n  //\r\n  //   let list = []\r\n  //   let stack = [obj]\r\n  //   let bytes = 0\r\n  //\r\n  //   while (stack.length) {\r\n  //     let value = stack.pop()\r\n  //\r\n  //     if (typeof value === 'object') {\r\n  //       if (list.indexOf(value) < 0) {\r\n  //         list.push(value)\r\n  //\r\n  //         // If the object is not an array, add key sizes\r\n  //         const isArray = !Array.isArray(value)\r\n  //\r\n  //         for (let key in value) {\r\n  //           if (!isArray) {\r\n  //             bytes += (2 * key.length) + NGN.DATA.util(value[key])\r\n  //             stack.push(value[key])\r\n  //           } else {\r\n  //\r\n  //           }\r\n  //         }\r\n  //       }\r\n  //     } else {\r\n  //       bytes += NGN.DATA.UTILITY.objectByteSize(value)\r\n  //     }\r\n  //   }\r\n  //\r\n  //   return bytes\r\n  // }\r\n}",
      "tags": {},
      "exceptions": {},
      "events": {},
      "start": {
        "line": 33,
        "column": 15
      },
      "end": {
        "line": 327,
        "column": 1
      },
      "flags": [],
      "authors": [],
      "sourcefile": "./\\data\\Utility.js",
      "extends": null,
      "configuration": {},
      "properties": {},
      "methods": {
        "diff": {
          "type": "method",
          "label": "diff",
          "description": null,
          "code": "static diff () {\r\n    return ObjectDiff.compare(...arguments) // eslint-disable-line no-undef\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 34,
            "column": 2
          },
          "end": {
            "line": 36,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": true,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "checksum": {
          "type": "method",
          "label": "checksum",
          "description": "Create the checksum of the specified string.",
          "code": "static checksum (str) {\r\n    if (typeof str === 'object') {\r\n      str = JSON.stringify(this.serialize(str))\r\n    }\r\n\r\n    if (!crcTable) {\r\n      crcTable = makeCRCTable()\r\n    }\r\n\r\n    let crc = 0 ^ (-1)\r\n\r\n    for (let i = 0; i < str.length; i++) {\r\n      crc = (crc >>> 8) ^ crcTable[(crc ^ str.charCodeAt(i)) & 0xFF]\r\n    }\r\n\r\n    return (crc ^ (-1)) >>> 0\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 46,
            "column": 2
          },
          "end": {
            "line": 62,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "str": {
              "type": "argument",
              "label": "content",
              "description": "The content to generate a checksum for.",
              "code": "str",
              "start": {
                "line": 46,
                "column": 19
              },
              "end": {
                "line": 46,
                "column": 22
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "content": {
              "type": "argument",
              "label": "content",
              "description": "The content to generate a checksum for.",
              "code": "str",
              "start": {
                "line": 46,
                "column": 19
              },
              "end": {
                "line": 46,
                "column": 22
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            }
          },
          "returnType": "string",
          "returnDescription": "null Generates a checksum value.",
          "kind": "method",
          "generator": false,
          "static": true,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "UUID": {
          "type": "method",
          "label": "UUID",
          "description": "Generate a universally unique identifier .\n\nThis is a \"fast\" UUID generator, designed to work in the browser.\nThis will generate a UUID in less than 20ms on Chrome, as of Nov 6, 2017.\nCode courtesy of @broofa on StackOverflow.\n\nWhile this method cannot absolutely guarantee there will be no collisions\n(duplicates), the chances are 1:5.3x10^^36 (1 in over 100 quadrillion).\nYou are over 30 _octillion_ times more likely to win the Powerball than to\ngenerate two identical \"random\" UUIDs using the version 4 scheme.",
          "code": "static UUID () {\r\n    /* node-only */\r\n    return this.GUID()\r\n    /* end-node-only */\r\n    /* browser-only */\r\n    return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c => // eslint-disable-line\r\n      (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16) // eslint-disable-line\r\n    )\r\n    /* end-browser-only */\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 79,
            "column": 2
          },
          "end": {
            "line": 88,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "string",
          "returnDescription": "null Returns a [V4 GUID].",
          "kind": "method",
          "generator": false,
          "static": true,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "GUID": {
          "type": "method",
          "label": "GUID",
          "description": "Generate a globally unique identifier. A GUID is the Microsoft\nimplementation of a UUIDv4.\n\nThe likelihood of an ID collision, according to the original author (Jeff\nWard) is 1:3.26x10^15 . Results are generated between\napproximately 105ms (Desktop) and 726ms (Android) as of May 2016.",
          "code": "static GUID () {\r\n    let lut = []\r\n\r\n    for (let i = 0; i < 256; i++) {\r\n      lut[i] = (i < 16 ? '0' : '') + (i).toString(16)\r\n    }\r\n\r\n    const d0 = Math.random() * 0xffffffff | 0\r\n    const d1 = Math.random() * 0xffffffff | 0\r\n    const d2 = Math.random() * 0xffffffff | 0\r\n    const d3 = Math.random() * 0xffffffff | 0\r\n\r\n    return lut[d0 & 0xff] + lut[d0 >> 8 & 0xff] + lut[d0 >> 16 & 0xff] + lut[d0 >> 24 & 0xff] +\r\n      '-' + lut[d1 & 0xff] + lut[d1 >> 8 & 0xff] + '-' + lut[d1 >> 16 & 0x0f | 0x40] +\r\n      lut[d1 >> 24 & 0xff] + '-' + lut[d2 & 0x3f | 0x80] + lut[d2 >> 8 & 0xff] + '-' +\r\n      lut[d2 >> 16 & 0xff] + lut[d2 >> 24 & 0xff] + lut[d3 & 0xff] + lut[d3 >> 8 & 0xff] +\r\n      lut[d3 >> 16 & 0xff] + lut[d3 >> 24 & 0xff]\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 100,
            "column": 2
          },
          "end": {
            "line": 117,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "string",
          "returnDescription": "description",
          "kind": "method",
          "generator": false,
          "static": true,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "serialize": {
          "type": "method",
          "label": "serialize",
          "description": "Creates a JSON data object with no functions. Only uses enumerable\nattributes of the object.\n\nFunctions & Setters are always ignored. Getters are evaluated recursively\nuntil a simple object type is found or there are no further nested\nattributes.",
          "code": "static serialize (data) {\r\n    if (typeof data !== 'object') {\r\n      throw new Error(`Cannot serialize ${NGN.typeof(data)} value. Must be an object.`)\r\n    }\r\n\r\n    // Force an object for parsing\r\n    let SERIALIZED_ARRAY_DATA = Symbol('array.data')\r\n\r\n    if (NGN.typeof(data) === 'array') {\r\n      data = {\r\n        [SERIALIZED_ARRAY_DATA]: data\r\n      }\r\n    }\r\n\r\n    let result = {}\r\n    let attribute = Object.keys(data)\r\n\r\n    for (let i = 0; i < attribute.length; i++) {\r\n      if (data[attribute[i]] !== undefined) {\r\n        switch (NGN.typeof(data[attribute[i]])) {\r\n          case 'object':\r\n            Object.defineProperty(\r\n              result,\r\n              attribute[i],\r\n              NGN.public(NGN.DATA.UTIL.serialize(data[attribute[i]]))\r\n            )\r\n\r\n            break\r\n\r\n          case 'array':\r\n            result[attribute[i]] = []\r\n\r\n            for (let a = 0; a < data[attribute[i]].length; a++) {\r\n              result[attribute[i]].push(NGN.DATA.UTIL.serialize(data[attribute[i]]))\r\n            }\r\n\r\n            break\r\n\r\n          case 'date':\r\n            Object.defineProperty(result, attribute[i], NGN.public(data[attribute[i]].toISOString()))\r\n\r\n            break\r\n\r\n          case 'symbol':\r\n            if (SERIALIZED_ARRAY_DATA !== attribute[i]) {\r\n              result[attribute[i]] = data[attribute[i]].toString()\r\n            }\r\n\r\n            break\r\n\r\n          case 'regexp':\r\n            Object.defineProperty(result, attribute[i], NGN.public(data[attribute[i]].toString()))\r\n\r\n            break\r\n\r\n          case 'weakmap':\r\n          case 'map':\r\n            let mapResult = {}\r\n\r\n            data[attribute[i]].forEach((value, key) => {\r\n              mapResult[key.toString()] = this.serialize(value)\r\n            })\r\n\r\n            result[attribute[i]] = mapResult\r\n\r\n            break\r\n\r\n          case 'weakset':\r\n          case 'set':\r\n            if (data[attribute[i]].size === 0) {\r\n              result[attribute[i]] = []\r\n              break\r\n            }\r\n\r\n            result[attribute[i]] = this.serialize(Array.from(data[attribute[i]].values()))\r\n\r\n            break\r\n\r\n          case 'function':\r\n            break\r\n\r\n          default:\r\n            result[attribute[i]] = data[attribute[i]]\r\n        }\r\n      }\r\n    }\r\n\r\n    return result[SERIALIZED_ARRAY_DATA] !== undefined ? result[SERIALIZED_ARRAY_DATA] : result\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 130,
            "column": 2
          },
          "end": {
            "line": 218,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "data": {
              "type": "argument",
              "label": "object",
              "description": "Supports an object or array.",
              "code": "data",
              "start": {
                "line": 130,
                "column": 20
              },
              "end": {
                "line": 130,
                "column": 24
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "object|array",
              "required": true,
              "enum": null
            },
            "object": {
              "type": "argument",
              "label": "object",
              "description": "Supports an object or array.",
              "code": "data",
              "start": {
                "line": 130,
                "column": 20
              },
              "end": {
                "line": 130,
                "column": 24
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "object|array",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": true,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "isDataModel": {
          "type": "method",
          "label": "isDataModel",
          "description": "Determines whether an object is an instance of NGN.DATA.Model.",
          "code": "static isDataModel (Model) {\r\n     if (Model instanceof NGN.DATA.Model || NGN.typeof(Model) === 'model') {\r\n       return true\r\n     }\r\n\r\n     if (Model.hasOwnProperty('prototype') && Model.prototype !== null) {\r\n       let currentElement = Model;\r\n       let count = 0;\r\n\r\n       while (currentElement.prototype !== null && count < 30) {\r\n         count++;\r\n\r\n         currentElement = currentElement.prototype;\r\n\r\n         if (currentElement instanceof NGN.DATA.Model || NGN.typeof(currentElement) === 'model') {\r\n           return true\r\n         }\r\n       }\r\n     }\r\n\r\n     return Model instanceof NGN.DATA.Entity\r\n   }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 227,
            "column": 3
          },
          "end": {
            "line": 248,
            "column": 4
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "PossibleModel": {
              "type": "method",
              "label": "PossibleModel",
              "description": "The class or function to be checked.",
              "code": "@param {function} PossibleModel\nThe class or function to be checked.",
              "start": {
                "line": 227,
                "column": 3
              },
              "end": {
                "line": 248,
                "column": 4
              },
              "flags": [],
              "authors": [],
              "arguments": {},
              "returnType": "void",
              "returnDescription": "void",
              "kind": null,
              "generator": false,
              "static": false,
              "computed": false,
              "async": false,
              "super": null,
              "override": false,
              "private": false
            }
          },
          "returnType": "boolean",
          "returnDescription": "",
          "kind": "method",
          "generator": false,
          "static": true,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        }
      }
    },
    "EventEmitterBase": {
      "type": "class",
      "label": "EventEmitterBase",
      "description": "The maximum number of listeners for a single event.",
      "code": "class BrowserEmitter { // eslint-disable-line no-unused-vars\r\n  /**\r\n   * @constructor\r\n   * ```\r\n   * let EE = new EventEmitter()\r\n   * ```\r\n   * This is a protected class. It is most commonly instantiated through\r\n   * the NGN namespace (i.e. `new NGN.EventEmitter()`). However; it is\r\n   * designed for use within the NGN library, not directly as an event emitter.\r\n   * Use with caution.\r\n   */\r\n  constructor (cfg) {\r\n    cfg = cfg || {}\r\n\r\n    Object.defineProperties(this, {\r\n      handlers: NGN.private({}),\r\n      adhoc: NGN.private({}),\r\n      maxlisteners: NGN.private(cfg.defaultMaxListeners || 25)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @property {object} subscribers\r\n   * An array of all subscribers which currently have a registered event handler.\r\n   * @warning This is a UI-only method.\r\n   */\r\n  get subscribers () {\r\n    let subscriberList = {}\r\n\r\n    for (let eventName in this.handlers) {\r\n      subscriberList[eventName] = {\r\n        handler: this.handlers[eventName].length,\r\n        adhoc: 0\r\n      }\r\n    }\r\n\r\n    for (let eventName in this.adhoc) {\r\n      subscriberList[eventName] = subscriberList[eventName] || {\r\n        handler: 0\r\n      }\r\n\r\n      subscriberList[eventName].adhoc = this.adhoc[eventName].length\r\n    }\r\n\r\n    return subscriberList\r\n  }\r\n\r\n  /**\r\n   * @property defaultMaxListeners\r\n   * The maximum number of listeners for a single event.\r\n   */\r\n  get defaultMaxListeners () {\r\n    return this.maxlisteners\r\n  }\r\n\r\n  set defaultMaxListeners (value) {\r\n    this.maxlisteners = value\r\n  }\r\n\r\n  /**\r\n   * @method {number} listenerCount\r\n   * The number of listeners for a specific event.\r\n   * @param {string} eventName\r\n   * The name of the event to count listeners for.\r\n   */\r\n  listenerCount (eventName) {\r\n    return (this.handlers[eventName] || []).length +\r\n      (this.adhoc[eventName] || []).length\r\n  }\r\n\r\n  /**\r\n   * @method getMaxListeners\r\n   * A node-like reference to the #defaultMaxListeners value.\r\n   * @return {number}\r\n   */\r\n  getMaxListeners () {\r\n    return this.defaultMaxListeners\r\n  }\r\n\r\n  /**\r\n   * @method setMaxListeners\r\n   * A node-like reference to the #defaultMaxListeners value (setter).\r\n   */\r\n  setMaxListeners (value) {\r\n    this.defaultMaxListeners = value\r\n  }\r\n\r\n  /**\r\n   * @method eventNames\r\n   * A node-like reference providing an array of recognized event names.\r\n   * @return {array}\r\n   */\r\n  eventNames () {\r\n    let handlers = Object.keys(this.handlers)\r\n    let adhoc = Object.keys(this.adhoc)\r\n    return NGN.dedupe(handlers.concat(adhoc))\r\n  }\r\n\r\n  /**\r\n   * @method listeners\r\n   * Returns the raw listener methods for the event.\r\n   * @param {string} eventName\r\n   * Name of the event to retrieve listeners for.\r\n   * @return {array}\r\n   */\r\n  listeners (eventName) {\r\n    let handlers = this.handlers[eventName] || []\r\n    let adhoc = this.adhoc[eventName] || []\r\n    return handlers.concat(adhoc)\r\n  }\r\n\r\n  /**\r\n   * @method addListener\r\n   * Create a new event handler for the specified event.\r\n   * @param  {string|object} eventName\r\n   * Name of the event to listen for.\r\n   * If an object is passed, this method will automatically setup a #pool.\r\n   * @param  {Function} handler\r\n   * The method responsible for responding to the event.\r\n   * This is ignored if eventName is an object.\r\n   */\r\n  addListener (eventName, callback) {\r\n    if (typeof eventName === 'object') {\r\n      return this.pool(eventName)\r\n    }\r\n\r\n    this.handlers[eventName] = this.handlers[eventName] || []\r\n    this.handlers[eventName].unshift(callback)\r\n    this.emit('newListener', eventName, callback)\r\n\r\n    if (this.listenerCount(eventName) > this.maxlisteners) {\r\n      throw new Error('Maximum event listeners exceeded. Use setMaxListeners() to adjust the level.')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method prependListener\r\n   * This is the same as #addListener, except the event handler is added to the end of the queue.\r\n   * @param  {string|object} eventName\r\n   * Name of the event to listen for.\r\n   * If an object is passed, this method will automatically setup a #pool.\r\n   * @param  {Function} handler\r\n   * The method responsible for responding to the event.\r\n   * This is ignored if eventName is an object.\r\n   */\r\n  prependListener (eventName, callback) {\r\n    if (typeof eventName === 'object') {\r\n      return this.pool(eventName)\r\n    }\r\n\r\n    this.handlers[eventName] = this.handlers[eventName] || []\r\n    this.handlers[eventName].push(callback)\r\n    this.emit('newListener', eventName, callback)\r\n\r\n    if (this.listenerCount(eventName) > this.maxlisteners) {\r\n      throw new Error('Maximum event listeners exceeded. Use setMaxListeners() to adjust the level.')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method onceListener\r\n   * Create a new event handler for the specified event. The\r\n   * handler will be removed immediately after it is executed. This\r\n   * effectively listens for an event to happen once and only once\r\n   * before the handler is destroyed.\r\n   * @param  {string} eventName\r\n   * Name of the event to listen for.\r\n   * @param  {Function} handler\r\n   * The method responsible for responding to the event.\r\n   */\r\n  once (eventName, callback) {\r\n    this.adhoc[eventName] = this.adhoc[eventName] || []\r\n    this.adhoc[eventName].push(callback)\r\n    this.emit('newListener', eventName, callback)\r\n\r\n    if (this.listenerCount(eventName) > this.maxlisteners) {\r\n      throw new Error('Maximum event listeners exceeded. Use setMaxListeners() to adjust the level.')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method prependOnceListener\r\n   * A node-like reference to the #once method, adding events to the\r\n   * beginning of the event list (processed before others) instead of the end.\r\n   * @param  {string} eventName\r\n   * Name of the event to listen for.\r\n   * @param  {Function} handler\r\n   * The method responsible for responding to the event.\r\n   */\r\n  prependOnceListener (eventName, callback) {\r\n    this.adhoc[eventName] = this.adhoc[eventName] || []\r\n    this.adhoc[eventName].unshift(callback)\r\n    this.emit('newListener', eventName, callback)\r\n\r\n    if (this.listenerCount(eventName) > this.maxlisteners) {\r\n      throw new Error('Maximum event listeners exceeded. Use setMaxListeners() to adjust the level.')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method removeListener\r\n   * Remove an event handler. If no handler is specified, all handlers for\r\n   * the specified event will be removed.\r\n   * @param {string} eventName\r\n   * Name of the event to remove.\r\n   * @param {function} [handlerFn]\r\n   * The handler function to remove from the event handlers.\r\n   */\r\n  removeListener (eventName, handlerFn) {\r\n    this.deleteEventHandler('handlers', eventName, handlerFn)\r\n    this.deleteEventHandler('adhoc', eventName, handlerFn)\r\n  }\r\n\r\n  /**\r\n   * @method deleteEventHandler\r\n   * Remove a specific event handler.\r\n   * @param {string} type\r\n   * Either `handler` (multi-use events) or `adhoc` (one-time events)\r\n   * @param {string} eventName\r\n   * Name of the event to remove.\r\n   * @param {function} handlerFn\r\n   * The handler function to remove from the event handlers.\r\n   * @private\r\n   */\r\n  deleteEventHandler (type, eventName, handlerFn) {\r\n    let scope = this[type]\r\n\r\n    if (scope[eventName]) {\r\n      if (!handlerFn) {\r\n        delete scope[eventName]\r\n        return\r\n      }\r\n\r\n      let result = []\r\n      scope[eventName].forEach((handler) => {\r\n        if (handler.toString() !== handlerFn.toString()) {\r\n          result.push(handler)\r\n        }\r\n      })\r\n\r\n      if (result.length === 0) {\r\n        delete scope[eventName]\r\n        return\r\n      }\r\n\r\n      scope[eventName] = result\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method removeAllListeners\r\n   * Remove all event handlers from the EventEmitter (both regular and adhoc).\r\n   */\r\n  removeAllListeners (eventName = null) {\r\n    if (eventName !== null) {\r\n      delete this.handlers[eventName]\r\n      delete this.adhoc[eventName]\r\n    } else {\r\n      this.handlers = {}\r\n      this.adhoc = {}\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method emit\r\n   * Fires an event. This method accepts one or more arguments. The\r\n   * first argument is always the event name, followed by any number\r\n   * of payload arguments.\r\n   *\r\n   * Example:\r\n   * ```\r\n   * const EE = new NGN.EventEmitter()\r\n   *\r\n   * EE.emit('someevent', {payload: 1}, {payload: 2})\r\n   * ```\r\n   * The example above triggers an event called `someevent` and applies\r\n   * the remaining two arguments to any event handlers.\r\n   * @param {string} eventName\r\n   * The name of the event to trigger.\r\n   */\r\n  emit () {\r\n    let args = NGN.slice(arguments)\r\n    const eventName = args.shift()\r\n    const events = this.getAllEvents(eventName)\r\n\r\n    if (typeof eventName === 'symbol') {\r\n      events.push(eventName)\r\n    }\r\n\r\n    let scope = {\r\n      event: eventName\r\n    }\r\n\r\n    for (let name = 0; name < events.length; name++) {\r\n      let adhocEvent = this.adhoc[events[name]]\r\n\r\n      // Adhoc event handling\r\n      if (adhocEvent) {\r\n        delete this.adhoc[events[name]]\r\n\r\n        while (adhocEvent.length > 0) {\r\n          let fn = adhocEvent.pop()\r\n\r\n          scope.handler = fn\r\n\r\n          fn.apply(scope, args)\r\n        }\r\n      }\r\n\r\n      // Regular event handling\r\n      let handler = this.handlers[events[name]]\r\n\r\n      if (handler) {\r\n        for (let fn = 0; fn < handler.length; fn++) {\r\n          scope.handler = handler[fn]\r\n          handler[fn].apply(scope, args)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method getAllEvents\r\n   * Returns all of the events that match an event name. The event name\r\n   * may contain wildcards (i.e. `*`) or it can be a regular expression.\r\n   * @param  {string|regexp} eventName\r\n   * A string or regular expression defining which event names to identify.\r\n   * A string value containing an asterisk (*) will be converted to a regular\r\n   * expression for simplistic wildcard event handling purposes.\r\n   * @return {array}\r\n   * An array of unique event names with handlers or adhoc handlers.\r\n   * @private\r\n   */\r\n  getAllEvents (eventName) {\r\n    const regularEvents = Object.keys(this.handlers)\r\n    const adhocEvents = Object.keys(this.adhoc)\r\n    let allEvents = NGN.dedupe(regularEvents.concat(adhocEvents))\r\n\r\n    allEvents = allEvents.filter(function (event) {\r\n      // If the event is an exact match, don't filter it out.\r\n      if (event === eventName) {\r\n        return true\r\n      }\r\n\r\n      // If the event is a regexp/wildcard, further processing is necessary.\r\n      if (NGN.typeof(event) === 'regexp' || event.indexOf('*') >= 0) {\r\n        // Convert wildcard events to a regular expression.\r\n        if (NGN.typeof(event) !== 'regexp') {\r\n          event = new RegExp(event.replace(/\\./g, '\\\\.').replace(/\\*/g, '.*'), 'g')\r\n        }\r\n        // If the event name matches the event, keep it.\r\n        return event.test(eventName)\r\n      }\r\n\r\n      // None of the criteria were met. Ignore the event.\r\n      return false\r\n    })\r\n\r\n    return allEvents\r\n  }\r\n}",
      "tags": {},
      "exceptions": {},
      "events": {
        "newListener": {
          "type": "event",
          "label": "newListener",
          "description": null,
          "code": "this.emit('newListener', eventName, callback)",
          "start": {
            "line": 200,
            "column": 4
          },
          "end": {
            "line": 200,
            "column": 49
          },
          "flags": [],
          "authors": [],
          "parameters": {
            "eventName": {
              "type": "argument",
              "label": "eventName",
              "description": null,
              "code": "eventName",
              "start": {
                "line": 200,
                "column": 29
              },
              "end": {
                "line": 200,
                "column": 38
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            },
            "callback": {
              "type": "argument",
              "label": "callback",
              "description": null,
              "code": "callback",
              "start": {
                "line": 200,
                "column": 40
              },
              "end": {
                "line": 200,
                "column": 48
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "deprecated": false,
          "deprecationReplacement": null
        }
      },
      "start": {
        "line": 8,
        "column": 15
      },
      "end": {
        "line": 368,
        "column": 1
      },
      "flags": [
        ""
      ],
      "authors": [],
      "sourcefile": "./\\emitter\\BrowserEmitter.js",
      "extends": null,
      "configuration": {},
      "properties": {
        "handlers": {
          "type": "property",
          "label": "handlers",
          "description": null,
          "code": "handlers: NGN.private({})",
          "start": {
            "line": 23,
            "column": 6
          },
          "end": {
            "line": 23,
            "column": 31
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": true
        },
        "adhoc": {
          "type": "property",
          "label": "adhoc",
          "description": null,
          "code": "adhoc: NGN.private({})",
          "start": {
            "line": 24,
            "column": 6
          },
          "end": {
            "line": 24,
            "column": 28
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": true
        },
        "maxlisteners": {
          "type": "property",
          "label": "maxlisteners",
          "description": null,
          "code": "maxlisteners: NGN.private(cfg.defaultMaxListeners || 25)",
          "start": {
            "line": 25,
            "column": 6
          },
          "end": {
            "line": 25,
            "column": 62
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": true
        },
        "subscribers": {
          "type": "property",
          "label": "subscribers",
          "description": null,
          "code": "get subscribers () {\r\n    let subscriberList = {}\r\n\r\n    for (let eventName in this.handlers) {\r\n      subscriberList[eventName] = {\r\n        handler: this.handlers[eventName].length,\r\n        adhoc: 0\r\n      }\r\n    }\r\n\r\n    for (let eventName in this.adhoc) {\r\n      subscriberList[eventName] = subscriberList[eventName] || {\r\n        handler: 0\r\n      }\r\n\r\n      subscriberList[eventName].adhoc = this.adhoc[eventName].length\r\n    }\r\n\r\n    return subscriberList\r\n  }",
          "start": {
            "line": 34,
            "column": 2
          },
          "end": {
            "line": 53,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "defaultMaxListeners": {
          "type": "property",
          "label": "defaultMaxListeners",
          "description": null,
          "code": "set defaultMaxListeners (value) {\r\n    this.maxlisteners = value\r\n  }",
          "start": {
            "line": 63,
            "column": 2
          },
          "end": {
            "line": 65,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": false,
          "writable": true,
          "configuration": false,
          "private": false
        }
      },
      "methods": {
        "constructor": {
          "type": "method",
          "label": "constructor",
          "description": "``` let EE = new EventEmitter\n```\nThis is a protected class. It is most commonly instantiated through\nthe NGN namespace (i.e. `new NGN.EventEmitter()`). However; it is\ndesigned for use within the NGN library, not directly as an event emitter.\nUse with caution.",
          "code": "constructor (cfg) {\r\n    cfg = cfg || {}\r\n\r\n    Object.defineProperties(this, {\r\n      handlers: NGN.private({}),\r\n      adhoc: NGN.private({}),\r\n      maxlisteners: NGN.private(cfg.defaultMaxListeners || 25)\r\n    })\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 19,
            "column": 2
          },
          "end": {
            "line": 27,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "cfg": {
              "type": "argument",
              "label": "cfg",
              "description": null,
              "code": "cfg",
              "start": {
                "line": 19,
                "column": 15
              },
              "end": {
                "line": 19,
                "column": 18
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "constructor",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "listenerCount": {
          "type": "method",
          "label": "listenerCount",
          "description": "The number of listeners for a specific event.",
          "code": "listenerCount (eventName) {\r\n    return (this.handlers[eventName] || []).length +\r\n      (this.adhoc[eventName] || []).length\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 73,
            "column": 2
          },
          "end": {
            "line": 76,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "eventName": {
              "type": "argument",
              "label": "eventName",
              "description": "The name of the event to count listeners for.",
              "code": "eventName",
              "start": {
                "line": 73,
                "column": 17
              },
              "end": {
                "line": 73,
                "column": 26
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "getMaxListeners": {
          "type": "method",
          "label": "getMaxListeners",
          "description": "A node-like reference to the #defaultMaxListeners value.",
          "code": "getMaxListeners () {\r\n    return this.defaultMaxListeners\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 83,
            "column": 2
          },
          "end": {
            "line": 85,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "number",
          "returnDescription": "",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "setMaxListeners": {
          "type": "method",
          "label": "setMaxListeners",
          "description": "A node-like reference to the #defaultMaxListeners value .",
          "code": "setMaxListeners (value) {\r\n    this.defaultMaxListeners = value\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 91,
            "column": 2
          },
          "end": {
            "line": 93,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "value": {
              "type": "argument",
              "label": "value",
              "description": null,
              "code": "value",
              "start": {
                "line": 91,
                "column": 19
              },
              "end": {
                "line": 91,
                "column": 24
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "eventNames": {
          "type": "method",
          "label": "eventNames",
          "description": "A node-like reference providing an array of recognized event names.",
          "code": "eventNames () {\r\n    let handlers = Object.keys(this.handlers)\r\n    let adhoc = Object.keys(this.adhoc)\r\n    return NGN.dedupe(handlers.concat(adhoc))\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 100,
            "column": 2
          },
          "end": {
            "line": 104,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "array",
          "returnDescription": "",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "listeners": {
          "type": "method",
          "label": "listeners",
          "description": "Returns the raw listener methods for the event.",
          "code": "listeners (eventName) {\r\n    let handlers = this.handlers[eventName] || []\r\n    let adhoc = this.adhoc[eventName] || []\r\n    return handlers.concat(adhoc)\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 113,
            "column": 2
          },
          "end": {
            "line": 117,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "eventName": {
              "type": "argument",
              "label": "eventName",
              "description": "Name of the event to retrieve listeners for.",
              "code": "eventName",
              "start": {
                "line": 113,
                "column": 13
              },
              "end": {
                "line": 113,
                "column": 22
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            }
          },
          "returnType": "array",
          "returnDescription": "",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "addListener": {
          "type": "method",
          "label": "addListener",
          "description": "Create a new event handler for the specified event.",
          "code": "addListener (eventName, callback) {\r\n    if (typeof eventName === 'object') {\r\n      return this.pool(eventName)\r\n    }\r\n\r\n    this.handlers[eventName] = this.handlers[eventName] || []\r\n    this.handlers[eventName].unshift(callback)\r\n    this.emit('newListener', eventName, callback)\r\n\r\n    if (this.listenerCount(eventName) > this.maxlisteners) {\r\n      throw new Error('Maximum event listeners exceeded. Use setMaxListeners() to adjust the level.')\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 129,
            "column": 2
          },
          "end": {
            "line": 141,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "eventName": {
              "type": "argument",
              "label": "eventName",
              "description": "Name of the event to listen for.\nIf an object is passed, this method will automatically setup a #pool.",
              "code": "eventName",
              "start": {
                "line": 129,
                "column": 15
              },
              "end": {
                "line": 129,
                "column": 24
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string|object",
              "required": true,
              "enum": null
            },
            "callback": {
              "type": "argument",
              "label": "handler",
              "description": "The method responsible for responding to the event.\nThis is ignored if eventName is an object.",
              "code": "callback",
              "start": {
                "line": 129,
                "column": 26
              },
              "end": {
                "line": 129,
                "column": 34
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "function",
              "required": true,
              "enum": null
            },
            "handler": {
              "type": "argument",
              "label": "handler",
              "description": "The method responsible for responding to the event.\nThis is ignored if eventName is an object.",
              "code": "callback",
              "start": {
                "line": 129,
                "column": 26
              },
              "end": {
                "line": 129,
                "column": 34
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "function",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "prependListener": {
          "type": "method",
          "label": "prependListener",
          "description": "This is the same as #addListener, except the event handler is added to the end of the queue.",
          "code": "prependListener (eventName, callback) {\r\n    if (typeof eventName === 'object') {\r\n      return this.pool(eventName)\r\n    }\r\n\r\n    this.handlers[eventName] = this.handlers[eventName] || []\r\n    this.handlers[eventName].push(callback)\r\n    this.emit('newListener', eventName, callback)\r\n\r\n    if (this.listenerCount(eventName) > this.maxlisteners) {\r\n      throw new Error('Maximum event listeners exceeded. Use setMaxListeners() to adjust the level.')\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 153,
            "column": 2
          },
          "end": {
            "line": 165,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "eventName": {
              "type": "argument",
              "label": "eventName",
              "description": "Name of the event to listen for.\nIf an object is passed, this method will automatically setup a #pool.",
              "code": "eventName",
              "start": {
                "line": 153,
                "column": 19
              },
              "end": {
                "line": 153,
                "column": 28
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string|object",
              "required": true,
              "enum": null
            },
            "callback": {
              "type": "argument",
              "label": "handler",
              "description": "The method responsible for responding to the event.\nThis is ignored if eventName is an object.",
              "code": "callback",
              "start": {
                "line": 153,
                "column": 30
              },
              "end": {
                "line": 153,
                "column": 38
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "function",
              "required": true,
              "enum": null
            },
            "handler": {
              "type": "argument",
              "label": "handler",
              "description": "The method responsible for responding to the event.\nThis is ignored if eventName is an object.",
              "code": "callback",
              "start": {
                "line": 153,
                "column": 30
              },
              "end": {
                "line": 153,
                "column": 38
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "function",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "once": {
          "type": "method",
          "label": "once",
          "description": "Create a new event handler for the specified event. The\nhandler will be removed immediately after it is executed. This\neffectively listens for an event to happen once and only once\nbefore the handler is destroyed.",
          "code": "once (eventName, callback) {\r\n    this.adhoc[eventName] = this.adhoc[eventName] || []\r\n    this.adhoc[eventName].push(callback)\r\n    this.emit('newListener', eventName, callback)\r\n\r\n    if (this.listenerCount(eventName) > this.maxlisteners) {\r\n      throw new Error('Maximum event listeners exceeded. Use setMaxListeners() to adjust the level.')\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 178,
            "column": 2
          },
          "end": {
            "line": 186,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "eventName": {
              "type": "argument",
              "label": "eventName",
              "description": "Name of the event to listen for.",
              "code": "eventName",
              "start": {
                "line": 178,
                "column": 8
              },
              "end": {
                "line": 178,
                "column": 17
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "callback": {
              "type": "argument",
              "label": "handler",
              "description": "The method responsible for responding to the event.",
              "code": "callback",
              "start": {
                "line": 178,
                "column": 19
              },
              "end": {
                "line": 178,
                "column": 27
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "function",
              "required": true,
              "enum": null
            },
            "handler": {
              "type": "argument",
              "label": "handler",
              "description": "The method responsible for responding to the event.",
              "code": "callback",
              "start": {
                "line": 178,
                "column": 19
              },
              "end": {
                "line": 178,
                "column": 27
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "function",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "prependOnceListener": {
          "type": "method",
          "label": "prependOnceListener",
          "description": "A node-like reference to the #once method, adding events to the\nbeginning of the event list  instead of the end.",
          "code": "prependOnceListener (eventName, callback) {\r\n    this.adhoc[eventName] = this.adhoc[eventName] || []\r\n    this.adhoc[eventName].unshift(callback)\r\n    this.emit('newListener', eventName, callback)\r\n\r\n    if (this.listenerCount(eventName) > this.maxlisteners) {\r\n      throw new Error('Maximum event listeners exceeded. Use setMaxListeners() to adjust the level.')\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 197,
            "column": 2
          },
          "end": {
            "line": 205,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "eventName": {
              "type": "argument",
              "label": "eventName",
              "description": "Name of the event to listen for.",
              "code": "eventName",
              "start": {
                "line": 197,
                "column": 23
              },
              "end": {
                "line": 197,
                "column": 32
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "callback": {
              "type": "argument",
              "label": "handler",
              "description": "The method responsible for responding to the event.",
              "code": "callback",
              "start": {
                "line": 197,
                "column": 34
              },
              "end": {
                "line": 197,
                "column": 42
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "function",
              "required": true,
              "enum": null
            },
            "handler": {
              "type": "argument",
              "label": "handler",
              "description": "The method responsible for responding to the event.",
              "code": "callback",
              "start": {
                "line": 197,
                "column": 34
              },
              "end": {
                "line": 197,
                "column": 42
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "function",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "removeListener": {
          "type": "method",
          "label": "removeListener",
          "description": "Remove an event handler. If no handler is specified, all handlers for\nthe specified event will be removed.",
          "code": "removeListener (eventName, handlerFn) {\r\n    this.deleteEventHandler('handlers', eventName, handlerFn)\r\n    this.deleteEventHandler('adhoc', eventName, handlerFn)\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 216,
            "column": 2
          },
          "end": {
            "line": 219,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "eventName": {
              "type": "argument",
              "label": "eventName",
              "description": "Name of the event to remove.",
              "code": "eventName",
              "start": {
                "line": 216,
                "column": 18
              },
              "end": {
                "line": 216,
                "column": 27
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "handlerFn": {
              "type": "method",
              "label": "handlerFn",
              "description": "The handler function to remove from the event handlers.",
              "code": "@param {function} [handlerFn]\nThe handler function to remove from the event handlers.",
              "start": {
                "line": 216,
                "column": 2
              },
              "end": {
                "line": 219,
                "column": 3
              },
              "flags": [],
              "authors": [],
              "arguments": {},
              "returnType": "void",
              "returnDescription": "void",
              "kind": null,
              "generator": false,
              "static": false,
              "computed": false,
              "async": false,
              "super": null,
              "override": false,
              "private": false
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "deleteEventHandler": {
          "type": "method",
          "label": "deleteEventHandler",
          "description": "Remove a specific event handler.",
          "code": "deleteEventHandler (type, eventName, handlerFn) {\r\n    let scope = this[type]\r\n\r\n    if (scope[eventName]) {\r\n      if (!handlerFn) {\r\n        delete scope[eventName]\r\n        return\r\n      }\r\n\r\n      let result = []\r\n      scope[eventName].forEach((handler) => {\r\n        if (handler.toString() !== handlerFn.toString()) {\r\n          result.push(handler)\r\n        }\r\n      })\r\n\r\n      if (result.length === 0) {\r\n        delete scope[eventName]\r\n        return\r\n      }\r\n\r\n      scope[eventName] = result\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 232,
            "column": 2
          },
          "end": {
            "line": 255,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "type": {
              "type": "argument",
              "label": "type",
              "description": "Either `handler`",
              "code": "type",
              "start": {
                "line": 232,
                "column": 22
              },
              "end": {
                "line": 232,
                "column": 26
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": [
                "multi-use events) or `adhoc` (one-time events"
              ]
            },
            "eventName": {
              "type": "argument",
              "label": "eventName",
              "description": "Name of the event to remove.",
              "code": "eventName",
              "start": {
                "line": 232,
                "column": 28
              },
              "end": {
                "line": 232,
                "column": 37
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "handlerFn": {
              "type": "method",
              "label": "handlerFn",
              "description": "The handler function to remove from the event handlers.",
              "code": "@param {function} handlerFn\nThe handler function to remove from the event handlers.",
              "start": {
                "line": 232,
                "column": 2
              },
              "end": {
                "line": 255,
                "column": 3
              },
              "flags": [],
              "authors": [],
              "arguments": {},
              "returnType": "void",
              "returnDescription": "void",
              "kind": null,
              "generator": false,
              "static": false,
              "computed": false,
              "async": false,
              "super": null,
              "override": false,
              "private": false
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": true
        },
        "removeAllListeners": {
          "type": "method",
          "label": "removeAllListeners",
          "description": "Remove all event handlers from the EventEmitter .",
          "code": "removeAllListeners (eventName = null) {\r\n    if (eventName !== null) {\r\n      delete this.handlers[eventName]\r\n      delete this.adhoc[eventName]\r\n    } else {\r\n      this.handlers = {}\r\n      this.adhoc = {}\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 261,
            "column": 2
          },
          "end": {
            "line": 269,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "eventName": {
              "type": "argument",
              "label": "eventName",
              "description": null,
              "code": "eventName = null",
              "start": {
                "line": 261,
                "column": 22
              },
              "end": {
                "line": 261,
                "column": 38
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "object",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "emit": {
          "type": "method",
          "label": "emit",
          "description": "Fires an event. This method accepts one or more arguments. The\nfirst argument is always the event name, followed by any number\nof payload arguments.\n\nExample:\n```\nconst EE = new NGN.EventEmitter\n\nEE.emit('someevent', {payload: 1}, {payload: 2})\n```\nThe example above triggers an event called `someevent` and applies\nthe remaining two arguments to any event handlers.",
          "code": "emit () {\r\n    let args = NGN.slice(arguments)\r\n    const eventName = args.shift()\r\n    const events = this.getAllEvents(eventName)\r\n\r\n    if (typeof eventName === 'symbol') {\r\n      events.push(eventName)\r\n    }\r\n\r\n    let scope = {\r\n      event: eventName\r\n    }\r\n\r\n    for (let name = 0; name < events.length; name++) {\r\n      let adhocEvent = this.adhoc[events[name]]\r\n\r\n      // Adhoc event handling\r\n      if (adhocEvent) {\r\n        delete this.adhoc[events[name]]\r\n\r\n        while (adhocEvent.length > 0) {\r\n          let fn = adhocEvent.pop()\r\n\r\n          scope.handler = fn\r\n\r\n          fn.apply(scope, args)\r\n        }\r\n      }\r\n\r\n      // Regular event handling\r\n      let handler = this.handlers[events[name]]\r\n\r\n      if (handler) {\r\n        for (let fn = 0; fn < handler.length; fn++) {\r\n          scope.handler = handler[fn]\r\n          handler[fn].apply(scope, args)\r\n        }\r\n      }\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 288,
            "column": 2
          },
          "end": {
            "line": 327,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "eventName": {
              "type": "argument",
              "label": "eventName",
              "description": "The name of the event to trigger.",
              "code": "emit () {\r\n    let args = NGN.slice(arguments)\r\n    const eventName = args.shift()\r\n    const events = this.getAllEvents(eventName)\r\n\r\n    if (typeof eventName === 'symbol') {\r\n      events.push(eventName)\r\n    }\r\n\r\n    let scope = {\r\n      event: eventName\r\n    }\r\n\r\n    for (let name = 0; name < events.length; name++) {\r\n      let adhocEvent = this.adhoc[events[name]]\r\n\r\n      // Adhoc event handling\r\n      if (adhocEvent) {\r\n        delete this.adhoc[events[name]]\r\n\r\n        while (adhocEvent.length > 0) {\r\n          let fn = adhocEvent.pop()\r\n\r\n          scope.handler = fn\r\n\r\n          fn.apply(scope, args)\r\n        }\r\n      }\r\n\r\n      // Regular event handling\r\n      let handler = this.handlers[events[name]]\r\n\r\n      if (handler) {\r\n        for (let fn = 0; fn < handler.length; fn++) {\r\n          scope.handler = handler[fn]\r\n          handler[fn].apply(scope, args)\r\n        }\r\n      }\r\n    }\r\n  }",
              "start": {
                "line": 288,
                "column": 2
              },
              "end": {
                "line": 327,
                "column": 3
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "getAllEvents": {
          "type": "method",
          "label": "getAllEvents",
          "description": "Returns all of the events that match an event name. The event name\nmay contain wildcards  or it can be a regular expression.",
          "code": "getAllEvents (eventName) {\r\n    const regularEvents = Object.keys(this.handlers)\r\n    const adhocEvents = Object.keys(this.adhoc)\r\n    let allEvents = NGN.dedupe(regularEvents.concat(adhocEvents))\r\n\r\n    allEvents = allEvents.filter(function (event) {\r\n      // If the event is an exact match, don't filter it out.\r\n      if (event === eventName) {\r\n        return true\r\n      }\r\n\r\n      // If the event is a regexp/wildcard, further processing is necessary.\r\n      if (NGN.typeof(event) === 'regexp' || event.indexOf('*') >= 0) {\r\n        // Convert wildcard events to a regular expression.\r\n        if (NGN.typeof(event) !== 'regexp') {\r\n          event = new RegExp(event.replace(/\\./g, '\\\\.').replace(/\\*/g, '.*'), 'g')\r\n        }\r\n        // If the event name matches the event, keep it.\r\n        return event.test(eventName)\r\n      }\r\n\r\n      // None of the criteria were met. Ignore the event.\r\n      return false\r\n    })\r\n\r\n    return allEvents\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 341,
            "column": 2
          },
          "end": {
            "line": 367,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "eventName": {
              "type": "argument",
              "label": "eventName",
              "description": "A string or regular expression defining which event names to identify.\nA string value containing an asterisk  will be converted to a regular\nexpression for simplistic wildcard event handling purposes.",
              "code": "eventName",
              "start": {
                "line": 341,
                "column": 16
              },
              "end": {
                "line": 341,
                "column": 25
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string|regexp",
              "required": true,
              "enum": [
                "*"
              ]
            }
          },
          "returnType": "array",
          "returnDescription": "null An array of unique event names with handlers or adhoc handlers.",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": true
        }
      }
    },
    "NGN.EventEmitter": {
      "type": "class",
      "label": "NGN.EventEmitter",
      "description": "The EventEmitter is an extandable event driver non-DOM objects, such as\ndata models, objects, and other common elements of JavaScript programming.\n\nThe NGN.EventEmitter is based on and compatible with the [Node.js EventEmitter].\nIt contains additional event management capabilities, which are available\nin browser _and_ Node.js environments.",
      "code": "class EventEmitter extends EEmitter {\r\n  constructor () {\r\n    super()\r\n\r\n    // const INSTANCE = Symbol('instance')\r\n\r\n    Object.defineProperties(this, {\r\n      // META: NGN.get(() => this[INSTANCE]),\r\n\r\n      META: NGN.private({\r\n        queued: {},\r\n        collectionQueue: {},\r\n        thresholdQueue: {},\r\n        defaultTTL: -1,\r\n        wildcardEvents: new Set()\r\n      }),\r\n\r\n      /**\r\n       * @method setTTL\r\n       * Set a default time-to-live for event handlers (in milliseconds).\r\n       * After the TTL period elapses, event handlers are removed.\r\n       * By default, there is no TTL (`-1`).\r\n       * @param {number} ttl\r\n       * The number of milliseconds before an event handler is automatically\r\n       * removed. This value may be `-1` (no TTL/never expires) or a value\r\n       * greater than `0`.\r\n       */\r\n      setTTL: NGN.const((ttl = -1) => {\r\n        if (ttl === 0) {\r\n          NGN.WARN('NGN.EventEmitter#TTL cannot be 0.')\r\n          return\r\n        }\r\n\r\n        this.META.defaultTTL = ttl\r\n      }),\r\n\r\n      /**\r\n       * @alias off\r\n       * Remove an event handler. If no handler is specified, all handlers for\r\n       * the specified event will be removed.\r\n       * This is a shortcut for #removeListener.\r\n       * @param {string} eventName\r\n       * Name of the event to remove.\r\n       * @param {function} [handlerFn]\r\n       * The handler function to remove from the event handlers.\r\n       */\r\n      off: NGN.public((eventName, handlerFn) => {\r\n        if (NGN.typeof(eventName) === 'array') {\r\n          for (let i = 0; i < eventName.length; i++) {\r\n            this.off(eventName[i], handlerFn)\r\n          }\r\n\r\n          return\r\n        }\r\n\r\n        let l = this.listeners(eventName)\r\n\r\n        if (!NGN.isFn(handlerFn)) {\r\n          return this.clear(eventName)\r\n        }\r\n\r\n        let wrappedHandlerFn = this.wrapEventHandlerWithScope(eventName, handlerFn)\r\n\r\n        if (l.indexOf(wrappedHandlerFn) < 0) {\r\n          for (let i = 0; i < l.length; i++) {\r\n            if (l[i].toString() === wrappedHandlerFn.toString()) {\r\n              this.META.wildcardEvents.delete(eventName)\r\n              // this.removeListener(eventName, handlerFn)\r\n              this.removeListener(eventName, l[i], false)\r\n              break\r\n            }\r\n          }\r\n        } else {\r\n          this.META.wildcardEvents.delete(eventName)\r\n          this.removeListener(eventName, handlerFn)\r\n        }\r\n      }),\r\n\r\n      /**\r\n       * @method deprecate\r\n       * Provides a deprecation notice for the specified event.\r\n       * Automatically emits the appropriate \"replacement\" event\r\n       * if a replacement event is configured. If no replacement\r\n       * event is configured, the deprecation notice will be written\r\n       * to the console but no replacement event will be triggered.\r\n       * @param {string} deprecatedEventName\r\n       * The name of the deprecated event.\r\n       * @param {string} [replacementEventName]\r\n       * The name of the new event.\r\n       */\r\n      deprecate: NGN.const((deprecatedEventName, replacementEventName) => {\r\n        const me = this\r\n\r\n        this.on(deprecatedEventName, function () {\r\n          NGN.WARN(`${deprecatedEventName} is deprecated. ` + (!replacementEventName ? '' : `Use ${replacementEventName} instead.`))\r\n\r\n          if (replacementEventName) {\r\n            let args = NGN.slice(arguments)\r\n\r\n            args.shift()\r\n            args.unshift(replacementEventName)\r\n\r\n            me.emit.apply(me, args)\r\n          }\r\n        })\r\n      }),\r\n\r\n      /**\r\n       * @method pool\r\n       * A helper command to create multiple related subscribers\r\n       * all at once. This is a convenience function.\r\n       * @property {string} [prefix]\r\n       * Supply a prefix to be added to every event. For example,\r\n       * `myScope.` would turn `someEvent` into `myScope.someEvent`.\r\n       * @property {Object} subscriberObject\r\n       * A key:value object where the key is the name of the\r\n       * unprefixed event and the key is the handler function.\r\n       * A value can be an object, allowing for nesting events. For example:\r\n       *\r\n       * ```js\r\n       * NGN.BUS.pool('prefix.', {\r\n       *   deep: {\r\n       *     nested: {\r\n       *       eventName: function () {\r\n       *         console.log('event triggered')\r\n       *       }\r\n       *     }\r\n       *   }\r\n       * })\r\n       *\r\n       * NGN.BUS.emit('prefix.deep.nested.eventName') // <-- Outputs \"event triggered\"\r\n       * ```\r\n       * @private\r\n       */\r\n      pool: NGN.privateconst(function (prefix, group) {\r\n        if (typeof prefix !== 'string') {\r\n          group = prefix\r\n          prefix = ''\r\n        }\r\n\r\n        let pool = {}\r\n\r\n        for (let eventName in group) {\r\n          let topic = `${NGN.coalesce(prefix, '')}${eventName}`\r\n\r\n          if (NGN.isFn(group[eventName])) {\r\n            this.increaseMaxListeners()\r\n\r\n            pool[eventName] = this.on(topic, group[eventName])\r\n          } else if (typeof group[eventName] === 'object') {\r\n            this.pool(`${topic}.`, group[eventName])\r\n          } else {\r\n            NGN.WARN(`${topic} could not be pooled in the event emitter because it's value is not a function.`)\r\n          }\r\n        }\r\n      }),\r\n\r\n      /**\r\n       * @method attach\r\n       * Attach a function to a topic. This can be used\r\n       * to forward events in response to asynchronous functions.\r\n       *\r\n       * For example:\r\n       *\r\n       * ```js\r\n       * myAsyncDataFetch(NGN.BUS.attach('topicName'))\r\n       * ```\r\n       *\r\n       * This is the same as:\r\n       *\r\n       * ```js\r\n       * myAsyncCall(function(data){\r\n       *  NGN.BUS.emit('topicName', data)\r\n       * })\r\n       * ```\r\n       * @param {string} eventName\r\n       * The name of the event to attach a handler method to.\r\n       * @param {boolean} [preventDefaultAction=false]\r\n       * Setting this to `true` will execute a `event.preventDefault()` before\r\n       * attaching the handler.\r\n       * @returns {function}\r\n       * Returns a function that will automatically be associated with an event.\r\n       */\r\n      attach: NGN.const(function (eventName, preventDefaultAction) {\r\n        preventDefaultAction = NGN.coalesce(preventDefaultAction, false)\r\n\r\n        return (e) => {\r\n          if (preventDefaultAction && !NGN.nodelike) {\r\n            e.preventDefault()\r\n          }\r\n\r\n          this.emit(eventName, ...arguments)\r\n        }\r\n      }),\r\n\r\n      /**\r\n       * @method increaseMaxListeners\r\n       * Increase the number of maximum listeners.\r\n       * @param {Number} [value = 1]\r\n       * The number of events the max listener account will be increased by.\r\n       * @private\r\n       */\r\n      increaseMaxListeners: NGN.private((count = 1) => {\r\n        this.setMaxListeners(this.getMaxListeners() + count)\r\n      }),\r\n\r\n      /**\r\n       * @method decreaseMaxListeners\r\n       * Decrease the number of maximum listeners.\r\n       * @param {Number} [value = 1]\r\n       * The number of events the max listener account will be decreased by.\r\n       * @private\r\n       */\r\n      decreaseMaxListeners: NGN.private((count = 1) => {\r\n        this.setMaxListeners(this.getMaxListeners() - count)\r\n      }),\r\n\r\n      /**\r\n       * @method forward\r\n       * A special subscriber that fires one or more event in response to\r\n       * to an event. This is used to bubble events up/down an event chain.\r\n       *\r\n       * For example:\r\n       *\r\n       * ```js\r\n       * NGN.BUS.forward('sourceEvent', ['someEvent','anotherEvent'], {payload:true})\r\n       * ```\r\n       * When `sourceEvent` is published, the bind method triggers `someEvent` and\r\n       * `anotherEvent`, passing the payload object to `someEvent` and\r\n       * `anotherEvent` subscribers simultaneously.\r\n       *\r\n       * To forward an event to another EventEmitter, see #relay.\r\n       * @param {String} sourceEvent\r\n       * The event to subscribe to.\r\n       * @param {String|Array} triggeredEvent\r\n       * An event or array of events to fire in response to the sourceEvent.\r\n       * @param {any} data\r\n       * Optional data to pass to each bound event handler.\r\n       * @returns {Object}\r\n       * Returns an object with a single `remove()` method.\r\n       */\r\n      forward: NGN.const(function (eventName, triggers, payload) {\r\n        triggers = NGN.forceArray(triggers)\r\n\r\n        let me = this\r\n        let listener = function () {\r\n          let args = NGN.slice(arguments)\r\n\r\n          if (payload) {\r\n            args.push(payload)\r\n          }\r\n\r\n          me.emit(triggers, ...args)\r\n        }\r\n\r\n        this.increaseMaxListeners()\r\n        this.on(eventName, listener)\r\n\r\n        // Provide handle back for removal of topic\r\n        return {\r\n          remove: () => {\r\n            this.decreaseMaxListeners()\r\n            this.off(eventName, listener)\r\n          }\r\n        }\r\n      }),\r\n\r\n      /**\r\n       * This relays an entire event to a different event emitter.\r\n       * For example:\r\n       *\r\n       * ```js\r\n       * let emitterA = new NGN.EventEmitter()\r\n       * let emitterB = new NGN.EventEmitter()\r\n       *\r\n       * emitterA.relay('my.event', emitterB)\r\n       *\r\n       * emitterB.on('my.event', () => { console.log('Emitter B heard the event!') })\r\n       *\r\n       * emitterA.emit('my.event') // Outputs \"Emitter B heard the event!\"\r\n       * ```\r\n       * @param  {string} eventName\r\n       * The name of the event to listen for.\r\n       * @param  {NGN.EventEmitter} targetEmitter\r\n       * The emitter to relay the event to.\r\n       * @param {string} [prefix]\r\n       * An optional prefix to prepend to the eventName.\r\n       * @param {string} [postfix]\r\n       * An optional postfix to append to the eventName.\r\n       */\r\n      relay: NGN.const(function (eventName, targetEmitter, prefix = null, postfix = null) {\r\n        let eventNameList = NGN.forceArray(eventName)\r\n\r\n        for (let i = 0; i < eventNameList.length; i++) {\r\n          let eventName = eventNameList[i]\r\n\r\n          this.on(eventName, function () {\r\n            if (NGN.typeof(this.event) === 'symbol') {\r\n              if (prefix !== null || postfix !== null) {\r\n                NGN.INFO('Cannot relay a symbol-based event with a prefix/postfix.')\r\n              }\r\n\r\n              targetEmitter.emit(...arguments)\r\n            } else {\r\n              targetEmitter.emit(`${NGN.coalesce(prefix, '')}${this.event}${NGN.coalesce(postfix, '')}`, ...arguments)\r\n            }\r\n          })\r\n        }\r\n      }),\r\n\r\n      /**\r\n       * This relays an entire event to a different event emitter. This is\r\n       * the same as #relay, but the event handler is removed after the\r\n       * first invocation of the event.\r\n       *\r\n       * For example:\r\n       *\r\n       * ```js\r\n       * let emitterA = new NGN.EventEmitter()\r\n       * let emitterB = new NGN.EventEmitter()\r\n       *\r\n       * emitterA.relayOnce('my.event', emitterB)\r\n       *\r\n       * emitterB.on('my.event', () => { console.log('Emitter B heard the event!') })\r\n       *\r\n       * emitterA.emit('my.event') // Outputs \"Emitter B heard the event!\"\r\n       * emitterA.emit('my.event') // Does nothing\r\n       * ```\r\n       * @param  {string} eventName\r\n       * The name of the event to listen for.\r\n       * @param  {NGN.EventEmitter} targetEmitter\r\n       * The emitter to relay the event to.\r\n       * @param {string} [prefix]\r\n       * An optional prefix to prepend to the eventName.\r\n       * @param {string} [postfix]\r\n       * An optional postfix to append to the eventName.\r\n       */\r\n      relayOnce: NGN.const(function (eventName, targetEmitter, prefix = null, postfix = null) {\r\n        let eventNameList = NGN.forceArray(eventName)\r\n\r\n        for (let i = 0; i < eventNameList.length; i++) {\r\n          let eventName = eventNameList[i]\r\n\r\n          this.once(eventName, function () {\r\n            if (NGN.typeof(this.event) === 'symbol') {\r\n              if (prefix !== null || postfix !== null) {\r\n                NGN.INFO('Cannot relay a symbol-based event with a prefix/postfix.')\r\n              }\r\n\r\n              targetEmitter.emit(...arguments)\r\n            } else {\r\n              targetEmitter.emit(`${NGN.coalesce(prefix, '')}${this.event}${NGN.coalesce(postfix, '')}`, ...arguments)\r\n            }\r\n          })\r\n        }\r\n      }),\r\n\r\n      /**\r\n       * @method delayEmit\r\n       * This method waits for the specified duration, then publishes an\r\n       * event once. This will publish the event only once at the end of the\r\n       * wait period, even if the event is triggered multiple times. This can\r\n       * be useful when working with many events triggered in rapid succession.\r\n       *\r\n       * For example, an NGN.DATA.Model representing a person may be used to\r\n       * track a user profile. The NGN.DATA.Model fires an event called `field.update`\r\n       * every time a data field is modified. In many cases, a user may update\r\n       * multiple fields of their profile using a form with a \"Save\" button.\r\n       * Instead of generating a new \"save\" (to disk, to memory, to an API, etc)\r\n       * operation for each field, the publishOnce event can wait until all\r\n       * changes are made before running the save operation.\r\n       *\r\n       * ```js\r\n       * // Create a data model representing a person.\r\n       * var Person = new NGN.DATA.Model({....})\r\n       *\r\n       * // Create a new person record for a user.\r\n       * var user = new Person()\r\n       *\r\n       * // When the user is modified, save the data.\r\n       * user.on('field.update', function () {\r\n       *   // Wait 300 milliseconds to trigger the save event\r\n       *   NGN.BUS.delayEmit('user.save', 300)\r\n       * })\r\n       *\r\n       * // Save the user using an API\r\n       * NGN.BUS.on('user.save', function () {\r\n       *   NGN.NET.put({\r\n       *     url: 'https://my.api.com/user',\r\n       *     json: user.data\r\n       *   })\r\n       * })\r\n       *\r\n       * // Modify the record attributes (which are blank by default)\r\n       * user.firstname = 'John'\r\n       * user.lastname = 'Doe'\r\n       * user.age = 42\r\n       *\r\n       * // Make another update 1 second later\r\n       * setTimeout(function () {\r\n       *   user.age = 32\r\n       * }, 1000)\r\n       * ```\r\n       *\r\n       * The code above sets up a model and record. Then it listens to the record\r\n       * for field updates. Each time it recognizes an update, it queues the \"save\"\r\n       * event. When the queue matures, it fires the `user.save` event.\r\n       *\r\n       * The first `field.update` is triggered when `user.firstname = 'John'` runs.\r\n       * This initiates a queue for `user.save`, set to mature in 300 millisenconds.\r\n       * Next, a `field.update` is triggered when `user.lastname = 'Doe'` runs.\r\n       * This time, since the queue for `user.save` is already initiated, notthing\r\n       * new happens. Finally, a `field.update` is triggered when `user.age = 42`\r\n       * runs. Just like the last one, nothing happens since the `user.save` queue\r\n       * is already active.\r\n       *\r\n       * The `user.save` queue \"matures\" after 300 milliseconds. This means after\r\n       * 300 milliseconds have elapsed, the `user.save` event is triggered. In this\r\n       * example, it means the `NGN.NET.put()` code will be executed. As a result,\r\n       * all 3 change (firstname, lastname, and age) will be complete before the\r\n       * API request is executed. The queue is cleared immediately.\r\n       *\r\n       * The final update occurs 1 second later (700 milliseconds after the queue\r\n       * matures). This triggers a `field.update`, but since the queue is no\r\n       * longer active, it is re-initiated. 300 milliseconds later, the `user.save`\r\n       * event is fired again, thus executing the API request again (1.3 seconds\r\n       * in total).\r\n       * @param {string} eventName\r\n       * The event/topic to publish/emit.\r\n       * @param {Number} [delay=300]\r\n       * The number of milliseconds to wait before firing the event.\r\n       * @param {Any} [payload]\r\n       * An optional payload, such as data to be passed to an event handler.\r\n       */\r\n      delayEmit: NGN.const(function (eventName, delay) {\r\n        if (!this.META.queued.hasOwnProperty(eventName)) {\r\n          let args = NGN.slice(arguments)\r\n          args.splice(1, 1)\r\n\r\n          this.META.queued[eventName] = setTimeout(() => {\r\n            delete this.META.queued[eventName]\r\n            this.emit(...args)\r\n          }, delay)\r\n        }\r\n      }),\r\n\r\n      /**\r\n       * @method getInternalCollectionId\r\n       * Returns a unique ID for special collections.\r\n       * @param {object} collection\r\n       * The collection to generate an ID for.\r\n       * @private\r\n       */\r\n      getInternalCollectionId: NGN.privateconst(function (collection) {\r\n        return Symbol(collection)\r\n        // let time = (new Date()).getTime().toString()\r\n        // let rand = Math.random().toString()\r\n        // let key = Object.keys(collection).length + 1\r\n        //\r\n        // while (collection.hasOwnProperty(`${key.toString()}${time}${rand}`)) {\r\n        //   key++\r\n        // }\r\n        //\r\n        // return `${key.toString()}${time}${rand}`\r\n      }),\r\n\r\n      /**\r\n       * @method handleCollectionTrigger\r\n       * A method to manage #chain event handlers.\r\n       * @private\r\n       */\r\n      handleCollectionTrigger: NGN.privateconst(function (eventName, key) {\r\n        let me = this\r\n\r\n        return function () {\r\n          // Use setTimeout to simulate nextTick\r\n          setTimeout(() => {\r\n            let cq = me.META.collectionQueue\r\n\r\n            if (cq[key]) {\r\n              cq[key].remainingqueue.delete(eventName)\r\n\r\n              if (cq[key].remainingqueue.size === 0) {\r\n                cq[key].remainingqueue = cq[key].masterqueue\r\n\r\n                if (NGN.isFn(cq[key].eventName)) {\r\n                  cq[key].eventName(cq[key].payload)\r\n                } else {\r\n                  me.emit(cq[key].eventName, cq[key].payload)\r\n                }\r\n              }\r\n            }\r\n          }, 0)\r\n        }\r\n      }),\r\n\r\n      /**\r\n       * @method funnel\r\n       * Emit an event after a collection of unique events have all fired.\r\n       * This can be useful in situations where multiple asynchronous actions\r\n       * must complete before another begins. For example, blending 3\r\n       * remote data sources from different API's into a single resultset\r\n       * can be achieved with this.\r\n       *\r\n       * **Example**\r\n       * ```js\r\n       * let collection = NGN.BUS.funnel(['download1done', 'download2done', 'download3done'], 'make.results')\r\n       *\r\n       * let allData = []\r\n       *\r\n       * // When all of the downloads are done, log them.\r\n       * NGN.BUS.on('make.results', () => {\r\n       *   console.log(allData)\r\n       * })\r\n       *\r\n       * // Download the first set of data asynchronously\r\n       * NGN.NET.json('http:/download1.com/data.json', (data) => {\r\n       *   allData.push(data)\r\n       *   NGN.BUS.emit('download1done')\r\n       * })\r\n       *\r\n       * // Download the second set of data asynchronously\r\n       * NGN.NET.json('http:/download2.com/data.json', (data) => {\r\n       *   allData.push(data)\r\n       *   NGN.BUS.emit('download2done')\r\n       * })\r\n       *\r\n       * // Download the third set of data asynchronously\r\n       * NGN.NET.json('http:/download3.com/data.json', (data) => {\r\n       *   allData.push(data)\r\n       *   NGN.BUS.emit('download3done')\r\n       * })\r\n       *\r\n       * // The handler can be removed with the special method:\r\n       * collection.remove()\r\n       * ```\r\n       * @param {array} eventCollection\r\n       * An array of events. Once _all_ of these events have fired,\r\n       * the triggerEventName will be fired.\r\n       * @param {string|function} triggerEventName\r\n       * The name of the event triggered after the collection has completed.\r\n       * This can also be a callback function. If a callback function is provided,\r\n       * it will receive the payload as the only argument when it is triggered.\r\n       * @param {any} [payload]\r\n       * An optional payload delivered to the #triggerEventName.\r\n       * @returns {object} collection\r\n       * Provides the key/value configuration of the collection.\r\n       * ```js\r\n       * {\r\n       *   masterqueue: ['event1', 'event2', 'etc'], // The original event array (non-editable)\r\n       *   remainingqueue: [...], // The events the BUS is still waiting for before firing the trigger event.\r\n       *   eventName: 'triggeredEventName', // Name of the event triggered after the remaining elements are flushed.\r\n       *   payload: 'anything', // OPTIONAL\r\n       *   remove: [Function]\r\n       * }\r\n       * ```\r\n       */\r\n      funnel: NGN.const((eventCollection, triggerEventName, payload = null) => {\r\n        if (NGN.typeof(eventCollection) !== 'array') {\r\n          throw new Error(`NGN.BUS.funnel expected an array of events, but received a(n) ${NGN.typeof(eventCollection)}`)\r\n        }\r\n\r\n        let collection = new Set(eventCollection)\r\n        let key = this.getInternalCollectionId(this.META.collectionQueue)\r\n\r\n        this.META.collectionQueue[key] = {}\r\n\r\n        Object.defineProperties(this.META.collectionQueue[key], {\r\n          masterqueue: NGN.const(new Set(eventCollection)),\r\n          remainingqueue: NGN.private(collection),\r\n          eventName: NGN.const(triggerEventName),\r\n          remove: NGN.const(() => {\r\n            this.META.collectionQueue[key].masterqueue.forEach(event => {\r\n              this.off(event, this.handleCollectionTrigger(event, key))\r\n            })\r\n\r\n            this.decreaseMaxListeners(this.META.collectionQueue[key].masterqueue.size)\r\n\r\n            delete this.META.collectionQueue[key]\r\n          }),\r\n          payload: NGN.const(payload)\r\n        })\r\n\r\n        this.increaseMaxListeners(collection.size)\r\n\r\n        collection.forEach(event => {\r\n          this.on(event, this.handleCollectionTrigger(event, key))\r\n        })\r\n\r\n        return this.META.collectionQueue[key]\r\n      }),\r\n\r\n      /**\r\n       * @method funnelOnce\r\n       * This provides the same functionality as #funnel, but\r\n       * removes the listener after the resultant event has fired.\r\n       * See #funnel for detailed usage.\r\n       * @param {array} eventCollection\r\n       * An array of events. Once _all_ of these events have fired,\r\n       * the triggerEventName will be fired.\r\n       * @param {string} triggerEventName\r\n       * The name of the event triggered after the collection has completed.\r\n       * @param {any} [payload]\r\n       * An optional payload delivered to the #triggerEventName.\r\n       * @returns {object} collection\r\n       * Provides the key/value configuration of the collection.\r\n       */\r\n      funnelOnce: NGN.const((eventCollection, triggerEventName, payload = null) => {\r\n        let funnelClosureEvent = `::NGNFUNNEL::${(new Date()).getTime()}::${triggerEventName}`\r\n        // let funnelClosureEvent = Symbol(triggerEventName)\r\n        let collection = this.funnel(eventCollection, funnelClosureEvent, payload)\r\n\r\n        this.increaseMaxListeners()\r\n        this.once(funnelClosureEvent, () => {\r\n          collection.remove()\r\n          collection = null\r\n          this.emit(triggerEventName, payload)\r\n        })\r\n      }),\r\n\r\n      /**\r\n       * @method threshold\r\n       * After an event is fired a predetermined number of times (the threshold),\r\n       * trigger another event or function.\r\n       *\r\n       * For example:\r\n       *\r\n       * ```js\r\n       * NGN.BUS.threshold('push.my.button', 3, 'annoyed')\r\n       *\r\n       * NGN.BUS.on('annoyed', function () {\r\n       *   console.log('We apologize for the slow response, but excessive clicking will not speed up the process.')\r\n       * })\r\n       *\r\n       * document.getElementById('#myButton').addEventListener('click', NGN.BUS.attach('push.my.button'))\r\n       * ```\r\n       *\r\n       * Once the threshold is exceeded, the final event will be triggered and\r\n       * the threshold will be reset. Using the example above, this means\r\n       * clicking 3 times on `#myButton` would trigger the `annoyed` event ONCE,\r\n       * 6 times triggers `annoyed` TWICE, 9 times triggers `annoyed` THREE times, etc.\r\n       * @param {string} thresholdEventName\r\n       * The name of the event to count.\r\n       * @param {number} limit\r\n       * The number of occurrances allowed until the final event is triggered.\r\n       * The event will be triggered at the threshold. For example, if the limit\r\n       * is `3`, the finalEvent will be triggered the 3rd time thresholdEventName is\r\n       * fired.\r\n       * @param {string|function} finalEventName\r\n       * This can be an event or callback function triggered when the threshold is crossed.\r\n       * If a callback function is specified, the payload is passed as the only argument.\r\n       * @param {any} [payload]\r\n       * An optional payload to send to the finalEvent handler(s).\r\n       * @returns {object}\r\n       * Returns an object that can be used to remove the threshold.\r\n       *\r\n       */\r\n      threshold: NGN.const(function (thresholdEventName, limit, finalEventName, payload = null) {\r\n        if (typeof thresholdEventName !== 'string') {\r\n          throw new Error('The threshold event name must be a string (received ' + (typeof thresholdEventName) + ')')\r\n        }\r\n\r\n        // let key = `${this.getInternalCollectionId(this.META.thresholdQueue)}${limit.toString()}`\r\n        let key = this.getInternalCollectionId(this.META.thresholdQueue)\r\n\r\n        this.META.thresholdQueue[key] = {}\r\n\r\n        Object.defineProperties(this.META.thresholdQueue[key], {\r\n          key: NGN.const(key),\r\n          eventName: NGN.const(thresholdEventName),\r\n          limit: NGN.const(limit),\r\n          count: NGN.private(0),\r\n          finalEventName: NGN.const(finalEventName),\r\n          remove: NGN.const(() => {\r\n            let event = this.META.thresholdQueue[key].eventName\r\n\r\n            delete this.META.thresholdQueue[key]\r\n\r\n            this.decreaseMaxListeners()\r\n            this.off(event, this.handleThresholdTrigger(key))\r\n          }),\r\n          payload: NGN.const(payload)\r\n        })\r\n\r\n        this.increaseMaxListeners()\r\n        this.on(thresholdEventName, this.handleThresholdTrigger(key))\r\n\r\n        return this.META.thresholdQueue[key]\r\n      }),\r\n\r\n      thresholdOnce: NGN.const(function (thresholdEventName, limit, finalEventName, payload = null) {\r\n        let thresholdClosureEvent = `::NGNTHRESHOLD::${(new Date()).getTime()}::${finalEventName}`\r\n        let threshold = this.threshold(thresholdEventName, limit, thresholdClosureEvent, payload)\r\n\r\n        this.once(thresholdClosureEvent, () => {\r\n          threshold.remove()\r\n          threshold = null\r\n          this.emit(finalEventName, payload)\r\n        })\r\n      }),\r\n\r\n      /**\r\n       * @method handleThresholdTrigger\r\n       * A method to manage #threshold event handlers.\r\n       * @private\r\n       */\r\n      handleThresholdTrigger: NGN.const(function (key) {\r\n        let me = this\r\n        return function () {\r\n          // Use setTimeout to simulate nextTick\r\n          setTimeout(() => {\r\n            if (me.META.thresholdQueue.hasOwnProperty(key)) {\r\n              me.META.thresholdQueue[key].count++\r\n              if (me.META.thresholdQueue[key].count === me.META.thresholdQueue[key].limit) {\r\n                if (NGN.isFn(me.META.thresholdQueue[key].finalEventName)) {\r\n                  me.META.thresholdQueue[key].finalEventName(me.META.thresholdQueue[key].payload)\r\n                } else {\r\n                  me.emit(me.META.thresholdQueue[key].finalEventName, me.META.thresholdQueue[key].payload)\r\n                }\r\n\r\n                // This if statement is required in case the event is removed\r\n                // during the reset process.\r\n                if (me.META.thresholdQueue.hasOwnProperty(key)) {\r\n                  me.META.thresholdQueue[key].count = 0\r\n                }\r\n              }\r\n            }\r\n          }, 0)\r\n        }\r\n      }),\r\n\r\n      /**\r\n       * An internal method to wrap node-based event handlers\r\n       * with the proper scope.\r\n       * @param {string} eventName\r\n       * The name of the event being handled.\r\n       * @param {function} handlerFn\r\n       * The handler function.\r\n       */\r\n      wrapEventHandlerWithScope: NGN.privateconst((name, fn) => {\r\n        if (!NGN.nodelike) {\r\n          return fn\r\n        }\r\n\r\n        const handlerFn = fn\r\n\r\n        return function () {\r\n          let args = arguments\r\n\r\n          if (typeof args[args.length - 1] === 'symbol') {\r\n            name = args[args.length - 1].toString().replace(/Symbol\\(|\\)/gi, '')\r\n            args = NGN.slice(args)\r\n            args.pop()\r\n          }\r\n\r\n          handlerFn.apply({ event: name }, args)\r\n        }\r\n      }),\r\n\r\n      /**\r\n       * An internal method to apply scope based on whether the handler\r\n       * is a Node-like \"once\" emitter or not.\r\n       * @param {string} eventName\r\n       * The name of the event being scoped.\r\n       * @param {function} handlerFn\r\n       * The handler function.\r\n       */\r\n      applyScope: NGN.privateconst((args) => {\r\n        if (NGN.nodelike && args.length > 1) {\r\n          if (args[args.length - 1].listener) {\r\n            args[args.length - 1].listener = this.wrapEventHandlerWithScope(\r\n              args[0],\r\n              args[args.length - 1].listener\r\n            )\r\n          } else {\r\n            args[args.length - 1] = this.wrapEventHandlerWithScope(\r\n              args[0],\r\n              args[args.length - 1]\r\n            )\r\n          }\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Remove all event handlers from the EventEmitter (both regular and adhoc).\r\n   * This is a shortcut for #removeAllListeners.\r\n   */\r\n  clear () {\r\n    let events = NGN.slice(arguments)\r\n\r\n    if (events.length === 0) {\r\n      this.META.wildcardEvents.clear()\r\n\r\n      let symbolEvents = []\r\n\r\n      if (NGN.nodelike) {\r\n        symbolEvents = Object.getOwnPropertySymbols(this._events)\r\n      } else {\r\n        symbolEvents = Object.getOwnPropertySymbols(this.adhoc)\r\n        symbolEvents = symbolEvents.concat(Object.getOwnPropertySymbols(this.handlers))\r\n      }\r\n\r\n      for (let i = 0; i < symbolEvents.length; i++) {\r\n        this.removeAllListeners(symbolEvents[i])\r\n      }\r\n\r\n      return this.removeAllListeners()\r\n    }\r\n\r\n    for (let i = 0; i < events.length; i++) {\r\n      this.META.wildcardEvents.delete(events[i])\r\n      this.removeAllListeners(events[i])\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Internal method used to handle TTL and wildcard management.\r\n   * @private\r\n   */\r\n  eventHandler (eventName, callback, ttl, prepend = false) {\r\n    if (NGN.typeof(ttl) === 'boolean') {\r\n      prepend = ttl\r\n      ttl = this.META.defaultTTL\r\n    }\r\n\r\n    if (ttl === undefined) {\r\n      ttl = this.META.defaultTTL\r\n    }\r\n\r\n    if (ttl > 0) {\r\n      setTimeout(() => this.off(eventName, callback), ttl)\r\n    }\r\n\r\n    if (typeof eventName === 'string' && eventName.indexOf('*') >= 0) {\r\n      this.META.wildcardEvents.add(eventName)\r\n    }\r\n\r\n    return prepend\r\n  }\r\n\r\n  /**\r\n   * @method on\r\n   * Create a new event handler for the specified event.\r\n   * @param {string|string[]|object} eventName\r\n   * Name of the event to listen for.\r\n   * If an object is passed, this method will automatically setup a #pool.\r\n   * @param {function} handler\r\n   * The method responsible for responding to the event.\r\n   * This is ignored if eventName is an object.\r\n   * @param {number} [TTL]\r\n   * Time-To-Live is the number of milliseconds before the event handler\r\n   * is automatically removed. This is useful for automatically cleaning\r\n   * up limited-life event handlers.\r\n   * @param {boolean} [prepend=false]\r\n   * When set to `true`, the event is added to the beginning of\r\n   * the processing list instead of the end.\r\n   * This is ignored if eventName is an object.\r\n   */\r\n  on (eventName, callback, ttl, prepend = false) {\r\n    if (NGN.typeof(eventName) === 'array') {\r\n      for (let i = 0; i < eventName.length; i++) {\r\n        this.on(eventName[i], callback, ttl, prepend)\r\n      }\r\n\r\n      return\r\n    }\r\n\r\n    if (this.eventHandler(...arguments)) {\r\n      this.prependListener(eventName, callback)\r\n    } else {\r\n      this.addListener(eventName, callback)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method once\r\n   * Create a new event handler for the specified event. The\r\n   * handler will be removed immediately after it is executed. This\r\n   * effectively listens for an event to happen once and only once\r\n   * before the handler is destroyed.\r\n   * @param  {string} eventName\r\n   * Name of the event to listen for.\r\n   * @param  {Function} handler\r\n   * The method responsible for responding to the event.\r\n   * @param {boolean} [prepend=false]\r\n   * When set to `true`, the event is added to the beginning of\r\n   * the processing list instead of the end.\r\n   */\r\n  once (eventName, callback, ttl, prepend = false) {\r\n    if (NGN.typeof(eventName) === 'array') {\r\n      for (let i = 0; i < eventName.length; i++) {\r\n        this.once(eventName[i], callback, ttl, prepend)\r\n      }\r\n\r\n      return\r\n    }\r\n\r\n    if (this.eventHandler(...arguments)) {\r\n      this.prependOnceListener(eventName, callback)\r\n    } else {\r\n      super.once(eventName, this.wrapEventHandlerWithScope(eventName, callback))\r\n    }\r\n  }\r\n\r\n  // The following methods override the Node event emitter only when necessary.\r\n  prependListener () {\r\n    this.applyScope(arguments)\r\n    super.prependListener(...arguments)\r\n  }\r\n\r\n  prependOnceListener () {\r\n    this.applyScope(arguments)\r\n    super.prependOnceListener(...arguments)\r\n  }\r\n\r\n  addListener () {\r\n    this.applyScope(arguments)\r\n    super.addListener(...arguments)\r\n  }\r\n\r\n  removeListener () {\r\n    if (arguments[arguments.length - 1] !== true) {\r\n      this.applyScope(arguments)\r\n    }\r\n\r\n    super.removeListener(...arguments)\r\n  }\r\n\r\n  /**\r\n   * @method emit\r\n   * Emits an event.\r\n   * @param {string[]} eventName\r\n   * The event name can be a string or an array of strings. If an array\r\n   * of strings is specified, an event will be fired for each event name\r\n   * within the array.\r\n   * @param {any} [payload]\r\n   * An optional payload. This can be any number of additional arguments.\r\n   */\r\n  emit () {\r\n    if (NGN.typeof(arguments[0]) === 'array') {\r\n      let args = NGN.slice(arguments)\r\n      let eventNames = args.shift()\r\n\r\n      for (let i = 0; i < eventNames.length; i++) {\r\n        this.emit(eventNames[i], ...args)\r\n      }\r\n\r\n      return\r\n    }\r\n\r\n    // This catches non-string event names. NGN internally uses Symbols\r\n    // for the NGN.WARN/INFO/ERROR event names to prevent name collisions.\r\n    // This check provides support for these special events. These types\r\n    // of events will never have wildcards.\r\n    if (!NGN.nodelike || !arguments[0] || this.META.wildcardEvents.size === 0) {\r\n      super.emit(...arguments)\r\n      return\r\n    }\r\n\r\n    if (NGN.nodelike && typeof arguments[0] === 'symbol') {\r\n      super.emit(...arguments)\r\n      return\r\n    }\r\n\r\n    /**\r\n     * The NGN browser-based event emitter supports wildcards natively, but\r\n     * Node.js does not. This adds simple wildcard support for Node. The\r\n     * only wildcard character supported at this time is `*`. This feature\r\n     * will check the event name for the existance of a wildcard. If a\r\n     * wilcard character is present, the internally-maintained list of\r\n     * wildcard events is checked to see if it's a known event. If none\r\n     * of these checks pass, the standard event emitter is used, otherwise\r\n     * special wildcard handling is used.\r\n     */\r\n    let iterator = this.META.wildcardEvents.values()\r\n    let currentEvent = null\r\n    let args = NGN.slice(arguments)\r\n\r\n    args.shift()\r\n\r\n    while (currentEvent === null || !currentEvent.done) {\r\n      if (currentEvent !== null && currentEvent.value !== arguments[0]) {\r\n        let pattern = new RegExp(currentEvent.value.replace(/\\./g, '\\\\.').replace(/\\*/g, '.*'), 'g')\r\n\r\n        if (pattern.test(arguments[0])) {\r\n          super.emit(currentEvent.value, ...args, typeof arguments[0] !== 'symbol' ? Symbol(arguments[0]) : arguments[0])\r\n          break\r\n        }\r\n      }\r\n\r\n      currentEvent = iterator.next()\r\n    }\r\n  }\r\n}",
      "tags": {},
      "exceptions": {},
      "events": {},
      "start": {
        "line": 24,
        "column": 15
      },
      "end": {
        "line": 1019,
        "column": 1
      },
      "flags": [],
      "authors": [],
      "sourcefile": "./\\emitter\\core.js",
      "extends": "EEmitter",
      "configuration": {},
      "properties": {
        "META": {
          "type": "property",
          "label": "META",
          "description": null,
          "code": "META: NGN.private({\r\n        queued: {},\r\n        collectionQueue: {},\r\n        thresholdQueue: {},\r\n        defaultTTL: -1,\r\n        wildcardEvents: new Set()\r\n      })",
          "start": {
            "line": 33,
            "column": 6
          },
          "end": {
            "line": 39,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": true
        },
        "setTTL": {
          "type": "property",
          "label": "setTTL",
          "description": "Set a default time-to-live for event handlers (in milliseconds).\r\n      After the TTL period elapses, event handlers are removed.\r\n      By default, there is no TTL (`-1`).\r\n      \r\n      The number of milliseconds before an event handler is automatically\r\n      removed. This value may be `-1` (no TTL/never expires) or a value\r\n      greater than `0`.",
          "code": "setTTL: NGN.const((ttl = -1) => {\r\n        if (ttl === 0) {\r\n          NGN.WARN('NGN.EventEmitter#TTL cannot be 0.')\r\n          return\r\n        }\r\n\r\n        this.META.defaultTTL = ttl\r\n      })",
          "start": {
            "line": 51,
            "column": 6
          },
          "end": {
            "line": 58,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "off": {
          "type": "property",
          "label": "off",
          "description": "Remove an event handler. If no handler is specified, all handlers for\r\n      the specified event will be removed.\r\n      This is a shortcut for #removeListener.\r\n      \r\n      Name of the event to remove.\r\n      \r\n      The handler function to remove from the event handlers.",
          "code": "off: NGN.public((eventName, handlerFn) => {\r\n        if (NGN.typeof(eventName) === 'array') {\r\n          for (let i = 0; i < eventName.length; i++) {\r\n            this.off(eventName[i], handlerFn)\r\n          }\r\n\r\n          return\r\n        }\r\n\r\n        let l = this.listeners(eventName)\r\n\r\n        if (!NGN.isFn(handlerFn)) {\r\n          return this.clear(eventName)\r\n        }\r\n\r\n        let wrappedHandlerFn = this.wrapEventHandlerWithScope(eventName, handlerFn)\r\n\r\n        if (l.indexOf(wrappedHandlerFn) < 0) {\r\n          for (let i = 0; i < l.length; i++) {\r\n            if (l[i].toString() === wrappedHandlerFn.toString()) {\r\n              this.META.wildcardEvents.delete(eventName)\r\n              // this.removeListener(eventName, handlerFn)\r\n              this.removeListener(eventName, l[i], false)\r\n              break\r\n            }\r\n          }\r\n        } else {\r\n          this.META.wildcardEvents.delete(eventName)\r\n          this.removeListener(eventName, handlerFn)\r\n        }\r\n      })",
          "start": {
            "line": 70,
            "column": 6
          },
          "end": {
            "line": 100,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "deprecate": {
          "type": "property",
          "label": "deprecate",
          "description": "Provides a deprecation notice for the specified event.\r\n      Automatically emits the appropriate \"replacement\" event\r\n      if a replacement event is configured. If no replacement\r\n      event is configured, the deprecation notice will be written\r\n      to the console but no replacement event will be triggered.\r\n      \r\n      The name of the deprecated event.\r\n      \r\n      The name of the new event.",
          "code": "deprecate: NGN.const((deprecatedEventName, replacementEventName) => {\r\n        const me = this\r\n\r\n        this.on(deprecatedEventName, function () {\r\n          NGN.WARN(`${deprecatedEventName} is deprecated. ` + (!replacementEventName ? '' : `Use ${replacementEventName} instead.`))\r\n\r\n          if (replacementEventName) {\r\n            let args = NGN.slice(arguments)\r\n\r\n            args.shift()\r\n            args.unshift(replacementEventName)\r\n\r\n            me.emit.apply(me, args)\r\n          }\r\n        })\r\n      })",
          "start": {
            "line": 114,
            "column": 6
          },
          "end": {
            "line": 129,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "subscriberObject": {
          "type": "property",
          "label": "subscriberObject",
          "description": "A key:value object where the key is the name of the\nunprefixed event and the key is the handler function.\nA value can be an object, allowing for nesting events. For example:\n\n```js\nNGN.BUS.pool('prefix.', {\ndeep: {\nnested: {\neventName: function  {\nconsole.log('event triggered')\n}\n}\n}\n})\n\nNGN.BUS.emit('prefix.deep.nested.eventName') // <-- Outputs \"event triggered\"\n```",
          "code": "pool: NGN.privateconst(function (prefix, group) {\r\n        if (typeof prefix !== 'string') {\r\n          group = prefix\r\n          prefix = ''\r\n        }\r\n\r\n        let pool = {}\r\n\r\n        for (let eventName in group) {\r\n          let topic = `${NGN.coalesce(prefix, '')}${eventName}`\r\n\r\n          if (NGN.isFn(group[eventName])) {\r\n            this.increaseMaxListeners()\r\n\r\n            pool[eventName] = this.on(topic, group[eventName])\r\n          } else if (typeof group[eventName] === 'object') {\r\n            this.pool(`${topic}.`, group[eventName])\r\n          } else {\r\n            NGN.WARN(`${topic} could not be pooled in the event emitter because it's value is not a function.`)\r\n          }\r\n        }\r\n      })",
          "start": {
            "line": 158,
            "column": 6
          },
          "end": {
            "line": 179,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "default": null,
          "datatype": "object",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        },
        "attach": {
          "type": "property",
          "label": "attach",
          "description": "Attach a function to a topic. This can be used\r\n      to forward events in response to asynchronous functions.\r\n      \n      For example:\r\n      \n      ```js\r\n      myAsyncDataFetch(NGN.BUS.attach('topicName'))\r\n      ```\r\n      \n      This is the same as:\r\n      \n      ```js\r\n      myAsyncCall(function(data){\r\n       NGN.BUS.emit('topicName', data)\r\n      })\r\n      ```\r\n      \r\n      The name of the event to attach a handler method to.\r\n      \r\n      Setting this to `true` will execute a `event.preventDefault()` before\r\n      attaching the handler.\r\n      \r\n      Returns a function that will automatically be associated with an event.",
          "code": "attach: NGN.const(function (eventName, preventDefaultAction) {\r\n        preventDefaultAction = NGN.coalesce(preventDefaultAction, false)\r\n\r\n        return (e) => {\r\n          if (preventDefaultAction && !NGN.nodelike) {\r\n            e.preventDefault()\r\n          }\r\n\r\n          this.emit(eventName, ...arguments)\r\n        }\r\n      })",
          "start": {
            "line": 207,
            "column": 6
          },
          "end": {
            "line": 217,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "increaseMaxListeners": {
          "type": "property",
          "label": "increaseMaxListeners",
          "description": "Increase the number of maximum listeners.\r\n      \r\n      The number of events the max listener account will be increased by.",
          "code": "increaseMaxListeners: NGN.private((count = 1) => {\r\n        this.setMaxListeners(this.getMaxListeners() + count)\r\n      })",
          "start": {
            "line": 226,
            "column": 6
          },
          "end": {
            "line": 228,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": true
        },
        "decreaseMaxListeners": {
          "type": "property",
          "label": "decreaseMaxListeners",
          "description": "Decrease the number of maximum listeners.\r\n      \r\n      The number of events the max listener account will be decreased by.",
          "code": "decreaseMaxListeners: NGN.private((count = 1) => {\r\n        this.setMaxListeners(this.getMaxListeners() - count)\r\n      })",
          "start": {
            "line": 237,
            "column": 6
          },
          "end": {
            "line": 239,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": true
        },
        "forward": {
          "type": "property",
          "label": "forward",
          "description": "A special subscriber that fires one or more event in response to\r\n      to an event. This is used to bubble events up/down an event chain.\r\n      \n      For example:\r\n      \n      ```js\r\n      NGN.BUS.forward('sourceEvent', ['someEvent','anotherEvent'], {payload:true})\r\n      ```\r\n      When `sourceEvent` is published, the bind method triggers `someEvent` and\r\n      `anotherEvent`, passing the payload object to `someEvent` and\r\n      `anotherEvent` subscribers simultaneously.\r\n      \n      To forward an event to another EventEmitter, see #relay.\r\n      \r\n      The event to subscribe to.\r\n      \r\n      An event or array of events to fire in response to the sourceEvent.\r\n      \r\n      Optional data to pass to each bound event handler.\r\n      \r\n      Returns an object with a single `remove()` method.",
          "code": "forward: NGN.const(function (eventName, triggers, payload) {\r\n        triggers = NGN.forceArray(triggers)\r\n\r\n        let me = this\r\n        let listener = function () {\r\n          let args = NGN.slice(arguments)\r\n\r\n          if (payload) {\r\n            args.push(payload)\r\n          }\r\n\r\n          me.emit(triggers, ...args)\r\n        }\r\n\r\n        this.increaseMaxListeners()\r\n        this.on(eventName, listener)\r\n\r\n        // Provide handle back for removal of topic\r\n        return {\r\n          remove: () => {\r\n            this.decreaseMaxListeners()\r\n            this.off(eventName, listener)\r\n          }\r\n        }\r\n      })",
          "start": {
            "line": 265,
            "column": 6
          },
          "end": {
            "line": 289,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "relay": {
          "type": "property",
          "label": "relay",
          "description": "This relays an entire event to a different event emitter.\r\n      For example:\r\n      \n      ```js\r\n      let emitterA = new NGN.EventEmitter()\r\n      let emitterB = new NGN.EventEmitter()\r\n      \n      emitterA.relay('my.event', emitterB)\r\n      \n      emitterB.on('my.event', () => { console.log('Emitter B heard the event!') })\r\n      \n      emitterA.emit('my.event') // Outputs \"Emitter B heard the event!\"\r\n      ```\r\n      \r\n      The name of the event to listen for.\r\n      \r\n      The emitter to relay the event to.\r\n      \r\n      An optional prefix to prepend to the eventName.\r\n      \r\n      An optional postfix to append to the eventName.",
          "code": "relay: NGN.const(function (eventName, targetEmitter, prefix = null, postfix = null) {\r\n        let eventNameList = NGN.forceArray(eventName)\r\n\r\n        for (let i = 0; i < eventNameList.length; i++) {\r\n          let eventName = eventNameList[i]\r\n\r\n          this.on(eventName, function () {\r\n            if (NGN.typeof(this.event) === 'symbol') {\r\n              if (prefix !== null || postfix !== null) {\r\n                NGN.INFO('Cannot relay a symbol-based event with a prefix/postfix.')\r\n              }\r\n\r\n              targetEmitter.emit(...arguments)\r\n            } else {\r\n              targetEmitter.emit(`${NGN.coalesce(prefix, '')}${this.event}${NGN.coalesce(postfix, '')}`, ...arguments)\r\n            }\r\n          })\r\n        }\r\n      })",
          "start": {
            "line": 314,
            "column": 6
          },
          "end": {
            "line": 332,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "relayOnce": {
          "type": "property",
          "label": "relayOnce",
          "description": "This relays an entire event to a different event emitter. This is\r\n      the same as #relay, but the event handler is removed after the\r\n      first invocation of the event.\r\n      \n      For example:\r\n      \n      ```js\r\n      let emitterA = new NGN.EventEmitter()\r\n      let emitterB = new NGN.EventEmitter()\r\n      \n      emitterA.relayOnce('my.event', emitterB)\r\n      \n      emitterB.on('my.event', () => { console.log('Emitter B heard the event!') })\r\n      \n      emitterA.emit('my.event') // Outputs \"Emitter B heard the event!\"\r\n      emitterA.emit('my.event') // Does nothing\r\n      ```\r\n      \r\n      The name of the event to listen for.\r\n      \r\n      The emitter to relay the event to.\r\n      \r\n      An optional prefix to prepend to the eventName.\r\n      \r\n      An optional postfix to append to the eventName.",
          "code": "relayOnce: NGN.const(function (eventName, targetEmitter, prefix = null, postfix = null) {\r\n        let eventNameList = NGN.forceArray(eventName)\r\n\r\n        for (let i = 0; i < eventNameList.length; i++) {\r\n          let eventName = eventNameList[i]\r\n\r\n          this.once(eventName, function () {\r\n            if (NGN.typeof(this.event) === 'symbol') {\r\n              if (prefix !== null || postfix !== null) {\r\n                NGN.INFO('Cannot relay a symbol-based event with a prefix/postfix.')\r\n              }\r\n\r\n              targetEmitter.emit(...arguments)\r\n            } else {\r\n              targetEmitter.emit(`${NGN.coalesce(prefix, '')}${this.event}${NGN.coalesce(postfix, '')}`, ...arguments)\r\n            }\r\n          })\r\n        }\r\n      })",
          "start": {
            "line": 361,
            "column": 6
          },
          "end": {
            "line": 379,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "delayEmit": {
          "type": "property",
          "label": "delayEmit",
          "description": "This method waits for the specified duration, then publishes an\r\n      event once. This will publish the event only once at the end of the\r\n      wait period, even if the event is triggered multiple times. This can\r\n      be useful when working with many events triggered in rapid succession.\r\n      \n      For example, an NGN.DATA.Model representing a person may be used to\r\n      track a user profile. The NGN.DATA.Model fires an event called `field.update`\r\n      every time a data field is modified. In many cases, a user may update\r\n      multiple fields of their profile using a form with a \"Save\" button.\r\n      Instead of generating a new \"save\" (to disk, to memory, to an API, etc)\r\n      operation for each field, the publishOnce event can wait until all\r\n      changes are made before running the save operation.\r\n      \n      ```js\r\n      // Create a data model representing a person.\r\n      var Person = new NGN.DATA.Model({....})\r\n      \n      // Create a new person record for a user.\r\n      var user = new Person()\r\n      \n      // When the user is modified, save the data.\r\n      user.on('field.update', function () {\r\n        // Wait 300 milliseconds to trigger the save event\r\n        NGN.BUS.delayEmit('user.save', 300)\r\n      })\r\n      \n      // Save the user using an API\r\n      NGN.BUS.on('user.save', function () {\r\n        NGN.NET.put({\r\n          url: 'https://my.api.com/user',\r\n          json: user.data\r\n        })\r\n      })\r\n      \n      // Modify the record attributes (which are blank by default)\r\n      user.firstname = 'John'\r\n      user.lastname = 'Doe'\r\n      user.age = 42\r\n      \n      // Make another update 1 second later\r\n      setTimeout(function () {\r\n        user.age = 32\r\n      }, 1000)\r\n      ```\r\n      \n      The code above sets up a model and record. Then it listens to the record\r\n      for field updates. Each time it recognizes an update, it queues the \"save\"\r\n      event. When the queue matures, it fires the `user.save` event.\r\n      \n      The first `field.update` is triggered when `user.firstname = 'John'` runs.\r\n      This initiates a queue for `user.save`, set to mature in 300 millisenconds.\r\n      Next, a `field.update` is triggered when `user.lastname = 'Doe'` runs.\r\n      This time, since the queue for `user.save` is already initiated, notthing\r\n      new happens. Finally, a `field.update` is triggered when `user.age = 42`\r\n      runs. Just like the last one, nothing happens since the `user.save` queue\r\n      is already active.\r\n      \n      The `user.save` queue \"matures\" after 300 milliseconds. This means after\r\n      300 milliseconds have elapsed, the `user.save` event is triggered. In this\r\n      example, it means the `NGN.NET.put()` code will be executed. As a result,\r\n      all 3 change (firstname, lastname, and age) will be complete before the\r\n      API request is executed. The queue is cleared immediately.\r\n      \n      The final update occurs 1 second later (700 milliseconds after the queue\r\n      matures). This triggers a `field.update`, but since the queue is no\r\n      longer active, it is re-initiated. 300 milliseconds later, the `user.save`\r\n      event is fired again, thus executing the API request again (1.3 seconds\r\n      in total).\r\n      \r\n      The event/topic to publish/emit.\r\n      \r\n      The number of milliseconds to wait before firing the event.\r\n      \r\n      An optional payload, such as data to be passed to an event handler.",
          "code": "delayEmit: NGN.const(function (eventName, delay) {\r\n        if (!this.META.queued.hasOwnProperty(eventName)) {\r\n          let args = NGN.slice(arguments)\r\n          args.splice(1, 1)\r\n\r\n          this.META.queued[eventName] = setTimeout(() => {\r\n            delete this.META.queued[eventName]\r\n            this.emit(...args)\r\n          }, delay)\r\n        }\r\n      })",
          "start": {
            "line": 458,
            "column": 6
          },
          "end": {
            "line": 468,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "getInternalCollectionId": {
          "type": "property",
          "label": "getInternalCollectionId",
          "description": "Returns a unique ID for special collections.\r\n      \r\n      The collection to generate an ID for.",
          "code": "getInternalCollectionId: NGN.privateconst(function (collection) {\r\n        return Symbol(collection)\r\n        // let time = (new Date()).getTime().toString()\r\n        // let rand = Math.random().toString()\r\n        // let key = Object.keys(collection).length + 1\r\n        //\r\n        // while (collection.hasOwnProperty(`${key.toString()}${time}${rand}`)) {\r\n        //   key++\r\n        // }\r\n        //\r\n        // return `${key.toString()}${time}${rand}`\r\n      })",
          "start": {
            "line": 477,
            "column": 6
          },
          "end": {
            "line": 488,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        },
        "handleCollectionTrigger": {
          "type": "property",
          "label": "handleCollectionTrigger",
          "description": "A method to manage #chain event handlers.",
          "code": "handleCollectionTrigger: NGN.privateconst(function (eventName, key) {\r\n        let me = this\r\n\r\n        return function () {\r\n          // Use setTimeout to simulate nextTick\r\n          setTimeout(() => {\r\n            let cq = me.META.collectionQueue\r\n\r\n            if (cq[key]) {\r\n              cq[key].remainingqueue.delete(eventName)\r\n\r\n              if (cq[key].remainingqueue.size === 0) {\r\n                cq[key].remainingqueue = cq[key].masterqueue\r\n\r\n                if (NGN.isFn(cq[key].eventName)) {\r\n                  cq[key].eventName(cq[key].payload)\r\n                } else {\r\n                  me.emit(cq[key].eventName, cq[key].payload)\r\n                }\r\n              }\r\n            }\r\n          }, 0)\r\n        }\r\n      })",
          "start": {
            "line": 495,
            "column": 6
          },
          "end": {
            "line": 518,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        },
        "funnel": {
          "type": "property",
          "label": "funnel",
          "description": "Emit an event after a collection of unique events have all fired.\r\n      This can be useful in situations where multiple asynchronous actions\r\n      must complete before another begins. For example, blending 3\r\n      remote data sources from different API's into a single resultset\r\n      can be achieved with this.\r\n      \n      Example\n      ```js\r\n      let collection = NGN.BUS.funnel(['download1done', 'download2done', 'download3done'], 'make.results')\r\n      \n      let allData = []\r\n      \n      // When all of the downloads are done, log them.\r\n      NGN.BUS.on('make.results', () => {\r\n        console.log(allData)\r\n      })\r\n      \n      // Download the first set of data asynchronously\r\n      NGN.NET.json('http:/download1.com/data.json', (data) => {\r\n        allData.push(data)\r\n        NGN.BUS.emit('download1done')\r\n      })\r\n      \n      // Download the second set of data asynchronously\r\n      NGN.NET.json('http:/download2.com/data.json', (data) => {\r\n        allData.push(data)\r\n        NGN.BUS.emit('download2done')\r\n      })\r\n      \n      // Download the third set of data asynchronously\r\n      NGN.NET.json('http:/download3.com/data.json', (data) => {\r\n        allData.push(data)\r\n        NGN.BUS.emit('download3done')\r\n      })\r\n      \n      // The handler can be removed with the special method:\r\n      collection.remove()\r\n      ```\r\n      \r\n      An array of events. Once _all_ of these events have fired,\r\n      the triggerEventName will be fired.\r\n      \r\n      The name of the event triggered after the collection has completed.\r\n      This can also be a callback function. If a callback function is provided,\r\n      it will receive the payload as the only argument when it is triggered.\r\n      \r\n      An optional payload delivered to the #triggerEventName.\r\n      \r\n      Provides the key/value configuration of the collection.\r\n      ```js\r\n      {\r\n        masterqueue: ['event1', 'event2', 'etc'], // The original event array (non-editable)\r\n        remainingqueue: [...], // The events the BUS is still waiting for before firing the trigger event.\r\n        eventName: 'triggeredEventName', // Name of the event triggered after the remaining elements are flushed.\r\n        payload: 'anything', // OPTIONAL\r\n        remove: [Function]\r\n      }\r\n      ```",
          "code": "funnel: NGN.const((eventCollection, triggerEventName, payload = null) => {\r\n        if (NGN.typeof(eventCollection) !== 'array') {\r\n          throw new Error(`NGN.BUS.funnel expected an array of events, but received a(n) ${NGN.typeof(eventCollection)}`)\r\n        }\r\n\r\n        let collection = new Set(eventCollection)\r\n        let key = this.getInternalCollectionId(this.META.collectionQueue)\r\n\r\n        this.META.collectionQueue[key] = {}\r\n\r\n        Object.defineProperties(this.META.collectionQueue[key], {\r\n          masterqueue: NGN.const(new Set(eventCollection)),\r\n          remainingqueue: NGN.private(collection),\r\n          eventName: NGN.const(triggerEventName),\r\n          remove: NGN.const(() => {\r\n            this.META.collectionQueue[key].masterqueue.forEach(event => {\r\n              this.off(event, this.handleCollectionTrigger(event, key))\r\n            })\r\n\r\n            this.decreaseMaxListeners(this.META.collectionQueue[key].masterqueue.size)\r\n\r\n            delete this.META.collectionQueue[key]\r\n          }),\r\n          payload: NGN.const(payload)\r\n        })\r\n\r\n        this.increaseMaxListeners(collection.size)\r\n\r\n        collection.forEach(event => {\r\n          this.on(event, this.handleCollectionTrigger(event, key))\r\n        })\r\n\r\n        return this.META.collectionQueue[key]\r\n      })",
          "start": {
            "line": 581,
            "column": 6
          },
          "end": {
            "line": 614,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "funnelOnce": {
          "type": "property",
          "label": "funnelOnce",
          "description": "This provides the same functionality as #funnel, but\r\n      removes the listener after the resultant event has fired.\r\n      See #funnel for detailed usage.\r\n      \r\n      An array of events. Once _all_ of these events have fired,\r\n      the triggerEventName will be fired.\r\n      \r\n      The name of the event triggered after the collection has completed.\r\n      \r\n      An optional payload delivered to the #triggerEventName.\r\n      \r\n      Provides the key/value configuration of the collection.",
          "code": "funnelOnce: NGN.const((eventCollection, triggerEventName, payload = null) => {\r\n        let funnelClosureEvent = `::NGNFUNNEL::${(new Date()).getTime()}::${triggerEventName}`\r\n        // let funnelClosureEvent = Symbol(triggerEventName)\r\n        let collection = this.funnel(eventCollection, funnelClosureEvent, payload)\r\n\r\n        this.increaseMaxListeners()\r\n        this.once(funnelClosureEvent, () => {\r\n          collection.remove()\r\n          collection = null\r\n          this.emit(triggerEventName, payload)\r\n        })\r\n      })",
          "start": {
            "line": 631,
            "column": 6
          },
          "end": {
            "line": 642,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "threshold": {
          "type": "property",
          "label": "threshold",
          "description": "After an event is fired a predetermined number of times (the threshold),\r\n      trigger another event or function.\r\n      \n      For example:\r\n      \n      ```js\r\n      NGN.BUS.threshold('push.my.button', 3, 'annoyed')\r\n      \n      NGN.BUS.on('annoyed', function () {\r\n        console.log('We apologize for the slow response, but excessive clicking will not speed up the process.')\r\n      })\r\n      \n      document.getElementById('#myButton').addEventListener('click', NGN.BUS.attach('push.my.button'))\r\n      ```\r\n      \n      Once the threshold is exceeded, the final event will be triggered and\r\n      the threshold will be reset. Using the example above, this means\r\n      clicking 3 times on `#myButton` would trigger the `annoyed` event ONCE,\r\n      6 times triggers `annoyed` TWICE, 9 times triggers `annoyed` THREE times, etc.\r\n      \r\n      The name of the event to count.\r\n      \r\n      The number of occurrances allowed until the final event is triggered.\r\n      The event will be triggered at the threshold. For example, if the limit\r\n      is `3`, the finalEvent will be triggered the 3rd time thresholdEventName is\r\n      fired.\r\n      \r\n      This can be an event or callback function triggered when the threshold is crossed.\r\n      If a callback function is specified, the payload is passed as the only argument.\r\n      \r\n      An optional payload to send to the finalEvent handler(s).\r\n      \r\n      Returns an object that can be used to remove the threshold.",
          "code": "threshold: NGN.const(function (thresholdEventName, limit, finalEventName, payload = null) {\r\n        if (typeof thresholdEventName !== 'string') {\r\n          throw new Error('The threshold event name must be a string (received ' + (typeof thresholdEventName) + ')')\r\n        }\r\n\r\n        // let key = `${this.getInternalCollectionId(this.META.thresholdQueue)}${limit.toString()}`\r\n        let key = this.getInternalCollectionId(this.META.thresholdQueue)\r\n\r\n        this.META.thresholdQueue[key] = {}\r\n\r\n        Object.defineProperties(this.META.thresholdQueue[key], {\r\n          key: NGN.const(key),\r\n          eventName: NGN.const(thresholdEventName),\r\n          limit: NGN.const(limit),\r\n          count: NGN.private(0),\r\n          finalEventName: NGN.const(finalEventName),\r\n          remove: NGN.const(() => {\r\n            let event = this.META.thresholdQueue[key].eventName\r\n\r\n            delete this.META.thresholdQueue[key]\r\n\r\n            this.decreaseMaxListeners()\r\n            this.off(event, this.handleThresholdTrigger(key))\r\n          }),\r\n          payload: NGN.const(payload)\r\n        })\r\n\r\n        this.increaseMaxListeners()\r\n        this.on(thresholdEventName, this.handleThresholdTrigger(key))\r\n\r\n        return this.META.thresholdQueue[key]\r\n      })",
          "start": {
            "line": 681,
            "column": 6
          },
          "end": {
            "line": 712,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "thresholdOnce": {
          "type": "property",
          "label": "thresholdOnce",
          "description": null,
          "code": "thresholdOnce: NGN.const(function (thresholdEventName, limit, finalEventName, payload = null) {\r\n        let thresholdClosureEvent = `::NGNTHRESHOLD::${(new Date()).getTime()}::${finalEventName}`\r\n        let threshold = this.threshold(thresholdEventName, limit, thresholdClosureEvent, payload)\r\n\r\n        this.once(thresholdClosureEvent, () => {\r\n          threshold.remove()\r\n          threshold = null\r\n          this.emit(finalEventName, payload)\r\n        })\r\n      })",
          "start": {
            "line": 714,
            "column": 6
          },
          "end": {
            "line": 723,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "handleThresholdTrigger": {
          "type": "property",
          "label": "handleThresholdTrigger",
          "description": "A method to manage #threshold event handlers.",
          "code": "handleThresholdTrigger: NGN.const(function (key) {\r\n        let me = this\r\n        return function () {\r\n          // Use setTimeout to simulate nextTick\r\n          setTimeout(() => {\r\n            if (me.META.thresholdQueue.hasOwnProperty(key)) {\r\n              me.META.thresholdQueue[key].count++\r\n              if (me.META.thresholdQueue[key].count === me.META.thresholdQueue[key].limit) {\r\n                if (NGN.isFn(me.META.thresholdQueue[key].finalEventName)) {\r\n                  me.META.thresholdQueue[key].finalEventName(me.META.thresholdQueue[key].payload)\r\n                } else {\r\n                  me.emit(me.META.thresholdQueue[key].finalEventName, me.META.thresholdQueue[key].payload)\r\n                }\r\n\r\n                // This if statement is required in case the event is removed\r\n                // during the reset process.\r\n                if (me.META.thresholdQueue.hasOwnProperty(key)) {\r\n                  me.META.thresholdQueue[key].count = 0\r\n                }\r\n              }\r\n            }\r\n          }, 0)\r\n        }\r\n      })",
          "start": {
            "line": 730,
            "column": 6
          },
          "end": {
            "line": 753,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        },
        "wrapEventHandlerWithScope": {
          "type": "property",
          "label": "wrapEventHandlerWithScope",
          "description": "An internal method to wrap node-based event handlers\r\n      with the proper scope.\r\n      \r\n      The name of the event being handled.\r\n      \r\n      The handler function.",
          "code": "wrapEventHandlerWithScope: NGN.privateconst((name, fn) => {\r\n        if (!NGN.nodelike) {\r\n          return fn\r\n        }\r\n\r\n        const handlerFn = fn\r\n\r\n        return function () {\r\n          let args = arguments\r\n\r\n          if (typeof args[args.length - 1] === 'symbol') {\r\n            name = args[args.length - 1].toString().replace(/Symbol\\(|\\)/gi, '')\r\n            args = NGN.slice(args)\r\n            args.pop()\r\n          }\r\n\r\n          handlerFn.apply({ event: name }, args)\r\n        }\r\n      })",
          "start": {
            "line": 763,
            "column": 6
          },
          "end": {
            "line": 781,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        },
        "applyScope": {
          "type": "property",
          "label": "applyScope",
          "description": "An internal method to apply scope based on whether the handler\r\n      is a Node-like \"once\" emitter or not.\r\n      \r\n      The name of the event being scoped.\r\n      \r\n      The handler function.",
          "code": "applyScope: NGN.privateconst((args) => {\r\n        if (NGN.nodelike && args.length > 1) {\r\n          if (args[args.length - 1].listener) {\r\n            args[args.length - 1].listener = this.wrapEventHandlerWithScope(\r\n              args[0],\r\n              args[args.length - 1].listener\r\n            )\r\n          } else {\r\n            args[args.length - 1] = this.wrapEventHandlerWithScope(\r\n              args[0],\r\n              args[args.length - 1]\r\n            )\r\n          }\r\n        }\r\n      })",
          "start": {
            "line": 791,
            "column": 6
          },
          "end": {
            "line": 805,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        }
      },
      "methods": {
        "constructor": {
          "type": "method",
          "label": "constructor",
          "description": null,
          "code": "constructor () {\r\n    super()\r\n\r\n    // const INSTANCE = Symbol('instance')\r\n\r\n    Object.defineProperties(this, {\r\n      // META: NGN.get(() => this[INSTANCE]),\r\n\r\n      META: NGN.private({\r\n        queued: {},\r\n        collectionQueue: {},\r\n        thresholdQueue: {},\r\n        defaultTTL: -1,\r\n        wildcardEvents: new Set()\r\n      }),\r\n\r\n      /**\r\n       * @method setTTL\r\n       * Set a default time-to-live for event handlers (in milliseconds).\r\n       * After the TTL period elapses, event handlers are removed.\r\n       * By default, there is no TTL (`-1`).\r\n       * @param {number} ttl\r\n       * The number of milliseconds before an event handler is automatically\r\n       * removed. This value may be `-1` (no TTL/never expires) or a value\r\n       * greater than `0`.\r\n       */\r\n      setTTL: NGN.const((ttl = -1) => {\r\n        if (ttl === 0) {\r\n          NGN.WARN('NGN.EventEmitter#TTL cannot be 0.')\r\n          return\r\n        }\r\n\r\n        this.META.defaultTTL = ttl\r\n      }),\r\n\r\n      /**\r\n       * @alias off\r\n       * Remove an event handler. If no handler is specified, all handlers for\r\n       * the specified event will be removed.\r\n       * This is a shortcut for #removeListener.\r\n       * @param {string} eventName\r\n       * Name of the event to remove.\r\n       * @param {function} [handlerFn]\r\n       * The handler function to remove from the event handlers.\r\n       */\r\n      off: NGN.public((eventName, handlerFn) => {\r\n        if (NGN.typeof(eventName) === 'array') {\r\n          for (let i = 0; i < eventName.length; i++) {\r\n            this.off(eventName[i], handlerFn)\r\n          }\r\n\r\n          return\r\n        }\r\n\r\n        let l = this.listeners(eventName)\r\n\r\n        if (!NGN.isFn(handlerFn)) {\r\n          return this.clear(eventName)\r\n        }\r\n\r\n        let wrappedHandlerFn = this.wrapEventHandlerWithScope(eventName, handlerFn)\r\n\r\n        if (l.indexOf(wrappedHandlerFn) < 0) {\r\n          for (let i = 0; i < l.length; i++) {\r\n            if (l[i].toString() === wrappedHandlerFn.toString()) {\r\n              this.META.wildcardEvents.delete(eventName)\r\n              // this.removeListener(eventName, handlerFn)\r\n              this.removeListener(eventName, l[i], false)\r\n              break\r\n            }\r\n          }\r\n        } else {\r\n          this.META.wildcardEvents.delete(eventName)\r\n          this.removeListener(eventName, handlerFn)\r\n        }\r\n      }),\r\n\r\n      /**\r\n       * @method deprecate\r\n       * Provides a deprecation notice for the specified event.\r\n       * Automatically emits the appropriate \"replacement\" event\r\n       * if a replacement event is configured. If no replacement\r\n       * event is configured, the deprecation notice will be written\r\n       * to the console but no replacement event will be triggered.\r\n       * @param {string} deprecatedEventName\r\n       * The name of the deprecated event.\r\n       * @param {string} [replacementEventName]\r\n       * The name of the new event.\r\n       */\r\n      deprecate: NGN.const((deprecatedEventName, replacementEventName) => {\r\n        const me = this\r\n\r\n        this.on(deprecatedEventName, function () {\r\n          NGN.WARN(`${deprecatedEventName} is deprecated. ` + (!replacementEventName ? '' : `Use ${replacementEventName} instead.`))\r\n\r\n          if (replacementEventName) {\r\n            let args = NGN.slice(arguments)\r\n\r\n            args.shift()\r\n            args.unshift(replacementEventName)\r\n\r\n            me.emit.apply(me, args)\r\n          }\r\n        })\r\n      }),\r\n\r\n      /**\r\n       * @method pool\r\n       * A helper command to create multiple related subscribers\r\n       * all at once. This is a convenience function.\r\n       * @property {string} [prefix]\r\n       * Supply a prefix to be added to every event. For example,\r\n       * `myScope.` would turn `someEvent` into `myScope.someEvent`.\r\n       * @property {Object} subscriberObject\r\n       * A key:value object where the key is the name of the\r\n       * unprefixed event and the key is the handler function.\r\n       * A value can be an object, allowing for nesting events. For example:\r\n       *\r\n       * ```js\r\n       * NGN.BUS.pool('prefix.', {\r\n       *   deep: {\r\n       *     nested: {\r\n       *       eventName: function () {\r\n       *         console.log('event triggered')\r\n       *       }\r\n       *     }\r\n       *   }\r\n       * })\r\n       *\r\n       * NGN.BUS.emit('prefix.deep.nested.eventName') // <-- Outputs \"event triggered\"\r\n       * ```\r\n       * @private\r\n       */\r\n      pool: NGN.privateconst(function (prefix, group) {\r\n        if (typeof prefix !== 'string') {\r\n          group = prefix\r\n          prefix = ''\r\n        }\r\n\r\n        let pool = {}\r\n\r\n        for (let eventName in group) {\r\n          let topic = `${NGN.coalesce(prefix, '')}${eventName}`\r\n\r\n          if (NGN.isFn(group[eventName])) {\r\n            this.increaseMaxListeners()\r\n\r\n            pool[eventName] = this.on(topic, group[eventName])\r\n          } else if (typeof group[eventName] === 'object') {\r\n            this.pool(`${topic}.`, group[eventName])\r\n          } else {\r\n            NGN.WARN(`${topic} could not be pooled in the event emitter because it's value is not a function.`)\r\n          }\r\n        }\r\n      }),\r\n\r\n      /**\r\n       * @method attach\r\n       * Attach a function to a topic. This can be used\r\n       * to forward events in response to asynchronous functions.\r\n       *\r\n       * For example:\r\n       *\r\n       * ```js\r\n       * myAsyncDataFetch(NGN.BUS.attach('topicName'))\r\n       * ```\r\n       *\r\n       * This is the same as:\r\n       *\r\n       * ```js\r\n       * myAsyncCall(function(data){\r\n       *  NGN.BUS.emit('topicName', data)\r\n       * })\r\n       * ```\r\n       * @param {string} eventName\r\n       * The name of the event to attach a handler method to.\r\n       * @param {boolean} [preventDefaultAction=false]\r\n       * Setting this to `true` will execute a `event.preventDefault()` before\r\n       * attaching the handler.\r\n       * @returns {function}\r\n       * Returns a function that will automatically be associated with an event.\r\n       */\r\n      attach: NGN.const(function (eventName, preventDefaultAction) {\r\n        preventDefaultAction = NGN.coalesce(preventDefaultAction, false)\r\n\r\n        return (e) => {\r\n          if (preventDefaultAction && !NGN.nodelike) {\r\n            e.preventDefault()\r\n          }\r\n\r\n          this.emit(eventName, ...arguments)\r\n        }\r\n      }),\r\n\r\n      /**\r\n       * @method increaseMaxListeners\r\n       * Increase the number of maximum listeners.\r\n       * @param {Number} [value = 1]\r\n       * The number of events the max listener account will be increased by.\r\n       * @private\r\n       */\r\n      increaseMaxListeners: NGN.private((count = 1) => {\r\n        this.setMaxListeners(this.getMaxListeners() + count)\r\n      }),\r\n\r\n      /**\r\n       * @method decreaseMaxListeners\r\n       * Decrease the number of maximum listeners.\r\n       * @param {Number} [value = 1]\r\n       * The number of events the max listener account will be decreased by.\r\n       * @private\r\n       */\r\n      decreaseMaxListeners: NGN.private((count = 1) => {\r\n        this.setMaxListeners(this.getMaxListeners() - count)\r\n      }),\r\n\r\n      /**\r\n       * @method forward\r\n       * A special subscriber that fires one or more event in response to\r\n       * to an event. This is used to bubble events up/down an event chain.\r\n       *\r\n       * For example:\r\n       *\r\n       * ```js\r\n       * NGN.BUS.forward('sourceEvent', ['someEvent','anotherEvent'], {payload:true})\r\n       * ```\r\n       * When `sourceEvent` is published, the bind method triggers `someEvent` and\r\n       * `anotherEvent`, passing the payload object to `someEvent` and\r\n       * `anotherEvent` subscribers simultaneously.\r\n       *\r\n       * To forward an event to another EventEmitter, see #relay.\r\n       * @param {String} sourceEvent\r\n       * The event to subscribe to.\r\n       * @param {String|Array} triggeredEvent\r\n       * An event or array of events to fire in response to the sourceEvent.\r\n       * @param {any} data\r\n       * Optional data to pass to each bound event handler.\r\n       * @returns {Object}\r\n       * Returns an object with a single `remove()` method.\r\n       */\r\n      forward: NGN.const(function (eventName, triggers, payload) {\r\n        triggers = NGN.forceArray(triggers)\r\n\r\n        let me = this\r\n        let listener = function () {\r\n          let args = NGN.slice(arguments)\r\n\r\n          if (payload) {\r\n            args.push(payload)\r\n          }\r\n\r\n          me.emit(triggers, ...args)\r\n        }\r\n\r\n        this.increaseMaxListeners()\r\n        this.on(eventName, listener)\r\n\r\n        // Provide handle back for removal of topic\r\n        return {\r\n          remove: () => {\r\n            this.decreaseMaxListeners()\r\n            this.off(eventName, listener)\r\n          }\r\n        }\r\n      }),\r\n\r\n      /**\r\n       * This relays an entire event to a different event emitter.\r\n       * For example:\r\n       *\r\n       * ```js\r\n       * let emitterA = new NGN.EventEmitter()\r\n       * let emitterB = new NGN.EventEmitter()\r\n       *\r\n       * emitterA.relay('my.event', emitterB)\r\n       *\r\n       * emitterB.on('my.event', () => { console.log('Emitter B heard the event!') })\r\n       *\r\n       * emitterA.emit('my.event') // Outputs \"Emitter B heard the event!\"\r\n       * ```\r\n       * @param  {string} eventName\r\n       * The name of the event to listen for.\r\n       * @param  {NGN.EventEmitter} targetEmitter\r\n       * The emitter to relay the event to.\r\n       * @param {string} [prefix]\r\n       * An optional prefix to prepend to the eventName.\r\n       * @param {string} [postfix]\r\n       * An optional postfix to append to the eventName.\r\n       */\r\n      relay: NGN.const(function (eventName, targetEmitter, prefix = null, postfix = null) {\r\n        let eventNameList = NGN.forceArray(eventName)\r\n\r\n        for (let i = 0; i < eventNameList.length; i++) {\r\n          let eventName = eventNameList[i]\r\n\r\n          this.on(eventName, function () {\r\n            if (NGN.typeof(this.event) === 'symbol') {\r\n              if (prefix !== null || postfix !== null) {\r\n                NGN.INFO('Cannot relay a symbol-based event with a prefix/postfix.')\r\n              }\r\n\r\n              targetEmitter.emit(...arguments)\r\n            } else {\r\n              targetEmitter.emit(`${NGN.coalesce(prefix, '')}${this.event}${NGN.coalesce(postfix, '')}`, ...arguments)\r\n            }\r\n          })\r\n        }\r\n      }),\r\n\r\n      /**\r\n       * This relays an entire event to a different event emitter. This is\r\n       * the same as #relay, but the event handler is removed after the\r\n       * first invocation of the event.\r\n       *\r\n       * For example:\r\n       *\r\n       * ```js\r\n       * let emitterA = new NGN.EventEmitter()\r\n       * let emitterB = new NGN.EventEmitter()\r\n       *\r\n       * emitterA.relayOnce('my.event', emitterB)\r\n       *\r\n       * emitterB.on('my.event', () => { console.log('Emitter B heard the event!') })\r\n       *\r\n       * emitterA.emit('my.event') // Outputs \"Emitter B heard the event!\"\r\n       * emitterA.emit('my.event') // Does nothing\r\n       * ```\r\n       * @param  {string} eventName\r\n       * The name of the event to listen for.\r\n       * @param  {NGN.EventEmitter} targetEmitter\r\n       * The emitter to relay the event to.\r\n       * @param {string} [prefix]\r\n       * An optional prefix to prepend to the eventName.\r\n       * @param {string} [postfix]\r\n       * An optional postfix to append to the eventName.\r\n       */\r\n      relayOnce: NGN.const(function (eventName, targetEmitter, prefix = null, postfix = null) {\r\n        let eventNameList = NGN.forceArray(eventName)\r\n\r\n        for (let i = 0; i < eventNameList.length; i++) {\r\n          let eventName = eventNameList[i]\r\n\r\n          this.once(eventName, function () {\r\n            if (NGN.typeof(this.event) === 'symbol') {\r\n              if (prefix !== null || postfix !== null) {\r\n                NGN.INFO('Cannot relay a symbol-based event with a prefix/postfix.')\r\n              }\r\n\r\n              targetEmitter.emit(...arguments)\r\n            } else {\r\n              targetEmitter.emit(`${NGN.coalesce(prefix, '')}${this.event}${NGN.coalesce(postfix, '')}`, ...arguments)\r\n            }\r\n          })\r\n        }\r\n      }),\r\n\r\n      /**\r\n       * @method delayEmit\r\n       * This method waits for the specified duration, then publishes an\r\n       * event once. This will publish the event only once at the end of the\r\n       * wait period, even if the event is triggered multiple times. This can\r\n       * be useful when working with many events triggered in rapid succession.\r\n       *\r\n       * For example, an NGN.DATA.Model representing a person may be used to\r\n       * track a user profile. The NGN.DATA.Model fires an event called `field.update`\r\n       * every time a data field is modified. In many cases, a user may update\r\n       * multiple fields of their profile using a form with a \"Save\" button.\r\n       * Instead of generating a new \"save\" (to disk, to memory, to an API, etc)\r\n       * operation for each field, the publishOnce event can wait until all\r\n       * changes are made before running the save operation.\r\n       *\r\n       * ```js\r\n       * // Create a data model representing a person.\r\n       * var Person = new NGN.DATA.Model({....})\r\n       *\r\n       * // Create a new person record for a user.\r\n       * var user = new Person()\r\n       *\r\n       * // When the user is modified, save the data.\r\n       * user.on('field.update', function () {\r\n       *   // Wait 300 milliseconds to trigger the save event\r\n       *   NGN.BUS.delayEmit('user.save', 300)\r\n       * })\r\n       *\r\n       * // Save the user using an API\r\n       * NGN.BUS.on('user.save', function () {\r\n       *   NGN.NET.put({\r\n       *     url: 'https://my.api.com/user',\r\n       *     json: user.data\r\n       *   })\r\n       * })\r\n       *\r\n       * // Modify the record attributes (which are blank by default)\r\n       * user.firstname = 'John'\r\n       * user.lastname = 'Doe'\r\n       * user.age = 42\r\n       *\r\n       * // Make another update 1 second later\r\n       * setTimeout(function () {\r\n       *   user.age = 32\r\n       * }, 1000)\r\n       * ```\r\n       *\r\n       * The code above sets up a model and record. Then it listens to the record\r\n       * for field updates. Each time it recognizes an update, it queues the \"save\"\r\n       * event. When the queue matures, it fires the `user.save` event.\r\n       *\r\n       * The first `field.update` is triggered when `user.firstname = 'John'` runs.\r\n       * This initiates a queue for `user.save`, set to mature in 300 millisenconds.\r\n       * Next, a `field.update` is triggered when `user.lastname = 'Doe'` runs.\r\n       * This time, since the queue for `user.save` is already initiated, notthing\r\n       * new happens. Finally, a `field.update` is triggered when `user.age = 42`\r\n       * runs. Just like the last one, nothing happens since the `user.save` queue\r\n       * is already active.\r\n       *\r\n       * The `user.save` queue \"matures\" after 300 milliseconds. This means after\r\n       * 300 milliseconds have elapsed, the `user.save` event is triggered. In this\r\n       * example, it means the `NGN.NET.put()` code will be executed. As a result,\r\n       * all 3 change (firstname, lastname, and age) will be complete before the\r\n       * API request is executed. The queue is cleared immediately.\r\n       *\r\n       * The final update occurs 1 second later (700 milliseconds after the queue\r\n       * matures). This triggers a `field.update`, but since the queue is no\r\n       * longer active, it is re-initiated. 300 milliseconds later, the `user.save`\r\n       * event is fired again, thus executing the API request again (1.3 seconds\r\n       * in total).\r\n       * @param {string} eventName\r\n       * The event/topic to publish/emit.\r\n       * @param {Number} [delay=300]\r\n       * The number of milliseconds to wait before firing the event.\r\n       * @param {Any} [payload]\r\n       * An optional payload, such as data to be passed to an event handler.\r\n       */\r\n      delayEmit: NGN.const(function (eventName, delay) {\r\n        if (!this.META.queued.hasOwnProperty(eventName)) {\r\n          let args = NGN.slice(arguments)\r\n          args.splice(1, 1)\r\n\r\n          this.META.queued[eventName] = setTimeout(() => {\r\n            delete this.META.queued[eventName]\r\n            this.emit(...args)\r\n          }, delay)\r\n        }\r\n      }),\r\n\r\n      /**\r\n       * @method getInternalCollectionId\r\n       * Returns a unique ID for special collections.\r\n       * @param {object} collection\r\n       * The collection to generate an ID for.\r\n       * @private\r\n       */\r\n      getInternalCollectionId: NGN.privateconst(function (collection) {\r\n        return Symbol(collection)\r\n        // let time = (new Date()).getTime().toString()\r\n        // let rand = Math.random().toString()\r\n        // let key = Object.keys(collection).length + 1\r\n        //\r\n        // while (collection.hasOwnProperty(`${key.toString()}${time}${rand}`)) {\r\n        //   key++\r\n        // }\r\n        //\r\n        // return `${key.toString()}${time}${rand}`\r\n      }),\r\n\r\n      /**\r\n       * @method handleCollectionTrigger\r\n       * A method to manage #chain event handlers.\r\n       * @private\r\n       */\r\n      handleCollectionTrigger: NGN.privateconst(function (eventName, key) {\r\n        let me = this\r\n\r\n        return function () {\r\n          // Use setTimeout to simulate nextTick\r\n          setTimeout(() => {\r\n            let cq = me.META.collectionQueue\r\n\r\n            if (cq[key]) {\r\n              cq[key].remainingqueue.delete(eventName)\r\n\r\n              if (cq[key].remainingqueue.size === 0) {\r\n                cq[key].remainingqueue = cq[key].masterqueue\r\n\r\n                if (NGN.isFn(cq[key].eventName)) {\r\n                  cq[key].eventName(cq[key].payload)\r\n                } else {\r\n                  me.emit(cq[key].eventName, cq[key].payload)\r\n                }\r\n              }\r\n            }\r\n          }, 0)\r\n        }\r\n      }),\r\n\r\n      /**\r\n       * @method funnel\r\n       * Emit an event after a collection of unique events have all fired.\r\n       * This can be useful in situations where multiple asynchronous actions\r\n       * must complete before another begins. For example, blending 3\r\n       * remote data sources from different API's into a single resultset\r\n       * can be achieved with this.\r\n       *\r\n       * **Example**\r\n       * ```js\r\n       * let collection = NGN.BUS.funnel(['download1done', 'download2done', 'download3done'], 'make.results')\r\n       *\r\n       * let allData = []\r\n       *\r\n       * // When all of the downloads are done, log them.\r\n       * NGN.BUS.on('make.results', () => {\r\n       *   console.log(allData)\r\n       * })\r\n       *\r\n       * // Download the first set of data asynchronously\r\n       * NGN.NET.json('http:/download1.com/data.json', (data) => {\r\n       *   allData.push(data)\r\n       *   NGN.BUS.emit('download1done')\r\n       * })\r\n       *\r\n       * // Download the second set of data asynchronously\r\n       * NGN.NET.json('http:/download2.com/data.json', (data) => {\r\n       *   allData.push(data)\r\n       *   NGN.BUS.emit('download2done')\r\n       * })\r\n       *\r\n       * // Download the third set of data asynchronously\r\n       * NGN.NET.json('http:/download3.com/data.json', (data) => {\r\n       *   allData.push(data)\r\n       *   NGN.BUS.emit('download3done')\r\n       * })\r\n       *\r\n       * // The handler can be removed with the special method:\r\n       * collection.remove()\r\n       * ```\r\n       * @param {array} eventCollection\r\n       * An array of events. Once _all_ of these events have fired,\r\n       * the triggerEventName will be fired.\r\n       * @param {string|function} triggerEventName\r\n       * The name of the event triggered after the collection has completed.\r\n       * This can also be a callback function. If a callback function is provided,\r\n       * it will receive the payload as the only argument when it is triggered.\r\n       * @param {any} [payload]\r\n       * An optional payload delivered to the #triggerEventName.\r\n       * @returns {object} collection\r\n       * Provides the key/value configuration of the collection.\r\n       * ```js\r\n       * {\r\n       *   masterqueue: ['event1', 'event2', 'etc'], // The original event array (non-editable)\r\n       *   remainingqueue: [...], // The events the BUS is still waiting for before firing the trigger event.\r\n       *   eventName: 'triggeredEventName', // Name of the event triggered after the remaining elements are flushed.\r\n       *   payload: 'anything', // OPTIONAL\r\n       *   remove: [Function]\r\n       * }\r\n       * ```\r\n       */\r\n      funnel: NGN.const((eventCollection, triggerEventName, payload = null) => {\r\n        if (NGN.typeof(eventCollection) !== 'array') {\r\n          throw new Error(`NGN.BUS.funnel expected an array of events, but received a(n) ${NGN.typeof(eventCollection)}`)\r\n        }\r\n\r\n        let collection = new Set(eventCollection)\r\n        let key = this.getInternalCollectionId(this.META.collectionQueue)\r\n\r\n        this.META.collectionQueue[key] = {}\r\n\r\n        Object.defineProperties(this.META.collectionQueue[key], {\r\n          masterqueue: NGN.const(new Set(eventCollection)),\r\n          remainingqueue: NGN.private(collection),\r\n          eventName: NGN.const(triggerEventName),\r\n          remove: NGN.const(() => {\r\n            this.META.collectionQueue[key].masterqueue.forEach(event => {\r\n              this.off(event, this.handleCollectionTrigger(event, key))\r\n            })\r\n\r\n            this.decreaseMaxListeners(this.META.collectionQueue[key].masterqueue.size)\r\n\r\n            delete this.META.collectionQueue[key]\r\n          }),\r\n          payload: NGN.const(payload)\r\n        })\r\n\r\n        this.increaseMaxListeners(collection.size)\r\n\r\n        collection.forEach(event => {\r\n          this.on(event, this.handleCollectionTrigger(event, key))\r\n        })\r\n\r\n        return this.META.collectionQueue[key]\r\n      }),\r\n\r\n      /**\r\n       * @method funnelOnce\r\n       * This provides the same functionality as #funnel, but\r\n       * removes the listener after the resultant event has fired.\r\n       * See #funnel for detailed usage.\r\n       * @param {array} eventCollection\r\n       * An array of events. Once _all_ of these events have fired,\r\n       * the triggerEventName will be fired.\r\n       * @param {string} triggerEventName\r\n       * The name of the event triggered after the collection has completed.\r\n       * @param {any} [payload]\r\n       * An optional payload delivered to the #triggerEventName.\r\n       * @returns {object} collection\r\n       * Provides the key/value configuration of the collection.\r\n       */\r\n      funnelOnce: NGN.const((eventCollection, triggerEventName, payload = null) => {\r\n        let funnelClosureEvent = `::NGNFUNNEL::${(new Date()).getTime()}::${triggerEventName}`\r\n        // let funnelClosureEvent = Symbol(triggerEventName)\r\n        let collection = this.funnel(eventCollection, funnelClosureEvent, payload)\r\n\r\n        this.increaseMaxListeners()\r\n        this.once(funnelClosureEvent, () => {\r\n          collection.remove()\r\n          collection = null\r\n          this.emit(triggerEventName, payload)\r\n        })\r\n      }),\r\n\r\n      /**\r\n       * @method threshold\r\n       * After an event is fired a predetermined number of times (the threshold),\r\n       * trigger another event or function.\r\n       *\r\n       * For example:\r\n       *\r\n       * ```js\r\n       * NGN.BUS.threshold('push.my.button', 3, 'annoyed')\r\n       *\r\n       * NGN.BUS.on('annoyed', function () {\r\n       *   console.log('We apologize for the slow response, but excessive clicking will not speed up the process.')\r\n       * })\r\n       *\r\n       * document.getElementById('#myButton').addEventListener('click', NGN.BUS.attach('push.my.button'))\r\n       * ```\r\n       *\r\n       * Once the threshold is exceeded, the final event will be triggered and\r\n       * the threshold will be reset. Using the example above, this means\r\n       * clicking 3 times on `#myButton` would trigger the `annoyed` event ONCE,\r\n       * 6 times triggers `annoyed` TWICE, 9 times triggers `annoyed` THREE times, etc.\r\n       * @param {string} thresholdEventName\r\n       * The name of the event to count.\r\n       * @param {number} limit\r\n       * The number of occurrances allowed until the final event is triggered.\r\n       * The event will be triggered at the threshold. For example, if the limit\r\n       * is `3`, the finalEvent will be triggered the 3rd time thresholdEventName is\r\n       * fired.\r\n       * @param {string|function} finalEventName\r\n       * This can be an event or callback function triggered when the threshold is crossed.\r\n       * If a callback function is specified, the payload is passed as the only argument.\r\n       * @param {any} [payload]\r\n       * An optional payload to send to the finalEvent handler(s).\r\n       * @returns {object}\r\n       * Returns an object that can be used to remove the threshold.\r\n       *\r\n       */\r\n      threshold: NGN.const(function (thresholdEventName, limit, finalEventName, payload = null) {\r\n        if (typeof thresholdEventName !== 'string') {\r\n          throw new Error('The threshold event name must be a string (received ' + (typeof thresholdEventName) + ')')\r\n        }\r\n\r\n        // let key = `${this.getInternalCollectionId(this.META.thresholdQueue)}${limit.toString()}`\r\n        let key = this.getInternalCollectionId(this.META.thresholdQueue)\r\n\r\n        this.META.thresholdQueue[key] = {}\r\n\r\n        Object.defineProperties(this.META.thresholdQueue[key], {\r\n          key: NGN.const(key),\r\n          eventName: NGN.const(thresholdEventName),\r\n          limit: NGN.const(limit),\r\n          count: NGN.private(0),\r\n          finalEventName: NGN.const(finalEventName),\r\n          remove: NGN.const(() => {\r\n            let event = this.META.thresholdQueue[key].eventName\r\n\r\n            delete this.META.thresholdQueue[key]\r\n\r\n            this.decreaseMaxListeners()\r\n            this.off(event, this.handleThresholdTrigger(key))\r\n          }),\r\n          payload: NGN.const(payload)\r\n        })\r\n\r\n        this.increaseMaxListeners()\r\n        this.on(thresholdEventName, this.handleThresholdTrigger(key))\r\n\r\n        return this.META.thresholdQueue[key]\r\n      }),\r\n\r\n      thresholdOnce: NGN.const(function (thresholdEventName, limit, finalEventName, payload = null) {\r\n        let thresholdClosureEvent = `::NGNTHRESHOLD::${(new Date()).getTime()}::${finalEventName}`\r\n        let threshold = this.threshold(thresholdEventName, limit, thresholdClosureEvent, payload)\r\n\r\n        this.once(thresholdClosureEvent, () => {\r\n          threshold.remove()\r\n          threshold = null\r\n          this.emit(finalEventName, payload)\r\n        })\r\n      }),\r\n\r\n      /**\r\n       * @method handleThresholdTrigger\r\n       * A method to manage #threshold event handlers.\r\n       * @private\r\n       */\r\n      handleThresholdTrigger: NGN.const(function (key) {\r\n        let me = this\r\n        return function () {\r\n          // Use setTimeout to simulate nextTick\r\n          setTimeout(() => {\r\n            if (me.META.thresholdQueue.hasOwnProperty(key)) {\r\n              me.META.thresholdQueue[key].count++\r\n              if (me.META.thresholdQueue[key].count === me.META.thresholdQueue[key].limit) {\r\n                if (NGN.isFn(me.META.thresholdQueue[key].finalEventName)) {\r\n                  me.META.thresholdQueue[key].finalEventName(me.META.thresholdQueue[key].payload)\r\n                } else {\r\n                  me.emit(me.META.thresholdQueue[key].finalEventName, me.META.thresholdQueue[key].payload)\r\n                }\r\n\r\n                // This if statement is required in case the event is removed\r\n                // during the reset process.\r\n                if (me.META.thresholdQueue.hasOwnProperty(key)) {\r\n                  me.META.thresholdQueue[key].count = 0\r\n                }\r\n              }\r\n            }\r\n          }, 0)\r\n        }\r\n      }),\r\n\r\n      /**\r\n       * An internal method to wrap node-based event handlers\r\n       * with the proper scope.\r\n       * @param {string} eventName\r\n       * The name of the event being handled.\r\n       * @param {function} handlerFn\r\n       * The handler function.\r\n       */\r\n      wrapEventHandlerWithScope: NGN.privateconst((name, fn) => {\r\n        if (!NGN.nodelike) {\r\n          return fn\r\n        }\r\n\r\n        const handlerFn = fn\r\n\r\n        return function () {\r\n          let args = arguments\r\n\r\n          if (typeof args[args.length - 1] === 'symbol') {\r\n            name = args[args.length - 1].toString().replace(/Symbol\\(|\\)/gi, '')\r\n            args = NGN.slice(args)\r\n            args.pop()\r\n          }\r\n\r\n          handlerFn.apply({ event: name }, args)\r\n        }\r\n      }),\r\n\r\n      /**\r\n       * An internal method to apply scope based on whether the handler\r\n       * is a Node-like \"once\" emitter or not.\r\n       * @param {string} eventName\r\n       * The name of the event being scoped.\r\n       * @param {function} handlerFn\r\n       * The handler function.\r\n       */\r\n      applyScope: NGN.privateconst((args) => {\r\n        if (NGN.nodelike && args.length > 1) {\r\n          if (args[args.length - 1].listener) {\r\n            args[args.length - 1].listener = this.wrapEventHandlerWithScope(\r\n              args[0],\r\n              args[args.length - 1].listener\r\n            )\r\n          } else {\r\n            args[args.length - 1] = this.wrapEventHandlerWithScope(\r\n              args[0],\r\n              args[args.length - 1]\r\n            )\r\n          }\r\n        }\r\n      })\r\n    })\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 25,
            "column": 2
          },
          "end": {
            "line": 807,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": "constructor",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "setTTL": {
          "type": "method",
          "label": "setTTL",
          "description": "Set a default time-to-live for event handlers .\nAfter the TTL period elapses, event handlers are removed.\nBy default, there is no TTL (`-1`).",
          "code": "setTTL: NGN.const((ttl = -1) => {\r\n        if (ttl === 0) {\r\n          NGN.WARN('NGN.EventEmitter#TTL cannot be 0.')\r\n          return\r\n        }\r\n\r\n        this.META.defaultTTL = ttl\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 51,
            "column": 6
          },
          "end": {
            "line": 58,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "ttl": {
              "type": "argument",
              "label": "ttl",
              "description": "The number of milliseconds before an event handler is automatically\nremoved. This value may be `-1`  or a value\ngreater than `0`.",
              "code": "setTTL: NGN.const((ttl = -1) => {\r\n        if (ttl === 0) {\r\n          NGN.WARN('NGN.EventEmitter#TTL cannot be 0.')\r\n          return\r\n        }\r\n\r\n        this.META.defaultTTL = ttl\r\n      })",
              "start": {
                "line": 51,
                "column": 6
              },
              "end": {
                "line": 58,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "number",
              "required": true,
              "enum": [
                "no TTL/never expires"
              ]
            },
            "eventName": {
              "type": "argument",
              "label": "eventName",
              "description": "Name of the event to remove.",
              "code": "off: NGN.public((eventName, handlerFn) => {\r\n        if (NGN.typeof(eventName) === 'array') {\r\n          for (let i = 0; i < eventName.length; i++) {\r\n            this.off(eventName[i], handlerFn)\r\n          }\r\n\r\n          return\r\n        }\r\n\r\n        let l = this.listeners(eventName)\r\n\r\n        if (!NGN.isFn(handlerFn)) {\r\n          return this.clear(eventName)\r\n        }\r\n\r\n        let wrappedHandlerFn = this.wrapEventHandlerWithScope(eventName, handlerFn)\r\n\r\n        if (l.indexOf(wrappedHandlerFn) < 0) {\r\n          for (let i = 0; i < l.length; i++) {\r\n            if (l[i].toString() === wrappedHandlerFn.toString()) {\r\n              this.META.wildcardEvents.delete(eventName)\r\n              // this.removeListener(eventName, handlerFn)\r\n              this.removeListener(eventName, l[i], false)\r\n              break\r\n            }\r\n          }\r\n        } else {\r\n          this.META.wildcardEvents.delete(eventName)\r\n          this.removeListener(eventName, handlerFn)\r\n        }\r\n      })",
              "start": {
                "line": 70,
                "column": 6
              },
              "end": {
                "line": 100,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "handlerFn": {
              "type": "method",
              "label": "handlerFn",
              "description": "The handler function to remove from the event handlers.",
              "code": "@param {function} [handlerFn]\nThe handler function to remove from the event handlers.",
              "start": {
                "line": 70,
                "column": 6
              },
              "end": {
                "line": 100,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "arguments": {},
              "returnType": "void",
              "returnDescription": "void",
              "kind": null,
              "generator": false,
              "static": false,
              "computed": false,
              "async": false,
              "super": null,
              "override": false,
              "private": false
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "init",
          "computed": false,
          "super": "NGN.EventEmitter#setTTL",
          "override": false,
          "private": false
        },
        "deprecate": {
          "type": "method",
          "label": "deprecate",
          "description": "Provides a deprecation notice for the specified event.\nAutomatically emits the appropriate \"replacement\" event\nif a replacement event is configured. If no replacement\nevent is configured, the deprecation notice will be written\nto the console but no replacement event will be triggered.",
          "code": "deprecate: NGN.const((deprecatedEventName, replacementEventName) => {\r\n        const me = this\r\n\r\n        this.on(deprecatedEventName, function () {\r\n          NGN.WARN(`${deprecatedEventName} is deprecated. ` + (!replacementEventName ? '' : `Use ${replacementEventName} instead.`))\r\n\r\n          if (replacementEventName) {\r\n            let args = NGN.slice(arguments)\r\n\r\n            args.shift()\r\n            args.unshift(replacementEventName)\r\n\r\n            me.emit.apply(me, args)\r\n          }\r\n        })\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 114,
            "column": 6
          },
          "end": {
            "line": 129,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "deprecatedEventName": {
              "type": "argument",
              "label": "deprecatedEventName",
              "description": "The name of the deprecated event.",
              "code": "deprecate: NGN.const((deprecatedEventName, replacementEventName) => {\r\n        const me = this\r\n\r\n        this.on(deprecatedEventName, function () {\r\n          NGN.WARN(`${deprecatedEventName} is deprecated. ` + (!replacementEventName ? '' : `Use ${replacementEventName} instead.`))\r\n\r\n          if (replacementEventName) {\r\n            let args = NGN.slice(arguments)\r\n\r\n            args.shift()\r\n            args.unshift(replacementEventName)\r\n\r\n            me.emit.apply(me, args)\r\n          }\r\n        })\r\n      })",
              "start": {
                "line": 114,
                "column": 6
              },
              "end": {
                "line": 129,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "replacementEventName": {
              "type": "argument",
              "label": "replacementEventName",
              "description": "The name of the new event.",
              "code": "deprecate: NGN.const((deprecatedEventName, replacementEventName) => {\r\n        const me = this\r\n\r\n        this.on(deprecatedEventName, function () {\r\n          NGN.WARN(`${deprecatedEventName} is deprecated. ` + (!replacementEventName ? '' : `Use ${replacementEventName} instead.`))\r\n\r\n          if (replacementEventName) {\r\n            let args = NGN.slice(arguments)\r\n\r\n            args.shift()\r\n            args.unshift(replacementEventName)\r\n\r\n            me.emit.apply(me, args)\r\n          }\r\n        })\r\n      })",
              "start": {
                "line": 114,
                "column": 6
              },
              "end": {
                "line": 129,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "init",
          "computed": false,
          "super": "NGN.EventEmitter#deprecate",
          "override": false,
          "private": false
        },
        "pool": {
          "type": "method",
          "label": "pool",
          "description": "A helper command to create multiple related subscribers\nall at once. This is a convenience function.",
          "code": "pool: NGN.privateconst(function (prefix, group) {\r\n        if (typeof prefix !== 'string') {\r\n          group = prefix\r\n          prefix = ''\r\n        }\r\n\r\n        let pool = {}\r\n\r\n        for (let eventName in group) {\r\n          let topic = `${NGN.coalesce(prefix, '')}${eventName}`\r\n\r\n          if (NGN.isFn(group[eventName])) {\r\n            this.increaseMaxListeners()\r\n\r\n            pool[eventName] = this.on(topic, group[eventName])\r\n          } else if (typeof group[eventName] === 'object') {\r\n            this.pool(`${topic}.`, group[eventName])\r\n          } else {\r\n            NGN.WARN(`${topic} could not be pooled in the event emitter because it's value is not a function.`)\r\n          }\r\n        }\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 158,
            "column": 6
          },
          "end": {
            "line": 179,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "prefix": {
              "type": "argument",
              "label": "prefix",
              "description": null,
              "code": "prefix",
              "start": {
                "line": 158,
                "column": 39
              },
              "end": {
                "line": 158,
                "column": 45
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            },
            "group": {
              "type": "argument",
              "label": "group",
              "description": null,
              "code": "group",
              "start": {
                "line": 158,
                "column": 47
              },
              "end": {
                "line": 158,
                "column": 52
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "init",
          "computed": false,
          "super": "NGN.EventEmitter#pool",
          "override": false,
          "private": true
        },
        "attach": {
          "type": "method",
          "label": "attach",
          "description": "Attach a function to a topic. This can be used\nto forward events in response to asynchronous functions.\n\nFor example:\n\n```js\nmyAsyncDataFetch\n```\n\nThis is the same as:\n\n```js\nmyAsyncCall(function(data){\nNGN.BUS.emit('topicName', data)\n})\n```",
          "code": "attach: NGN.const(function (eventName, preventDefaultAction) {\r\n        preventDefaultAction = NGN.coalesce(preventDefaultAction, false)\r\n\r\n        return (e) => {\r\n          if (preventDefaultAction && !NGN.nodelike) {\r\n            e.preventDefault()\r\n          }\r\n\r\n          this.emit(eventName, ...arguments)\r\n        }\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 207,
            "column": 6
          },
          "end": {
            "line": 217,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "eventName": {
              "type": "argument",
              "label": "eventName",
              "description": "The name of the event to attach a handler method to.",
              "code": "attach: NGN.const(function (eventName, preventDefaultAction) {\r\n        preventDefaultAction = NGN.coalesce(preventDefaultAction, false)\r\n\r\n        return (e) => {\r\n          if (preventDefaultAction && !NGN.nodelike) {\r\n            e.preventDefault()\r\n          }\r\n\r\n          this.emit(eventName, ...arguments)\r\n        }\r\n      })",
              "start": {
                "line": 207,
                "column": 6
              },
              "end": {
                "line": 217,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "preventDefaultAction": {
              "type": "argument",
              "label": "preventDefaultAction",
              "description": "Setting this to `true` will execute a `event.preventDefault` before\nattaching the handler.",
              "code": "attach: NGN.const(function (eventName, preventDefaultAction) {\r\n        preventDefaultAction = NGN.coalesce(preventDefaultAction, false)\r\n\r\n        return (e) => {\r\n          if (preventDefaultAction && !NGN.nodelike) {\r\n            e.preventDefault()\r\n          }\r\n\r\n          this.emit(eventName, ...arguments)\r\n        }\r\n      })",
              "start": {
                "line": 207,
                "column": 6
              },
              "end": {
                "line": 217,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": "false",
              "datatype": "boolean",
              "required": false,
              "enum": [
                ""
              ]
            }
          },
          "returnType": "function",
          "returnDescription": "null Returns a function that will automatically be associated with an event.",
          "kind": "init",
          "computed": false,
          "super": "NGN.EventEmitter#attach",
          "override": false,
          "private": false
        },
        "increaseMaxListeners": {
          "type": "method",
          "label": "increaseMaxListeners",
          "description": "Increase the number of maximum listeners.",
          "code": "increaseMaxListeners: NGN.private((count = 1) => {\r\n        this.setMaxListeners(this.getMaxListeners() + count)\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 226,
            "column": 6
          },
          "end": {
            "line": 228,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "count": {
              "type": "argument",
              "label": "value ",
              "description": "The number of events the max listener account will be increased by.",
              "code": "count = 1",
              "start": {
                "line": 226,
                "column": 41
              },
              "end": {
                "line": 226,
                "column": 50
              },
              "flags": [],
              "authors": [],
              "default": " 1",
              "datatype": "number",
              "required": false,
              "enum": null
            },
            "value ": {
              "type": "argument",
              "label": "value ",
              "description": "The number of events the max listener account will be increased by.",
              "code": "increaseMaxListeners: NGN.private((count = 1) => {\r\n        this.setMaxListeners(this.getMaxListeners() + count)\r\n      })",
              "start": {
                "line": 226,
                "column": 6
              },
              "end": {
                "line": 228,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": " 1",
              "datatype": "number",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "init",
          "computed": false,
          "super": "NGN.EventEmitter#increaseMaxListeners",
          "override": false,
          "private": true
        },
        "decreaseMaxListeners": {
          "type": "method",
          "label": "decreaseMaxListeners",
          "description": "Decrease the number of maximum listeners.",
          "code": "decreaseMaxListeners: NGN.private((count = 1) => {\r\n        this.setMaxListeners(this.getMaxListeners() - count)\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 237,
            "column": 6
          },
          "end": {
            "line": 239,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "count": {
              "type": "argument",
              "label": "value ",
              "description": "The number of events the max listener account will be decreased by.",
              "code": "count = 1",
              "start": {
                "line": 237,
                "column": 41
              },
              "end": {
                "line": 237,
                "column": 50
              },
              "flags": [],
              "authors": [],
              "default": " 1",
              "datatype": "number",
              "required": false,
              "enum": null
            },
            "value ": {
              "type": "argument",
              "label": "value ",
              "description": "The number of events the max listener account will be decreased by.",
              "code": "decreaseMaxListeners: NGN.private((count = 1) => {\r\n        this.setMaxListeners(this.getMaxListeners() - count)\r\n      })",
              "start": {
                "line": 237,
                "column": 6
              },
              "end": {
                "line": 239,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": " 1",
              "datatype": "number",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "init",
          "computed": false,
          "super": "NGN.EventEmitter#decreaseMaxListeners",
          "override": false,
          "private": true
        },
        "forward": {
          "type": "method",
          "label": "forward",
          "description": "A special subscriber that fires one or more event in response to\nto an event. This is used to bubble events up/down an event chain.\n\nFor example:\n\n```js\nNGN.BUS.forward\n```\nWhen `sourceEvent` is published, the bind method triggers `someEvent` and\n`anotherEvent`, passing the payload object to `someEvent` and\n`anotherEvent` subscribers simultaneously.\n\nTo forward an event to another EventEmitter, see #relay.",
          "code": "forward: NGN.const(function (eventName, triggers, payload) {\r\n        triggers = NGN.forceArray(triggers)\r\n\r\n        let me = this\r\n        let listener = function () {\r\n          let args = NGN.slice(arguments)\r\n\r\n          if (payload) {\r\n            args.push(payload)\r\n          }\r\n\r\n          me.emit(triggers, ...args)\r\n        }\r\n\r\n        this.increaseMaxListeners()\r\n        this.on(eventName, listener)\r\n\r\n        // Provide handle back for removal of topic\r\n        return {\r\n          remove: () => {\r\n            this.decreaseMaxListeners()\r\n            this.off(eventName, listener)\r\n          }\r\n        }\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 265,
            "column": 6
          },
          "end": {
            "line": 289,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "eventName": {
              "type": "argument",
              "label": "eventName",
              "description": "The name of the event to listen for.",
              "code": "relayOnce: NGN.const(function (eventName, targetEmitter, prefix = null, postfix = null) {\r\n        let eventNameList = NGN.forceArray(eventName)\r\n\r\n        for (let i = 0; i < eventNameList.length; i++) {\r\n          let eventName = eventNameList[i]\r\n\r\n          this.once(eventName, function () {\r\n            if (NGN.typeof(this.event) === 'symbol') {\r\n              if (prefix !== null || postfix !== null) {\r\n                NGN.INFO('Cannot relay a symbol-based event with a prefix/postfix.')\r\n              }\r\n\r\n              targetEmitter.emit(...arguments)\r\n            } else {\r\n              targetEmitter.emit(`${NGN.coalesce(prefix, '')}${this.event}${NGN.coalesce(postfix, '')}`, ...arguments)\r\n            }\r\n          })\r\n        }\r\n      })",
              "start": {
                "line": 361,
                "column": 6
              },
              "end": {
                "line": 379,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "triggers": {
              "type": "argument",
              "label": "triggeredEvent",
              "description": "An event or array of events to fire in response to the sourceEvent.",
              "code": "triggers",
              "start": {
                "line": 265,
                "column": 46
              },
              "end": {
                "line": 265,
                "column": 54
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string|array",
              "required": true,
              "enum": null
            },
            "payload": {
              "type": "argument",
              "label": "data",
              "description": "Optional data to pass to each bound event handler.",
              "code": "payload",
              "start": {
                "line": 265,
                "column": 56
              },
              "end": {
                "line": 265,
                "column": 63
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "any",
              "required": true,
              "enum": null
            },
            "sourceEvent": {
              "type": "argument",
              "label": "sourceEvent",
              "description": "The event to subscribe to.",
              "code": "forward: NGN.const(function (eventName, triggers, payload) {\r\n        triggers = NGN.forceArray(triggers)\r\n\r\n        let me = this\r\n        let listener = function () {\r\n          let args = NGN.slice(arguments)\r\n\r\n          if (payload) {\r\n            args.push(payload)\r\n          }\r\n\r\n          me.emit(triggers, ...args)\r\n        }\r\n\r\n        this.increaseMaxListeners()\r\n        this.on(eventName, listener)\r\n\r\n        // Provide handle back for removal of topic\r\n        return {\r\n          remove: () => {\r\n            this.decreaseMaxListeners()\r\n            this.off(eventName, listener)\r\n          }\r\n        }\r\n      })",
              "start": {
                "line": 265,
                "column": 6
              },
              "end": {
                "line": 289,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "triggeredEvent": {
              "type": "argument",
              "label": "triggeredEvent",
              "description": "An event or array of events to fire in response to the sourceEvent.",
              "code": "forward: NGN.const(function (eventName, triggers, payload) {\r\n        triggers = NGN.forceArray(triggers)\r\n\r\n        let me = this\r\n        let listener = function () {\r\n          let args = NGN.slice(arguments)\r\n\r\n          if (payload) {\r\n            args.push(payload)\r\n          }\r\n\r\n          me.emit(triggers, ...args)\r\n        }\r\n\r\n        this.increaseMaxListeners()\r\n        this.on(eventName, listener)\r\n\r\n        // Provide handle back for removal of topic\r\n        return {\r\n          remove: () => {\r\n            this.decreaseMaxListeners()\r\n            this.off(eventName, listener)\r\n          }\r\n        }\r\n      })",
              "start": {
                "line": 265,
                "column": 6
              },
              "end": {
                "line": 289,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string|array",
              "required": true,
              "enum": null
            },
            "data": {
              "type": "argument",
              "label": "data",
              "description": "Optional data to pass to each bound event handler.",
              "code": "forward: NGN.const(function (eventName, triggers, payload) {\r\n        triggers = NGN.forceArray(triggers)\r\n\r\n        let me = this\r\n        let listener = function () {\r\n          let args = NGN.slice(arguments)\r\n\r\n          if (payload) {\r\n            args.push(payload)\r\n          }\r\n\r\n          me.emit(triggers, ...args)\r\n        }\r\n\r\n        this.increaseMaxListeners()\r\n        this.on(eventName, listener)\r\n\r\n        // Provide handle back for removal of topic\r\n        return {\r\n          remove: () => {\r\n            this.decreaseMaxListeners()\r\n            this.off(eventName, listener)\r\n          }\r\n        }\r\n      })",
              "start": {
                "line": 265,
                "column": 6
              },
              "end": {
                "line": 289,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "any",
              "required": true,
              "enum": null
            },
            "targetEmitter": {
              "type": "argument",
              "label": "targetEmitter",
              "description": "The emitter to relay the event to.",
              "code": "relayOnce: NGN.const(function (eventName, targetEmitter, prefix = null, postfix = null) {\r\n        let eventNameList = NGN.forceArray(eventName)\r\n\r\n        for (let i = 0; i < eventNameList.length; i++) {\r\n          let eventName = eventNameList[i]\r\n\r\n          this.once(eventName, function () {\r\n            if (NGN.typeof(this.event) === 'symbol') {\r\n              if (prefix !== null || postfix !== null) {\r\n                NGN.INFO('Cannot relay a symbol-based event with a prefix/postfix.')\r\n              }\r\n\r\n              targetEmitter.emit(...arguments)\r\n            } else {\r\n              targetEmitter.emit(`${NGN.coalesce(prefix, '')}${this.event}${NGN.coalesce(postfix, '')}`, ...arguments)\r\n            }\r\n          })\r\n        }\r\n      })",
              "start": {
                "line": 361,
                "column": 6
              },
              "end": {
                "line": 379,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "ngn.eventemitter",
              "required": true,
              "enum": null
            },
            "prefix": {
              "type": "argument",
              "label": "prefix",
              "description": "An optional prefix to prepend to the eventName.",
              "code": "relayOnce: NGN.const(function (eventName, targetEmitter, prefix = null, postfix = null) {\r\n        let eventNameList = NGN.forceArray(eventName)\r\n\r\n        for (let i = 0; i < eventNameList.length; i++) {\r\n          let eventName = eventNameList[i]\r\n\r\n          this.once(eventName, function () {\r\n            if (NGN.typeof(this.event) === 'symbol') {\r\n              if (prefix !== null || postfix !== null) {\r\n                NGN.INFO('Cannot relay a symbol-based event with a prefix/postfix.')\r\n              }\r\n\r\n              targetEmitter.emit(...arguments)\r\n            } else {\r\n              targetEmitter.emit(`${NGN.coalesce(prefix, '')}${this.event}${NGN.coalesce(postfix, '')}`, ...arguments)\r\n            }\r\n          })\r\n        }\r\n      })",
              "start": {
                "line": 361,
                "column": 6
              },
              "end": {
                "line": 379,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": false,
              "enum": null
            },
            "postfix": {
              "type": "argument",
              "label": "postfix",
              "description": "An optional postfix to append to the eventName.",
              "code": "relayOnce: NGN.const(function (eventName, targetEmitter, prefix = null, postfix = null) {\r\n        let eventNameList = NGN.forceArray(eventName)\r\n\r\n        for (let i = 0; i < eventNameList.length; i++) {\r\n          let eventName = eventNameList[i]\r\n\r\n          this.once(eventName, function () {\r\n            if (NGN.typeof(this.event) === 'symbol') {\r\n              if (prefix !== null || postfix !== null) {\r\n                NGN.INFO('Cannot relay a symbol-based event with a prefix/postfix.')\r\n              }\r\n\r\n              targetEmitter.emit(...arguments)\r\n            } else {\r\n              targetEmitter.emit(`${NGN.coalesce(prefix, '')}${this.event}${NGN.coalesce(postfix, '')}`, ...arguments)\r\n            }\r\n          })\r\n        }\r\n      })",
              "start": {
                "line": 361,
                "column": 6
              },
              "end": {
                "line": 379,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": false,
              "enum": null
            }
          },
          "returnType": "Object",
          "returnDescription": "null Returns an object with a single `remove` method.",
          "kind": "init",
          "computed": false,
          "super": "NGN.EventEmitter#forward",
          "override": false,
          "private": false
        },
        "delayEmit": {
          "type": "method",
          "label": "delayEmit",
          "description": "This method waits for the specified duration, then publishes an\nevent once. This will publish the event only once at the end of the\nwait period, even if the event is triggered multiple times. This can\nbe useful when working with many events triggered in rapid succession.\n\nFor example, an NGN.DATA.Model representing a person may be used to\ntrack a user profile. The NGN.DATA.Model fires an event called `field.update`\nevery time a data field is modified. In many cases, a user may update\nmultiple fields of their profile using a form with a \"Save\" button.\nInstead of generating a new \"save\" \noperation for each field, the publishOnce event can wait until all\nchanges are made before running the save operation.\n\n```js\n// Create a data model representing a person.\nvar Person = new NGN.DATA.Model({....})\n\n// Create a new person record for a user.\nvar user = new Person()\n\n// When the user is modified, save the data.\nuser.on('field.update', function () {\n// Wait 300 milliseconds to trigger the save event\nNGN.BUS.delayEmit('user.save', 300)\n})\n\n// Save the user using an API\nNGN.BUS.on('user.save', function () {\nNGN.NET.put({\nurl: 'https://my.api.com/user',\njson: user.data\n})\n})\n\n// Modify the record attributes (which are blank by default)\nuser.firstname = 'John'\nuser.lastname = 'Doe'\nuser.age = 42\n\n// Make another update 1 second later\nsetTimeout(function () {\nuser.age = 32\n}, 1000)\n```\n\nThe code above sets up a model and record. Then it listens to the record\nfor field updates. Each time it recognizes an update, it queues the \"save\"\nevent. When the queue matures, it fires the `user.save` event.\n\nThe first `field.update` is triggered when `user.firstname = 'John'` runs.\nThis initiates a queue for `user.save`, set to mature in 300 millisenconds.\nNext, a `field.update` is triggered when `user.lastname = 'Doe'` runs.\nThis time, since the queue for `user.save` is already initiated, notthing\nnew happens. Finally, a `field.update` is triggered when `user.age = 42`\nruns. Just like the last one, nothing happens since the `user.save` queue\nis already active.\n\nThe `user.save` queue \"matures\" after 300 milliseconds. This means after\n300 milliseconds have elapsed, the `user.save` event is triggered. In this\nexample, it means the `NGN.NET.put()` code will be executed. As a result,\nall 3 change (firstname, lastname, and age) will be complete before the\nAPI request is executed. The queue is cleared immediately.\n\nThe final update occurs 1 second later (700 milliseconds after the queue\nmatures). This triggers a `field.update`, but since the queue is no\nlonger active, it is re-initiated. 300 milliseconds later, the `user.save`\nevent is fired again, thus executing the API request again (1.3 seconds\nin total).",
          "code": "delayEmit: NGN.const(function (eventName, delay) {\r\n        if (!this.META.queued.hasOwnProperty(eventName)) {\r\n          let args = NGN.slice(arguments)\r\n          args.splice(1, 1)\r\n\r\n          this.META.queued[eventName] = setTimeout(() => {\r\n            delete this.META.queued[eventName]\r\n            this.emit(...args)\r\n          }, delay)\r\n        }\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 458,
            "column": 6
          },
          "end": {
            "line": 468,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "eventName": {
              "type": "argument",
              "label": "eventName",
              "description": "The event/topic to publish/emit.",
              "code": "delayEmit: NGN.const(function (eventName, delay) {\r\n        if (!this.META.queued.hasOwnProperty(eventName)) {\r\n          let args = NGN.slice(arguments)\r\n          args.splice(1, 1)\r\n\r\n          this.META.queued[eventName] = setTimeout(() => {\r\n            delete this.META.queued[eventName]\r\n            this.emit(...args)\r\n          }, delay)\r\n        }\r\n      })",
              "start": {
                "line": 458,
                "column": 6
              },
              "end": {
                "line": 468,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "delay": {
              "type": "argument",
              "label": "delay",
              "description": "The number of milliseconds to wait before firing the event.",
              "code": "delayEmit: NGN.const(function (eventName, delay) {\r\n        if (!this.META.queued.hasOwnProperty(eventName)) {\r\n          let args = NGN.slice(arguments)\r\n          args.splice(1, 1)\r\n\r\n          this.META.queued[eventName] = setTimeout(() => {\r\n            delete this.META.queued[eventName]\r\n            this.emit(...args)\r\n          }, delay)\r\n        }\r\n      })",
              "start": {
                "line": 458,
                "column": 6
              },
              "end": {
                "line": 468,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": "300",
              "datatype": "number",
              "required": false,
              "enum": null
            },
            "payload": {
              "type": "argument",
              "label": "payload",
              "description": "An optional payload, such as data to be passed to an event handler.",
              "code": "delayEmit: NGN.const(function (eventName, delay) {\r\n        if (!this.META.queued.hasOwnProperty(eventName)) {\r\n          let args = NGN.slice(arguments)\r\n          args.splice(1, 1)\r\n\r\n          this.META.queued[eventName] = setTimeout(() => {\r\n            delete this.META.queued[eventName]\r\n            this.emit(...args)\r\n          }, delay)\r\n        }\r\n      })",
              "start": {
                "line": 458,
                "column": 6
              },
              "end": {
                "line": 468,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "any",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "init",
          "computed": false,
          "super": "NGN.EventEmitter#delayEmit",
          "override": false,
          "private": false
        },
        "getInternalCollectionId": {
          "type": "method",
          "label": "getInternalCollectionId",
          "description": "Returns a unique ID for special collections.",
          "code": "getInternalCollectionId: NGN.privateconst(function (collection) {\r\n        return Symbol(collection)\r\n        // let time = (new Date()).getTime().toString()\r\n        // let rand = Math.random().toString()\r\n        // let key = Object.keys(collection).length + 1\r\n        //\r\n        // while (collection.hasOwnProperty(`${key.toString()}${time}${rand}`)) {\r\n        //   key++\r\n        // }\r\n        //\r\n        // return `${key.toString()}${time}${rand}`\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 477,
            "column": 6
          },
          "end": {
            "line": 488,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "collection": {
              "type": "argument",
              "label": "collection",
              "description": "The collection to generate an ID for.",
              "code": "getInternalCollectionId: NGN.privateconst(function (collection) {\r\n        return Symbol(collection)\r\n        // let time = (new Date()).getTime().toString()\r\n        // let rand = Math.random().toString()\r\n        // let key = Object.keys(collection).length + 1\r\n        //\r\n        // while (collection.hasOwnProperty(`${key.toString()}${time}${rand}`)) {\r\n        //   key++\r\n        // }\r\n        //\r\n        // return `${key.toString()}${time}${rand}`\r\n      })",
              "start": {
                "line": 477,
                "column": 6
              },
              "end": {
                "line": 488,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "object",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "init",
          "computed": false,
          "super": "NGN.EventEmitter#getInternalCollectionId",
          "override": false,
          "private": true
        },
        "handleCollectionTrigger": {
          "type": "method",
          "label": "handleCollectionTrigger",
          "description": "A method to manage #chain event handlers.",
          "code": "handleCollectionTrigger: NGN.privateconst(function (eventName, key) {\r\n        let me = this\r\n\r\n        return function () {\r\n          // Use setTimeout to simulate nextTick\r\n          setTimeout(() => {\r\n            let cq = me.META.collectionQueue\r\n\r\n            if (cq[key]) {\r\n              cq[key].remainingqueue.delete(eventName)\r\n\r\n              if (cq[key].remainingqueue.size === 0) {\r\n                cq[key].remainingqueue = cq[key].masterqueue\r\n\r\n                if (NGN.isFn(cq[key].eventName)) {\r\n                  cq[key].eventName(cq[key].payload)\r\n                } else {\r\n                  me.emit(cq[key].eventName, cq[key].payload)\r\n                }\r\n              }\r\n            }\r\n          }, 0)\r\n        }\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 495,
            "column": 6
          },
          "end": {
            "line": 518,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "eventName": {
              "type": "argument",
              "label": "eventName",
              "description": null,
              "code": "eventName",
              "start": {
                "line": 495,
                "column": 58
              },
              "end": {
                "line": 495,
                "column": 67
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            },
            "key": {
              "type": "argument",
              "label": "key",
              "description": null,
              "code": "key",
              "start": {
                "line": 495,
                "column": 69
              },
              "end": {
                "line": 495,
                "column": 72
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "init",
          "computed": false,
          "super": "NGN.EventEmitter#handleCollectionTrigger",
          "override": false,
          "private": true
        },
        "funnel": {
          "type": "method",
          "label": "funnel",
          "description": "Emit an event after a collection of unique events have all fired.\nThis can be useful in situations where multiple asynchronous actions\nmust complete before another begins. For example, blending 3\nremote data sources from different API's into a single resultset\ncan be achieved with this.\n\n**Example**\n```js\nlet collection = NGN.BUS.funnel\n\nlet allData = []\n\n// When all of the downloads are done, log them.\nNGN.BUS.on('make.results', () => {\nconsole.log(allData)\n})\n\n// Download the first set of data asynchronously\nNGN.NET.json('http:/download1.com/data.json', (data) => {\nallData.push(data)\nNGN.BUS.emit('download1done')\n})\n\n// Download the second set of data asynchronously\nNGN.NET.json('http:/download2.com/data.json', (data) => {\nallData.push(data)\nNGN.BUS.emit('download2done')\n})\n\n// Download the third set of data asynchronously\nNGN.NET.json('http:/download3.com/data.json', (data) => {\nallData.push(data)\nNGN.BUS.emit('download3done')\n})\n\n// The handler can be removed with the special method:\ncollection.remove()\n```",
          "code": "funnel: NGN.const((eventCollection, triggerEventName, payload = null) => {\r\n        if (NGN.typeof(eventCollection) !== 'array') {\r\n          throw new Error(`NGN.BUS.funnel expected an array of events, but received a(n) ${NGN.typeof(eventCollection)}`)\r\n        }\r\n\r\n        let collection = new Set(eventCollection)\r\n        let key = this.getInternalCollectionId(this.META.collectionQueue)\r\n\r\n        this.META.collectionQueue[key] = {}\r\n\r\n        Object.defineProperties(this.META.collectionQueue[key], {\r\n          masterqueue: NGN.const(new Set(eventCollection)),\r\n          remainingqueue: NGN.private(collection),\r\n          eventName: NGN.const(triggerEventName),\r\n          remove: NGN.const(() => {\r\n            this.META.collectionQueue[key].masterqueue.forEach(event => {\r\n              this.off(event, this.handleCollectionTrigger(event, key))\r\n            })\r\n\r\n            this.decreaseMaxListeners(this.META.collectionQueue[key].masterqueue.size)\r\n\r\n            delete this.META.collectionQueue[key]\r\n          }),\r\n          payload: NGN.const(payload)\r\n        })\r\n\r\n        this.increaseMaxListeners(collection.size)\r\n\r\n        collection.forEach(event => {\r\n          this.on(event, this.handleCollectionTrigger(event, key))\r\n        })\r\n\r\n        return this.META.collectionQueue[key]\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 581,
            "column": 6
          },
          "end": {
            "line": 614,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "triggerEventName": {
              "type": "argument",
              "label": "payload",
              "description": "An optional payload delivered to the #triggerEventName.",
              "code": "triggerEventName",
              "start": {
                "line": 581,
                "column": 25
              },
              "end": {
                "line": 581,
                "column": 40
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "any",
              "required": false,
              "enum": null
            },
            "payload": {
              "type": "argument",
              "label": "payload",
              "description": "An optional payload delivered to the #triggerEventName.",
              "code": "funnel: NGN.const((eventCollection, triggerEventName, payload = null) => {\r\n        if (NGN.typeof(eventCollection) !== 'array') {\r\n          throw new Error(`NGN.BUS.funnel expected an array of events, but received a(n) ${NGN.typeof(eventCollection)}`)\r\n        }\r\n\r\n        let collection = new Set(eventCollection)\r\n        let key = this.getInternalCollectionId(this.META.collectionQueue)\r\n\r\n        this.META.collectionQueue[key] = {}\r\n\r\n        Object.defineProperties(this.META.collectionQueue[key], {\r\n          masterqueue: NGN.const(new Set(eventCollection)),\r\n          remainingqueue: NGN.private(collection),\r\n          eventName: NGN.const(triggerEventName),\r\n          remove: NGN.const(() => {\r\n            this.META.collectionQueue[key].masterqueue.forEach(event => {\r\n              this.off(event, this.handleCollectionTrigger(event, key))\r\n            })\r\n\r\n            this.decreaseMaxListeners(this.META.collectionQueue[key].masterqueue.size)\r\n\r\n            delete this.META.collectionQueue[key]\r\n          }),\r\n          payload: NGN.const(payload)\r\n        })\r\n\r\n        this.increaseMaxListeners(collection.size)\r\n\r\n        collection.forEach(event => {\r\n          this.on(event, this.handleCollectionTrigger(event, key))\r\n        })\r\n\r\n        return this.META.collectionQueue[key]\r\n      })",
              "start": {
                "line": 581,
                "column": 6
              },
              "end": {
                "line": 614,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "any",
              "required": false,
              "enum": null
            },
            "eventCollection": {
              "type": "argument",
              "label": "eventCollection",
              "description": "An array of events. Once _all_ of these events have fired,\nthe triggerEventName will be fired.",
              "code": "funnel: NGN.const((eventCollection, triggerEventName, payload = null) => {\r\n        if (NGN.typeof(eventCollection) !== 'array') {\r\n          throw new Error(`NGN.BUS.funnel expected an array of events, but received a(n) ${NGN.typeof(eventCollection)}`)\r\n        }\r\n\r\n        let collection = new Set(eventCollection)\r\n        let key = this.getInternalCollectionId(this.META.collectionQueue)\r\n\r\n        this.META.collectionQueue[key] = {}\r\n\r\n        Object.defineProperties(this.META.collectionQueue[key], {\r\n          masterqueue: NGN.const(new Set(eventCollection)),\r\n          remainingqueue: NGN.private(collection),\r\n          eventName: NGN.const(triggerEventName),\r\n          remove: NGN.const(() => {\r\n            this.META.collectionQueue[key].masterqueue.forEach(event => {\r\n              this.off(event, this.handleCollectionTrigger(event, key))\r\n            })\r\n\r\n            this.decreaseMaxListeners(this.META.collectionQueue[key].masterqueue.size)\r\n\r\n            delete this.META.collectionQueue[key]\r\n          }),\r\n          payload: NGN.const(payload)\r\n        })\r\n\r\n        this.increaseMaxListeners(collection.size)\r\n\r\n        collection.forEach(event => {\r\n          this.on(event, this.handleCollectionTrigger(event, key))\r\n        })\r\n\r\n        return this.META.collectionQueue[key]\r\n      })",
              "start": {
                "line": 581,
                "column": 6
              },
              "end": {
                "line": 614,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "array",
              "required": true,
              "enum": null
            }
          },
          "returnType": "object",
          "returnDescription": "collection Provides the key/value configuration of the collection.\n```js\n{\nmasterqueue: ['event1', 'event2', 'etc'], // The original event array \nremainingqueue: [...], // The events the BUS is still waiting for before firing the trigger event.\neventName: 'triggeredEventName', // Name of the event triggered after the remaining elements are flushed.\npayload: 'anything', // OPTIONAL\nremove: [Function]\n}\n```",
          "kind": "init",
          "computed": false,
          "super": "NGN.EventEmitter#funnel",
          "override": false,
          "private": false
        },
        "funnelOnce": {
          "type": "method",
          "label": "funnelOnce",
          "description": "This provides the same functionality as #funnel, but\nremoves the listener after the resultant event has fired.\nSee #funnel for detailed usage.",
          "code": "funnelOnce: NGN.const((eventCollection, triggerEventName, payload = null) => {\r\n        let funnelClosureEvent = `::NGNFUNNEL::${(new Date()).getTime()}::${triggerEventName}`\r\n        // let funnelClosureEvent = Symbol(triggerEventName)\r\n        let collection = this.funnel(eventCollection, funnelClosureEvent, payload)\r\n\r\n        this.increaseMaxListeners()\r\n        this.once(funnelClosureEvent, () => {\r\n          collection.remove()\r\n          collection = null\r\n          this.emit(triggerEventName, payload)\r\n        })\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 631,
            "column": 6
          },
          "end": {
            "line": 642,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "eventCollection": {
              "type": "argument",
              "label": "eventCollection",
              "description": "An array of events. Once _all_ of these events have fired,\nthe triggerEventName will be fired.",
              "code": "funnelOnce: NGN.const((eventCollection, triggerEventName, payload = null) => {\r\n        let funnelClosureEvent = `::NGNFUNNEL::${(new Date()).getTime()}::${triggerEventName}`\r\n        // let funnelClosureEvent = Symbol(triggerEventName)\r\n        let collection = this.funnel(eventCollection, funnelClosureEvent, payload)\r\n\r\n        this.increaseMaxListeners()\r\n        this.once(funnelClosureEvent, () => {\r\n          collection.remove()\r\n          collection = null\r\n          this.emit(triggerEventName, payload)\r\n        })\r\n      })",
              "start": {
                "line": 631,
                "column": 6
              },
              "end": {
                "line": 642,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "array",
              "required": true,
              "enum": null
            },
            "triggerEventName": {
              "type": "argument",
              "label": "triggerEventName",
              "description": "The name of the event triggered after the collection has completed.",
              "code": "funnelOnce: NGN.const((eventCollection, triggerEventName, payload = null) => {\r\n        let funnelClosureEvent = `::NGNFUNNEL::${(new Date()).getTime()}::${triggerEventName}`\r\n        // let funnelClosureEvent = Symbol(triggerEventName)\r\n        let collection = this.funnel(eventCollection, funnelClosureEvent, payload)\r\n\r\n        this.increaseMaxListeners()\r\n        this.once(funnelClosureEvent, () => {\r\n          collection.remove()\r\n          collection = null\r\n          this.emit(triggerEventName, payload)\r\n        })\r\n      })",
              "start": {
                "line": 631,
                "column": 6
              },
              "end": {
                "line": 642,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "payload": {
              "type": "argument",
              "label": "payload",
              "description": "An optional payload delivered to the #triggerEventName.",
              "code": "funnelOnce: NGN.const((eventCollection, triggerEventName, payload = null) => {\r\n        let funnelClosureEvent = `::NGNFUNNEL::${(new Date()).getTime()}::${triggerEventName}`\r\n        // let funnelClosureEvent = Symbol(triggerEventName)\r\n        let collection = this.funnel(eventCollection, funnelClosureEvent, payload)\r\n\r\n        this.increaseMaxListeners()\r\n        this.once(funnelClosureEvent, () => {\r\n          collection.remove()\r\n          collection = null\r\n          this.emit(triggerEventName, payload)\r\n        })\r\n      })",
              "start": {
                "line": 631,
                "column": 6
              },
              "end": {
                "line": 642,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "any",
              "required": false,
              "enum": null
            }
          },
          "returnType": "object",
          "returnDescription": "collection Provides the key/value configuration of the collection.",
          "kind": "init",
          "computed": false,
          "super": "NGN.EventEmitter#funnelOnce",
          "override": false,
          "private": false
        },
        "threshold": {
          "type": "method",
          "label": "threshold",
          "description": "After an event is fired a predetermined number of times ,\ntrigger another event or function.\n\nFor example:\n\n```js\nNGN.BUS.threshold('push.my.button', 3, 'annoyed')\n\nNGN.BUS.on('annoyed', function () {\nconsole.log('We apologize for the slow response, but excessive clicking will not speed up the process.')\n})\n\ndocument.getElementById('#myButton').addEventListener('click', NGN.BUS.attach('push.my.button'))\n```\n\nOnce the threshold is exceeded, the final event will be triggered and\nthe threshold will be reset. Using the example above, this means\nclicking 3 times on `#myButton` would trigger the `annoyed` event ONCE,\n6 times triggers `annoyed` TWICE, 9 times triggers `annoyed` THREE times, etc.",
          "code": "threshold: NGN.const(function (thresholdEventName, limit, finalEventName, payload = null) {\r\n        if (typeof thresholdEventName !== 'string') {\r\n          throw new Error('The threshold event name must be a string (received ' + (typeof thresholdEventName) + ')')\r\n        }\r\n\r\n        // let key = `${this.getInternalCollectionId(this.META.thresholdQueue)}${limit.toString()}`\r\n        let key = this.getInternalCollectionId(this.META.thresholdQueue)\r\n\r\n        this.META.thresholdQueue[key] = {}\r\n\r\n        Object.defineProperties(this.META.thresholdQueue[key], {\r\n          key: NGN.const(key),\r\n          eventName: NGN.const(thresholdEventName),\r\n          limit: NGN.const(limit),\r\n          count: NGN.private(0),\r\n          finalEventName: NGN.const(finalEventName),\r\n          remove: NGN.const(() => {\r\n            let event = this.META.thresholdQueue[key].eventName\r\n\r\n            delete this.META.thresholdQueue[key]\r\n\r\n            this.decreaseMaxListeners()\r\n            this.off(event, this.handleThresholdTrigger(key))\r\n          }),\r\n          payload: NGN.const(payload)\r\n        })\r\n\r\n        this.increaseMaxListeners()\r\n        this.on(thresholdEventName, this.handleThresholdTrigger(key))\r\n\r\n        return this.META.thresholdQueue[key]\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 681,
            "column": 6
          },
          "end": {
            "line": 712,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "thresholdEventName": {
              "type": "argument",
              "label": "thresholdEventName",
              "description": "The name of the event to count.",
              "code": "threshold: NGN.const(function (thresholdEventName, limit, finalEventName, payload = null) {\r\n        if (typeof thresholdEventName !== 'string') {\r\n          throw new Error('The threshold event name must be a string (received ' + (typeof thresholdEventName) + ')')\r\n        }\r\n\r\n        // let key = `${this.getInternalCollectionId(this.META.thresholdQueue)}${limit.toString()}`\r\n        let key = this.getInternalCollectionId(this.META.thresholdQueue)\r\n\r\n        this.META.thresholdQueue[key] = {}\r\n\r\n        Object.defineProperties(this.META.thresholdQueue[key], {\r\n          key: NGN.const(key),\r\n          eventName: NGN.const(thresholdEventName),\r\n          limit: NGN.const(limit),\r\n          count: NGN.private(0),\r\n          finalEventName: NGN.const(finalEventName),\r\n          remove: NGN.const(() => {\r\n            let event = this.META.thresholdQueue[key].eventName\r\n\r\n            delete this.META.thresholdQueue[key]\r\n\r\n            this.decreaseMaxListeners()\r\n            this.off(event, this.handleThresholdTrigger(key))\r\n          }),\r\n          payload: NGN.const(payload)\r\n        })\r\n\r\n        this.increaseMaxListeners()\r\n        this.on(thresholdEventName, this.handleThresholdTrigger(key))\r\n\r\n        return this.META.thresholdQueue[key]\r\n      })",
              "start": {
                "line": 681,
                "column": 6
              },
              "end": {
                "line": 712,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "finalEventName": {
              "type": "argument",
              "label": "payload",
              "description": "An optional payload to send to the finalEvent handler.",
              "code": "finalEventName",
              "start": {
                "line": 681,
                "column": 57
              },
              "end": {
                "line": 681,
                "column": 62
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "any",
              "required": false,
              "enum": [
                "s"
              ]
            },
            "payload": {
              "type": "argument",
              "label": "payload",
              "description": "An optional payload to send to the finalEvent handler.",
              "code": "threshold: NGN.const(function (thresholdEventName, limit, finalEventName, payload = null) {\r\n        if (typeof thresholdEventName !== 'string') {\r\n          throw new Error('The threshold event name must be a string (received ' + (typeof thresholdEventName) + ')')\r\n        }\r\n\r\n        // let key = `${this.getInternalCollectionId(this.META.thresholdQueue)}${limit.toString()}`\r\n        let key = this.getInternalCollectionId(this.META.thresholdQueue)\r\n\r\n        this.META.thresholdQueue[key] = {}\r\n\r\n        Object.defineProperties(this.META.thresholdQueue[key], {\r\n          key: NGN.const(key),\r\n          eventName: NGN.const(thresholdEventName),\r\n          limit: NGN.const(limit),\r\n          count: NGN.private(0),\r\n          finalEventName: NGN.const(finalEventName),\r\n          remove: NGN.const(() => {\r\n            let event = this.META.thresholdQueue[key].eventName\r\n\r\n            delete this.META.thresholdQueue[key]\r\n\r\n            this.decreaseMaxListeners()\r\n            this.off(event, this.handleThresholdTrigger(key))\r\n          }),\r\n          payload: NGN.const(payload)\r\n        })\r\n\r\n        this.increaseMaxListeners()\r\n        this.on(thresholdEventName, this.handleThresholdTrigger(key))\r\n\r\n        return this.META.thresholdQueue[key]\r\n      })",
              "start": {
                "line": 681,
                "column": 6
              },
              "end": {
                "line": 712,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "any",
              "required": false,
              "enum": [
                "s"
              ]
            },
            "limit": {
              "type": "argument",
              "label": "limit",
              "description": "The number of occurrances allowed until the final event is triggered.\nThe event will be triggered at the threshold. For example, if the limit\nis `3`, the finalEvent will be triggered the 3rd time thresholdEventName is\nfired.",
              "code": "threshold: NGN.const(function (thresholdEventName, limit, finalEventName, payload = null) {\r\n        if (typeof thresholdEventName !== 'string') {\r\n          throw new Error('The threshold event name must be a string (received ' + (typeof thresholdEventName) + ')')\r\n        }\r\n\r\n        // let key = `${this.getInternalCollectionId(this.META.thresholdQueue)}${limit.toString()}`\r\n        let key = this.getInternalCollectionId(this.META.thresholdQueue)\r\n\r\n        this.META.thresholdQueue[key] = {}\r\n\r\n        Object.defineProperties(this.META.thresholdQueue[key], {\r\n          key: NGN.const(key),\r\n          eventName: NGN.const(thresholdEventName),\r\n          limit: NGN.const(limit),\r\n          count: NGN.private(0),\r\n          finalEventName: NGN.const(finalEventName),\r\n          remove: NGN.const(() => {\r\n            let event = this.META.thresholdQueue[key].eventName\r\n\r\n            delete this.META.thresholdQueue[key]\r\n\r\n            this.decreaseMaxListeners()\r\n            this.off(event, this.handleThresholdTrigger(key))\r\n          }),\r\n          payload: NGN.const(payload)\r\n        })\r\n\r\n        this.increaseMaxListeners()\r\n        this.on(thresholdEventName, this.handleThresholdTrigger(key))\r\n\r\n        return this.META.thresholdQueue[key]\r\n      })",
              "start": {
                "line": 681,
                "column": 6
              },
              "end": {
                "line": 712,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "number",
              "required": true,
              "enum": null
            }
          },
          "returnType": "object",
          "returnDescription": "null Returns an object that can be used to remove the threshold.",
          "kind": "init",
          "computed": false,
          "super": "NGN.EventEmitter#threshold",
          "override": false,
          "private": false
        },
        "handleThresholdTrigger": {
          "type": "method",
          "label": "handleThresholdTrigger",
          "description": "A method to manage #threshold event handlers.",
          "code": "handleThresholdTrigger: NGN.const(function (key) {\r\n        let me = this\r\n        return function () {\r\n          // Use setTimeout to simulate nextTick\r\n          setTimeout(() => {\r\n            if (me.META.thresholdQueue.hasOwnProperty(key)) {\r\n              me.META.thresholdQueue[key].count++\r\n              if (me.META.thresholdQueue[key].count === me.META.thresholdQueue[key].limit) {\r\n                if (NGN.isFn(me.META.thresholdQueue[key].finalEventName)) {\r\n                  me.META.thresholdQueue[key].finalEventName(me.META.thresholdQueue[key].payload)\r\n                } else {\r\n                  me.emit(me.META.thresholdQueue[key].finalEventName, me.META.thresholdQueue[key].payload)\r\n                }\r\n\r\n                // This if statement is required in case the event is removed\r\n                // during the reset process.\r\n                if (me.META.thresholdQueue.hasOwnProperty(key)) {\r\n                  me.META.thresholdQueue[key].count = 0\r\n                }\r\n              }\r\n            }\r\n          }, 0)\r\n        }\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 730,
            "column": 6
          },
          "end": {
            "line": 753,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "key": {
              "type": "argument",
              "label": "key",
              "description": null,
              "code": "key",
              "start": {
                "line": 730,
                "column": 50
              },
              "end": {
                "line": 730,
                "column": 53
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            },
            "eventName": {
              "type": "argument",
              "label": "eventName",
              "description": "The name of the event being scoped.",
              "code": "applyScope: NGN.privateconst((args) => {\r\n        if (NGN.nodelike && args.length > 1) {\r\n          if (args[args.length - 1].listener) {\r\n            args[args.length - 1].listener = this.wrapEventHandlerWithScope(\r\n              args[0],\r\n              args[args.length - 1].listener\r\n            )\r\n          } else {\r\n            args[args.length - 1] = this.wrapEventHandlerWithScope(\r\n              args[0],\r\n              args[args.length - 1]\r\n            )\r\n          }\r\n        }\r\n      })",
              "start": {
                "line": 791,
                "column": 6
              },
              "end": {
                "line": 805,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "handlerFn": {
              "type": "method",
              "label": "handlerFn",
              "description": "The handler function.",
              "code": "@param {function} handlerFn\nThe handler function.",
              "start": {
                "line": 763,
                "column": 6
              },
              "end": {
                "line": 781,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "arguments": {},
              "returnType": "void",
              "returnDescription": "void",
              "kind": null,
              "generator": false,
              "static": false,
              "computed": false,
              "async": false,
              "super": null,
              "override": false,
              "private": false
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "init",
          "computed": false,
          "super": "NGN.EventEmitter#handleThresholdTrigger",
          "override": false,
          "private": false
        },
        "clear": {
          "type": "method",
          "label": "clear",
          "description": "Remove all event handlers from the EventEmitter (both regular and adhoc).\r\n  This is a shortcut for #removeAllListeners.",
          "code": "clear () {\r\n    let events = NGN.slice(arguments)\r\n\r\n    if (events.length === 0) {\r\n      this.META.wildcardEvents.clear()\r\n\r\n      let symbolEvents = []\r\n\r\n      if (NGN.nodelike) {\r\n        symbolEvents = Object.getOwnPropertySymbols(this._events)\r\n      } else {\r\n        symbolEvents = Object.getOwnPropertySymbols(this.adhoc)\r\n        symbolEvents = symbolEvents.concat(Object.getOwnPropertySymbols(this.handlers))\r\n      }\r\n\r\n      for (let i = 0; i < symbolEvents.length; i++) {\r\n        this.removeAllListeners(symbolEvents[i])\r\n      }\r\n\r\n      return this.removeAllListeners()\r\n    }\r\n\r\n    for (let i = 0; i < events.length; i++) {\r\n      this.META.wildcardEvents.delete(events[i])\r\n      this.removeAllListeners(events[i])\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 813,
            "column": 2
          },
          "end": {
            "line": 839,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": "NGN.EventEmitter#clear",
          "override": false,
          "private": false
        },
        "eventHandler": {
          "type": "method",
          "label": "eventHandler",
          "description": "Internal method used to handle TTL and wildcard management.",
          "code": "eventHandler (eventName, callback, ttl, prepend = false) {\r\n    if (NGN.typeof(ttl) === 'boolean') {\r\n      prepend = ttl\r\n      ttl = this.META.defaultTTL\r\n    }\r\n\r\n    if (ttl === undefined) {\r\n      ttl = this.META.defaultTTL\r\n    }\r\n\r\n    if (ttl > 0) {\r\n      setTimeout(() => this.off(eventName, callback), ttl)\r\n    }\r\n\r\n    if (typeof eventName === 'string' && eventName.indexOf('*') >= 0) {\r\n      this.META.wildcardEvents.add(eventName)\r\n    }\r\n\r\n    return prepend\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 845,
            "column": 2
          },
          "end": {
            "line": 864,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "eventName": {
              "type": "argument",
              "label": "eventName",
              "description": null,
              "code": "eventName",
              "start": {
                "line": 845,
                "column": 16
              },
              "end": {
                "line": 845,
                "column": 25
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            },
            "callback": {
              "type": "argument",
              "label": "callback",
              "description": null,
              "code": "callback",
              "start": {
                "line": 845,
                "column": 27
              },
              "end": {
                "line": 845,
                "column": 35
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            },
            "ttl": {
              "type": "argument",
              "label": "ttl",
              "description": null,
              "code": "ttl",
              "start": {
                "line": 845,
                "column": 37
              },
              "end": {
                "line": 845,
                "column": 40
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            },
            "prepend": {
              "type": "argument",
              "label": "prepend",
              "description": null,
              "code": "prepend = false",
              "start": {
                "line": 845,
                "column": 42
              },
              "end": {
                "line": 845,
                "column": 57
              },
              "flags": [],
              "authors": [],
              "default": false,
              "datatype": "boolean",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": "NGN.EventEmitter#eventHandler",
          "override": false,
          "private": true
        },
        "on": {
          "type": "method",
          "label": "on",
          "description": "Create a new event handler for the specified event.",
          "code": "on (eventName, callback, ttl, prepend = false) {\r\n    if (NGN.typeof(eventName) === 'array') {\r\n      for (let i = 0; i < eventName.length; i++) {\r\n        this.on(eventName[i], callback, ttl, prepend)\r\n      }\r\n\r\n      return\r\n    }\r\n\r\n    if (this.eventHandler(...arguments)) {\r\n      this.prependListener(eventName, callback)\r\n    } else {\r\n      this.addListener(eventName, callback)\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 884,
            "column": 2
          },
          "end": {
            "line": 898,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "eventName": {
              "type": "argument",
              "label": "eventName",
              "description": "Name of the event to listen for.\nIf an object is passed, this method will automatically setup a #pool.",
              "code": "eventName",
              "start": {
                "line": 884,
                "column": 6
              },
              "end": {
                "line": 884,
                "column": 15
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string|string[]|object",
              "required": true,
              "enum": null
            },
            "handler": {
              "type": "method",
              "label": "handler",
              "description": "The method responsible for responding to the event.\nThis is ignored if eventName is an object.",
              "code": "@param {function} handler\nThe method responsible for responding to the event.\nThis is ignored if eventName is an object.",
              "start": {
                "line": 884,
                "column": 2
              },
              "end": {
                "line": 898,
                "column": 3
              },
              "flags": [],
              "authors": [],
              "arguments": {},
              "returnType": "void",
              "returnDescription": "void",
              "kind": null,
              "generator": false,
              "static": false,
              "computed": false,
              "async": false,
              "super": null,
              "override": false,
              "private": false
            },
            "ttl": {
              "type": "argument",
              "label": "TTL",
              "description": "Time-To-Live is the number of milliseconds before the event handler\nis automatically removed. This is useful for automatically cleaning\nup limited-life event handlers.",
              "code": "ttl",
              "start": {
                "line": 884,
                "column": 27
              },
              "end": {
                "line": 884,
                "column": 30
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "number",
              "required": false,
              "enum": null
            },
            "prepend": {
              "type": "argument",
              "label": "prepend",
              "description": "When set to `true`, the event is added to the beginning of\nthe processing list instead of the end.\nThis is ignored if eventName is an object.",
              "code": "prepend = false",
              "start": {
                "line": 884,
                "column": 32
              },
              "end": {
                "line": 884,
                "column": 47
              },
              "flags": [],
              "authors": [],
              "default": "false",
              "datatype": "boolean",
              "required": false,
              "enum": null
            },
            "TTL": {
              "type": "argument",
              "label": "TTL",
              "description": "Time-To-Live is the number of milliseconds before the event handler\nis automatically removed. This is useful for automatically cleaning\nup limited-life event handlers.",
              "code": "ttl",
              "start": {
                "line": 884,
                "column": 27
              },
              "end": {
                "line": 884,
                "column": 30
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "number",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": "NGN.EventEmitter#on",
          "override": false,
          "private": false
        },
        "once": {
          "type": "method",
          "label": "once",
          "description": "Create a new event handler for the specified event. The\nhandler will be removed immediately after it is executed. This\neffectively listens for an event to happen once and only once\nbefore the handler is destroyed.",
          "code": "once (eventName, callback, ttl, prepend = false) {\r\n    if (NGN.typeof(eventName) === 'array') {\r\n      for (let i = 0; i < eventName.length; i++) {\r\n        this.once(eventName[i], callback, ttl, prepend)\r\n      }\r\n\r\n      return\r\n    }\r\n\r\n    if (this.eventHandler(...arguments)) {\r\n      this.prependOnceListener(eventName, callback)\r\n    } else {\r\n      super.once(eventName, this.wrapEventHandlerWithScope(eventName, callback))\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 914,
            "column": 2
          },
          "end": {
            "line": 928,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "eventName": {
              "type": "argument",
              "label": "eventName",
              "description": "Name of the event to listen for.",
              "code": "eventName",
              "start": {
                "line": 914,
                "column": 8
              },
              "end": {
                "line": 914,
                "column": 17
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "callback": {
              "type": "argument",
              "label": "handler",
              "description": "The method responsible for responding to the event.",
              "code": "callback",
              "start": {
                "line": 914,
                "column": 19
              },
              "end": {
                "line": 914,
                "column": 27
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "function",
              "required": true,
              "enum": null
            },
            "ttl": {
              "type": "argument",
              "label": "prepend",
              "description": "When set to `true`, the event is added to the beginning of\nthe processing list instead of the end.",
              "code": "ttl",
              "start": {
                "line": 914,
                "column": 29
              },
              "end": {
                "line": 914,
                "column": 32
              },
              "flags": [],
              "authors": [],
              "default": "false",
              "datatype": "boolean",
              "required": false,
              "enum": null
            },
            "prepend": {
              "type": "argument",
              "label": "prepend",
              "description": "When set to `true`, the event is added to the beginning of\nthe processing list instead of the end.",
              "code": "ttl",
              "start": {
                "line": 914,
                "column": 29
              },
              "end": {
                "line": 914,
                "column": 32
              },
              "flags": [],
              "authors": [],
              "default": "false",
              "datatype": "boolean",
              "required": false,
              "enum": null
            },
            "handler": {
              "type": "argument",
              "label": "handler",
              "description": "The method responsible for responding to the event.",
              "code": "callback",
              "start": {
                "line": 914,
                "column": 19
              },
              "end": {
                "line": 914,
                "column": 27
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "function",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": "NGN.EventEmitter#once",
          "override": false,
          "private": false
        },
        "prependListener": {
          "type": "method",
          "label": "prependListener",
          "description": null,
          "code": "prependListener () {\r\n    this.applyScope(arguments)\r\n    super.prependListener(...arguments)\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 931,
            "column": 2
          },
          "end": {
            "line": 934,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": "NGN.EventEmitter#prependListener",
          "override": false,
          "private": false
        },
        "prependOnceListener": {
          "type": "method",
          "label": "prependOnceListener",
          "description": null,
          "code": "prependOnceListener () {\r\n    this.applyScope(arguments)\r\n    super.prependOnceListener(...arguments)\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 936,
            "column": 2
          },
          "end": {
            "line": 939,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": "NGN.EventEmitter#prependOnceListener",
          "override": false,
          "private": false
        },
        "addListener": {
          "type": "method",
          "label": "addListener",
          "description": null,
          "code": "addListener () {\r\n    this.applyScope(arguments)\r\n    super.addListener(...arguments)\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 941,
            "column": 2
          },
          "end": {
            "line": 944,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": "NGN.EventEmitter#addListener",
          "override": false,
          "private": false
        },
        "removeListener": {
          "type": "method",
          "label": "removeListener",
          "description": null,
          "code": "removeListener () {\r\n    if (arguments[arguments.length - 1] !== true) {\r\n      this.applyScope(arguments)\r\n    }\r\n\r\n    super.removeListener(...arguments)\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 946,
            "column": 2
          },
          "end": {
            "line": 952,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": "NGN.EventEmitter#removeListener",
          "override": false,
          "private": false
        },
        "emit": {
          "type": "method",
          "label": "emit",
          "description": "Emits an event.",
          "code": "emit () {\r\n    if (NGN.typeof(arguments[0]) === 'array') {\r\n      let args = NGN.slice(arguments)\r\n      let eventNames = args.shift()\r\n\r\n      for (let i = 0; i < eventNames.length; i++) {\r\n        this.emit(eventNames[i], ...args)\r\n      }\r\n\r\n      return\r\n    }\r\n\r\n    // This catches non-string event names. NGN internally uses Symbols\r\n    // for the NGN.WARN/INFO/ERROR event names to prevent name collisions.\r\n    // This check provides support for these special events. These types\r\n    // of events will never have wildcards.\r\n    if (!NGN.nodelike || !arguments[0] || this.META.wildcardEvents.size === 0) {\r\n      super.emit(...arguments)\r\n      return\r\n    }\r\n\r\n    if (NGN.nodelike && typeof arguments[0] === 'symbol') {\r\n      super.emit(...arguments)\r\n      return\r\n    }\r\n\r\n    /**\r\n     * The NGN browser-based event emitter supports wildcards natively, but\r\n     * Node.js does not. This adds simple wildcard support for Node. The\r\n     * only wildcard character supported at this time is `*`. This feature\r\n     * will check the event name for the existance of a wildcard. If a\r\n     * wilcard character is present, the internally-maintained list of\r\n     * wildcard events is checked to see if it's a known event. If none\r\n     * of these checks pass, the standard event emitter is used, otherwise\r\n     * special wildcard handling is used.\r\n     */\r\n    let iterator = this.META.wildcardEvents.values()\r\n    let currentEvent = null\r\n    let args = NGN.slice(arguments)\r\n\r\n    args.shift()\r\n\r\n    while (currentEvent === null || !currentEvent.done) {\r\n      if (currentEvent !== null && currentEvent.value !== arguments[0]) {\r\n        let pattern = new RegExp(currentEvent.value.replace(/\\./g, '\\\\.').replace(/\\*/g, '.*'), 'g')\r\n\r\n        if (pattern.test(arguments[0])) {\r\n          super.emit(currentEvent.value, ...args, typeof arguments[0] !== 'symbol' ? Symbol(arguments[0]) : arguments[0])\r\n          break\r\n        }\r\n      }\r\n\r\n      currentEvent = iterator.next()\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 964,
            "column": 2
          },
          "end": {
            "line": 1018,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "eventName": {
              "type": "argument",
              "label": "eventName",
              "description": "The event name can be a string or an array of strings. If an array\nof strings is specified, an event will be fired for each event name\nwithin the array.",
              "code": "emit () {\r\n    if (NGN.typeof(arguments[0]) === 'array') {\r\n      let args = NGN.slice(arguments)\r\n      let eventNames = args.shift()\r\n\r\n      for (let i = 0; i < eventNames.length; i++) {\r\n        this.emit(eventNames[i], ...args)\r\n      }\r\n\r\n      return\r\n    }\r\n\r\n    // This catches non-string event names. NGN internally uses Symbols\r\n    // for the NGN.WARN/INFO/ERROR event names to prevent name collisions.\r\n    // This check provides support for these special events. These types\r\n    // of events will never have wildcards.\r\n    if (!NGN.nodelike || !arguments[0] || this.META.wildcardEvents.size === 0) {\r\n      super.emit(...arguments)\r\n      return\r\n    }\r\n\r\n    if (NGN.nodelike && typeof arguments[0] === 'symbol') {\r\n      super.emit(...arguments)\r\n      return\r\n    }\r\n\r\n    /**\r\n     * The NGN browser-based event emitter supports wildcards natively, but\r\n     * Node.js does not. This adds simple wildcard support for Node. The\r\n     * only wildcard character supported at this time is `*`. This feature\r\n     * will check the event name for the existance of a wildcard. If a\r\n     * wilcard character is present, the internally-maintained list of\r\n     * wildcard events is checked to see if it's a known event. If none\r\n     * of these checks pass, the standard event emitter is used, otherwise\r\n     * special wildcard handling is used.\r\n     */\r\n    let iterator = this.META.wildcardEvents.values()\r\n    let currentEvent = null\r\n    let args = NGN.slice(arguments)\r\n\r\n    args.shift()\r\n\r\n    while (currentEvent === null || !currentEvent.done) {\r\n      if (currentEvent !== null && currentEvent.value !== arguments[0]) {\r\n        let pattern = new RegExp(currentEvent.value.replace(/\\./g, '\\\\.').replace(/\\*/g, '.*'), 'g')\r\n\r\n        if (pattern.test(arguments[0])) {\r\n          super.emit(currentEvent.value, ...args, typeof arguments[0] !== 'symbol' ? Symbol(arguments[0]) : arguments[0])\r\n          break\r\n        }\r\n      }\r\n\r\n      currentEvent = iterator.next()\r\n    }\r\n  }",
              "start": {
                "line": 964,
                "column": 2
              },
              "end": {
                "line": 1018,
                "column": 3
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string[]",
              "required": true,
              "enum": null
            },
            "payload": {
              "type": "argument",
              "label": "payload",
              "description": "An optional payload. This can be any number of additional arguments.",
              "code": "emit () {\r\n    if (NGN.typeof(arguments[0]) === 'array') {\r\n      let args = NGN.slice(arguments)\r\n      let eventNames = args.shift()\r\n\r\n      for (let i = 0; i < eventNames.length; i++) {\r\n        this.emit(eventNames[i], ...args)\r\n      }\r\n\r\n      return\r\n    }\r\n\r\n    // This catches non-string event names. NGN internally uses Symbols\r\n    // for the NGN.WARN/INFO/ERROR event names to prevent name collisions.\r\n    // This check provides support for these special events. These types\r\n    // of events will never have wildcards.\r\n    if (!NGN.nodelike || !arguments[0] || this.META.wildcardEvents.size === 0) {\r\n      super.emit(...arguments)\r\n      return\r\n    }\r\n\r\n    if (NGN.nodelike && typeof arguments[0] === 'symbol') {\r\n      super.emit(...arguments)\r\n      return\r\n    }\r\n\r\n    /**\r\n     * The NGN browser-based event emitter supports wildcards natively, but\r\n     * Node.js does not. This adds simple wildcard support for Node. The\r\n     * only wildcard character supported at this time is `*`. This feature\r\n     * will check the event name for the existance of a wildcard. If a\r\n     * wilcard character is present, the internally-maintained list of\r\n     * wildcard events is checked to see if it's a known event. If none\r\n     * of these checks pass, the standard event emitter is used, otherwise\r\n     * special wildcard handling is used.\r\n     */\r\n    let iterator = this.META.wildcardEvents.values()\r\n    let currentEvent = null\r\n    let args = NGN.slice(arguments)\r\n\r\n    args.shift()\r\n\r\n    while (currentEvent === null || !currentEvent.done) {\r\n      if (currentEvent !== null && currentEvent.value !== arguments[0]) {\r\n        let pattern = new RegExp(currentEvent.value.replace(/\\./g, '\\\\.').replace(/\\*/g, '.*'), 'g')\r\n\r\n        if (pattern.test(arguments[0])) {\r\n          super.emit(currentEvent.value, ...args, typeof arguments[0] !== 'symbol' ? Symbol(arguments[0]) : arguments[0])\r\n          break\r\n        }\r\n      }\r\n\r\n      currentEvent = iterator.next()\r\n    }\r\n  }",
              "start": {
                "line": 964,
                "column": 2
              },
              "end": {
                "line": 1018,
                "column": 3
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "any",
              "required": false,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": "NGN.EventEmitter#emit",
          "override": false,
          "private": false
        }
      }
    },
    "CustomException": {
      "type": "class",
      "label": "CustomException",
      "description": null,
      "code": "class CustomException extends Error { // eslint-disable-line\r\n  constructor (config) {\r\n    super()\r\n\r\n    Object.defineProperty(this, 'frameFilter', NGN.privateconst((frame) => {\r\n      return NGN.nodelike\r\n        ? frame.getFileName() !== __filename && frame.getFileName()\r\n        : frame.getFileName()\r\n    }))\r\n\r\n    config = config || {}\r\n    config = typeof config === 'string' ? { message: config } : config\r\n    config.custom = config.custom || {}\r\n\r\n    let me = this\r\n\r\n    this.name = config.name || 'NgnError'\r\n    this.type = config.type || 'TypeError'\r\n    this.severity = config.severity || 'minor'\r\n    this.message = config.message || 'Unknown Error'\r\n    this.category = config.category || 'operational' // Alternative is \"programmer\"\r\n\r\n    // Cleanup name\r\n    this.name = this.name.replace(/[^a-zA-Z0-9_]/gi, '')\r\n\r\n    // Add any custom properties\r\n    for (let attr in config.custom) {\r\n      if (config.custom.hasOwnProperty(attr)) {\r\n        this[attr] = config.custom[attr]\r\n      }\r\n    }\r\n\r\n    this.hasOwnProperty('custom') && delete this.custom\r\n\r\n    if (NGN.nodelike || Error.prepareStackTrace) {\r\n      // Capture the stack trace on a new error so the detail can be saved as a structured trace.\r\n      Error.prepareStackTrace = function (_, stack) { return stack }\r\n\r\n      let _err = new Error()\r\n\r\n      Error.captureStackTrace(_err, this)\r\n\r\n      this.rawstack = _err.stack\r\n\r\n      Error.prepareStackTrace = function (err, stack) { // eslint-disable-line handle-callback-err\r\n        me.cause && console.warn(me.cause)\r\n        me.help && console.info(me.help)\r\n\r\n        return `${me.name}: ${me.message}\\n` + stack.filter(me.frameFilter).map((el) => {\r\n          return `    at ${el}`\r\n        }).join('\\n')\r\n      }\r\n\r\n      // Enable stack trace\r\n      Error.captureStackTrace(this)\r\n    }\r\n  }\r\n\r\n  /*\r\n   * @property {Array} trace\r\n   * The structured data of the stacktrace. Each array element is a JSON object corresponding to\r\n   * the full stack trace:\r\n   *\r\n   * ```js\r\n   * {\r\n   *   filename: String,\r\n   *   line: Number,\r\n   *   column: Number,\r\n   *   functionname: String,\r\n   *   native: Boolean,\r\n   *   eval: Boolean,\r\n   *   type: String\r\n   * }\r\n   * ```\r\n   * @readonly\r\n   */\r\n  get trace () {\r\n    return this.rawstack.filter(this.frameFilter).map((frame) => {\r\n      return {\r\n        filename: frame.getFileName(),\r\n        line: frame.getLineNumber(),\r\n        column: frame.getColumnNumber(),\r\n        functionname: frame.getFunctionName(),\r\n        native: frame.isNative(),\r\n        eval: frame.isEval(),\r\n        type: frame.getTypeName()\r\n      }\r\n    })\r\n  }\r\n}",
      "tags": {},
      "exceptions": {},
      "events": {},
      "start": {
        "line": 1,
        "column": 15
      },
      "end": {
        "line": 90,
        "column": 1
      },
      "flags": [],
      "authors": [],
      "sourcefile": "./\\exception.js",
      "extends": "Error",
      "configuration": {},
      "properties": {
        "custom": {
          "type": "property",
          "label": "custom",
          "description": null,
          "code": "config.custom = config.custom || {}",
          "start": {
            "line": 13,
            "column": 11
          },
          "end": {
            "line": 13,
            "column": 17
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "name": {
          "type": "property",
          "label": "name",
          "description": null,
          "code": "this.name = this.name.replace(/[^a-zA-Z0-9_]/gi, '')",
          "start": {
            "line": 24,
            "column": 9
          },
          "end": {
            "line": 24,
            "column": 13
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "type": {
          "type": "property",
          "label": "type",
          "description": null,
          "code": "this.type = config.type || 'TypeError'",
          "start": {
            "line": 18,
            "column": 9
          },
          "end": {
            "line": 18,
            "column": 13
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "severity": {
          "type": "property",
          "label": "severity",
          "description": null,
          "code": "this.severity = config.severity || 'minor'",
          "start": {
            "line": 19,
            "column": 9
          },
          "end": {
            "line": 19,
            "column": 17
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "message": {
          "type": "property",
          "label": "message",
          "description": null,
          "code": "this.message = config.message || 'Unknown Error'",
          "start": {
            "line": 20,
            "column": 9
          },
          "end": {
            "line": 20,
            "column": 16
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "category": {
          "type": "property",
          "label": "category",
          "description": null,
          "code": "this.category = config.category || 'operational'",
          "start": {
            "line": 21,
            "column": 9
          },
          "end": {
            "line": 21,
            "column": 17
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "trace": {
          "type": "property",
          "label": "trace",
          "description": null,
          "code": "get trace () {\r\n    return this.rawstack.filter(this.frameFilter).map((frame) => {\r\n      return {\r\n        filename: frame.getFileName(),\r\n        line: frame.getLineNumber(),\r\n        column: frame.getColumnNumber(),\r\n        functionname: frame.getFunctionName(),\r\n        native: frame.isNative(),\r\n        eval: frame.isEval(),\r\n        type: frame.getTypeName()\r\n      }\r\n    })\r\n  }",
          "start": {
            "line": 77,
            "column": 2
          },
          "end": {
            "line": 89,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        }
      },
      "methods": {
        "constructor": {
          "type": "method",
          "label": "constructor",
          "description": null,
          "code": "constructor (config) {\r\n    super()\r\n\r\n    Object.defineProperty(this, 'frameFilter', NGN.privateconst((frame) => {\r\n      return NGN.nodelike\r\n        ? frame.getFileName() !== __filename && frame.getFileName()\r\n        : frame.getFileName()\r\n    }))\r\n\r\n    config = config || {}\r\n    config = typeof config === 'string' ? { message: config } : config\r\n    config.custom = config.custom || {}\r\n\r\n    let me = this\r\n\r\n    this.name = config.name || 'NgnError'\r\n    this.type = config.type || 'TypeError'\r\n    this.severity = config.severity || 'minor'\r\n    this.message = config.message || 'Unknown Error'\r\n    this.category = config.category || 'operational' // Alternative is \"programmer\"\r\n\r\n    // Cleanup name\r\n    this.name = this.name.replace(/[^a-zA-Z0-9_]/gi, '')\r\n\r\n    // Add any custom properties\r\n    for (let attr in config.custom) {\r\n      if (config.custom.hasOwnProperty(attr)) {\r\n        this[attr] = config.custom[attr]\r\n      }\r\n    }\r\n\r\n    this.hasOwnProperty('custom') && delete this.custom\r\n\r\n    if (NGN.nodelike || Error.prepareStackTrace) {\r\n      // Capture the stack trace on a new error so the detail can be saved as a structured trace.\r\n      Error.prepareStackTrace = function (_, stack) { return stack }\r\n\r\n      let _err = new Error()\r\n\r\n      Error.captureStackTrace(_err, this)\r\n\r\n      this.rawstack = _err.stack\r\n\r\n      Error.prepareStackTrace = function (err, stack) { // eslint-disable-line handle-callback-err\r\n        me.cause && console.warn(me.cause)\r\n        me.help && console.info(me.help)\r\n\r\n        return `${me.name}: ${me.message}\\n` + stack.filter(me.frameFilter).map((el) => {\r\n          return `    at ${el}`\r\n        }).join('\\n')\r\n      }\r\n\r\n      // Enable stack trace\r\n      Error.captureStackTrace(this)\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 2,
            "column": 2
          },
          "end": {
            "line": 57,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "config": {
              "type": "argument",
              "label": "config",
              "description": null,
              "code": "config",
              "start": {
                "line": 2,
                "column": 15
              },
              "end": {
                "line": 2,
                "column": 21
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "constructor",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        }
      }
    },
    "Network": {
      "type": "class",
      "label": "Network",
      "description": null,
      "code": "class Network { // eslint-disable-line\r\n  constructor () {\r\n    Object.defineProperties(this, {\r\n      /**\r\n       * @method parseRequestConfiguration\r\n       * Prepare common configuration attributes for a request.\r\n       * @return {NGN.NET.Request}\r\n       * @private\r\n       */\r\n      parseRequestConfiguration: NGN.private((cfg, method = 'GET') => {\r\n        if (typeof cfg === 'string') {\r\n          cfg = {\r\n            url: cfg\r\n          }\r\n        }\r\n\r\n        cfg = cfg || {}\r\n        cfg.method = method\r\n        cfg.url = NGN.coalesceb(cfg.url, hostname) // eslint-disable-line no-undef\r\n\r\n        return new NGN.NET.Request(cfg)\r\n      }),\r\n\r\n      // Returns a scoped method for sending the request, after preparing it.\r\n      makeRequest: NGN.private((method) => {\r\n        const me = this\r\n\r\n        return function () {\r\n          let args = NGN.slice(arguments)\r\n          let callback\r\n\r\n          if (NGN.isFn(args[args.length - 1])) {\r\n            callback = args.pop()\r\n          }\r\n\r\n          args.push(method)\r\n\r\n          let request = me.parseRequestConfiguration(...args)\r\n\r\n          // Send the request\r\n          me.send(request, callback)\r\n        }\r\n      }),\r\n\r\n      // Helper aliases (undocumented)\r\n      OPTIONS: NGN.privateconst(this.options.bind(this)),\r\n      HEAD: NGN.privateconst(this.head.bind(this)),\r\n      GET: NGN.privateconst(this.get.bind(this)),\r\n      POST: NGN.privateconst(this.post.bind(this)),\r\n      PUT: NGN.privateconst(this.put.bind(this)),\r\n      DELETE: NGN.privateconst(this.delete.bind(this)),\r\n      TRACE: NGN.privateconst(this.trace.bind(this)),\r\n      JSON: NGN.privateconst(this.json.bind(this)),\r\n      JSONP: NGN.privateconst(this.jsonp.bind(this))\r\n    })\r\n  }\r\n\r\n  get Request () {\r\n    return Request\r\n  }\r\n\r\n  /**\r\n   * @method request\r\n   * Send a request. In most cases, it is easier to use one of the built-in\r\n   * request functions (#get, #post, #put, #delete, #json, etc). This method\r\n   * is available for creating custom requests.\r\n   * @param  {Object} configuration\r\n   * Provide a #NGN.NET.Request configuration.\r\n   * @param  {Function} callback\r\n   * The callback to execute when the request is complete.\r\n   */\r\n  request (cfg, callback) {\r\n    cfg = cfg || {}\r\n    cfg.method = NGN.coalesceb(cfg.method, 'GET')\r\n\r\n    if (NGN.isFn(this[cfg.method])) {\r\n      this.makeRequest(cfg.method)(...arguments)\r\n    } else {\r\n      this.send(new NGN.NET.Request(cfg), callback)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method options\r\n   * Issue a `OPTIONS` request.\r\n   * @param {string|object} url\r\n   * The URL to issue the request to, or a configuration object.\r\n   * The configuration object accepts all of the #NGN.NET.Request\r\n   * configuration options (except method, which is defined automatically).\r\n   * @param {Function} callback\r\n   * A callback method to run when the request is complete.\r\n   * This receives the response object as the only argument.\r\n   */\r\n  options () {\r\n    this.makeRequest('OPTIONS').apply(this, arguments)\r\n  }\r\n\r\n  /**\r\n   * @method head\r\n   * Issue a `HEAD` request.\r\n   * @param {string|object} url\r\n   * The URL to issue the request to, or a configuration object.\r\n   * The configuration object accepts all of the #NGN.NET.Request\r\n   * configuration options (except method, which is defined automatically).\r\n   * @param {Function} callback\r\n   * A callback method to run when the request is complete.\r\n   * This receives the response object as the only argument.\r\n   */\r\n  head () {\r\n    this.makeRequest('HEAD').apply(this, arguments)\r\n  }\r\n\r\n  /**\r\n   * @method get\r\n   * Issue a `GET` request.\r\n   * @param {string|object} url\r\n   * The URL to issue the request to.\r\n   * The configuration object accepts all of the #NGN.NET.Request\r\n   * configuration options (except method, which is defined automatically).\r\n   * @param {Function} callback\r\n   * A callback method to run when the request is complete.\r\n   * This receives the response object as the only argument.\r\n   */\r\n  get () {\r\n    this.makeRequest('GET').apply(this, arguments)\r\n  }\r\n\r\n  /**\r\n   * @method post\r\n   * Issue a `POST` request.\r\n   * @param {string|object} url\r\n   * The URL to issue the request to.\r\n   * The configuration object accepts all of the #NGN.NET.Request\r\n   * configuration options (except method, which is defined automatically).\r\n   * @param {Function} callback\r\n   * A callback method to run when the request is complete.\r\n   * This receives the response object as the only argument.\r\n   */\r\n  post () {\r\n    this.makeRequest('POST').apply(this, arguments)\r\n  }\r\n\r\n  /**\r\n   * @method put\r\n   * Issue a `PUT` request.\r\n   * @param {string|object} url\r\n   * The URL to issue the request to.\r\n   * The configuration object accepts all of the #NGN.NET.Request\r\n   * configuration options (except method, which is defined automatically).\r\n   * @param {Function} callback\r\n   * A callback method to run when the request is complete.\r\n   * This receives the response object as the only argument.\r\n   */\r\n  put () {\r\n    this.makeRequest('PUT').apply(this, arguments)\r\n  }\r\n\r\n  /**\r\n   * @method delete\r\n   * Issue a `DELETE` request.\r\n   * @param {string|object} url\r\n   * The URL to issue the request to.\r\n   * The configuration object accepts all of the #NGN.NET.Request\r\n   * configuration options (except method, which is defined automatically).\r\n   * @param {Function} callback\r\n   * A callback method to run when the request is complete.\r\n   * This receives the response object as the only argument.\r\n   */\r\n  delete () {\r\n    this.makeRequest('DELETE').apply(this, arguments)\r\n  }\r\n\r\n  /**\r\n   * @method trace\r\n   * Issue a `TRACE` request. This is a debugging method, which\r\n   * echoes input back to the user. It is a standard HTTP method,\r\n   * but considered a security risk by many practioners and may\r\n   * not be supported by remote hosts.\r\n   * @param {string|object} url\r\n   * The URL to issue the request to.\r\n   * The configuration object accepts all of the #NGN.NET.Request\r\n   * configuration options (except method, which is defined automatically).\r\n   * @param {Function} callback\r\n   * A callback method to run when the request is complete.\r\n   * This receives the response object as the only argument.\r\n   */\r\n  trace () {\r\n    NGN.WARN('NGN.NET.Request.method', 'An HTTP TRACE request was made.')\r\n    this.makeRequest('TRACE').apply(this, arguments)\r\n  }\r\n\r\n  /**\r\n   * @method json\r\n   * This is a shortcut method for creating a `GET` request and\r\n   * auto-processing the response body into a JSON object.\r\n   * @param  {string} url\r\n   * The URL to issue the request to.\r\n   * @param  {Function} callback\r\n   * This receives a JSON response object from the server.\r\n   * @param {Error} callback.error\r\n   * If the request cannot be completed for any reason, this argument will be\r\n   * populated with the error. If the request is successful, this will be `null`.\r\n   * @param {Object} callback.data\r\n   * The JSON response from the remote URL.\r\n   */\r\n  json (url, callback) {\r\n    if (!NGN.isFn(callback)) {\r\n      throw new Error('NGN.NET.json requires a callback method.')\r\n    }\r\n\r\n    // Request method is \"GET\"\r\n    let request = this.parseRequestConfiguration({url})\r\n\r\n    this.preflight(request)\r\n\r\n    request.send((response) => {\r\n      try {\r\n        let responseData = JSON.parse(response.responseText)\r\n        callback(null, responseData)\r\n      } catch (e) {\r\n        e.response = NGN.coalesce(response.responseText)\r\n        callback(e, null)\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @method jsonp\r\n   * Execute a request via JSONP. JSONP is only available in browser\r\n   * environments, since it's operation is dependent on the existance of\r\n   * the DOM. However; this may work with some headless browsers.\r\n   * @param {string} url\r\n   * The URL of the JSONP endpoint.\r\n   * @param {function} callback\r\n   * Handles the response.\r\n   * @param {Error} callback.error\r\n   * If an error occurred, this will be populated. If no error occurred, this will\r\n   * be null.\r\n   * @param {object|array} callback.response\r\n   * The response.\r\n   * @environment browser\r\n   */\r\n  jsonp (url, callback) {\r\n    /* node-only */\r\n    NGN.WARN('NET.Request', 'An unsupported JSONP request was made.')\r\n    callback(new Error('JSONP unsupported in Node-like environments.'))\r\n    /* end-node-only */\r\n    /* browser-only */\r\n    const fn = 'jsonp_callback_' + Math.round(100000 * Math.random())\r\n\r\n    window[fn] = (data) => {\r\n      delete window[fn]\r\n\r\n      document.body.removeChild(script)\r\n\r\n      return callback(null, data)\r\n    }\r\n\r\n    let script = document.createElement('script')\r\n\r\n    script.src = url + (url.indexOf('?') >= 0 ? '&' : '?') + 'callback=' + fn\r\n\r\n    script.addEventListener('error', (e) => {\r\n      delete window[fn]\r\n\r\n      return callback(new Error('The JSONP request was blocked. This may be the result of an invalid URL, cross origin restrictions, or the remote server may not be online.'))\r\n    })\r\n\r\n    document.body.appendChild(script)\r\n    /* end-browser-only */\r\n  }\r\n\r\n  // Apply a preflight request option to the network request.\r\n  send (request, callback) {\r\n    this.preflight(request)\r\n    request.send(callback)\r\n  }\r\n\r\n  /**\r\n   * @method preflight\r\n   * This is a no-op method that runs before a request is sent.\r\n   * This exists specicially to be overridden by class extensions.\r\n   */\r\n  preflight (request) {}\r\n}",
      "tags": {},
      "exceptions": {},
      "events": {},
      "start": {
        "line": 4,
        "column": 15
      },
      "end": {
        "line": 288,
        "column": 1
      },
      "flags": [],
      "authors": [],
      "sourcefile": "./\\net\\Network.js",
      "extends": null,
      "configuration": {},
      "properties": {
        "parseRequestConfiguration": {
          "type": "property",
          "label": "parseRequestConfiguration",
          "description": "Prepare common configuration attributes for a request.",
          "code": "parseRequestConfiguration: NGN.private((cfg, method = 'GET') => {\r\n        if (typeof cfg === 'string') {\r\n          cfg = {\r\n            url: cfg\r\n          }\r\n        }\r\n\r\n        cfg = cfg || {}\r\n        cfg.method = method\r\n        cfg.url = NGN.coalesceb(cfg.url, hostname) // eslint-disable-line no-undef\r\n\r\n        return new NGN.NET.Request(cfg)\r\n      })",
          "start": {
            "line": 13,
            "column": 6
          },
          "end": {
            "line": 25,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": true
        },
        "makeRequest": {
          "type": "property",
          "label": "makeRequest",
          "description": null,
          "code": "makeRequest: NGN.private((method) => {\r\n        const me = this\r\n\r\n        return function () {\r\n          let args = NGN.slice(arguments)\r\n          let callback\r\n\r\n          if (NGN.isFn(args[args.length - 1])) {\r\n            callback = args.pop()\r\n          }\r\n\r\n          args.push(method)\r\n\r\n          let request = me.parseRequestConfiguration(...args)\r\n\r\n          // Send the request\r\n          me.send(request, callback)\r\n        }\r\n      })",
          "start": {
            "line": 28,
            "column": 6
          },
          "end": {
            "line": 46,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": true
        },
        "OPTIONS": {
          "type": "property",
          "label": "OPTIONS",
          "description": null,
          "code": "OPTIONS: NGN.privateconst(this.options.bind(this))",
          "start": {
            "line": 49,
            "column": 6
          },
          "end": {
            "line": 49,
            "column": 56
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        },
        "HEAD": {
          "type": "property",
          "label": "HEAD",
          "description": null,
          "code": "HEAD: NGN.privateconst(this.head.bind(this))",
          "start": {
            "line": 50,
            "column": 6
          },
          "end": {
            "line": 50,
            "column": 50
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        },
        "GET": {
          "type": "property",
          "label": "GET",
          "description": null,
          "code": "GET: NGN.privateconst(this.get.bind(this))",
          "start": {
            "line": 51,
            "column": 6
          },
          "end": {
            "line": 51,
            "column": 48
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        },
        "POST": {
          "type": "property",
          "label": "POST",
          "description": null,
          "code": "POST: NGN.privateconst(this.post.bind(this))",
          "start": {
            "line": 52,
            "column": 6
          },
          "end": {
            "line": 52,
            "column": 50
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        },
        "PUT": {
          "type": "property",
          "label": "PUT",
          "description": null,
          "code": "PUT: NGN.privateconst(this.put.bind(this))",
          "start": {
            "line": 53,
            "column": 6
          },
          "end": {
            "line": 53,
            "column": 48
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        },
        "DELETE": {
          "type": "property",
          "label": "DELETE",
          "description": null,
          "code": "DELETE: NGN.privateconst(this.delete.bind(this))",
          "start": {
            "line": 54,
            "column": 6
          },
          "end": {
            "line": 54,
            "column": 54
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        },
        "TRACE": {
          "type": "property",
          "label": "TRACE",
          "description": null,
          "code": "TRACE: NGN.privateconst(this.trace.bind(this))",
          "start": {
            "line": 55,
            "column": 6
          },
          "end": {
            "line": 55,
            "column": 52
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        },
        "JSON": {
          "type": "property",
          "label": "JSON",
          "description": null,
          "code": "JSON: NGN.privateconst(this.json.bind(this))",
          "start": {
            "line": 56,
            "column": 6
          },
          "end": {
            "line": 56,
            "column": 50
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        },
        "JSONP": {
          "type": "property",
          "label": "JSONP",
          "description": null,
          "code": "JSONP: NGN.privateconst(this.jsonp.bind(this))",
          "start": {
            "line": 57,
            "column": 6
          },
          "end": {
            "line": 57,
            "column": 52
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        },
        "Request": {
          "type": "property",
          "label": "Request",
          "description": null,
          "code": "get Request () {\r\n    return Request\r\n  }",
          "start": {
            "line": 61,
            "column": 2
          },
          "end": {
            "line": 63,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        }
      },
      "methods": {
        "constructor": {
          "type": "method",
          "label": "constructor",
          "description": null,
          "code": "constructor () {\r\n    Object.defineProperties(this, {\r\n      /**\r\n       * @method parseRequestConfiguration\r\n       * Prepare common configuration attributes for a request.\r\n       * @return {NGN.NET.Request}\r\n       * @private\r\n       */\r\n      parseRequestConfiguration: NGN.private((cfg, method = 'GET') => {\r\n        if (typeof cfg === 'string') {\r\n          cfg = {\r\n            url: cfg\r\n          }\r\n        }\r\n\r\n        cfg = cfg || {}\r\n        cfg.method = method\r\n        cfg.url = NGN.coalesceb(cfg.url, hostname) // eslint-disable-line no-undef\r\n\r\n        return new NGN.NET.Request(cfg)\r\n      }),\r\n\r\n      // Returns a scoped method for sending the request, after preparing it.\r\n      makeRequest: NGN.private((method) => {\r\n        const me = this\r\n\r\n        return function () {\r\n          let args = NGN.slice(arguments)\r\n          let callback\r\n\r\n          if (NGN.isFn(args[args.length - 1])) {\r\n            callback = args.pop()\r\n          }\r\n\r\n          args.push(method)\r\n\r\n          let request = me.parseRequestConfiguration(...args)\r\n\r\n          // Send the request\r\n          me.send(request, callback)\r\n        }\r\n      }),\r\n\r\n      // Helper aliases (undocumented)\r\n      OPTIONS: NGN.privateconst(this.options.bind(this)),\r\n      HEAD: NGN.privateconst(this.head.bind(this)),\r\n      GET: NGN.privateconst(this.get.bind(this)),\r\n      POST: NGN.privateconst(this.post.bind(this)),\r\n      PUT: NGN.privateconst(this.put.bind(this)),\r\n      DELETE: NGN.privateconst(this.delete.bind(this)),\r\n      TRACE: NGN.privateconst(this.trace.bind(this)),\r\n      JSON: NGN.privateconst(this.json.bind(this)),\r\n      JSONP: NGN.privateconst(this.jsonp.bind(this))\r\n    })\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 5,
            "column": 2
          },
          "end": {
            "line": 59,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": "constructor",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "parseRequestConfiguration": {
          "type": "method",
          "label": "parseRequestConfiguration",
          "description": "Prepare common configuration attributes for a request.",
          "code": "parseRequestConfiguration: NGN.private((cfg, method = 'GET') => {\r\n        if (typeof cfg === 'string') {\r\n          cfg = {\r\n            url: cfg\r\n          }\r\n        }\r\n\r\n        cfg = cfg || {}\r\n        cfg.method = method\r\n        cfg.url = NGN.coalesceb(cfg.url, hostname) // eslint-disable-line no-undef\r\n\r\n        return new NGN.NET.Request(cfg)\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 13,
            "column": 6
          },
          "end": {
            "line": 25,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "cfg": {
              "type": "argument",
              "label": "cfg",
              "description": null,
              "code": "cfg",
              "start": {
                "line": 13,
                "column": 46
              },
              "end": {
                "line": 13,
                "column": 49
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            },
            "method": {
              "type": "argument",
              "label": "method",
              "description": null,
              "code": "method = 'GET'",
              "start": {
                "line": 13,
                "column": 51
              },
              "end": {
                "line": 13,
                "column": 65
              },
              "flags": [],
              "authors": [],
              "default": "GET",
              "datatype": "string",
              "required": false,
              "enum": null
            }
          },
          "returnType": "NGN.NET.Request",
          "returnDescription": "",
          "kind": "init",
          "computed": false,
          "super": null,
          "override": false,
          "private": true
        },
        "request": {
          "type": "method",
          "label": "request",
          "description": "Send a request. In most cases, it is easier to use one of the built-in\nrequest functions . This method\nis available for creating custom requests.",
          "code": "request (cfg, callback) {\r\n    cfg = cfg || {}\r\n    cfg.method = NGN.coalesceb(cfg.method, 'GET')\r\n\r\n    if (NGN.isFn(this[cfg.method])) {\r\n      this.makeRequest(cfg.method)(...arguments)\r\n    } else {\r\n      this.send(new NGN.NET.Request(cfg), callback)\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 75,
            "column": 2
          },
          "end": {
            "line": 84,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "cfg": {
              "type": "argument",
              "label": "configuration",
              "description": "Provide a #NGN.NET.Request configuration.",
              "code": "cfg",
              "start": {
                "line": 75,
                "column": 11
              },
              "end": {
                "line": 75,
                "column": 14
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "object",
              "required": true,
              "enum": null
            },
            "callback": {
              "type": "argument",
              "label": "callback",
              "description": null,
              "code": "callback",
              "start": {
                "line": 75,
                "column": 11
              },
              "end": {
                "line": 75,
                "column": 14
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "options": {
          "type": "method",
          "label": "options",
          "description": "Issue a `OPTIONS` request.",
          "code": "options () {\r\n    this.makeRequest('OPTIONS').apply(this, arguments)\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 97,
            "column": 2
          },
          "end": {
            "line": 99,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "url": {
              "type": "argument",
              "label": "url",
              "description": "The URL to issue the request to, or a configuration object.\nThe configuration object accepts all of the #NGN.NET.Request\nconfiguration options .",
              "code": "options () {\r\n    this.makeRequest('OPTIONS').apply(this, arguments)\r\n  }",
              "start": {
                "line": 97,
                "column": 2
              },
              "end": {
                "line": 99,
                "column": 3
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string|object",
              "required": true,
              "enum": [
                "except method",
                " which is defined automatically"
              ]
            },
            "callback": {
              "type": "method",
              "label": "callback",
              "description": "A callback method to run when the request is complete.\nThis receives the response object as the only argument.",
              "code": "@param {Function} callback\nA callback method to run when the request is complete.\nThis receives the response object as the only argument.",
              "start": {
                "line": 97,
                "column": 2
              },
              "end": {
                "line": 99,
                "column": 3
              },
              "flags": [],
              "authors": [],
              "arguments": {},
              "returnType": "void",
              "returnDescription": "void",
              "kind": null,
              "generator": false,
              "static": false,
              "computed": false,
              "async": false,
              "super": null,
              "override": false,
              "private": false
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "head": {
          "type": "method",
          "label": "head",
          "description": "Issue a `HEAD` request.",
          "code": "head () {\r\n    this.makeRequest('HEAD').apply(this, arguments)\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 112,
            "column": 2
          },
          "end": {
            "line": 114,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "url": {
              "type": "argument",
              "label": "url",
              "description": "The URL to issue the request to, or a configuration object.\nThe configuration object accepts all of the #NGN.NET.Request\nconfiguration options .",
              "code": "head () {\r\n    this.makeRequest('HEAD').apply(this, arguments)\r\n  }",
              "start": {
                "line": 112,
                "column": 2
              },
              "end": {
                "line": 114,
                "column": 3
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string|object",
              "required": true,
              "enum": [
                "except method",
                " which is defined automatically"
              ]
            },
            "callback": {
              "type": "method",
              "label": "callback",
              "description": "A callback method to run when the request is complete.\nThis receives the response object as the only argument.",
              "code": "@param {Function} callback\nA callback method to run when the request is complete.\nThis receives the response object as the only argument.",
              "start": {
                "line": 112,
                "column": 2
              },
              "end": {
                "line": 114,
                "column": 3
              },
              "flags": [],
              "authors": [],
              "arguments": {},
              "returnType": "void",
              "returnDescription": "void",
              "kind": null,
              "generator": false,
              "static": false,
              "computed": false,
              "async": false,
              "super": null,
              "override": false,
              "private": false
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "get": {
          "type": "method",
          "label": "get",
          "description": "Issue a `GET` request.",
          "code": "get () {\r\n    this.makeRequest('GET').apply(this, arguments)\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 127,
            "column": 2
          },
          "end": {
            "line": 129,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "url": {
              "type": "argument",
              "label": "url",
              "description": "The URL to issue the request to.\nThe configuration object accepts all of the #NGN.NET.Request\nconfiguration options .",
              "code": "get () {\r\n    this.makeRequest('GET').apply(this, arguments)\r\n  }",
              "start": {
                "line": 127,
                "column": 2
              },
              "end": {
                "line": 129,
                "column": 3
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string|object",
              "required": true,
              "enum": [
                "except method",
                " which is defined automatically"
              ]
            },
            "callback": {
              "type": "method",
              "label": "callback",
              "description": "A callback method to run when the request is complete.\nThis receives the response object as the only argument.",
              "code": "@param {Function} callback\nA callback method to run when the request is complete.\nThis receives the response object as the only argument.",
              "start": {
                "line": 127,
                "column": 2
              },
              "end": {
                "line": 129,
                "column": 3
              },
              "flags": [],
              "authors": [],
              "arguments": {},
              "returnType": "void",
              "returnDescription": "void",
              "kind": null,
              "generator": false,
              "static": false,
              "computed": false,
              "async": false,
              "super": null,
              "override": false,
              "private": false
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "post": {
          "type": "method",
          "label": "post",
          "description": "Issue a `POST` request.",
          "code": "post () {\r\n    this.makeRequest('POST').apply(this, arguments)\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 142,
            "column": 2
          },
          "end": {
            "line": 144,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "url": {
              "type": "argument",
              "label": "url",
              "description": "The URL to issue the request to.\nThe configuration object accepts all of the #NGN.NET.Request\nconfiguration options .",
              "code": "post () {\r\n    this.makeRequest('POST').apply(this, arguments)\r\n  }",
              "start": {
                "line": 142,
                "column": 2
              },
              "end": {
                "line": 144,
                "column": 3
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string|object",
              "required": true,
              "enum": [
                "except method",
                " which is defined automatically"
              ]
            },
            "callback": {
              "type": "method",
              "label": "callback",
              "description": "A callback method to run when the request is complete.\nThis receives the response object as the only argument.",
              "code": "@param {Function} callback\nA callback method to run when the request is complete.\nThis receives the response object as the only argument.",
              "start": {
                "line": 142,
                "column": 2
              },
              "end": {
                "line": 144,
                "column": 3
              },
              "flags": [],
              "authors": [],
              "arguments": {},
              "returnType": "void",
              "returnDescription": "void",
              "kind": null,
              "generator": false,
              "static": false,
              "computed": false,
              "async": false,
              "super": null,
              "override": false,
              "private": false
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "put": {
          "type": "method",
          "label": "put",
          "description": "Issue a `PUT` request.",
          "code": "put () {\r\n    this.makeRequest('PUT').apply(this, arguments)\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 157,
            "column": 2
          },
          "end": {
            "line": 159,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "url": {
              "type": "argument",
              "label": "url",
              "description": "The URL to issue the request to.\nThe configuration object accepts all of the #NGN.NET.Request\nconfiguration options .",
              "code": "put () {\r\n    this.makeRequest('PUT').apply(this, arguments)\r\n  }",
              "start": {
                "line": 157,
                "column": 2
              },
              "end": {
                "line": 159,
                "column": 3
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string|object",
              "required": true,
              "enum": [
                "except method",
                " which is defined automatically"
              ]
            },
            "callback": {
              "type": "method",
              "label": "callback",
              "description": "A callback method to run when the request is complete.\nThis receives the response object as the only argument.",
              "code": "@param {Function} callback\nA callback method to run when the request is complete.\nThis receives the response object as the only argument.",
              "start": {
                "line": 157,
                "column": 2
              },
              "end": {
                "line": 159,
                "column": 3
              },
              "flags": [],
              "authors": [],
              "arguments": {},
              "returnType": "void",
              "returnDescription": "void",
              "kind": null,
              "generator": false,
              "static": false,
              "computed": false,
              "async": false,
              "super": null,
              "override": false,
              "private": false
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "delete": {
          "type": "method",
          "label": "delete",
          "description": "Issue a `DELETE` request.",
          "code": "delete () {\r\n    this.makeRequest('DELETE').apply(this, arguments)\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 172,
            "column": 2
          },
          "end": {
            "line": 174,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "url": {
              "type": "argument",
              "label": "url",
              "description": "The URL to issue the request to.\nThe configuration object accepts all of the #NGN.NET.Request\nconfiguration options .",
              "code": "delete () {\r\n    this.makeRequest('DELETE').apply(this, arguments)\r\n  }",
              "start": {
                "line": 172,
                "column": 2
              },
              "end": {
                "line": 174,
                "column": 3
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string|object",
              "required": true,
              "enum": [
                "except method",
                " which is defined automatically"
              ]
            },
            "callback": {
              "type": "method",
              "label": "callback",
              "description": "A callback method to run when the request is complete.\nThis receives the response object as the only argument.",
              "code": "@param {Function} callback\nA callback method to run when the request is complete.\nThis receives the response object as the only argument.",
              "start": {
                "line": 172,
                "column": 2
              },
              "end": {
                "line": 174,
                "column": 3
              },
              "flags": [],
              "authors": [],
              "arguments": {},
              "returnType": "void",
              "returnDescription": "void",
              "kind": null,
              "generator": false,
              "static": false,
              "computed": false,
              "async": false,
              "super": null,
              "override": false,
              "private": false
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "trace": {
          "type": "method",
          "label": "trace",
          "description": "Issue a `TRACE` request. This is a debugging method, which\nechoes input back to the user. It is a standard HTTP method,\nbut considered a security risk by many practioners and may\nnot be supported by remote hosts.",
          "code": "trace () {\r\n    NGN.WARN('NGN.NET.Request.method', 'An HTTP TRACE request was made.')\r\n    this.makeRequest('TRACE').apply(this, arguments)\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 190,
            "column": 2
          },
          "end": {
            "line": 193,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "url": {
              "type": "argument",
              "label": "url",
              "description": "The URL to issue the request to.\nThe configuration object accepts all of the #NGN.NET.Request\nconfiguration options .",
              "code": "trace () {\r\n    NGN.WARN('NGN.NET.Request.method', 'An HTTP TRACE request was made.')\r\n    this.makeRequest('TRACE').apply(this, arguments)\r\n  }",
              "start": {
                "line": 190,
                "column": 2
              },
              "end": {
                "line": 193,
                "column": 3
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string|object",
              "required": true,
              "enum": [
                "except method",
                " which is defined automatically"
              ]
            },
            "callback": {
              "type": "method",
              "label": "callback",
              "description": "A callback method to run when the request is complete.\nThis receives the response object as the only argument.",
              "code": "@param {Function} callback\nA callback method to run when the request is complete.\nThis receives the response object as the only argument.",
              "start": {
                "line": 190,
                "column": 2
              },
              "end": {
                "line": 193,
                "column": 3
              },
              "flags": [],
              "authors": [],
              "arguments": {},
              "returnType": "void",
              "returnDescription": "void",
              "kind": null,
              "generator": false,
              "static": false,
              "computed": false,
              "async": false,
              "super": null,
              "override": false,
              "private": false
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "json": {
          "type": "method",
          "label": "json",
          "description": "This is a shortcut method for creating a `GET` request and\nauto-processing the response body into a JSON object.",
          "code": "json (url, callback) {\r\n    if (!NGN.isFn(callback)) {\r\n      throw new Error('NGN.NET.json requires a callback method.')\r\n    }\r\n\r\n    // Request method is \"GET\"\r\n    let request = this.parseRequestConfiguration({url})\r\n\r\n    this.preflight(request)\r\n\r\n    request.send((response) => {\r\n      try {\r\n        let responseData = JSON.parse(response.responseText)\r\n        callback(null, responseData)\r\n      } catch (e) {\r\n        e.response = NGN.coalesce(response.responseText)\r\n        callback(e, null)\r\n      }\r\n    })\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 209,
            "column": 2
          },
          "end": {
            "line": 228,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "callback": {
              "type": "argument",
              "label": "callback",
              "description": null,
              "code": "callback",
              "start": {
                "line": 209,
                "column": 8
              },
              "end": {
                "line": 209,
                "column": 11
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "jsonp": {
          "type": "method",
          "label": "jsonp",
          "description": "Execute a request via JSONP. JSONP is only available in browser\nenvironments, since it's operation is dependent on the existance of\nthe DOM. However; this may work with some headless browsers.",
          "code": "jsonp (url, callback) {\r\n    /* node-only */\r\n    NGN.WARN('NET.Request', 'An unsupported JSONP request was made.')\r\n    callback(new Error('JSONP unsupported in Node-like environments.'))\r\n    /* end-node-only */\r\n    /* browser-only */\r\n    const fn = 'jsonp_callback_' + Math.round(100000 * Math.random())\r\n\r\n    window[fn] = (data) => {\r\n      delete window[fn]\r\n\r\n      document.body.removeChild(script)\r\n\r\n      return callback(null, data)\r\n    }\r\n\r\n    let script = document.createElement('script')\r\n\r\n    script.src = url + (url.indexOf('?') >= 0 ? '&' : '?') + 'callback=' + fn\r\n\r\n    script.addEventListener('error', (e) => {\r\n      delete window[fn]\r\n\r\n      return callback(new Error('The JSONP request was blocked. This may be the result of an invalid URL, cross origin restrictions, or the remote server may not be online.'))\r\n    })\r\n\r\n    document.body.appendChild(script)\r\n    /* end-browser-only */\r\n  }",
          "tags": {
            "environment": {
              "tag": "environment",
              "name": "browser",
              "optional": false,
              "type": "",
              "description": "",
              "line": 14,
              "source": "@environment browser",
              "options": null
            }
          },
          "exceptions": {},
          "start": {
            "line": 246,
            "column": 2
          },
          "end": {
            "line": 274,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "url": {
              "type": "argument",
              "label": "url",
              "description": "The URL of the JSONP endpoint.",
              "code": "url",
              "start": {
                "line": 246,
                "column": 9
              },
              "end": {
                "line": 246,
                "column": 12
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "callback": {
              "type": "method",
              "label": "callback",
              "description": "Handles the response.",
              "code": "@param {function} callback\nHandles the response.",
              "start": {
                "line": 246,
                "column": 2
              },
              "end": {
                "line": 274,
                "column": 3
              },
              "flags": [],
              "authors": [],
              "arguments": {
                "error": {
                  "type": "argument",
                  "label": "error",
                  "description": "If an error occurred, this will be populated. If no error occurred, this will\nbe null.",
                  "code": "@param {Error} callback.error\nIf an error occurred, this will be populated. If no error occurred, this will\nbe null.",
                  "start": {
                    "line": 246,
                    "column": 14
                  },
                  "end": {
                    "line": 246,
                    "column": 22
                  },
                  "flags": [],
                  "authors": [],
                  "default": null,
                  "datatype": "error",
                  "required": true,
                  "enum": null
                },
                "response": {
                  "type": "argument",
                  "label": "response",
                  "description": "The response.",
                  "code": "@param {object|array} callback.response\nThe response.",
                  "start": {
                    "line": 246,
                    "column": 14
                  },
                  "end": {
                    "line": 246,
                    "column": 22
                  },
                  "flags": [],
                  "authors": [],
                  "default": null,
                  "datatype": "object|array",
                  "required": true,
                  "enum": null
                }
              },
              "returnType": "void",
              "returnDescription": "void",
              "kind": null,
              "generator": false,
              "static": false,
              "computed": false,
              "async": false,
              "super": null,
              "override": false,
              "private": false
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "send": {
          "type": "method",
          "label": "send",
          "description": null,
          "code": "send (request, callback) {\r\n    this.preflight(request)\r\n    request.send(callback)\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 277,
            "column": 2
          },
          "end": {
            "line": 280,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "request": {
              "type": "argument",
              "label": "request",
              "description": null,
              "code": "request",
              "start": {
                "line": 277,
                "column": 8
              },
              "end": {
                "line": 277,
                "column": 15
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            },
            "callback": {
              "type": "argument",
              "label": "callback",
              "description": null,
              "code": "callback",
              "start": {
                "line": 277,
                "column": 17
              },
              "end": {
                "line": 277,
                "column": 25
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "preflight": {
          "type": "method",
          "label": "preflight",
          "description": "This is a no-op method that runs before a request is sent.\nThis exists specicially to be overridden by class extensions.",
          "code": "preflight (request) {}",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 287,
            "column": 2
          },
          "end": {
            "line": 287,
            "column": 24
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "request": {
              "type": "argument",
              "label": "request",
              "description": null,
              "code": "request",
              "start": {
                "line": 287,
                "column": 13
              },
              "end": {
                "line": 287,
                "column": 20
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        }
      }
    },
    "NGN.NET.Request": {
      "type": "class",
      "label": "NGN.NET.Request",
      "description": "Supply a bearer access token for basic authenticaiton operations.",
      "code": "class Request { // eslint-disable-line no-unused-vars\r\n  constructor (cfg) {\r\n    cfg = cfg || {}\r\n\r\n    // Require URL and HTTP method\r\n    NGN.objectRequires(cfg, 'url')\r\n\r\n    if (NGN.objectHasAny(cfg, 'form', 'json')) {\r\n      NGN.WARN('NET.Request', '\"form\" and \"json\" configuration properties are not valid. Use \"body\" instead.')\r\n    }\r\n\r\n    Object.defineProperties(this, {\r\n      UrlPattern: NGN.privateconst(new RegExp('^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?')),\r\n\r\n      /**\r\n       * @cfgproperty {string} url (required)\r\n       * The complete URL for the request, including query parameters.\r\n       */\r\n      uri: NGN.private(null),\r\n\r\n      /**\r\n       * @cfg {string} [method=GET]\r\n       * The HTTP method to invoke when the request is sent. The standard\r\n       * RFC 2616 HTTP methods include:\r\n       *\r\n       * - OPTIONS\r\n       * - HEAD\r\n       * - GET\r\n       * - POST\r\n       * - PUT\r\n       * - DELETE\r\n       * - TRACE\r\n       * - CONNECT\r\n       *\r\n       * There are many additional non-standard methods some remote hosts\r\n       * will accept, including `PATCH`, `COPY`, `LINK`, `UNLINK`, `PURGE`,\r\n       * `LOCK`, `UNLOCK`, `VIEW`, and many others. If the remote host\r\n       * supports these methods, they may be used in an NGN.NET.Request.\r\n       * Non-standard methods will not be prevented, but NGN will trigger\r\n       * a warning event if a non-standard request is created.\r\n       */\r\n      httpmethod: NGN.private(null),\r\n\r\n      /**\r\n       * @cfg {boolean} [enforceMethodSafety=true]\r\n       * According to [RFC 2616](https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html),\r\n       * some HTTP methods are considered idempotent (safe). These methods\r\n       * should have no significance to data (i.e. read-only). For example,\r\n       * `OPTIONS`, `HEAD`, and `GET` are all idempotent. By default, NGN.NET\r\n       * loosely enforces idempotence by ignoring the #body when making a\r\n       * request. While it is not advised, nor officially supported, NGN.NET can\r\n       * technically ignore method safety, allowing a request body to be\r\n       * sent to a remote server. Set this configuration to `false` to\r\n       * prevent NGN.NET from enforcing idempotence/safety.\r\n       */\r\n      enforceMethodSafety: NGN.private(NGN.coalesce(cfg.enforceMethodSafety, cfg.enforcemethodsafety, true)),\r\n\r\n      /**\r\n       * @cfg {object} [headers]\r\n       * Optionally supply custom headers for the request. Most standard\r\n       * headers will be applied automatically (when appropriate), such\r\n       * as `Content-Type`, `Content-Length`, and `Authorization`.\r\n       * In Node-like environments, a `User-Agent` will be applied containing\r\n       * the `hostname` of the system making the request. Any custom headers\r\n       * supplied will override headers managed by NGN.NET.\r\n       */\r\n      headers: NGN.public(NGN.coalesceb(cfg.headers)),\r\n\r\n      /**\r\n       * @cfg {object|string|binary} [body]\r\n       * The body configuration supports text, an object, or a data URL or\r\n       * binary content. **For multi-part form data (file uploads), use\r\n       * the #files configuration _instead_ of this attribute.**\r\n       *\r\n       * It is also possible to construct a simple form submission\r\n       * (x-www-form-urlencoded) from a specially formatted key/value object\r\n       * conforming to the following syntax:\r\n       *\r\n       * ```json\r\n       * {\r\n       *   form: {\r\n       *     form_field_1: \"value\",\r\n       *     form_field_2: \"value\",\r\n       *     form_field_3: \"value\",\r\n       *   }\r\n       * }\r\n       * ```\r\n       * The object above will be automatically converted & url-encoded as:\r\n       *\r\n       * ```js\r\n       * form_field_1=value&form_field_2=value&form_field_3=value\r\n       * ```\r\n       *\r\n       * The appropriate request headers are automatically applied.\r\n       */\r\n      requestbody: NGN.public(NGN.coalesce(cfg.body)),\r\n\r\n      /**\r\n       * @cfgproperty {string} username\r\n       * A username to authenticate the request with (basic auth).\r\n       */\r\n      user: NGN.private(NGN.coalesceb(cfg.username)),\r\n\r\n      /**\r\n       * @cfgproperty {string} password\r\n       * A password to authenticate the request with (basic auth).\r\n       * @readonly\r\n       */\r\n      secret: NGN.private(NGN.coalesceb(cfg.password)),\r\n\r\n      /**\r\n       * @cfgproperty {string} accessToken\r\n       * An access token to authenticate the request with (Bearer auth).\r\n       * If this is configured, it will override any basic auth settings.\r\n       */\r\n      bearerAccessToken: NGN.private(NGN.coalesceb(cfg.accessToken)),\r\n\r\n      /**\r\n       * @cfgproperty {boolean} [withCredentials=false]\r\n       * Indicates whether or not cross-site `Access-Control` requests should\r\n       * be made using credentials such as cookies, authorization headers or\r\n       * TLS client certificates. Setting `withCredentials` has no effect on\r\n       * same-site requests.\r\n       *\r\n       * In addition, this flag is also used to indicate when cookies are to\r\n       * be ignored in the response. The default is `false`. XMLHttpRequest\r\n       * from a different domain cannot set cookie values for their own\r\n       * domain unless `withCredentials` is set to true before making the\r\n       * request. The third-party cookies obtained by setting `withCredentials`\r\n       * to true will still honor same-origin policy and hence can not be\r\n       * accessed by the requesting script through\r\n       * [document.cookie](https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\r\n       * or from response headers.\r\n       */\r\n      withCredentials: NGN.private(NGN.coalesce(cfg.withCredentials, false)),\r\n\r\n      /**\r\n       * @cfgproperty {Number} [timeout=30000]\r\n       * The number of milliseconds to wait before considering the request to\r\n       * have timed out. Defaults to `30000` (30 seconds).\r\n       */\r\n      timeout: NGN.public(NGN.coalesce(cfg.timeout, 30000)),\r\n\r\n      /**\r\n       * @method timer\r\n       * A placeholder for a timeout monitor.\r\n       * @private\r\n       */\r\n      timer: NGN.private(null),\r\n\r\n      /**\r\n       * @method isCrossOrigin\r\n       * Determine if accessing a URL is considered a cross origin request.\r\n       * @param {string} url\r\n       * The URL to identify as a COR.\r\n       * @returns {boolean}\r\n       * @private\r\n       */\r\n      isCrossOrigin: NGN.privateconst(function (url) {\r\n        /* node-only */\r\n        if (networkInterfaces.indexOf(this.host) < 0) {\r\n          return true\r\n        }\r\n        /* end-node-only */\r\n\r\n        return this.host !== hostname // eslint-disable-line no-undef\r\n      }),\r\n\r\n      /**\r\n       * @method applyAuthorizationHeader\r\n       * Generates and applies the authorization header for the request,\r\n       * based on the presence of #username, #password, or #accessToken.\r\n       * @private\r\n       */\r\n      applyAuthorizationHeader: NGN.privateconst(() => {\r\n        if (NGN.coalesceb(this.bearerAccessToken) !== null) {\r\n          this.setHeader('Authorization', `Bearer ${this.bearerAccessToken}`, true)\r\n        } else if (NGN.coalesceb(this.user) && NGN.coalesceb(this.secret)) {\r\n          this.setHeader('Authorization', this.basicAuthToken(this.user, this.secret), true)\r\n        }\r\n      }),\r\n\r\n      /**\r\n       * @method basicAuthToken\r\n       * Generates a basic authentication token from a username and password.\r\n       * @return {[type]} [description]\r\n       * @private\r\n       */\r\n      basicAuthToken: NGN.privateconst((user, secret) => {\r\n        // Binary to base64-ascii conversions\r\n        /* node-only */\r\n        return 'Basic ' + Buffer.from(`${user}:${secret}`, 'binary').toString('base64')\r\n        /* end-node-only */\r\n        /* browser-only */\r\n        return 'Basic ' + NGN.global.btoa(`${user}:${secret}`) // eslint-disable-line no-unreachable\r\n        /* end-browser-only */\r\n      }),\r\n\r\n      /**\r\n       * @method parseUri\r\n       * Parses the URI into composable parts.\r\n       * @param {string} URL\r\n       * The URI/URL to parse.\r\n       * @return {Object}\r\n       * Returns a key/value object:\r\n       *\r\n       * ```js\r\n       * {\r\n       *   protocol: 'http',\r\n       *   hostname: 'domain.com',\r\n       *   path: '/path/to/file.html',\r\n       *   query: 'a=1&b=2',\r\n       *   hash: null\r\n       * }\r\n       * ```\r\n       * @private\r\n       */\r\n      parseUri: NGN.privateconst(uri => {\r\n        let part = uri.match(this.UrlPattern)\r\n        let protocol\r\n        /* node-only */\r\n        protocol = 'http'\r\n        /* end-node-only */\r\n        /* browser-only */\r\n        protocol = window.location.protocol.replace(':', '').toLowerCase()\r\n        /* end-browser-only */\r\n        let url = {\r\n          protocol: NGN.coalesce(part[2], protocol),\r\n          hostname: NGN.coalesce(part[4], hostname),\r\n          path: NGN.coalesceb(part[5], '/'),\r\n          query: NGN.coalesceb(part[7]),\r\n          hash: NGN.coalesceb(part[9])\r\n        }\r\n\r\n        // URL contains a username/password.\r\n        if (url.hostname.indexOf('@') > 0) {\r\n          let credentials = uri.match(/^.*\\/{1,2}(.*):(.*)@/i)\r\n\r\n          url.hostname = url.hostname.split('@').pop()\r\n\r\n          this.user = credentials[1]\r\n          this.secret = credentials[2]\r\n          this.applyAuthorizationHeader()\r\n        }\r\n\r\n        url.port = NGN.coalesce(url.hostname.match(/:([0-9]{1,6})/), url.protocol === 'https' ? 443 : 80)\r\n\r\n        if (url.hostname.indexOf(':') > 0) {\r\n          url.hostname = url.hostname.split(':')[0]\r\n        }\r\n\r\n        if (url.path.charAt(0) !== '/') {\r\n          url.path = `/${url.path}`\r\n        }\r\n\r\n        return url\r\n      }),\r\n\r\n      uriParts: NGN.private(null),\r\n\r\n      /**\r\n       * @cfgproperty {Number} [maxRedirects=10]\r\n       * Set the maximum number of redirects. There is a hard-cap of 25\r\n       * redirects to prevent cyclic requests (endless loop).\r\n       */\r\n      maximumRedirects: NGN.private(10),\r\n      redirectAttempts: NGN.private(0),\r\n\r\n      prepareBody: NGN.private(() => {\r\n        // Request body management\r\n        if (this.requestbody !== null) {\r\n          if (this.headers === null) {\r\n            this.headers = {}\r\n          }\r\n\r\n          let contentType = NGN.coalesceb(this.headers['Content-Type'], this.headers['content-type'], this.headers['Content-type'])\r\n\r\n          if (typeof this.requestbody === 'object') {\r\n            if (NGN.objectHasExactly(this.requestbody, 'form')) {\r\n              let form = this.requestbody.form\r\n              let keys = Object.keys(form)\r\n              let dataString = []\r\n\r\n              for (let i = 0; i < keys.length; i++) {\r\n                if (NGN.isFn(form[keys[i]])) {\r\n                  throw new Error('Invalid form data. Form data cannot be a complex data format such as an object or function.')\r\n                } else if (typeof form[keys[i]] === 'object') {\r\n                  dataString.push(`${keys[i]}=${encodeURIComponent(JSON.stringify(form[keys[i]]))}`)\r\n                } else {\r\n                  dataString.push(`${keys[i]}:${encodeURIComponent(form[keys[i]])}`)\r\n                }\r\n              }\r\n\r\n              this.requestbody = dataString.join('&')\r\n            } else {\r\n              this.requestbody = JSON.stringify(this.requestbody).trim()\r\n              this.setHeader('Content-Length', this.requestbody.length, false)\r\n              this.setHeader('Content-Type', NGN.coalesceb(contentType, 'application/json'), false)\r\n            }\r\n          }\r\n\r\n          if (typeof this.requestbody === 'string') {\r\n            if (contentType !== null) {\r\n              // Check for form data\r\n              let match = /([^=]+)=([^&]+)/.exec(this.requestbody)\r\n\r\n              if (match !== null && this.requestbody.trim().substr(0, 5).toLowerCase() !== 'data:' && this.requestbody.trim().substr(0, 1).toLowerCase() !== '<') {\r\n                this.setHeader('Content-Type', 'application/x-www-form-urlencoded', false)\r\n              } else {\r\n                this.setHeader('Content-Type', 'text/plain')\r\n\r\n                if (this.requestbody.trim().substr(0, 5).toLowerCase() === 'data:') {\r\n                  // Crude Data URL mimetype detection\r\n                  match = /^data:(.*);/gi.exec(this.requestbody.trim())\r\n\r\n                  if (match !== null) {\r\n                    this.setHeader('Content-Type', match[1])\r\n                  }\r\n                } else if (/^<\\?xml.*/gi.test(this.requestbody.trim())) {\r\n                  // Crude XML Detection\r\n                  this.setHeader('Content-Type', 'application/xml')\r\n                } else if (/^<html.*/gi.test(this.requestbody.trim())) {\r\n                  // Crude HTML Detection\r\n                  this.setHeader('Content-Type', 'text/html')\r\n                }\r\n              }\r\n            }\r\n\r\n            this.setHeader('Content-Type', this.requestbody.length, false)\r\n          } else {\r\n            NGN.WARN('NET.Request.body', `The request body must cannot be ${typeof this.requestbody}. Please provide a string, object, or binary value for the body.`)\r\n          }\r\n        }\r\n      })\r\n    })\r\n\r\n    if (cfg.maxRedirects) {\r\n      this.maxRedirects = cfg.maxRedirects\r\n    }\r\n\r\n    this.url = cfg.url\r\n    this.method = NGN.coalesceb(cfg.method, 'GET')\r\n\r\n    this.prepareBody()\r\n\r\n    // Apply authorization if applicable\r\n    if (NGN.coalesce(this.user, this.secret, this.bearerAccessToken) !== null) {\r\n      this.applyAuthorizationHeader()\r\n    }\r\n  }\r\n\r\n  get maxRedirects () {\r\n    return this.maximumRedirects\r\n  }\r\n\r\n  set maxRedirects (value) {\r\n    if (value > 25) {\r\n      value = 25\r\n    }\r\n\r\n    if (value < 0) {\r\n      value = 0\r\n    }\r\n\r\n    this.maximumRedirects = value\r\n  }\r\n\r\n  /**\r\n   * @property {string} protocol\r\n   * The protocol used to make the request.\r\n   * @readonly\r\n   */\r\n  get protocol () {\r\n    return NGN.coalesce(this.uriParts.protocol, 'http')\r\n  }\r\n\r\n  /**\r\n   * @property {string} host\r\n   * The hostname/domain of the request.\r\n   */\r\n  get host () {\r\n    return NGN.coalesce(this.uriParts.hostname)\r\n  }\r\n\r\n  get hostname () {\r\n    return this.host\r\n  }\r\n\r\n  /**\r\n   * @property {number} port\r\n   * The port of the remote host.\r\n   */\r\n  get port () {\r\n    return this.uriParts.port\r\n  }\r\n\r\n  /**\r\n   * @property {string} path\r\n   * The pathname of the URL.\r\n   */\r\n  get path () {\r\n    return NGN.coalesce(this.uriParts.path, '/')\r\n  }\r\n\r\n  /**\r\n   * @property {string} query\r\n   * The raw query string of the URI. To retrieve a key/value list,\r\n   * use #queryParameters instead.\r\n   */\r\n  get query () {\r\n    return NGN.coalesce(this.uriParts.query, '')\r\n  }\r\n\r\n  /**\r\n   * @property {object} queryParameters\r\n   * Returns a key/value object containing the URL query parameters of the\r\n   * request, as defined in the #url. The paramter values (represented as keys\r\n   * in this object) may be modified, but not removed (use removeQueryParameter\r\n   * to delete a query parameter). No new query parameters can be added (use\r\n   * setQueryParameter instead).\r\n   * @readonly\r\n   */\r\n  get queryParameters () {\r\n    let params = this.query.split('&')\r\n    let resultSet = {}\r\n\r\n    for (let i = 0; i < params.length; i++) {\r\n      let keypair = params[i].split('=')\r\n      let attr = `__qp__${keypair[0]}__qp__`\r\n\r\n      Object.defineProperty(resultSet, attr, {\r\n        enumerable: false,\r\n        configurable: false,\r\n        writable: true,\r\n        value: NGN.coalesceb(keypair[1])\r\n      })\r\n\r\n      Object.defineProperty(resultSet, keypair[0], {\r\n        enumerable: true,\r\n        configurable: false,\r\n        get: () => { return resultSet[attr] },\r\n        set: (value) => {\r\n          resultSet[attr] = value\r\n          this.setQueryParameter(keypair[0], value, true)\r\n        }\r\n      })\r\n    }\r\n\r\n    return resultSet\r\n  }\r\n\r\n  /**\r\n   * @property hash\r\n   * The hash part of the URL (i.e. everything after the trailing `#`).\r\n   */\r\n  get hash () {\r\n    return NGN.coalesce(this.uriParts.hash, '')\r\n  }\r\n\r\n  /**\r\n   * @property {string} url\r\n   * The URL where the request will be sent.\r\n   */\r\n  get url () {\r\n    return this.uri\r\n  }\r\n\r\n  set url (value) {\r\n    if (NGN.coalesceb(value) === null) {\r\n      NGN.WARN('NET.Request.url', 'A blank URL was identified for a request.')\r\n    }\r\n\r\n    // If a relative URL is provided in a browser context, prepend\r\n    // the current browser location to the URI.\r\n    if (/^.*\\:\\/{2}/i.exec(value) === null && /^\\.{1,2}\\/.*/.exec(value) !== null && NGN.global.hasOwnProperty('location')) {\r\n      let loc = NGN.global.location\r\n      let href = `${loc.host}${loc.pathname}`\r\n\r\n      href = href.split('/')\r\n\r\n      if (href[href.length - 1].indexOf('.') >= 0) {\r\n        href.pop()\r\n      }\r\n\r\n      href = href.join('/')\r\n      href = href.substring(0, href.lastIndexOf('/') + 1)\r\n\r\n      value = `${NGN.global.location.protocol}//${href}/${value}`.replace(/\\/{2,1000000}/i, '/')\r\n    }\r\n\r\n    this.uri = normalizeUrl(value.trim())\r\n    this.uriParts = this.parseUri(this.uri)\r\n  }\r\n\r\n  get method () {\r\n    return this.httpmethod\r\n  }\r\n\r\n  set method (value) {\r\n    if (this.httpmethod === value) {\r\n      return\r\n    }\r\n\r\n    if (NGN.coalesceb(value) === null) {\r\n      NGN.WARN('NET.Request.method', 'No HTTP method specified.')\r\n    }\r\n\r\n    value = value.trim().toUpperCase()\r\n\r\n    if (HttpMethods.indexOf(value) < 0) {\r\n      NGN.WARN('NET.Request.method', `A non-standard HTTP method was recognized in a request: ${value}.`)\r\n    }\r\n\r\n    this.httpmethod = value\r\n  }\r\n\r\n  get body () {\r\n    return this.requestbody\r\n  }\r\n\r\n  set body (value) {\r\n    this.requestbody = value\r\n    this.prepareBody()\r\n  }\r\n\r\n  /**\r\n   * @property {boolean} crossOriginRequest\r\n   * Indicates the request will be made to a domain outside of the\r\n   * one hosting the request.\r\n   */\r\n  get crossOriginRequest () {\r\n    return this.isCrossOrigin(this.uri)\r\n  }\r\n\r\n  /**\r\n   * @property {string} username\r\n   * The username that will be used in any basic authentication operations.\r\n   */\r\n  get username () {\r\n    return NGN.coalesce(this.user)\r\n  }\r\n\r\n  set username (user) {\r\n    user = NGN.coalesceb(user)\r\n\r\n    if (this.user !== user) {\r\n      this.user = user\r\n\r\n      if (NGN.coalesceb(this.secret) !== null) {\r\n        this.applyAuthorizationHeader()\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @property {string} password\r\n   * It is possible to set a password for any basic authentication operations,\r\n   * but it is not possible to read a password.\r\n   * @writeonly\r\n   */\r\n  set password (secret) {\r\n    secret = NGN.coalesceb(secret)\r\n\r\n    if (this.secret !== secret) {\r\n      this.secret = secret\r\n\r\n      if (NGN.coalesceb(this.user) !== null) {\r\n        this.applyAuthorizationHeader()\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @property {string} accessToken\r\n   * Supply a bearer access token for basic authenticaiton operations.\r\n   * @writeonly\r\n   */\r\n  set accessToken (token) {\r\n    token = NGN.coalesceb(token)\r\n\r\n    if (this.bearerAccessToken !== token) {\r\n      this.bearerAccessToken = token\r\n      this.applyAuthorizationHeader()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method setHeader\r\n   * Add a header to the request.\r\n   * @param {string} header\r\n   * The name of the header.\r\n   * @param {string} value\r\n   * Value of the header.\r\n   * @param {Boolean} [overwriteExisting=true]\r\n   * If the header already exists, setting this to `false` will prevent\r\n   * the original header from being overwritten.\r\n   */\r\n  setHeader (key, value, overwriteExisting = true) {\r\n    key = key.replace(/'|\"/gi, '').toLowerCase()\r\n\r\n    if (this.headers === null || this.headers[key] === undefined || overwriteExisting) {\r\n      if (this.headers === null) {\r\n        this.headers = {}\r\n      }\r\n\r\n      this.headers[key] = value\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method getHeader\r\n   * @param  {string} header\r\n   * The name of the header to retrieve.\r\n   * @return {string}\r\n   * Returns the current value of the specified header.\r\n   */\r\n  getHeader (key) {\r\n    if (this.headers === null) {\r\n      return undefined\r\n    }\r\n\r\n    if (!this.headers.hasOwnProperty(key.toLowerCase())) {\r\n      return undefined\r\n    }\r\n\r\n    return this.headers[key.toLowerCase()]\r\n  }\r\n\r\n  /**\r\n   * @method removeHeader\r\n   * Removes a header from the request. Nothing happens if the header does\r\n   * not exist.\r\n   * @param  {string} header\r\n   * The header to remove.\r\n   */\r\n  removeHeader (key) {\r\n    if (this.headers !== null) {\r\n      delete this.headers[key.toLowerCase()]\r\n      delete this.headers[key]\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method setQueryParameter\r\n   * Add a query parameter to the request.\r\n   * @param {string} parameter\r\n   * The name of the parameter.\r\n   * @param {string} value\r\n   * Value of the parameter. The value is automatically URL encoded. If the\r\n   * value is null, only the key will be added to the URL (ex: `http://domain.com/page.html?key`)\r\n   * @param {Boolean} [overwriteExisting=true]\r\n   * If the parameter already exists, setting this to `false` will prevent\r\n   * the original parameter from being overwritten.\r\n   */\r\n  setQueryParameter (key, value, overwriteExisting = true) {\r\n    let re = new RegExp(\"^.*(\\\\?|&)(\" + key + \".*)(&.*)$|^.*(\\\\?|&)(\" + key + \".*)$\", 'i') // eslint-disable-line quotes\r\n    let exists = (re.exec(this.uri) !== null)\r\n    let match\r\n\r\n    if (exists) {\r\n      if (!overwriteExisting) {\r\n        return\r\n      }\r\n\r\n      match = re.exec(this.uri)\r\n\r\n      if (match !== null) {\r\n        this.url = this.uri.replace(`${NGN.coalesceb(match[5], match[2])}`, `${key}${value !== null ? '=' + encodeURIComponent(value) : ''}`)\r\n      }\r\n    } else {\r\n      this.url = `${this.uri}${this.query.length === 0 ? '?' : '&'}${key}${value !== null ? '=' + encodeURIComponent(value) : ''}`\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method removeQueryParameter\r\n   * Remove a query parameter from the request URI.\r\n   * @param {string} key\r\n   */\r\n  removeQueryParameter (key) {\r\n    this.url = this.uri.replace(new RegExp(`${key}=(.[^&]+)|\\\\?${key}|&${key}`, 'gi'), '')\r\n  }\r\n\r\n  startMonitor () {\r\n    if (this.timer === null) {\r\n      this.timer = setTimeout(() => {\r\n        throw new Error('Timed out retrieving ' + this.url)\r\n      }, this.timeout)\r\n    }\r\n  }\r\n\r\n  stopMonitor () {\r\n    clearTimeout(this.timer)\r\n    this.timer = null\r\n  }\r\n\r\n  /**\r\n   * @method send\r\n   * Send the request.\r\n   * @param {Function} callback\r\n   * The callback is executed when the request is complete.\r\n   * @param {Object} callback.response\r\n   * The response object returned by the server.\r\n   */\r\n  send (callback) {\r\n    let body = this.body\r\n\r\n    // Disable body when safe methods are enforced.\r\n    if (NGN.coalesce(body)) {\r\n      if (this.enforceMethodSafety && 'OPTIONS|HEAD|GET'.indexOf(this.method) >= 0) {\r\n        body = null\r\n      }\r\n    }\r\n\r\n    /* node-only */\r\n    // Run request in Node-like environments\r\n    // Support local file system retrieval in node-like environments.\r\n    // This short-circuits the request and reads the file system instead.\r\n    if (this.protocol === 'file') {\r\n      if (!NGN.isFn(callback)) {\r\n        throw new Error('A callback is required when retrieving system files in a node-like environment.')\r\n      }\r\n\r\n      let response = {\r\n        status: require('fs').existsSync(this.uri.replace('file://', '')) ? 200 : 400\r\n      }\r\n\r\n      response.responseText = response.status === 200 ? require('fs').readFileSync(this.uri.replace('file://', '')).toString() : 'File does not exist or could not be found.'\r\n\r\n      return callback(response)\r\n    }\r\n\r\n    const http = this.protocol === 'https' ? require('https') : require('http')\r\n\r\n    let params = NGN.coalesceb(this.query)\r\n    let reqOptions = {\r\n      hostname: this.hostname,\r\n      port: this.port,\r\n      method: this.method,\r\n      headers: this.headers,\r\n      path: this.path\r\n    }\r\n\r\n    if (params !== null) {\r\n      reqOptions.path = `${this.path}?${params}`\r\n    }\r\n\r\n    const req = http.request(reqOptions, (response) => {\r\n      response.setEncoding('utf8')\r\n\r\n      let body = ''\r\n      response.on('data', (chunk) => {\r\n        body += chunk\r\n      })\r\n\r\n      response.on('end', () => {\r\n        switch (response.statusCode) {\r\n          case 301:\r\n          case 302:\r\n          case 307:\r\n          case 308:\r\n            if (this.redirectAttempts > this.maxRedirects) {\r\n              this.redirectAttempts = 0\r\n\r\n              this.stopMonitor()\r\n\r\n              return callback({ // eslint-disable-line standard/no-callback-literal\r\n                status: 500,\r\n                statusText: 'Too many redirects',\r\n                responseText: 'Too many redirects',\r\n                responseXML: 'Too many redirects',\r\n                readyState: 4\r\n              })\r\n            }\r\n\r\n            if (response.headers.location === undefined) {\r\n              this.stopMonitor()\r\n\r\n              return callback({ // eslint-disable-line standard/no-callback-literal\r\n                status: 502,\r\n                statusText: 'Bad Gateway',\r\n                responseText: 'Bad Gateway',\r\n                responseXML: 'Bad Gateway',\r\n                readyState: 4\r\n              })\r\n            }\r\n\r\n            this.redirectAttempts++\r\n            this.url = response.headers.location\r\n\r\n            return this.send(callback)\r\n\r\n          default:\r\n            this.stopMonitor()\r\n\r\n            return callback({ // eslint-disable-line standard/no-callback-literal\r\n              status: response.statusCode,\r\n              statusText: NGN.coalesce(response.statusText),\r\n              responseText: body,\r\n              responseXML: body,\r\n              readyState: 4\r\n            })\r\n        }\r\n      })\r\n    })\r\n\r\n    req.on('error', (err) => {\r\n      this.stopMonitor()\r\n\r\n      if (NGN.isFn(callback)) {\r\n        callback({ // eslint-disable-line standard/no-callback-literal\r\n          status: 400,\r\n          statusText: err.message,\r\n          responseText: err.message,\r\n          responseXML: err.message,\r\n          readyState: 0\r\n        })\r\n      } else {\r\n        throw err\r\n      }\r\n    })\r\n\r\n    this.startMonitor()\r\n\r\n    if (this.body) {\r\n      req.write(this.body)\r\n    }\r\n\r\n    req.end()\r\n    /* end-node-only */\r\n    /* browser-only */\r\n    let xhr = new XMLHttpRequest()\r\n    let responded = false\r\n    let me = this\r\n\r\n    // Apply readystate change handler\r\n    xhr.onreadystatechange = function () {\r\n      if (responded) {\r\n        return\r\n      }\r\n\r\n      if (xhr.readyState === XMLHttpRequest.DONE) {\r\n        responded = true\r\n\r\n        if (xhr.status === 0) {\r\n          NGN.WARN(`Request Error: ${me.method} ${me.url} (likely a CORS issue).`)\r\n        }\r\n\r\n        if (NGN.isFn(callback)) {\r\n          callback(xhr)\r\n        }\r\n      }\r\n    }\r\n\r\n    // Apply error handler\r\n    xhr.onerror = function (e) {\r\n      NGN.WARN('NET.error', e)\r\n\r\n      if (!responded && NGN.isFn(callback)) {\r\n        callback(xhr)\r\n      }\r\n\r\n      responded = true\r\n    }\r\n\r\n    xhr.ontimeout = function (e) {\r\n      responded = true\r\n      callback(xhr)\r\n    }\r\n\r\n    xhr.timeout = this.timeout\r\n\r\n    // Open the request\r\n    xhr.open(this.method, this.url, true)\r\n\r\n    // Apply withCredentials\r\n    xhr.withCredentials = this.withCredentials\r\n\r\n    // Apply Request Headers\r\n    if (this.headers !== null) {\r\n      let headers = Object.keys(this.headers)\r\n      for (let i = 0; i < headers.length; i++) {\r\n        xhr.setRequestHeader(headers[i], this.headers[headers[i]])\r\n      }\r\n    }\r\n\r\n    // Write the body (which may be null) & send the request\r\n    xhr.send(body)\r\n    /* end-browser-only */\r\n  }\r\n}",
      "tags": {},
      "exceptions": {},
      "events": {},
      "start": {
        "line": 11,
        "column": 15
      },
      "end": {
        "line": 901,
        "column": 1
      },
      "flags": [],
      "authors": [],
      "sourcefile": "./\\net\\Request.js",
      "extends": null,
      "configuration": {
        "url": {
          "type": "property",
          "label": "url",
          "description": "The complete URL for the request, including query parameters.",
          "code": "uri: NGN.private(null)",
          "start": {
            "line": 29,
            "column": 6
          },
          "end": {
            "line": 29,
            "column": 28
          },
          "flags": [],
          "authors": [],
          "default": null,
          "datatype": "string",
          "readable": true,
          "writable": false,
          "configuration": true,
          "private": true
        },
        "method": {
          "type": "property",
          "label": "method",
          "description": "The HTTP method to invoke when the request is sent. The standard\nRFC 2616 HTTP methods include:\n\n- OPTIONS\n- HEAD\n- GET\n- POST\n- PUT\n- DELETE\n- TRACE\n- CONNECT\n\nThere are many additional non-standard methods some remote hosts\nwill accept, including `PATCH`, `COPY`, `LINK`, `UNLINK`, `PURGE`,\n`LOCK`, `UNLOCK`, `VIEW`, and many others. If the remote host\nsupports these methods, they may be used in an NGN.NET.Request.\nNon-standard methods will not be prevented, but NGN will trigger\na warning event if a non-standard request is created.",
          "code": "httpmethod: NGN.private(null)",
          "start": {
            "line": 52,
            "column": 6
          },
          "end": {
            "line": 52,
            "column": 35
          },
          "flags": [],
          "authors": [],
          "default": "GET",
          "datatype": "string",
          "readable": false,
          "writable": false,
          "configuration": true,
          "private": true
        },
        "enforceMethodSafety": {
          "type": "property",
          "label": "enforceMethodSafety",
          "description": "According to [RFC 2616],\nsome HTTP methods are considered idempotent (safe). These methods\nshould have no significance to data (i.e. read-only). For example,\n`OPTIONS`, `HEAD`, and `GET` are all idempotent. By default, NGN.NET\nloosely enforces idempotence by ignoring the #body when making a\nrequest. While it is not advised, nor officially supported, NGN.NET can\ntechnically ignore method safety, allowing a request body to be\nsent to a remote server. Set this configuration to `false` to\nprevent NGN.NET from enforcing idempotence/safety.",
          "code": "enforceMethodSafety: NGN.private(NGN.coalesce(cfg.enforceMethodSafety, cfg.enforcemethodsafety, true))",
          "start": {
            "line": 66,
            "column": 6
          },
          "end": {
            "line": 66,
            "column": 108
          },
          "flags": [],
          "authors": [],
          "default": "true",
          "datatype": "boolean",
          "readable": false,
          "writable": false,
          "configuration": true,
          "private": true
        },
        "headers": {
          "type": "property",
          "label": "headers",
          "description": "Optionally supply custom headers for the request. Most standard\nheaders will be applied automatically , such\nas `Content-Type`, `Content-Length`, and `Authorization`.\nIn Node-like environments, a `User-Agent` will be applied containing\nthe `hostname` of the system making the request. Any custom headers\nsupplied will override headers managed by NGN.NET.",
          "code": "headers: NGN.public(NGN.coalesceb(cfg.headers))",
          "start": {
            "line": 77,
            "column": 6
          },
          "end": {
            "line": 77,
            "column": 53
          },
          "flags": [],
          "authors": [],
          "default": null,
          "datatype": "object",
          "readable": false,
          "writable": false,
          "configuration": true,
          "private": false
        },
        "body": {
          "type": "property",
          "label": "body",
          "description": "The body configuration supports text, an object, or a data URL or\nbinary content. **For multi-part form data , use\nthe #files configuration _instead_ of this attribute.**\n\nIt is also possible to construct a simple form submission\n(x-www-form-urlencoded) from a specially formatted key/value object\nconforming to the following syntax:\n\n```json\n{\nform: {\nform_field_1: \"value\",\nform_field_2: \"value\",\nform_field_3: \"value\",\n}\n}\n```\nThe object above will be automatically converted & url-encoded as:\n\n```js\nform_field_1=value&form_field_2=value&form_field_3=value\n```\n\nThe appropriate request headers are automatically applied.",
          "code": "requestbody: NGN.public(NGN.coalesce(cfg.body))",
          "start": {
            "line": 106,
            "column": 6
          },
          "end": {
            "line": 106,
            "column": 53
          },
          "flags": [],
          "authors": [],
          "default": null,
          "datatype": "object|string|binary",
          "readable": false,
          "writable": false,
          "configuration": true,
          "private": false
        },
        "username": {
          "type": "property",
          "label": "username",
          "description": "A username to authenticate the request with .",
          "code": "user: NGN.private(NGN.coalesceb(cfg.username))",
          "start": {
            "line": 112,
            "column": 6
          },
          "end": {
            "line": 112,
            "column": 52
          },
          "flags": [],
          "authors": [],
          "default": null,
          "datatype": "string",
          "readable": true,
          "writable": false,
          "configuration": true,
          "private": true
        },
        "password": {
          "type": "property",
          "label": "password",
          "description": "A password to authenticate the request with .",
          "code": "secret: NGN.private(NGN.coalesceb(cfg.password))",
          "start": {
            "line": 119,
            "column": 6
          },
          "end": {
            "line": 119,
            "column": 54
          },
          "flags": [],
          "authors": [],
          "default": null,
          "datatype": "string",
          "readable": true,
          "writable": false,
          "configuration": true,
          "private": true
        },
        "accessToken": {
          "type": "property",
          "label": "accessToken",
          "description": "An access token to authenticate the request with .\nIf this is configured, it will override any basic auth settings.",
          "code": "bearerAccessToken: NGN.private(NGN.coalesceb(cfg.accessToken))",
          "start": {
            "line": 126,
            "column": 6
          },
          "end": {
            "line": 126,
            "column": 68
          },
          "flags": [],
          "authors": [],
          "default": null,
          "datatype": "string",
          "readable": true,
          "writable": false,
          "configuration": true,
          "private": true
        },
        "withCredentials": {
          "type": "property",
          "label": "withCredentials",
          "description": "Indicates whether or not cross-site `Access-Control` requests should\nbe made using credentials such as cookies, authorization headers or\nTLS client certificates. Setting `withCredentials` has no effect on\nsame-site requests.\n\nIn addition, this flag is also used to indicate when cookies are to\nbe ignored in the response. The default is `false`. XMLHttpRequest\nfrom a different domain cannot set cookie values for their own\ndomain unless `withCredentials` is set to true before making the\nrequest. The third-party cookies obtained by setting `withCredentials`\nto true will still honor same-origin policy and hence can not be\naccessed by the requesting script through\n[document.cookie]\nor from response headers.",
          "code": "withCredentials: NGN.private(NGN.coalesce(cfg.withCredentials, false))",
          "start": {
            "line": 145,
            "column": 6
          },
          "end": {
            "line": 145,
            "column": 76
          },
          "flags": [],
          "authors": [],
          "default": "false",
          "datatype": "boolean",
          "readable": true,
          "writable": false,
          "configuration": true,
          "private": true
        },
        "timeout": {
          "type": "property",
          "label": "timeout",
          "description": "The number of milliseconds to wait before considering the request to\nhave timed out. Defaults to `30000` .",
          "code": "timeout: NGN.public(NGN.coalesce(cfg.timeout, 30000))",
          "start": {
            "line": 152,
            "column": 6
          },
          "end": {
            "line": 152,
            "column": 59
          },
          "flags": [],
          "authors": [],
          "default": "30000",
          "datatype": "number",
          "readable": true,
          "writable": false,
          "configuration": true,
          "private": false
        },
        "maxRedirects": {
          "type": "property",
          "label": "maxRedirects",
          "description": "Set the maximum number of redirects. There is a hard-cap of 25\nredirects to prevent cyclic requests .",
          "code": "maximumRedirects: NGN.private(10)",
          "start": {
            "line": 276,
            "column": 6
          },
          "end": {
            "line": 276,
            "column": 39
          },
          "flags": [],
          "authors": [],
          "default": "10",
          "datatype": "number",
          "readable": true,
          "writable": false,
          "configuration": true,
          "private": true
        }
      },
      "properties": {
        "UrlPattern": {
          "type": "property",
          "label": "UrlPattern",
          "description": null,
          "code": "UrlPattern: NGN.privateconst(new RegExp('^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?'))",
          "start": {
            "line": 23,
            "column": 6
          },
          "end": {
            "line": 23,
            "column": 108
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        },
        "url": {
          "type": "property",
          "label": "url",
          "description": null,
          "code": "set url (value) {\r\n    if (NGN.coalesceb(value) === null) {\r\n      NGN.WARN('NET.Request.url', 'A blank URL was identified for a request.')\r\n    }\r\n\r\n    // If a relative URL is provided in a browser context, prepend\r\n    // the current browser location to the URI.\r\n    if (/^.*\\:\\/{2}/i.exec(value) === null && /^\\.{1,2}\\/.*/.exec(value) !== null && NGN.global.hasOwnProperty('location')) {\r\n      let loc = NGN.global.location\r\n      let href = `${loc.host}${loc.pathname}`\r\n\r\n      href = href.split('/')\r\n\r\n      if (href[href.length - 1].indexOf('.') >= 0) {\r\n        href.pop()\r\n      }\r\n\r\n      href = href.join('/')\r\n      href = href.substring(0, href.lastIndexOf('/') + 1)\r\n\r\n      value = `${NGN.global.location.protocol}//${href}/${value}`.replace(/\\/{2,1000000}/i, '/')\r\n    }\r\n\r\n    this.uri = normalizeUrl(value.trim())\r\n    this.uriParts = this.parseUri(this.uri)\r\n  }",
          "start": {
            "line": 478,
            "column": 2
          },
          "end": {
            "line": 503,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": false,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "username": {
          "type": "property",
          "label": "username",
          "description": null,
          "code": "set username (user) {\r\n    user = NGN.coalesceb(user)\r\n\r\n    if (this.user !== user) {\r\n      this.user = user\r\n\r\n      if (NGN.coalesceb(this.secret) !== null) {\r\n        this.applyAuthorizationHeader()\r\n      }\r\n    }\r\n  }",
          "start": {
            "line": 553,
            "column": 2
          },
          "end": {
            "line": 563,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": false,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "password": {
          "type": "property",
          "label": "password",
          "description": null,
          "code": "set password (secret) {\r\n    secret = NGN.coalesceb(secret)\r\n\r\n    if (this.secret !== secret) {\r\n      this.secret = secret\r\n\r\n      if (NGN.coalesceb(this.user) !== null) {\r\n        this.applyAuthorizationHeader()\r\n      }\r\n    }\r\n  }",
          "start": {
            "line": 571,
            "column": 2
          },
          "end": {
            "line": 581,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": false,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "accessToken": {
          "type": "property",
          "label": "accessToken",
          "description": null,
          "code": "set accessToken (token) {\r\n    token = NGN.coalesceb(token)\r\n\r\n    if (this.bearerAccessToken !== token) {\r\n      this.bearerAccessToken = token\r\n      this.applyAuthorizationHeader()\r\n    }\r\n  }",
          "start": {
            "line": 588,
            "column": 2
          },
          "end": {
            "line": 595,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": false,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "withCredentials": {
          "type": "property",
          "label": "withCredentials",
          "description": "Indicates whether or not cross-site `Access-Control` requests should\nbe made using credentials such as cookies, authorization headers or\nTLS client certificates. Setting `withCredentials` has no effect on\nsame-site requests.\n\nIn addition, this flag is also used to indicate when cookies are to\nbe ignored in the response. The default is `false`. XMLHttpRequest\nfrom a different domain cannot set cookie values for their own\ndomain unless `withCredentials` is set to true before making the\nrequest. The third-party cookies obtained by setting `withCredentials`\nto true will still honor same-origin policy and hence can not be\naccessed by the requesting script through\n[document.cookie]\nor from response headers.",
          "code": "withCredentials: NGN.private(NGN.coalesce(cfg.withCredentials, false))",
          "start": {
            "line": 145,
            "column": 6
          },
          "end": {
            "line": 145,
            "column": 76
          },
          "flags": [],
          "authors": [],
          "default": "false",
          "datatype": "boolean",
          "readable": true,
          "writable": false,
          "configuration": true,
          "private": true
        },
        "timeout": {
          "type": "property",
          "label": "timeout",
          "description": "The number of milliseconds to wait before considering the request to\nhave timed out. Defaults to `30000` .",
          "code": "timeout: NGN.public(NGN.coalesce(cfg.timeout, 30000))",
          "start": {
            "line": 152,
            "column": 6
          },
          "end": {
            "line": 152,
            "column": 59
          },
          "flags": [],
          "authors": [],
          "default": "30000",
          "datatype": "number",
          "readable": true,
          "writable": false,
          "configuration": true,
          "private": false
        },
        "timer": {
          "type": "property",
          "label": "timer",
          "description": "A placeholder for a timeout monitor.",
          "code": "timer: NGN.private(null)",
          "start": {
            "line": 159,
            "column": 6
          },
          "end": {
            "line": 159,
            "column": 30
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": true
        },
        "isCrossOrigin": {
          "type": "property",
          "label": "isCrossOrigin",
          "description": "Determine if accessing a URL is considered a cross origin request.\r\n      \r\n      The URL to identify as a COR.",
          "code": "isCrossOrigin: NGN.privateconst(function (url) {\r\n        /* node-only */\r\n        if (networkInterfaces.indexOf(this.host) < 0) {\r\n          return true\r\n        }\r\n        /* end-node-only */\r\n\r\n        return this.host !== hostname // eslint-disable-line no-undef\r\n      })",
          "start": {
            "line": 169,
            "column": 6
          },
          "end": {
            "line": 177,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        },
        "applyAuthorizationHeader": {
          "type": "property",
          "label": "applyAuthorizationHeader",
          "description": "Generates and applies the authorization header for the request,\r\n      based on the presence of #username, #password, or #accessToken.",
          "code": "applyAuthorizationHeader: NGN.privateconst(() => {\r\n        if (NGN.coalesceb(this.bearerAccessToken) !== null) {\r\n          this.setHeader('Authorization', `Bearer ${this.bearerAccessToken}`, true)\r\n        } else if (NGN.coalesceb(this.user) && NGN.coalesceb(this.secret)) {\r\n          this.setHeader('Authorization', this.basicAuthToken(this.user, this.secret), true)\r\n        }\r\n      })",
          "start": {
            "line": 185,
            "column": 6
          },
          "end": {
            "line": 191,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        },
        "basicAuthToken": {
          "type": "property",
          "label": "basicAuthToken",
          "description": "Generates a basic authentication token from a username and password.",
          "code": "basicAuthToken: NGN.privateconst((user, secret) => {\r\n        // Binary to base64-ascii conversions\r\n        /* node-only */\r\n        return 'Basic ' + Buffer.from(`${user}:${secret}`, 'binary').toString('base64')\r\n        /* end-node-only */\r\n        /* browser-only */\r\n        return 'Basic ' + NGN.global.btoa(`${user}:${secret}`) // eslint-disable-line no-unreachable\r\n        /* end-browser-only */\r\n      })",
          "start": {
            "line": 199,
            "column": 6
          },
          "end": {
            "line": 207,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        },
        "parseUri": {
          "type": "property",
          "label": "parseUri",
          "description": "Parses the URI into composable parts.\r\n      \r\n      The URI/URL to parse.\r\n      \r\n      Returns a key/value object:\r\n      \n      ```js\r\n      {\r\n        protocol: 'http',\r\n        hostname: 'domain.com',\r\n        path: '/path/to/file.html',\r\n        query: 'a=1&b=2',\r\n        hash: null\r\n      }\r\n      ```",
          "code": "parseUri: NGN.privateconst(uri => {\r\n        let part = uri.match(this.UrlPattern)\r\n        let protocol\r\n        /* node-only */\r\n        protocol = 'http'\r\n        /* end-node-only */\r\n        /* browser-only */\r\n        protocol = window.location.protocol.replace(':', '').toLowerCase()\r\n        /* end-browser-only */\r\n        let url = {\r\n          protocol: NGN.coalesce(part[2], protocol),\r\n          hostname: NGN.coalesce(part[4], hostname),\r\n          path: NGN.coalesceb(part[5], '/'),\r\n          query: NGN.coalesceb(part[7]),\r\n          hash: NGN.coalesceb(part[9])\r\n        }\r\n\r\n        // URL contains a username/password.\r\n        if (url.hostname.indexOf('@') > 0) {\r\n          let credentials = uri.match(/^.*\\/{1,2}(.*):(.*)@/i)\r\n\r\n          url.hostname = url.hostname.split('@').pop()\r\n\r\n          this.user = credentials[1]\r\n          this.secret = credentials[2]\r\n          this.applyAuthorizationHeader()\r\n        }\r\n\r\n        url.port = NGN.coalesce(url.hostname.match(/:([0-9]{1,6})/), url.protocol === 'https' ? 443 : 80)\r\n\r\n        if (url.hostname.indexOf(':') > 0) {\r\n          url.hostname = url.hostname.split(':')[0]\r\n        }\r\n\r\n        if (url.path.charAt(0) !== '/') {\r\n          url.path = `/${url.path}`\r\n        }\r\n\r\n        return url\r\n      })",
          "start": {
            "line": 228,
            "column": 6
          },
          "end": {
            "line": 267,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": true
        },
        "uriParts": {
          "type": "property",
          "label": "uriParts",
          "description": null,
          "code": "uriParts: NGN.private(null)",
          "start": {
            "line": 269,
            "column": 6
          },
          "end": {
            "line": 269,
            "column": 33
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": true
        },
        "maxRedirects": {
          "type": "property",
          "label": "maxRedirects",
          "description": null,
          "code": "set maxRedirects (value) {\r\n    if (value > 25) {\r\n      value = 25\r\n    }\r\n\r\n    if (value < 0) {\r\n      value = 0\r\n    }\r\n\r\n    this.maximumRedirects = value\r\n  }",
          "start": {
            "line": 366,
            "column": 2
          },
          "end": {
            "line": 376,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": false,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "redirectAttempts": {
          "type": "property",
          "label": "redirectAttempts",
          "description": null,
          "code": "redirectAttempts: NGN.private(0)",
          "start": {
            "line": 277,
            "column": 6
          },
          "end": {
            "line": 277,
            "column": 38
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": true
        },
        "prepareBody": {
          "type": "property",
          "label": "prepareBody",
          "description": null,
          "code": "prepareBody: NGN.private(() => {\r\n        // Request body management\r\n        if (this.requestbody !== null) {\r\n          if (this.headers === null) {\r\n            this.headers = {}\r\n          }\r\n\r\n          let contentType = NGN.coalesceb(this.headers['Content-Type'], this.headers['content-type'], this.headers['Content-type'])\r\n\r\n          if (typeof this.requestbody === 'object') {\r\n            if (NGN.objectHasExactly(this.requestbody, 'form')) {\r\n              let form = this.requestbody.form\r\n              let keys = Object.keys(form)\r\n              let dataString = []\r\n\r\n              for (let i = 0; i < keys.length; i++) {\r\n                if (NGN.isFn(form[keys[i]])) {\r\n                  throw new Error('Invalid form data. Form data cannot be a complex data format such as an object or function.')\r\n                } else if (typeof form[keys[i]] === 'object') {\r\n                  dataString.push(`${keys[i]}=${encodeURIComponent(JSON.stringify(form[keys[i]]))}`)\r\n                } else {\r\n                  dataString.push(`${keys[i]}:${encodeURIComponent(form[keys[i]])}`)\r\n                }\r\n              }\r\n\r\n              this.requestbody = dataString.join('&')\r\n            } else {\r\n              this.requestbody = JSON.stringify(this.requestbody).trim()\r\n              this.setHeader('Content-Length', this.requestbody.length, false)\r\n              this.setHeader('Content-Type', NGN.coalesceb(contentType, 'application/json'), false)\r\n            }\r\n          }\r\n\r\n          if (typeof this.requestbody === 'string') {\r\n            if (contentType !== null) {\r\n              // Check for form data\r\n              let match = /([^=]+)=([^&]+)/.exec(this.requestbody)\r\n\r\n              if (match !== null && this.requestbody.trim().substr(0, 5).toLowerCase() !== 'data:' && this.requestbody.trim().substr(0, 1).toLowerCase() !== '<') {\r\n                this.setHeader('Content-Type', 'application/x-www-form-urlencoded', false)\r\n              } else {\r\n                this.setHeader('Content-Type', 'text/plain')\r\n\r\n                if (this.requestbody.trim().substr(0, 5).toLowerCase() === 'data:') {\r\n                  // Crude Data URL mimetype detection\r\n                  match = /^data:(.*);/gi.exec(this.requestbody.trim())\r\n\r\n                  if (match !== null) {\r\n                    this.setHeader('Content-Type', match[1])\r\n                  }\r\n                } else if (/^<\\?xml.*/gi.test(this.requestbody.trim())) {\r\n                  // Crude XML Detection\r\n                  this.setHeader('Content-Type', 'application/xml')\r\n                } else if (/^<html.*/gi.test(this.requestbody.trim())) {\r\n                  // Crude HTML Detection\r\n                  this.setHeader('Content-Type', 'text/html')\r\n                }\r\n              }\r\n            }\r\n\r\n            this.setHeader('Content-Type', this.requestbody.length, false)\r\n          } else {\r\n            NGN.WARN('NET.Request.body', `The request body must cannot be ${typeof this.requestbody}. Please provide a string, object, or binary value for the body.`)\r\n          }\r\n        }\r\n      })",
          "start": {
            "line": 279,
            "column": 6
          },
          "end": {
            "line": 344,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": true,
          "writable": true,
          "configuration": false,
          "private": true
        },
        "method": {
          "type": "property",
          "label": "method",
          "description": null,
          "code": "set method (value) {\r\n    if (this.httpmethod === value) {\r\n      return\r\n    }\r\n\r\n    if (NGN.coalesceb(value) === null) {\r\n      NGN.WARN('NET.Request.method', 'No HTTP method specified.')\r\n    }\r\n\r\n    value = value.trim().toUpperCase()\r\n\r\n    if (HttpMethods.indexOf(value) < 0) {\r\n      NGN.WARN('NET.Request.method', `A non-standard HTTP method was recognized in a request: ${value}.`)\r\n    }\r\n\r\n    this.httpmethod = value\r\n  }",
          "start": {
            "line": 509,
            "column": 2
          },
          "end": {
            "line": 525,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": false,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "protocol": {
          "type": "property",
          "label": "protocol",
          "description": null,
          "code": "get protocol () {\r\n    return NGN.coalesce(this.uriParts.protocol, 'http')\r\n  }",
          "start": {
            "line": 383,
            "column": 2
          },
          "end": {
            "line": 385,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "host": {
          "type": "property",
          "label": "host",
          "description": null,
          "code": "get host () {\r\n    return NGN.coalesce(this.uriParts.hostname)\r\n  }",
          "start": {
            "line": 391,
            "column": 2
          },
          "end": {
            "line": 393,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "hostname": {
          "type": "property",
          "label": "hostname",
          "description": null,
          "code": "get hostname () {\r\n    return this.host\r\n  }",
          "start": {
            "line": 395,
            "column": 2
          },
          "end": {
            "line": 397,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "port": {
          "type": "property",
          "label": "port",
          "description": null,
          "code": "get port () {\r\n    return this.uriParts.port\r\n  }",
          "start": {
            "line": 403,
            "column": 2
          },
          "end": {
            "line": 405,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "path": {
          "type": "property",
          "label": "path",
          "description": null,
          "code": "get path () {\r\n    return NGN.coalesce(this.uriParts.path, '/')\r\n  }",
          "start": {
            "line": 411,
            "column": 2
          },
          "end": {
            "line": 413,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "query": {
          "type": "property",
          "label": "query",
          "description": null,
          "code": "get query () {\r\n    return NGN.coalesce(this.uriParts.query, '')\r\n  }",
          "start": {
            "line": 420,
            "column": 2
          },
          "end": {
            "line": 422,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "queryParameters": {
          "type": "property",
          "label": "queryParameters",
          "description": null,
          "code": "get queryParameters () {\r\n    let params = this.query.split('&')\r\n    let resultSet = {}\r\n\r\n    for (let i = 0; i < params.length; i++) {\r\n      let keypair = params[i].split('=')\r\n      let attr = `__qp__${keypair[0]}__qp__`\r\n\r\n      Object.defineProperty(resultSet, attr, {\r\n        enumerable: false,\r\n        configurable: false,\r\n        writable: true,\r\n        value: NGN.coalesceb(keypair[1])\r\n      })\r\n\r\n      Object.defineProperty(resultSet, keypair[0], {\r\n        enumerable: true,\r\n        configurable: false,\r\n        get: () => { return resultSet[attr] },\r\n        set: (value) => {\r\n          resultSet[attr] = value\r\n          this.setQueryParameter(keypair[0], value, true)\r\n        }\r\n      })\r\n    }\r\n\r\n    return resultSet\r\n  }",
          "start": {
            "line": 433,
            "column": 2
          },
          "end": {
            "line": 460,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "hash": {
          "type": "property",
          "label": "hash",
          "description": null,
          "code": "get hash () {\r\n    return NGN.coalesce(this.uriParts.hash, '')\r\n  }",
          "start": {
            "line": 466,
            "column": 2
          },
          "end": {
            "line": 468,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "body": {
          "type": "property",
          "label": "body",
          "description": null,
          "code": "set body (value) {\r\n    this.requestbody = value\r\n    this.prepareBody()\r\n  }",
          "start": {
            "line": 531,
            "column": 2
          },
          "end": {
            "line": 534,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": false,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "crossOriginRequest": {
          "type": "property",
          "label": "crossOriginRequest",
          "description": null,
          "code": "get crossOriginRequest () {\r\n    return this.isCrossOrigin(this.uri)\r\n  }",
          "start": {
            "line": 541,
            "column": 2
          },
          "end": {
            "line": 543,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        }
      },
      "methods": {
        "constructor": {
          "type": "method",
          "label": "constructor",
          "description": null,
          "code": "constructor (cfg) {\r\n    cfg = cfg || {}\r\n\r\n    // Require URL and HTTP method\r\n    NGN.objectRequires(cfg, 'url')\r\n\r\n    if (NGN.objectHasAny(cfg, 'form', 'json')) {\r\n      NGN.WARN('NET.Request', '\"form\" and \"json\" configuration properties are not valid. Use \"body\" instead.')\r\n    }\r\n\r\n    Object.defineProperties(this, {\r\n      UrlPattern: NGN.privateconst(new RegExp('^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?')),\r\n\r\n      /**\r\n       * @cfgproperty {string} url (required)\r\n       * The complete URL for the request, including query parameters.\r\n       */\r\n      uri: NGN.private(null),\r\n\r\n      /**\r\n       * @cfg {string} [method=GET]\r\n       * The HTTP method to invoke when the request is sent. The standard\r\n       * RFC 2616 HTTP methods include:\r\n       *\r\n       * - OPTIONS\r\n       * - HEAD\r\n       * - GET\r\n       * - POST\r\n       * - PUT\r\n       * - DELETE\r\n       * - TRACE\r\n       * - CONNECT\r\n       *\r\n       * There are many additional non-standard methods some remote hosts\r\n       * will accept, including `PATCH`, `COPY`, `LINK`, `UNLINK`, `PURGE`,\r\n       * `LOCK`, `UNLOCK`, `VIEW`, and many others. If the remote host\r\n       * supports these methods, they may be used in an NGN.NET.Request.\r\n       * Non-standard methods will not be prevented, but NGN will trigger\r\n       * a warning event if a non-standard request is created.\r\n       */\r\n      httpmethod: NGN.private(null),\r\n\r\n      /**\r\n       * @cfg {boolean} [enforceMethodSafety=true]\r\n       * According to [RFC 2616](https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html),\r\n       * some HTTP methods are considered idempotent (safe). These methods\r\n       * should have no significance to data (i.e. read-only). For example,\r\n       * `OPTIONS`, `HEAD`, and `GET` are all idempotent. By default, NGN.NET\r\n       * loosely enforces idempotence by ignoring the #body when making a\r\n       * request. While it is not advised, nor officially supported, NGN.NET can\r\n       * technically ignore method safety, allowing a request body to be\r\n       * sent to a remote server. Set this configuration to `false` to\r\n       * prevent NGN.NET from enforcing idempotence/safety.\r\n       */\r\n      enforceMethodSafety: NGN.private(NGN.coalesce(cfg.enforceMethodSafety, cfg.enforcemethodsafety, true)),\r\n\r\n      /**\r\n       * @cfg {object} [headers]\r\n       * Optionally supply custom headers for the request. Most standard\r\n       * headers will be applied automatically (when appropriate), such\r\n       * as `Content-Type`, `Content-Length`, and `Authorization`.\r\n       * In Node-like environments, a `User-Agent` will be applied containing\r\n       * the `hostname` of the system making the request. Any custom headers\r\n       * supplied will override headers managed by NGN.NET.\r\n       */\r\n      headers: NGN.public(NGN.coalesceb(cfg.headers)),\r\n\r\n      /**\r\n       * @cfg {object|string|binary} [body]\r\n       * The body configuration supports text, an object, or a data URL or\r\n       * binary content. **For multi-part form data (file uploads), use\r\n       * the #files configuration _instead_ of this attribute.**\r\n       *\r\n       * It is also possible to construct a simple form submission\r\n       * (x-www-form-urlencoded) from a specially formatted key/value object\r\n       * conforming to the following syntax:\r\n       *\r\n       * ```json\r\n       * {\r\n       *   form: {\r\n       *     form_field_1: \"value\",\r\n       *     form_field_2: \"value\",\r\n       *     form_field_3: \"value\",\r\n       *   }\r\n       * }\r\n       * ```\r\n       * The object above will be automatically converted & url-encoded as:\r\n       *\r\n       * ```js\r\n       * form_field_1=value&form_field_2=value&form_field_3=value\r\n       * ```\r\n       *\r\n       * The appropriate request headers are automatically applied.\r\n       */\r\n      requestbody: NGN.public(NGN.coalesce(cfg.body)),\r\n\r\n      /**\r\n       * @cfgproperty {string} username\r\n       * A username to authenticate the request with (basic auth).\r\n       */\r\n      user: NGN.private(NGN.coalesceb(cfg.username)),\r\n\r\n      /**\r\n       * @cfgproperty {string} password\r\n       * A password to authenticate the request with (basic auth).\r\n       * @readonly\r\n       */\r\n      secret: NGN.private(NGN.coalesceb(cfg.password)),\r\n\r\n      /**\r\n       * @cfgproperty {string} accessToken\r\n       * An access token to authenticate the request with (Bearer auth).\r\n       * If this is configured, it will override any basic auth settings.\r\n       */\r\n      bearerAccessToken: NGN.private(NGN.coalesceb(cfg.accessToken)),\r\n\r\n      /**\r\n       * @cfgproperty {boolean} [withCredentials=false]\r\n       * Indicates whether or not cross-site `Access-Control` requests should\r\n       * be made using credentials such as cookies, authorization headers or\r\n       * TLS client certificates. Setting `withCredentials` has no effect on\r\n       * same-site requests.\r\n       *\r\n       * In addition, this flag is also used to indicate when cookies are to\r\n       * be ignored in the response. The default is `false`. XMLHttpRequest\r\n       * from a different domain cannot set cookie values for their own\r\n       * domain unless `withCredentials` is set to true before making the\r\n       * request. The third-party cookies obtained by setting `withCredentials`\r\n       * to true will still honor same-origin policy and hence can not be\r\n       * accessed by the requesting script through\r\n       * [document.cookie](https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie)\r\n       * or from response headers.\r\n       */\r\n      withCredentials: NGN.private(NGN.coalesce(cfg.withCredentials, false)),\r\n\r\n      /**\r\n       * @cfgproperty {Number} [timeout=30000]\r\n       * The number of milliseconds to wait before considering the request to\r\n       * have timed out. Defaults to `30000` (30 seconds).\r\n       */\r\n      timeout: NGN.public(NGN.coalesce(cfg.timeout, 30000)),\r\n\r\n      /**\r\n       * @method timer\r\n       * A placeholder for a timeout monitor.\r\n       * @private\r\n       */\r\n      timer: NGN.private(null),\r\n\r\n      /**\r\n       * @method isCrossOrigin\r\n       * Determine if accessing a URL is considered a cross origin request.\r\n       * @param {string} url\r\n       * The URL to identify as a COR.\r\n       * @returns {boolean}\r\n       * @private\r\n       */\r\n      isCrossOrigin: NGN.privateconst(function (url) {\r\n        /* node-only */\r\n        if (networkInterfaces.indexOf(this.host) < 0) {\r\n          return true\r\n        }\r\n        /* end-node-only */\r\n\r\n        return this.host !== hostname // eslint-disable-line no-undef\r\n      }),\r\n\r\n      /**\r\n       * @method applyAuthorizationHeader\r\n       * Generates and applies the authorization header for the request,\r\n       * based on the presence of #username, #password, or #accessToken.\r\n       * @private\r\n       */\r\n      applyAuthorizationHeader: NGN.privateconst(() => {\r\n        if (NGN.coalesceb(this.bearerAccessToken) !== null) {\r\n          this.setHeader('Authorization', `Bearer ${this.bearerAccessToken}`, true)\r\n        } else if (NGN.coalesceb(this.user) && NGN.coalesceb(this.secret)) {\r\n          this.setHeader('Authorization', this.basicAuthToken(this.user, this.secret), true)\r\n        }\r\n      }),\r\n\r\n      /**\r\n       * @method basicAuthToken\r\n       * Generates a basic authentication token from a username and password.\r\n       * @return {[type]} [description]\r\n       * @private\r\n       */\r\n      basicAuthToken: NGN.privateconst((user, secret) => {\r\n        // Binary to base64-ascii conversions\r\n        /* node-only */\r\n        return 'Basic ' + Buffer.from(`${user}:${secret}`, 'binary').toString('base64')\r\n        /* end-node-only */\r\n        /* browser-only */\r\n        return 'Basic ' + NGN.global.btoa(`${user}:${secret}`) // eslint-disable-line no-unreachable\r\n        /* end-browser-only */\r\n      }),\r\n\r\n      /**\r\n       * @method parseUri\r\n       * Parses the URI into composable parts.\r\n       * @param {string} URL\r\n       * The URI/URL to parse.\r\n       * @return {Object}\r\n       * Returns a key/value object:\r\n       *\r\n       * ```js\r\n       * {\r\n       *   protocol: 'http',\r\n       *   hostname: 'domain.com',\r\n       *   path: '/path/to/file.html',\r\n       *   query: 'a=1&b=2',\r\n       *   hash: null\r\n       * }\r\n       * ```\r\n       * @private\r\n       */\r\n      parseUri: NGN.privateconst(uri => {\r\n        let part = uri.match(this.UrlPattern)\r\n        let protocol\r\n        /* node-only */\r\n        protocol = 'http'\r\n        /* end-node-only */\r\n        /* browser-only */\r\n        protocol = window.location.protocol.replace(':', '').toLowerCase()\r\n        /* end-browser-only */\r\n        let url = {\r\n          protocol: NGN.coalesce(part[2], protocol),\r\n          hostname: NGN.coalesce(part[4], hostname),\r\n          path: NGN.coalesceb(part[5], '/'),\r\n          query: NGN.coalesceb(part[7]),\r\n          hash: NGN.coalesceb(part[9])\r\n        }\r\n\r\n        // URL contains a username/password.\r\n        if (url.hostname.indexOf('@') > 0) {\r\n          let credentials = uri.match(/^.*\\/{1,2}(.*):(.*)@/i)\r\n\r\n          url.hostname = url.hostname.split('@').pop()\r\n\r\n          this.user = credentials[1]\r\n          this.secret = credentials[2]\r\n          this.applyAuthorizationHeader()\r\n        }\r\n\r\n        url.port = NGN.coalesce(url.hostname.match(/:([0-9]{1,6})/), url.protocol === 'https' ? 443 : 80)\r\n\r\n        if (url.hostname.indexOf(':') > 0) {\r\n          url.hostname = url.hostname.split(':')[0]\r\n        }\r\n\r\n        if (url.path.charAt(0) !== '/') {\r\n          url.path = `/${url.path}`\r\n        }\r\n\r\n        return url\r\n      }),\r\n\r\n      uriParts: NGN.private(null),\r\n\r\n      /**\r\n       * @cfgproperty {Number} [maxRedirects=10]\r\n       * Set the maximum number of redirects. There is a hard-cap of 25\r\n       * redirects to prevent cyclic requests (endless loop).\r\n       */\r\n      maximumRedirects: NGN.private(10),\r\n      redirectAttempts: NGN.private(0),\r\n\r\n      prepareBody: NGN.private(() => {\r\n        // Request body management\r\n        if (this.requestbody !== null) {\r\n          if (this.headers === null) {\r\n            this.headers = {}\r\n          }\r\n\r\n          let contentType = NGN.coalesceb(this.headers['Content-Type'], this.headers['content-type'], this.headers['Content-type'])\r\n\r\n          if (typeof this.requestbody === 'object') {\r\n            if (NGN.objectHasExactly(this.requestbody, 'form')) {\r\n              let form = this.requestbody.form\r\n              let keys = Object.keys(form)\r\n              let dataString = []\r\n\r\n              for (let i = 0; i < keys.length; i++) {\r\n                if (NGN.isFn(form[keys[i]])) {\r\n                  throw new Error('Invalid form data. Form data cannot be a complex data format such as an object or function.')\r\n                } else if (typeof form[keys[i]] === 'object') {\r\n                  dataString.push(`${keys[i]}=${encodeURIComponent(JSON.stringify(form[keys[i]]))}`)\r\n                } else {\r\n                  dataString.push(`${keys[i]}:${encodeURIComponent(form[keys[i]])}`)\r\n                }\r\n              }\r\n\r\n              this.requestbody = dataString.join('&')\r\n            } else {\r\n              this.requestbody = JSON.stringify(this.requestbody).trim()\r\n              this.setHeader('Content-Length', this.requestbody.length, false)\r\n              this.setHeader('Content-Type', NGN.coalesceb(contentType, 'application/json'), false)\r\n            }\r\n          }\r\n\r\n          if (typeof this.requestbody === 'string') {\r\n            if (contentType !== null) {\r\n              // Check for form data\r\n              let match = /([^=]+)=([^&]+)/.exec(this.requestbody)\r\n\r\n              if (match !== null && this.requestbody.trim().substr(0, 5).toLowerCase() !== 'data:' && this.requestbody.trim().substr(0, 1).toLowerCase() !== '<') {\r\n                this.setHeader('Content-Type', 'application/x-www-form-urlencoded', false)\r\n              } else {\r\n                this.setHeader('Content-Type', 'text/plain')\r\n\r\n                if (this.requestbody.trim().substr(0, 5).toLowerCase() === 'data:') {\r\n                  // Crude Data URL mimetype detection\r\n                  match = /^data:(.*);/gi.exec(this.requestbody.trim())\r\n\r\n                  if (match !== null) {\r\n                    this.setHeader('Content-Type', match[1])\r\n                  }\r\n                } else if (/^<\\?xml.*/gi.test(this.requestbody.trim())) {\r\n                  // Crude XML Detection\r\n                  this.setHeader('Content-Type', 'application/xml')\r\n                } else if (/^<html.*/gi.test(this.requestbody.trim())) {\r\n                  // Crude HTML Detection\r\n                  this.setHeader('Content-Type', 'text/html')\r\n                }\r\n              }\r\n            }\r\n\r\n            this.setHeader('Content-Type', this.requestbody.length, false)\r\n          } else {\r\n            NGN.WARN('NET.Request.body', `The request body must cannot be ${typeof this.requestbody}. Please provide a string, object, or binary value for the body.`)\r\n          }\r\n        }\r\n      })\r\n    })\r\n\r\n    if (cfg.maxRedirects) {\r\n      this.maxRedirects = cfg.maxRedirects\r\n    }\r\n\r\n    this.url = cfg.url\r\n    this.method = NGN.coalesceb(cfg.method, 'GET')\r\n\r\n    this.prepareBody()\r\n\r\n    // Apply authorization if applicable\r\n    if (NGN.coalesce(this.user, this.secret, this.bearerAccessToken) !== null) {\r\n      this.applyAuthorizationHeader()\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 12,
            "column": 2
          },
          "end": {
            "line": 360,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "cfg": {
              "type": "argument",
              "label": "cfg",
              "description": null,
              "code": "cfg",
              "start": {
                "line": 12,
                "column": 15
              },
              "end": {
                "line": 12,
                "column": 18
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "constructor",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "timer": {
          "type": "method",
          "label": "timer",
          "description": "A placeholder for a timeout monitor.",
          "code": "timer: NGN.private(null)",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 159,
            "column": 6
          },
          "end": {
            "line": 159,
            "column": 30
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": "init",
          "computed": false,
          "super": null,
          "override": false,
          "private": true
        },
        "isCrossOrigin": {
          "type": "method",
          "label": "isCrossOrigin",
          "description": "Determine if accessing a URL is considered a cross origin request.",
          "code": "isCrossOrigin: NGN.privateconst(function (url) {\r\n        /* node-only */\r\n        if (networkInterfaces.indexOf(this.host) < 0) {\r\n          return true\r\n        }\r\n        /* end-node-only */\r\n\r\n        return this.host !== hostname // eslint-disable-line no-undef\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 169,
            "column": 6
          },
          "end": {
            "line": 177,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "url": {
              "type": "argument",
              "label": "url",
              "description": "The URL to identify as a COR.",
              "code": "isCrossOrigin: NGN.privateconst(function (url) {\r\n        /* node-only */\r\n        if (networkInterfaces.indexOf(this.host) < 0) {\r\n          return true\r\n        }\r\n        /* end-node-only */\r\n\r\n        return this.host !== hostname // eslint-disable-line no-undef\r\n      })",
              "start": {
                "line": 169,
                "column": 6
              },
              "end": {
                "line": 177,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            }
          },
          "returnType": "boolean",
          "returnDescription": "",
          "kind": "init",
          "computed": false,
          "super": null,
          "override": false,
          "private": true
        },
        "applyAuthorizationHeader": {
          "type": "method",
          "label": "applyAuthorizationHeader",
          "description": "Generates and applies the authorization header for the request,\nbased on the presence of #username, #password, or #accessToken.",
          "code": "applyAuthorizationHeader: NGN.privateconst(() => {\r\n        if (NGN.coalesceb(this.bearerAccessToken) !== null) {\r\n          this.setHeader('Authorization', `Bearer ${this.bearerAccessToken}`, true)\r\n        } else if (NGN.coalesceb(this.user) && NGN.coalesceb(this.secret)) {\r\n          this.setHeader('Authorization', this.basicAuthToken(this.user, this.secret), true)\r\n        }\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 185,
            "column": 6
          },
          "end": {
            "line": 191,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": "init",
          "computed": false,
          "super": null,
          "override": false,
          "private": true
        },
        "basicAuthToken": {
          "type": "method",
          "label": "basicAuthToken",
          "description": "Generates a basic authentication token from a username and password.",
          "code": "basicAuthToken: NGN.privateconst((user, secret) => {\r\n        // Binary to base64-ascii conversions\r\n        /* node-only */\r\n        return 'Basic ' + Buffer.from(`${user}:${secret}`, 'binary').toString('base64')\r\n        /* end-node-only */\r\n        /* browser-only */\r\n        return 'Basic ' + NGN.global.btoa(`${user}:${secret}`) // eslint-disable-line no-unreachable\r\n        /* end-browser-only */\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 199,
            "column": 6
          },
          "end": {
            "line": 207,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "user": {
              "type": "argument",
              "label": "user",
              "description": null,
              "code": "user",
              "start": {
                "line": 199,
                "column": 40
              },
              "end": {
                "line": 199,
                "column": 44
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            },
            "secret": {
              "type": "argument",
              "label": "secret",
              "description": null,
              "code": "secret",
              "start": {
                "line": 199,
                "column": 46
              },
              "end": {
                "line": 199,
                "column": 52
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "returnType": "[type]",
          "returnDescription": "description",
          "kind": "init",
          "computed": false,
          "super": null,
          "override": false,
          "private": true
        },
        "parseUri": {
          "type": "method",
          "label": "parseUri",
          "description": "Parses the URI into composable parts.",
          "code": "parseUri: NGN.privateconst(uri => {\r\n        let part = uri.match(this.UrlPattern)\r\n        let protocol\r\n        /* node-only */\r\n        protocol = 'http'\r\n        /* end-node-only */\r\n        /* browser-only */\r\n        protocol = window.location.protocol.replace(':', '').toLowerCase()\r\n        /* end-browser-only */\r\n        let url = {\r\n          protocol: NGN.coalesce(part[2], protocol),\r\n          hostname: NGN.coalesce(part[4], hostname),\r\n          path: NGN.coalesceb(part[5], '/'),\r\n          query: NGN.coalesceb(part[7]),\r\n          hash: NGN.coalesceb(part[9])\r\n        }\r\n\r\n        // URL contains a username/password.\r\n        if (url.hostname.indexOf('@') > 0) {\r\n          let credentials = uri.match(/^.*\\/{1,2}(.*):(.*)@/i)\r\n\r\n          url.hostname = url.hostname.split('@').pop()\r\n\r\n          this.user = credentials[1]\r\n          this.secret = credentials[2]\r\n          this.applyAuthorizationHeader()\r\n        }\r\n\r\n        url.port = NGN.coalesce(url.hostname.match(/:([0-9]{1,6})/), url.protocol === 'https' ? 443 : 80)\r\n\r\n        if (url.hostname.indexOf(':') > 0) {\r\n          url.hostname = url.hostname.split(':')[0]\r\n        }\r\n\r\n        if (url.path.charAt(0) !== '/') {\r\n          url.path = `/${url.path}`\r\n        }\r\n\r\n        return url\r\n      })",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 228,
            "column": 6
          },
          "end": {
            "line": 267,
            "column": 8
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "uri": {
              "type": "argument",
              "label": "URL",
              "description": "The URI/URL to parse.",
              "code": "uri",
              "start": {
                "line": 228,
                "column": 33
              },
              "end": {
                "line": 228,
                "column": 36
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "URL": {
              "type": "argument",
              "label": "URL",
              "description": "The URI/URL to parse.",
              "code": "parseUri: NGN.privateconst(uri => {\r\n        let part = uri.match(this.UrlPattern)\r\n        let protocol\r\n        /* node-only */\r\n        protocol = 'http'\r\n        /* end-node-only */\r\n        /* browser-only */\r\n        protocol = window.location.protocol.replace(':', '').toLowerCase()\r\n        /* end-browser-only */\r\n        let url = {\r\n          protocol: NGN.coalesce(part[2], protocol),\r\n          hostname: NGN.coalesce(part[4], hostname),\r\n          path: NGN.coalesceb(part[5], '/'),\r\n          query: NGN.coalesceb(part[7]),\r\n          hash: NGN.coalesceb(part[9])\r\n        }\r\n\r\n        // URL contains a username/password.\r\n        if (url.hostname.indexOf('@') > 0) {\r\n          let credentials = uri.match(/^.*\\/{1,2}(.*):(.*)@/i)\r\n\r\n          url.hostname = url.hostname.split('@').pop()\r\n\r\n          this.user = credentials[1]\r\n          this.secret = credentials[2]\r\n          this.applyAuthorizationHeader()\r\n        }\r\n\r\n        url.port = NGN.coalesce(url.hostname.match(/:([0-9]{1,6})/), url.protocol === 'https' ? 443 : 80)\r\n\r\n        if (url.hostname.indexOf(':') > 0) {\r\n          url.hostname = url.hostname.split(':')[0]\r\n        }\r\n\r\n        if (url.path.charAt(0) !== '/') {\r\n          url.path = `/${url.path}`\r\n        }\r\n\r\n        return url\r\n      })",
              "start": {
                "line": 228,
                "column": 6
              },
              "end": {
                "line": 267,
                "column": 8
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            }
          },
          "returnType": "Object",
          "returnDescription": "null Returns a key/value object:\n\n```js\n{\nprotocol: 'http',\nhostname: 'domain.com',\npath: '/path/to/file.html',\nquery: 'a=1&b=2',\nhash: null\n}\n```",
          "kind": "init",
          "computed": false,
          "super": null,
          "override": false,
          "private": true
        },
        "setHeader": {
          "type": "method",
          "label": "setHeader",
          "description": "Add a header to the request.",
          "code": "setHeader (key, value, overwriteExisting = true) {\r\n    key = key.replace(/'|\"/gi, '').toLowerCase()\r\n\r\n    if (this.headers === null || this.headers[key] === undefined || overwriteExisting) {\r\n      if (this.headers === null) {\r\n        this.headers = {}\r\n      }\r\n\r\n      this.headers[key] = value\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 608,
            "column": 2
          },
          "end": {
            "line": 618,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "key": {
              "type": "argument",
              "label": "header",
              "description": "The name of the header.",
              "code": "key",
              "start": {
                "line": 608,
                "column": 13
              },
              "end": {
                "line": 608,
                "column": 16
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "value": {
              "type": "argument",
              "label": "value",
              "description": "Value of the header.",
              "code": "value",
              "start": {
                "line": 608,
                "column": 18
              },
              "end": {
                "line": 608,
                "column": 23
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "overwriteExisting": {
              "type": "argument",
              "label": "overwriteExisting",
              "description": "If the header already exists, setting this to `false` will prevent\nthe original header from being overwritten.",
              "code": "overwriteExisting = true",
              "start": {
                "line": 608,
                "column": 25
              },
              "end": {
                "line": 608,
                "column": 49
              },
              "flags": [],
              "authors": [],
              "default": "true",
              "datatype": "boolean",
              "required": false,
              "enum": null
            },
            "header": {
              "type": "argument",
              "label": "header",
              "description": "The name of the header.",
              "code": "key",
              "start": {
                "line": 608,
                "column": 13
              },
              "end": {
                "line": 608,
                "column": 16
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "getHeader": {
          "type": "method",
          "label": "getHeader",
          "description": "",
          "code": "getHeader (key) {\r\n    if (this.headers === null) {\r\n      return undefined\r\n    }\r\n\r\n    if (!this.headers.hasOwnProperty(key.toLowerCase())) {\r\n      return undefined\r\n    }\r\n\r\n    return this.headers[key.toLowerCase()]\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 627,
            "column": 2
          },
          "end": {
            "line": 637,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "key": {
              "type": "argument",
              "label": "header",
              "description": "The name of the header to retrieve.",
              "code": "key",
              "start": {
                "line": 627,
                "column": 13
              },
              "end": {
                "line": 627,
                "column": 16
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "header": {
              "type": "argument",
              "label": "header",
              "description": "The name of the header to retrieve.",
              "code": "key",
              "start": {
                "line": 627,
                "column": 13
              },
              "end": {
                "line": 627,
                "column": 16
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            }
          },
          "returnType": "string",
          "returnDescription": "null Returns the current value of the specified header.",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "removeHeader": {
          "type": "method",
          "label": "removeHeader",
          "description": "Removes a header from the request. Nothing happens if the header does\nnot exist.",
          "code": "removeHeader (key) {\r\n    if (this.headers !== null) {\r\n      delete this.headers[key.toLowerCase()]\r\n      delete this.headers[key]\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 646,
            "column": 2
          },
          "end": {
            "line": 651,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "key": {
              "type": "argument",
              "label": "header",
              "description": "The header to remove.",
              "code": "key",
              "start": {
                "line": 646,
                "column": 16
              },
              "end": {
                "line": 646,
                "column": 19
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "header": {
              "type": "argument",
              "label": "header",
              "description": "The header to remove.",
              "code": "key",
              "start": {
                "line": 646,
                "column": 16
              },
              "end": {
                "line": 646,
                "column": 19
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "setQueryParameter": {
          "type": "method",
          "label": "setQueryParameter",
          "description": "Add a query parameter to the request.",
          "code": "setQueryParameter (key, value, overwriteExisting = true) {\r\n    let re = new RegExp(\"^.*(\\\\?|&)(\" + key + \".*)(&.*)$|^.*(\\\\?|&)(\" + key + \".*)$\", 'i') // eslint-disable-line quotes\r\n    let exists = (re.exec(this.uri) !== null)\r\n    let match\r\n\r\n    if (exists) {\r\n      if (!overwriteExisting) {\r\n        return\r\n      }\r\n\r\n      match = re.exec(this.uri)\r\n\r\n      if (match !== null) {\r\n        this.url = this.uri.replace(`${NGN.coalesceb(match[5], match[2])}`, `${key}${value !== null ? '=' + encodeURIComponent(value) : ''}`)\r\n      }\r\n    } else {\r\n      this.url = `${this.uri}${this.query.length === 0 ? '?' : '&'}${key}${value !== null ? '=' + encodeURIComponent(value) : ''}`\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 665,
            "column": 2
          },
          "end": {
            "line": 683,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "key": {
              "type": "argument",
              "label": "parameter",
              "description": "The name of the parameter.",
              "code": "key",
              "start": {
                "line": 665,
                "column": 21
              },
              "end": {
                "line": 665,
                "column": 24
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            },
            "value": {
              "type": "argument",
              "label": "value",
              "description": "Value of the parameter. The value is automatically URL encoded. If the\nvalue is null, only the key will be added to the URL",
              "code": "value",
              "start": {
                "line": 665,
                "column": 26
              },
              "end": {
                "line": 665,
                "column": 31
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": [
                "ex: `http://domain.com/page.html?key`"
              ]
            },
            "overwriteExisting": {
              "type": "argument",
              "label": "overwriteExisting",
              "description": "If the parameter already exists, setting this to `false` will prevent\nthe original parameter from being overwritten.",
              "code": "overwriteExisting = true",
              "start": {
                "line": 665,
                "column": 33
              },
              "end": {
                "line": 665,
                "column": 57
              },
              "flags": [],
              "authors": [],
              "default": "true",
              "datatype": "boolean",
              "required": false,
              "enum": null
            },
            "parameter": {
              "type": "argument",
              "label": "parameter",
              "description": "The name of the parameter.",
              "code": "key",
              "start": {
                "line": 665,
                "column": 21
              },
              "end": {
                "line": 665,
                "column": 24
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "removeQueryParameter": {
          "type": "method",
          "label": "removeQueryParameter",
          "description": "Remove a query parameter from the request URI.",
          "code": "removeQueryParameter (key) {\r\n    this.url = this.uri.replace(new RegExp(`${key}=(.[^&]+)|\\\\?${key}|&${key}`, 'gi'), '')\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 690,
            "column": 2
          },
          "end": {
            "line": 692,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "key": {
              "type": "argument",
              "label": "key",
              "description": "",
              "code": "key",
              "start": {
                "line": 690,
                "column": 24
              },
              "end": {
                "line": 690,
                "column": 27
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "startMonitor": {
          "type": "method",
          "label": "startMonitor",
          "description": null,
          "code": "startMonitor () {\r\n    if (this.timer === null) {\r\n      this.timer = setTimeout(() => {\r\n        throw new Error('Timed out retrieving ' + this.url)\r\n      }, this.timeout)\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 694,
            "column": 2
          },
          "end": {
            "line": 700,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "stopMonitor": {
          "type": "method",
          "label": "stopMonitor",
          "description": null,
          "code": "stopMonitor () {\r\n    clearTimeout(this.timer)\r\n    this.timer = null\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 702,
            "column": 2
          },
          "end": {
            "line": 705,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "send": {
          "type": "method",
          "label": "send",
          "description": "Send the request.",
          "code": "send (callback) {\r\n    let body = this.body\r\n\r\n    // Disable body when safe methods are enforced.\r\n    if (NGN.coalesce(body)) {\r\n      if (this.enforceMethodSafety && 'OPTIONS|HEAD|GET'.indexOf(this.method) >= 0) {\r\n        body = null\r\n      }\r\n    }\r\n\r\n    /* node-only */\r\n    // Run request in Node-like environments\r\n    // Support local file system retrieval in node-like environments.\r\n    // This short-circuits the request and reads the file system instead.\r\n    if (this.protocol === 'file') {\r\n      if (!NGN.isFn(callback)) {\r\n        throw new Error('A callback is required when retrieving system files in a node-like environment.')\r\n      }\r\n\r\n      let response = {\r\n        status: require('fs').existsSync(this.uri.replace('file://', '')) ? 200 : 400\r\n      }\r\n\r\n      response.responseText = response.status === 200 ? require('fs').readFileSync(this.uri.replace('file://', '')).toString() : 'File does not exist or could not be found.'\r\n\r\n      return callback(response)\r\n    }\r\n\r\n    const http = this.protocol === 'https' ? require('https') : require('http')\r\n\r\n    let params = NGN.coalesceb(this.query)\r\n    let reqOptions = {\r\n      hostname: this.hostname,\r\n      port: this.port,\r\n      method: this.method,\r\n      headers: this.headers,\r\n      path: this.path\r\n    }\r\n\r\n    if (params !== null) {\r\n      reqOptions.path = `${this.path}?${params}`\r\n    }\r\n\r\n    const req = http.request(reqOptions, (response) => {\r\n      response.setEncoding('utf8')\r\n\r\n      let body = ''\r\n      response.on('data', (chunk) => {\r\n        body += chunk\r\n      })\r\n\r\n      response.on('end', () => {\r\n        switch (response.statusCode) {\r\n          case 301:\r\n          case 302:\r\n          case 307:\r\n          case 308:\r\n            if (this.redirectAttempts > this.maxRedirects) {\r\n              this.redirectAttempts = 0\r\n\r\n              this.stopMonitor()\r\n\r\n              return callback({ // eslint-disable-line standard/no-callback-literal\r\n                status: 500,\r\n                statusText: 'Too many redirects',\r\n                responseText: 'Too many redirects',\r\n                responseXML: 'Too many redirects',\r\n                readyState: 4\r\n              })\r\n            }\r\n\r\n            if (response.headers.location === undefined) {\r\n              this.stopMonitor()\r\n\r\n              return callback({ // eslint-disable-line standard/no-callback-literal\r\n                status: 502,\r\n                statusText: 'Bad Gateway',\r\n                responseText: 'Bad Gateway',\r\n                responseXML: 'Bad Gateway',\r\n                readyState: 4\r\n              })\r\n            }\r\n\r\n            this.redirectAttempts++\r\n            this.url = response.headers.location\r\n\r\n            return this.send(callback)\r\n\r\n          default:\r\n            this.stopMonitor()\r\n\r\n            return callback({ // eslint-disable-line standard/no-callback-literal\r\n              status: response.statusCode,\r\n              statusText: NGN.coalesce(response.statusText),\r\n              responseText: body,\r\n              responseXML: body,\r\n              readyState: 4\r\n            })\r\n        }\r\n      })\r\n    })\r\n\r\n    req.on('error', (err) => {\r\n      this.stopMonitor()\r\n\r\n      if (NGN.isFn(callback)) {\r\n        callback({ // eslint-disable-line standard/no-callback-literal\r\n          status: 400,\r\n          statusText: err.message,\r\n          responseText: err.message,\r\n          responseXML: err.message,\r\n          readyState: 0\r\n        })\r\n      } else {\r\n        throw err\r\n      }\r\n    })\r\n\r\n    this.startMonitor()\r\n\r\n    if (this.body) {\r\n      req.write(this.body)\r\n    }\r\n\r\n    req.end()\r\n    /* end-node-only */\r\n    /* browser-only */\r\n    let xhr = new XMLHttpRequest()\r\n    let responded = false\r\n    let me = this\r\n\r\n    // Apply readystate change handler\r\n    xhr.onreadystatechange = function () {\r\n      if (responded) {\r\n        return\r\n      }\r\n\r\n      if (xhr.readyState === XMLHttpRequest.DONE) {\r\n        responded = true\r\n\r\n        if (xhr.status === 0) {\r\n          NGN.WARN(`Request Error: ${me.method} ${me.url} (likely a CORS issue).`)\r\n        }\r\n\r\n        if (NGN.isFn(callback)) {\r\n          callback(xhr)\r\n        }\r\n      }\r\n    }\r\n\r\n    // Apply error handler\r\n    xhr.onerror = function (e) {\r\n      NGN.WARN('NET.error', e)\r\n\r\n      if (!responded && NGN.isFn(callback)) {\r\n        callback(xhr)\r\n      }\r\n\r\n      responded = true\r\n    }\r\n\r\n    xhr.ontimeout = function (e) {\r\n      responded = true\r\n      callback(xhr)\r\n    }\r\n\r\n    xhr.timeout = this.timeout\r\n\r\n    // Open the request\r\n    xhr.open(this.method, this.url, true)\r\n\r\n    // Apply withCredentials\r\n    xhr.withCredentials = this.withCredentials\r\n\r\n    // Apply Request Headers\r\n    if (this.headers !== null) {\r\n      let headers = Object.keys(this.headers)\r\n      for (let i = 0; i < headers.length; i++) {\r\n        xhr.setRequestHeader(headers[i], this.headers[headers[i]])\r\n      }\r\n    }\r\n\r\n    // Write the body (which may be null) & send the request\r\n    xhr.send(body)\r\n    /* end-browser-only */\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 715,
            "column": 2
          },
          "end": {
            "line": 900,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "callback": {
              "type": "argument",
              "label": "callback",
              "description": null,
              "code": "callback",
              "start": {
                "line": 715,
                "column": 8
              },
              "end": {
                "line": 715,
                "column": 16
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        }
      }
    },
    "NGN.NET.Resource": {
      "type": "class",
      "label": "NGN.NET.Resource",
      "description": "Represents the current global query paramaters.\r\n  \n  This is commonly used when a remote resource requires a specific\r\n  query paramater on every call.\r\n  \n  Example\n  \n  ```js\r\n  let resource = new NGN.NET.Resource(...)\r\n  \n  resource.query = {\r\n    'user_id': '12345'\r\n  }\r\n  ```\r\n  \n  All parameter values are automatically URL-encoded.",
      "code": "class NetworkResource extends Network {\r\n  constructor (cfg) {\r\n    super()\r\n\r\n    cfg = cfg || {}\r\n\r\n    Object.defineProperties(this, {\r\n      /**\r\n       * @cfg {object} headers\r\n       * Contains headers (key/value) that are applied to all requests.\r\n       */\r\n      globalHeaders: NGN.private(NGN.coalesceb(cfg.headers, {})),\r\n\r\n      /**\r\n       * @cfg {object} credentials\r\n       * Contains credentials that are applied to all requests.\r\n       * @private\r\n       */\r\n      globalCredentials: NGN.private(NGN.coalesceb(cfg.credentials, {})),\r\n\r\n      /**\r\n       * @cfg {string} username\r\n       * Use this to set a username (instead of using #credentials).\r\n       */\r\n      user: NGN.private(NGN.coalesceb(cfg.username)),\r\n\r\n      /**\r\n       * @cfg {string} password\r\n       * Use this to set a password (instead of using #credentials).\r\n       */\r\n      secret: NGN.private(NGN.coalesceb(cfg.password)),\r\n\r\n      /**\r\n       * @cfg {string} accessToken\r\n       * Use this to set an access token (instead of using #credentials).\r\n       */\r\n      accesstoken: NGN.private(NGN.coalesceb(cfg.token, cfg.accessToken)),\r\n\r\n      /**\r\n       * @cfg {object} query\r\n       * Contains query parameters to be applied to all requests. All values\r\n       * are automatically url-encoded.\r\n       */\r\n      globalQuery: NGN.private(NGN.coalesceb(cfg.query, {})),\r\n\r\n      /**\r\n       * @cfg {string} [baseUrl=window.loction.origin]\r\n       * The root domain/base URL to apply to all requests to relative URL's.\r\n       * This was designed for uses where a backend API may be served on\r\n       * another domain (such as api.mydomain.com instead of www.mydomain.com).\r\n       * The root will only be applied to relative paths that do not begin\r\n       * with a protocol. For example, `./path/to/endpoint` **will** have\r\n       * the root applied (`{root}/path/to/endpoint`) whereas `https://domain.com/endpoint`\r\n       * will **not** have the root applied.\r\n       */\r\n      baseUrl: NGN.private(NGN.coalesce(cfg.baseUrl, cfg.baseurl, `http://${hostname}/`)),\r\n\r\n      /**\r\n       * @cfg {boolean} [nocache=false]\r\n       * Set this to `true` to add a unique cache-busting URL parameter to all requests.\r\n       */\r\n      nocache: NGN.private(NGN.coalesce(cfg.nocache, false)),\r\n\r\n      /**\r\n       * @cfg {boolean} [sslonly=false]\r\n       * Set this to true to rewrite all URL's to use HTTPS.\r\n       */\r\n      sslonly: NGN.public(NGN.coalesce(cfg.sslonly, false))\r\n    })\r\n\r\n    if (this.baseUrl.indexOf('://') < 0 || this.baseUrl.indexOf('://') > 10) {\r\n      this.baseUrl = `http${this.sslonly ? 's' : ''}://${this.baseUrl}`\r\n    } else if (this.sslonly) {\r\n      this.baseUrl = this.baseUrl.replace('http://', 'https://')\r\n    }\r\n\r\n    if (this.accesstoken !== null) {\r\n      this.credentials = {\r\n        accessToken: this.accesstoken\r\n      }\r\n    } else if (this.user !== null && this.ssecret !== null) {\r\n      this.credentials = {\r\n        username: this.user,\r\n        password: this.secret\r\n      }\r\n    }\r\n  }\r\n\r\n  get username () {\r\n    return this.user\r\n  }\r\n\r\n  set username (value) {\r\n    if (this.user !== value) {\r\n      this.user = value\r\n\r\n      if (this.secret !== null) {\r\n        this.credentials = {\r\n          username: this.user,\r\n          password: this.secret\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  set password (value) {\r\n    if (this.secret !== value) {\r\n      this.secret = value\r\n\r\n      if (this.user !== null) {\r\n        this.credentials = {\r\n          username: this.user,\r\n          password: this.secret\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @property {object} headers\r\n   * Represents the current global headers.\r\n   *\r\n   * This is commonly used when a remote resource requires a specific\r\n   * header on every call.\r\n   *\r\n   * **Example**\r\n   *\r\n   * ```js\r\n   * let resource = new NGN.NET.Resource(...)\r\n   *\r\n   * resource.headers = {\r\n   *   'user-agent': 'my custom agent name'\r\n   * }\r\n   * ```\r\n   */\r\n  get headers () {\r\n    return this.globalHeaders\r\n  }\r\n\r\n  set headers (value) {\r\n    this.globalHeaders = value\r\n  }\r\n\r\n  /**\r\n   * @property credentials\r\n   * Configure credentials that are applied to every request.\r\n   * This is commonly used when communicating with a RESTful API.\r\n   * This can accept a username and password or an access token.\r\n   *\r\n   * **Examples**\r\n   *\r\n   * ```js\r\n   *  let resource = new NGN.NET.Resource(...)\r\n   *\r\n   *  resource.credentials = {\r\n   *    username: 'user',\r\n   *    password: 'pass'\r\n   *  }\r\n   * ```\r\n   *\r\n   * ```js\r\n   * resource.credentials = {\r\n   *   accessToken: 'token'\r\n   * }\r\n   * ```\r\n   */\r\n  set credentials (credentials) {\r\n    if (credentials.hasOwnProperty('accesstoken') || credentials.hasOwnProperty('accessToken') || credentials.hasOwnProperty('token')) {\r\n      credentials.accessToken = NGN.coalesce(credentials.accessToken, credentials.accesstoken, credentials.token)\r\n\r\n      if (credentials.hasOwnProperty('username')) {\r\n        delete credentials.username\r\n      }\r\n\r\n      if (credentials.hasOwnProperty('password')) {\r\n        delete credentials.password\r\n      }\r\n    } else if (!(credentials.hasOwnProperty('username') && credentials.hasOwnProperty('password')) && !credentials.hasOwnProperty('accessToken')) {\r\n      throw new Error('Invalid credentials. Must contain an access token OR the combination of a username AND password.')\r\n    }\r\n\r\n    this.globalCredentials = credentials\r\n\r\n    if (credentials.username) {\r\n      this.username = credentials.username\r\n    }\r\n\r\n    if (credentials.password) {\r\n      this.password = credentials.password\r\n    }\r\n  }\r\n\r\n  // Explicitly deny credential reading.\r\n  get credentials () {\r\n    NGN.WARN('Credentials are write-only. An attempt to read credentials was denied.')\r\n    return {\r\n      username: null,\r\n      secret: null,\r\n      password: null,\r\n      accessToken: null\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @property {object} query\r\n   * Represents the current global query paramaters.\r\n   *\r\n   * This is commonly used when a remote resource requires a specific\r\n   * query paramater on every call.\r\n   *\r\n   * **Example**\r\n   *\r\n   * ```js\r\n   * let resource = new NGN.NET.Resource(...)\r\n   *\r\n   * resource.query = {\r\n   *   'user_id': '12345'\r\n   * }\r\n   * ```\r\n   *\r\n   * All parameter values are automatically URL-encoded.\r\n   */\r\n  get query () {\r\n    return this.globalQuery\r\n  }\r\n\r\n  set query (value) {\r\n    this.globalQuery = value\r\n  }\r\n\r\n  /**\r\n   * @method prepareUrl\r\n   * Prepare a URL by applying the base URL (only when appropriate).\r\n   * @param  {string} uri\r\n   * The universal resource indicator (URI/URL) to prepare.\r\n   * @return {string}\r\n   * Returns a fully qualified URL.\r\n   * @private\r\n   */\r\n  prepareUrl (uri) {\r\n    if (uri.indexOf('://') < 0) {\r\n      uri = normalizeUrl(`${this.baseUrl}/${uri}`)\r\n    }\r\n\r\n    return uri.replace(/\\/{2,5}/gi, '/').replace(/:\\/{1}/i, '://')\r\n  }\r\n\r\n  /**\r\n   * @method preflight\r\n   * Prepares a request before it is sent.\r\n   * @param {NGN.NET.Request} request\r\n   * The request object.\r\n   * @private\r\n   */\r\n  preflight (request) {\r\n    // Apply the base URL\r\n    request.url = this.prepareUrl(request.url)\r\n\r\n    // If global query parameters have been defined, apply them.\r\n    let qp = Object.keys(this.globalQuery)\r\n    if (qp.length > 0) {\r\n      let queryString = []\r\n      for (let i = 0; i < qp.length; i++) {\r\n        queryString.push(`${qp[i]}=${encodeURIComponent(this.globalQuery[qp[i]])}`)\r\n      }\r\n\r\n      if (request.query === '') {\r\n        request.url = `${request.url}?${queryString.join('&')}`\r\n      } else {\r\n        request.url = `${request.url}&${queryString.join('&')}`\r\n      }\r\n    }\r\n\r\n    // If global credentials are available, apply them.\r\n    let gHeaders = Object.keys(this.globalHeaders)\r\n    for (let i = 0; i < gHeaders.length; i++) {\r\n      request.setHeader(gHeaders[i], this.globalHeaders[gHeaders[i]])\r\n    }\r\n\r\n    // If global headers/credentials are available, apply them.\r\n    if (this.globalCredentials.accessToken) {\r\n      request.accessToken = this.globalCredentials.accessToken\r\n    } else if (this.globalCredentials.username) {\r\n      request.username = this.globalCredentials.username\r\n      request.password = this.globalCredentials.password\r\n    }\r\n\r\n    // Add a cache buster\r\n    if (this.nocache) {\r\n      request.setQueryParameter('nocache' + (new Date()).getTime().toString() + Math.random().toString().replace('.', ''), null)\r\n    }\r\n  }\r\n}",
      "tags": {},
      "exceptions": {},
      "events": {},
      "start": {
        "line": 55,
        "column": 15
      },
      "end": {
        "line": 347,
        "column": 1
      },
      "flags": [],
      "authors": [],
      "sourcefile": "./\\net\\Resource.js",
      "extends": "NGN.NET",
      "configuration": {
        "headers": {
          "type": "property",
          "label": "headers",
          "description": "Contains headers  that are applied to all requests.",
          "code": "globalHeaders: NGN.private(NGN.coalesceb(cfg.headers, {}))",
          "start": {
            "line": 66,
            "column": 6
          },
          "end": {
            "line": 66,
            "column": 64
          },
          "flags": [],
          "authors": [],
          "default": null,
          "datatype": "object",
          "readable": false,
          "writable": false,
          "configuration": true,
          "private": true
        },
        "credentials": {
          "type": "property",
          "label": "credentials",
          "description": "Contains credentials that are applied to all requests.",
          "code": "globalCredentials: NGN.private(NGN.coalesceb(cfg.credentials, {}))",
          "start": {
            "line": 73,
            "column": 6
          },
          "end": {
            "line": 73,
            "column": 72
          },
          "flags": [],
          "authors": [],
          "default": null,
          "datatype": "object",
          "readable": false,
          "writable": false,
          "configuration": true,
          "private": true
        },
        "username": {
          "type": "property",
          "label": "username",
          "description": "Use this to set a username .",
          "code": "user: NGN.private(NGN.coalesceb(cfg.username))",
          "start": {
            "line": 79,
            "column": 6
          },
          "end": {
            "line": 79,
            "column": 52
          },
          "flags": [],
          "authors": [],
          "default": null,
          "datatype": "string",
          "readable": false,
          "writable": false,
          "configuration": true,
          "private": true
        },
        "password": {
          "type": "property",
          "label": "password",
          "description": "Use this to set a password .",
          "code": "secret: NGN.private(NGN.coalesceb(cfg.password))",
          "start": {
            "line": 85,
            "column": 6
          },
          "end": {
            "line": 85,
            "column": 54
          },
          "flags": [],
          "authors": [],
          "default": null,
          "datatype": "string",
          "readable": false,
          "writable": false,
          "configuration": true,
          "private": true
        },
        "accessToken": {
          "type": "property",
          "label": "accessToken",
          "description": "Use this to set an access token .",
          "code": "accesstoken: NGN.private(NGN.coalesceb(cfg.token, cfg.accessToken))",
          "start": {
            "line": 91,
            "column": 6
          },
          "end": {
            "line": 91,
            "column": 73
          },
          "flags": [],
          "authors": [],
          "default": null,
          "datatype": "string",
          "readable": false,
          "writable": false,
          "configuration": true,
          "private": true
        },
        "query": {
          "type": "property",
          "label": "query",
          "description": "Contains query parameters to be applied to all requests. All values\nare automatically url-encoded.",
          "code": "globalQuery: NGN.private(NGN.coalesceb(cfg.query, {}))",
          "start": {
            "line": 98,
            "column": 6
          },
          "end": {
            "line": 98,
            "column": 60
          },
          "flags": [],
          "authors": [],
          "default": null,
          "datatype": "object",
          "readable": false,
          "writable": false,
          "configuration": true,
          "private": true
        },
        "baseUrl": {
          "type": "property",
          "label": "baseUrl",
          "description": "The root domain/base URL to apply to all requests to relative URL's.\nThis was designed for uses where a backend API may be served on\nanother domain .\nThe root will only be applied to relative paths that do not begin\nwith a protocol. For example, `./path/to/endpoint` **will** have\nthe root applied (`{root}/path/to/endpoint`) whereas `https://domain.com/endpoint`\nwill **not** have the root applied.",
          "code": "baseUrl: NGN.private(NGN.coalesce(cfg.baseUrl, cfg.baseurl, `http://${hostname}/`))",
          "start": {
            "line": 110,
            "column": 6
          },
          "end": {
            "line": 110,
            "column": 89
          },
          "flags": [],
          "authors": [],
          "default": "window.loction.origin",
          "datatype": "string",
          "readable": false,
          "writable": false,
          "configuration": true,
          "private": true
        },
        "nocache": {
          "type": "property",
          "label": "nocache",
          "description": "Set this to `true` to add a unique cache-busting URL parameter to all requests.",
          "code": "nocache: NGN.private(NGN.coalesce(cfg.nocache, false))",
          "start": {
            "line": 116,
            "column": 6
          },
          "end": {
            "line": 116,
            "column": 60
          },
          "flags": [],
          "authors": [],
          "default": "false",
          "datatype": "boolean",
          "readable": false,
          "writable": false,
          "configuration": true,
          "private": true
        },
        "sslonly": {
          "type": "property",
          "label": "sslonly",
          "description": "Set this to true to rewrite all URL's to use HTTPS.",
          "code": "sslonly: NGN.public(NGN.coalesce(cfg.sslonly, false))",
          "start": {
            "line": 122,
            "column": 6
          },
          "end": {
            "line": 122,
            "column": 59
          },
          "flags": [],
          "authors": [],
          "default": "false",
          "datatype": "boolean",
          "readable": false,
          "writable": false,
          "configuration": true,
          "private": false
        }
      },
      "properties": {
        "username": {
          "type": "property",
          "label": "username",
          "description": null,
          "code": "set username (value) {\r\n    if (this.user !== value) {\r\n      this.user = value\r\n\r\n      if (this.secret !== null) {\r\n        this.credentials = {\r\n          username: this.user,\r\n          password: this.secret\r\n        }\r\n      }\r\n    }\r\n  }",
          "start": {
            "line": 147,
            "column": 2
          },
          "end": {
            "line": 158,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": false,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "password": {
          "type": "property",
          "label": "password",
          "description": null,
          "code": "set password (value) {\r\n    if (this.secret !== value) {\r\n      this.secret = value\r\n\r\n      if (this.user !== null) {\r\n        this.credentials = {\r\n          username: this.user,\r\n          password: this.secret\r\n        }\r\n      }\r\n    }\r\n  }",
          "start": {
            "line": 160,
            "column": 2
          },
          "end": {
            "line": 171,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": false,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "headers": {
          "type": "property",
          "label": "headers",
          "description": null,
          "code": "set headers (value) {\r\n    this.globalHeaders = value\r\n  }",
          "start": {
            "line": 194,
            "column": 2
          },
          "end": {
            "line": 196,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": false,
          "writable": true,
          "configuration": false,
          "private": false
        },
        "credentials": {
          "type": "property",
          "label": "credentials",
          "description": null,
          "code": "get credentials () {\r\n    NGN.WARN('Credentials are write-only. An attempt to read credentials was denied.')\r\n    return {\r\n      username: null,\r\n      secret: null,\r\n      password: null,\r\n      accessToken: null\r\n    }\r\n  }",
          "start": {
            "line": 248,
            "column": 2
          },
          "end": {
            "line": 256,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "undefined",
          "readable": true,
          "writable": false,
          "configuration": false,
          "private": false
        },
        "query": {
          "type": "property",
          "label": "query",
          "description": null,
          "code": "set query (value) {\r\n    this.globalQuery = value\r\n  }",
          "start": {
            "line": 281,
            "column": 2
          },
          "end": {
            "line": 283,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "datatype": "any",
          "readable": false,
          "writable": true,
          "configuration": false,
          "private": false
        }
      },
      "methods": {
        "constructor": {
          "type": "method",
          "label": "constructor",
          "description": null,
          "code": "constructor (cfg) {\r\n    super()\r\n\r\n    cfg = cfg || {}\r\n\r\n    Object.defineProperties(this, {\r\n      /**\r\n       * @cfg {object} headers\r\n       * Contains headers (key/value) that are applied to all requests.\r\n       */\r\n      globalHeaders: NGN.private(NGN.coalesceb(cfg.headers, {})),\r\n\r\n      /**\r\n       * @cfg {object} credentials\r\n       * Contains credentials that are applied to all requests.\r\n       * @private\r\n       */\r\n      globalCredentials: NGN.private(NGN.coalesceb(cfg.credentials, {})),\r\n\r\n      /**\r\n       * @cfg {string} username\r\n       * Use this to set a username (instead of using #credentials).\r\n       */\r\n      user: NGN.private(NGN.coalesceb(cfg.username)),\r\n\r\n      /**\r\n       * @cfg {string} password\r\n       * Use this to set a password (instead of using #credentials).\r\n       */\r\n      secret: NGN.private(NGN.coalesceb(cfg.password)),\r\n\r\n      /**\r\n       * @cfg {string} accessToken\r\n       * Use this to set an access token (instead of using #credentials).\r\n       */\r\n      accesstoken: NGN.private(NGN.coalesceb(cfg.token, cfg.accessToken)),\r\n\r\n      /**\r\n       * @cfg {object} query\r\n       * Contains query parameters to be applied to all requests. All values\r\n       * are automatically url-encoded.\r\n       */\r\n      globalQuery: NGN.private(NGN.coalesceb(cfg.query, {})),\r\n\r\n      /**\r\n       * @cfg {string} [baseUrl=window.loction.origin]\r\n       * The root domain/base URL to apply to all requests to relative URL's.\r\n       * This was designed for uses where a backend API may be served on\r\n       * another domain (such as api.mydomain.com instead of www.mydomain.com).\r\n       * The root will only be applied to relative paths that do not begin\r\n       * with a protocol. For example, `./path/to/endpoint` **will** have\r\n       * the root applied (`{root}/path/to/endpoint`) whereas `https://domain.com/endpoint`\r\n       * will **not** have the root applied.\r\n       */\r\n      baseUrl: NGN.private(NGN.coalesce(cfg.baseUrl, cfg.baseurl, `http://${hostname}/`)),\r\n\r\n      /**\r\n       * @cfg {boolean} [nocache=false]\r\n       * Set this to `true` to add a unique cache-busting URL parameter to all requests.\r\n       */\r\n      nocache: NGN.private(NGN.coalesce(cfg.nocache, false)),\r\n\r\n      /**\r\n       * @cfg {boolean} [sslonly=false]\r\n       * Set this to true to rewrite all URL's to use HTTPS.\r\n       */\r\n      sslonly: NGN.public(NGN.coalesce(cfg.sslonly, false))\r\n    })\r\n\r\n    if (this.baseUrl.indexOf('://') < 0 || this.baseUrl.indexOf('://') > 10) {\r\n      this.baseUrl = `http${this.sslonly ? 's' : ''}://${this.baseUrl}`\r\n    } else if (this.sslonly) {\r\n      this.baseUrl = this.baseUrl.replace('http://', 'https://')\r\n    }\r\n\r\n    if (this.accesstoken !== null) {\r\n      this.credentials = {\r\n        accessToken: this.accesstoken\r\n      }\r\n    } else if (this.user !== null && this.ssecret !== null) {\r\n      this.credentials = {\r\n        username: this.user,\r\n        password: this.secret\r\n      }\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 56,
            "column": 2
          },
          "end": {
            "line": 141,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "cfg": {
              "type": "argument",
              "label": "cfg",
              "description": null,
              "code": "cfg",
              "start": {
                "line": 56,
                "column": 15
              },
              "end": {
                "line": 56,
                "column": 18
              },
              "flags": [],
              "authors": [],
              "datatype": "any",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "constructor",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "prepareUrl": {
          "type": "method",
          "label": "prepareUrl",
          "description": "Prepare a URL by applying the base URL .",
          "code": "prepareUrl (uri) {\r\n    if (uri.indexOf('://') < 0) {\r\n      uri = normalizeUrl(`${this.baseUrl}/${uri}`)\r\n    }\r\n\r\n    return uri.replace(/\\/{2,5}/gi, '/').replace(/:\\/{1}/i, '://')\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 294,
            "column": 2
          },
          "end": {
            "line": 300,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "uri": {
              "type": "argument",
              "label": "uri",
              "description": "The universal resource indicator  to prepare.",
              "code": "uri",
              "start": {
                "line": 294,
                "column": 14
              },
              "end": {
                "line": 294,
                "column": 17
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "string",
              "required": true,
              "enum": [
                "URI/URL"
              ]
            }
          },
          "returnType": "string",
          "returnDescription": "null Returns a fully qualified URL.",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": true
        },
        "preflight": {
          "type": "method",
          "label": "preflight",
          "description": "Prepares a request before it is sent.",
          "code": "preflight (request) {\r\n    // Apply the base URL\r\n    request.url = this.prepareUrl(request.url)\r\n\r\n    // If global query parameters have been defined, apply them.\r\n    let qp = Object.keys(this.globalQuery)\r\n    if (qp.length > 0) {\r\n      let queryString = []\r\n      for (let i = 0; i < qp.length; i++) {\r\n        queryString.push(`${qp[i]}=${encodeURIComponent(this.globalQuery[qp[i]])}`)\r\n      }\r\n\r\n      if (request.query === '') {\r\n        request.url = `${request.url}?${queryString.join('&')}`\r\n      } else {\r\n        request.url = `${request.url}&${queryString.join('&')}`\r\n      }\r\n    }\r\n\r\n    // If global credentials are available, apply them.\r\n    let gHeaders = Object.keys(this.globalHeaders)\r\n    for (let i = 0; i < gHeaders.length; i++) {\r\n      request.setHeader(gHeaders[i], this.globalHeaders[gHeaders[i]])\r\n    }\r\n\r\n    // If global headers/credentials are available, apply them.\r\n    if (this.globalCredentials.accessToken) {\r\n      request.accessToken = this.globalCredentials.accessToken\r\n    } else if (this.globalCredentials.username) {\r\n      request.username = this.globalCredentials.username\r\n      request.password = this.globalCredentials.password\r\n    }\r\n\r\n    // Add a cache buster\r\n    if (this.nocache) {\r\n      request.setQueryParameter('nocache' + (new Date()).getTime().toString() + Math.random().toString().replace('.', ''), null)\r\n    }\r\n  }",
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 309,
            "column": 2
          },
          "end": {
            "line": 346,
            "column": 3
          },
          "flags": [],
          "authors": [],
          "arguments": {
            "request": {
              "type": "argument",
              "label": "request",
              "description": "The request object.",
              "code": "request",
              "start": {
                "line": 309,
                "column": 13
              },
              "end": {
                "line": 309,
                "column": 20
              },
              "flags": [],
              "authors": [],
              "default": null,
              "datatype": "ngn.net.request",
              "required": true,
              "enum": null
            }
          },
          "returnType": "void",
          "returnDescription": "void",
          "kind": "method",
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": true
        }
      }
    }
  },
  "exceptions": {
    "MissingNgnDependencyError": {
      "type": "MissingNgnDependencyError",
      "label": "MissingNgnDependencyError",
      "description": "Standard NGN Exceptions",
      "code": "NGN.createException({\r\n  name: 'MissingNgnDependencyError',\r\n  type: 'MissingNgnDependencyError',\r\n  severity: 'critical',\r\n  message: 'An NGN dependency is missing or could not be found.',\r\n  category: 'programmer',\r\n  custom: {\r\n    help: 'Include the missing library.',\r\n    cause: 'A required dependency was not included, or it was not included in the correct sequence.'\r\n  }\r\n})",
      "tags": {
        "help": {
          "value": "help",
          "description": "Include the missing library.",
          "type": "help",
          "line": 1291,
          "raw": "help: 'Include the missing library.'"
        },
        "cause": {
          "value": "cause",
          "description": "A required dependency was not included, or it was not included in the correct sequence.",
          "type": "cause",
          "line": 1292,
          "raw": "cause: 'A required dependency was not included, or it was not included in the correct sequence.'"
        }
      },
      "start": {
        "line": 1284,
        "column": 0
      },
      "end": {
        "line": 1294,
        "column": 2
      },
      "flags": [],
      "authors": [],
      "source": "./\\core.js",
      "name": "MissingNgnDependencyError",
      "severity": "critical",
      "message": "An NGN dependency is missing or could not be found.",
      "category": "programmer"
    },
    "ReservedWordError": {
      "type": "ReservedWordError",
      "label": "ReservedWordError",
      "description": null,
      "code": "NGN.createException({\r\n  name: 'ReservedWordError',\r\n  type: 'ReservedWordError',\r\n  severity: 'critical',\r\n  message: 'An attempt to use a reserved word failed.',\r\n  category: 'programmer',\r\n  custom: {\r\n    help: 'Use an alternative word.',\r\n    cause: 'A word was used to define an attribute, method, field, or other element that already exists.'\r\n  }\r\n})",
      "tags": {
        "help": {
          "value": "help",
          "description": "Use an alternative word.",
          "type": "help",
          "line": 1303,
          "raw": "help: 'Use an alternative word.'"
        },
        "cause": {
          "value": "cause",
          "description": "A word was used to define an attribute, method, field, or other element that already exists.",
          "type": "cause",
          "line": 1304,
          "raw": "cause: 'A word was used to define an attribute, method, field, or other element that already exists.'"
        }
      },
      "start": {
        "line": 1296,
        "column": 0
      },
      "end": {
        "line": 1306,
        "column": 2
      },
      "flags": [],
      "authors": [],
      "source": "./\\core.js",
      "name": "ReservedWordError",
      "severity": "critical",
      "message": "An attempt to use a reserved word failed.",
      "category": "programmer"
    },
    "InvalidConfigurationError": {
      "type": "InvalidConfigurationError",
      "label": "InvalidConfigurationError",
      "description": null,
      "code": "NGN.createException({\r\n  name: 'InvalidConfigurationError',\r\n  type: 'InvalidConfigurationError',\r\n  severity: 'critical',\r\n  message: 'Invalid configuration.',\r\n  category: 'programmer',\r\n  custom: {\r\n    help: 'See the documentation for the proper configuration.',\r\n    cause: 'The configuration specified was marked as invalid or caused an error during instantiation.'\r\n  }\r\n})",
      "tags": {
        "help": {
          "value": "help",
          "description": "See the documentation for the proper configuration.",
          "type": "help",
          "line": 1315,
          "raw": "help: 'See the documentation for the proper configuration.'"
        },
        "cause": {
          "value": "cause",
          "description": "The configuration specified was marked as invalid or caused an error during instantiation.",
          "type": "cause",
          "line": 1316,
          "raw": "cause: 'The configuration specified was marked as invalid or caused an error during instantiation.'"
        }
      },
      "start": {
        "line": 1308,
        "column": 0
      },
      "end": {
        "line": 1318,
        "column": 2
      },
      "flags": [],
      "authors": [],
      "source": "./\\core.js",
      "name": "InvalidConfigurationError",
      "severity": "critical",
      "message": "Invalid configuration.",
      "category": "programmer"
    },
    "BadConfig": {
      "type": "InvalidConfigurationError",
      "label": "BadConfig",
      "description": "This is a baaaaad config.",
      "code": "NGN.createException({\r\n  name: 'InvalidConfigurationError',\r\n  type: 'InvalidConfigurationError',\r\n  severity: 'critical',\r\n  message: 'Invalid configuration.',\r\n  category: 'programmer',\r\n  custom: {\r\n    help: 'See the documentation for the proper configuration.',\r\n    cause: 'The configuration specified was marked as invalid or caused an error during instantiation.'\r\n  }\r\n})",
      "tags": {
        "help": {
          "value": "help",
          "description": "See the documentation for the proper configuration.",
          "type": "help",
          "line": 119,
          "raw": "help: 'See the documentation for the proper configuration.'"
        },
        "cause": {
          "value": "cause",
          "description": "The configuration specified was marked as invalid or caused an error during instantiation.",
          "type": "cause",
          "line": 120,
          "raw": "cause: 'The configuration specified was marked as invalid or caused an error during instantiation.'"
        }
      },
      "start": {
        "line": 112,
        "column": 0
      },
      "end": {
        "line": 122,
        "column": 2
      },
      "flags": [],
      "authors": [],
      "source": "./\\data\\Representation.js",
      "name": "BadConfig",
      "severity": "critical",
      "message": "Invalid configuration.",
      "category": "programmer"
    },
    "NGNDuplicateRecordError": {
      "type": "exception",
      "label": "NGNDuplicateRecordError",
      "description": null,
      "code": "NGN.createException({\r\n  name: 'NGNDuplicateRecordError',\r\n  message: 'A duplicate record exists within the unique data set.'\r\n})",
      "tags": {},
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 6,
        "column": 2
      },
      "flags": [],
      "authors": [],
      "source": "./\\data\\Store.js",
      "name": "NGNDuplicateRecordError",
      "severity": "minor",
      "message": "A duplicate record exists within the unique data set.",
      "category": "operational"
    }
  },
  "bus": {
    "yo": {
      "type": "event",
      "label": "yo",
      "description": null,
      "code": "NGN.BUS.emit('yo')",
      "start": {
        "line": 96,
        "column": 0
      },
      "end": {
        "line": 96,
        "column": 18
      },
      "flags": [],
      "authors": [],
      "parameters": {},
      "deprecated": false,
      "deprecationReplacement": null
    }
  },
  "namespaces": {
    "NGN": {
      "type": "namespace",
      "label": "NGN",
      "description": "Returns the primitive object/function of the specified type.\r\n  For example:\r\n  \n  ```js\r\n  let type = NGN.getType('number') // Returns Number\r\n  let type = NGN.getType('string') // Returns String\r\n  ```",
      "code": null,
      "tags": {},
      "exceptions": {},
      "events": {},
      "start": {
        "line": 0,
        "column": 0
      },
      "end": {
        "line": 0,
        "column": 0
      },
      "flags": [],
      "authors": [],
      "sourcefile": "./\\core.js",
      "properties": {},
      "methods": {
        "define": {
          "type": "method",
          "label": "define",
          "description": "Create an object definition for a property.\nFor example:\n\n```\nObject.defineProperty\n\n// The snippet above is the same as:\nObject.defineProperty(this, 'attr', {\nenumberable: true,\nwritable: false,\nconfigurable: true,\nvalue: 'value'\n})\n```",
          "code": null,
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": null,
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "public": {
          "type": "method",
          "label": "public",
          "description": "Create a `public` property definition for an object.\nExample:\n\n```\nObject.defineProperty\n\n// Longhand equivalent\nObject.defineProperty(this, 'attr', {\nenumerable: true,\nwritable: true,\nconfigurable: false,\nvalue: 'somevalue'\n})\n```",
          "code": null,
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": null,
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "private": {
          "type": "method",
          "label": "private",
          "description": "Create a `private` property definition for an object.\nExample:\n\n```\nObject.defineProperty\n\n// Longhand equivalent\nObject.defineProperty(this, 'attr', {\nenumerable: false,\nwritable: true,\nconfigurable: false,\nvalue: 'somevalue'\n})\n```",
          "code": null,
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": null,
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "const": {
          "type": "method",
          "label": "const",
          "description": "Create a `public` constant property definition for an object.\nExample:\n\n```\nObject.defineProperty\n\n// Longhand equivalent\nObject.defineProperty(this, 'attr', {\nenumerable: true,\nwritable: false,\nconfigurable: false,\nvalue: 'somevalue'\n})\n```",
          "code": null,
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": null,
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "privateconst": {
          "type": "method",
          "label": "privateconst",
          "description": "Create a `private` constant property definition for an object.\nExample:\n\n```\nObject.defineProperty\n\n// Longhand equivalent\nObject.defineProperty(this, 'attr', {\nenumerable: false,\nwritable: false,\nconfigurable: false,\nvalue: 'somevalue'\n})\n```",
          "code": null,
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": null,
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "get": {
          "type": "method",
          "label": "get",
          "description": "Create a private `getter` property definition for an object.\nPublic getters are part of the ES2015 class spec.\n\nExample:\n\n```\nlet myFunction = function  {\nreturn 'somevalue'\n}\n\n// Longhand equivalent\nObject.defineProperty(this, 'attr', {\nenumerable: false,\nget: function () {\nreturn 'somevalue'\n}\n})\n```",
          "code": null,
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": null,
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "set": {
          "type": "method",
          "label": "set",
          "description": "Create a private `setter` property definition for an object.\nPublic setters are part of the ES2015 class spec.\n\nExample:\n\n```\nlet myFunction = function  {\nreturn 'somevalue'\n}\n\n// Longhand equivalent\nObject.defineProperty(this, 'attr', {\nenumerable: false,\nset: function (value) {\nsomethingElse = value\n}\n})\n```",
          "code": null,
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": null,
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "getset": {
          "type": "method",
          "label": "getset",
          "description": "Create a private property defintion containing both a `getter` and `setter`\nfor the specified attribute.",
          "code": null,
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": null,
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "extend": {
          "type": "method",
          "label": "extend",
          "description": "Extend the NGN core object. Extending NGN is the equivalent of:\n\nExample:\n```\nNGN.extend {\nreturn 'Hello, ' + recipient + '!'\n}))\n\n// Equivalent of:\n\nObject.defineProperty(NGN, 'greet', {\nenumerable: true,\nwritable: false,\nconfigurable: false,\nvalue: function (recipient) {\nreturn 'Hello, ' + recipient + '!'\n}\n})\n```\nThe example above produces a public function available from NGN:\n\n```\nconsole.log(NGN.greet('world')) // outputs Hello, world!",
          "code": null,
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": null,
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "inherit": {
          "type": "method",
          "label": "inherit",
          "description": "Inherit the properties of another object/class.",
          "code": null,
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": null,
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "slice": {
          "type": "method",
          "label": "slice",
          "description": "Converts an array-like object to an array.\n\nExample:\n```\nfunction  {\nreturn NGN.slice(arguments)\n}\n```",
          "code": null,
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": null,
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "splice": {
          "type": "method",
          "label": "splice",
          "description": "Converts an array-like object to a spliced array.\n\nExample:\n```\nfunction  {\nreturn NGN.splice(arguments)\n}\n```",
          "code": null,
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": null,
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "nullIf": {
          "type": "method",
          "label": "nullIf",
          "description": "Returns a null value if the two specified expressions are equal.\n```js\nif  {\nconsole.log('Variable had a value of \"value\", which is considered null')\n}\n\n// or\n\nif (NGN.nullIf(myvar) === null) {\nconsole.log('Empty variable whose trimmed length is 0')\n}\n```",
          "code": null,
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": null,
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "converge": {
          "type": "method",
          "label": "converge",
          "description": "Provides a basic coalesce. Expects the first parameter to be a boolean\nvalue. `true` will wrap arguments in a nullIf operator. `false` will not.",
          "code": null,
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": null,
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "coalesce": {
          "type": "method",
          "label": "coalesce",
          "description": "Finds the first non-null/defined value in a list of arguments.\nThis can be used with {@link Boolean Boolean} values, since `true`/`false` is a\nnon-null/defined value.",
          "code": null,
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": null,
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "coalesceb": {
          "type": "method",
          "label": "coalesceb",
          "description": "Provides the same functionality as #coalesce, except **b**lank/empty arguments\nare treated as `null` values.",
          "code": null,
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": null,
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "dedupe": {
          "type": "method",
          "label": "dedupe",
          "description": "Deduplicate a simple array.",
          "code": null,
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": null,
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "typeof": {
          "type": "method",
          "label": "typeof",
          "description": "A more specific typeof method.",
          "code": null,
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": null,
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "forceArray": {
          "type": "method",
          "label": "forceArray",
          "description": "Forces a value to become an array if it is not already one. For example:\n\n```js\nlet x = 'value'\n\nx = NGN.forceArray\n\nconsole.log(x) // Outputs ['value']\n```",
          "code": null,
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": null,
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "forceBoolean": {
          "type": "method",
          "label": "forceBoolean",
          "description": "Forces a value to become a boolean if it is not already one. For example:\n\n```js\nlet x = NGN.forceBoolean // String ==> Boolean\nconsole.log(x) // Outputs false\n\nlet y = NGN.forceBoolean('text') // String ==> Boolean\nconsole.log(y) // Outputs true (any non-blank text results in true, except the word \"false\")\n\nlet z = NGN.forceBoolean(0) // Number ==> Boolean (0 = false, 1 = true)\nconsole.log(z) // Outputs false\n```\n\nAll other types will yield a `true` value, except for `null`. A `null`\nvalue is treated as `false`.",
          "code": null,
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": null,
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "forceNumber": {
          "type": "method",
          "label": "forceNumber",
          "description": "Forces a value to become a number if it is not already one. For example:\n\n```js\nlet x = NGN.forceNumber // String ==> Number\nconsole.log(x === 10) // Outputs true\n\nlet y = NGN.forceNumber(true) // Boolean ==> Number\nconsole.log(y) // Output 1\n\nlet z = NGN.forceNumber(false) // Boolean ==> Number\nconsole.log(y) // Output 0\n```\n\nAll other types will yield a `NaN` value. This has no effect on",
          "code": null,
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": null,
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "stack": {
          "type": "method",
          "label": "stack",
          "description": "Retrieve the stack trace from a specific code location without throwing\nan exception. Files are always listed from the root. This is the default\norder in browsers, but the reverse of the normal stack order in node-like\nenvironments.\n\nFor example, the following stack on node shows `_test.js` as the last item\nin the array. In node-like environments, the `_test.js` would normally be\nthe first item in the stacktrace.\n\n```js\n[\n{ path: 'node.js:348:7', file: 'node.js', line: 348, column: 7 },\n{ path: 'module.js:575:10',\nfile: 'module.js',\nline: 575,\ncolumn: 10 },\n{ path: 'module.js:550:10',\nfile: 'module.js',\nline: 550,\ncolumn: 10 },\n{ path: 'module.js:541:32',\nfile: 'module.js',\nline: 541,\ncolumn: 32 },\n{ path: '/_test.js:8:14', file: '/_test.js', line: 8, column: 14 }\n]\n```\n\nBy standardizing the order of the stack trace, it is easier to programmatically\nidentify sources of problems. This method does not prevent developers from\naccessing a normal stacktrace.",
          "code": null,
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": null,
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "isFn": {
          "type": "method",
          "label": "isFn",
          "description": "A shortcut method for determining if a variable is a function.\nThis is useful for identifying the existance of callback methods.",
          "code": null,
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": null,
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "wrap": {
          "type": "method",
          "label": "wrap",
          "description": "Executes a **synchronous** method before invoking a standard function.\nThis is primarily designed for displaying warnings, but can also be\nused for other operations like migration layers.",
          "code": null,
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": null,
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "wrapClass": {
          "type": "method",
          "label": "wrapClass",
          "description": "Executes a **synchronous** method before returning an instantiated class.\nIt runs a function first, then returns the equivalent of\n`new MyClass`. This is primarily designed for displaying warnings,\nbut can also be used for other operations like migration layers.",
          "code": null,
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": null,
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "deprecate": {
          "type": "method",
          "label": "deprecate",
          "description": "Fires an event  or logs a warning indicating the\nmethod is deprecated.",
          "code": null,
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": null,
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "deprecateClass": {
          "type": "method",
          "label": "deprecateClass",
          "description": "Logs a warning indicating the class is deprecated. This differs from\n#deprecate by extending & preserving the original class (the resulting\nclass can be used with the `new` operator).",
          "code": null,
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": null,
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "needs": {
          "type": "method",
          "label": "needs",
          "description": "A method to check for the existance of required attributes in an object.\nThis is designed to check for namespace existance.\n\n```js\nNGN.needs // Throws an error because \"JUNK\" doesn't exist.\n```",
          "code": null,
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": null,
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "getObjectMissingPropertyNames": {
          "type": "method",
          "label": "getObjectMissingPropertyNames",
          "description": "Given a list, returns which list items are not present in an\nobject's enumerable properties.\n\n```js\nlet obj = { a: 1, b: 2 }\nlet missing = NGN.getObjectMissingPropertyNames\n\nconsole.log(missing) // Outputs ['c']\n```",
          "code": null,
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": null,
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "getObjectExtraneousPropertyNames": {
          "type": "method",
          "label": "getObjectExtraneousPropertyNames",
          "description": "Given a list, returns which enumerable object properties\nare not in the list.\n\n```js\nlet obj = { a: 1, b: 2, d: 4 }\nlet extra = NGN.getObjectExtraneousPropertyNames\n\nconsole.log(extra) // Outputs ['d']\n```",
          "code": null,
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": null,
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "objectHasAll": {
          "type": "method",
          "label": "objectHasAll",
          "description": "Determines whether the specified object has _all_ of the provided properties.\nThis only accounts for enumerable properties. It also decorates the Boolean\nresult with a property called `properties`, which contains any missing property\nnames.\n\n**Example**\n```js\nlet check = NGN.objectHasAll\n\nconsole.log(check) // Outputs: true\n```\n\n```js\nlet check = NGN.objectHasAll(NGN, 'BUS', 'NET', 'JUNK')\n\nconsole.log(check) // Outputs: false\nconsole.log(check.properties) // Outputs ['JUNK']\n```js",
          "code": null,
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": null,
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "objectHasAny": {
          "type": "method",
          "label": "objectHasAny",
          "description": "Determines whether the specified object has _any_ of the requested properties.\nThis only accounts for enumerable properties.\n\n**Example**\n```js\nlet check = NGN.objectHasAny\n\nconsole.log(check) // Outputs: true\n```\n\n```js\nlet check = NGN.objectHasAny(NGN, 'JUNK1', 'JUNK2', 'JUNK3')\n\nconsole.log(check) // Outputs: false\n```js",
          "code": null,
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": null,
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "objectHasExactly": {
          "type": "method",
          "label": "objectHasExactly",
          "description": "Determines whether the specified object has _only_ the requested properties.\nThis only accounts for enumerable properties.\n\n**Example**\n```js\nlet obj = { a: 1, b: 2 }\nlet check = NGN.objectHasExactly\n\nconsole.log(check) // Outputs: true\n```\n\n```js\nlet obj = { a: 1, b: 2, d: 4 }\nlet check = NGN.objectHasExactly(obj, 'a', 'b', 'c')\n\nconsole.log(check) // Outputs: false\n```js",
          "code": null,
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": null,
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "objectRequires": {
          "type": "method",
          "label": "objectRequires",
          "description": "This is the same as #objectHasAll, but will throw an\nerror if the object is missing any properties.",
          "code": null,
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": null,
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "createAlias": {
          "type": "method",
          "label": "createAlias",
          "description": "A helper method to alias a value on an object. This is the equivalent of:\n```js\nObject.defineProperty => {\nreturn value\n}))\n```",
          "code": null,
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": null,
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "WARN": {
          "type": "method",
          "label": "WARN",
          "description": "This method is used to emit special info events.\nThe NGN.BUS can listen for all events using the NGN.WARN global symbol.\n\n```js\nNGN.BUS.on => {\nconsole.warn(...arguments)\n})\n```\n\nSee NGN.EventEmitter#emit for detailed parameter usage.",
          "code": null,
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": null,
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "INFO": {
          "type": "method",
          "label": "INFO",
          "description": "This method is used to emit special warning events.\nThe NGN.BUS can listen for all events using the NGN.INFO global symbol.\n\n```js\nNGN.BUS.on => {\nconsole.info(...arguments)\n})\n```\n\nSee NGN.EventEmitter#emit for detailed parameter usage.",
          "code": null,
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": null,
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "ERROR": {
          "type": "method",
          "label": "ERROR",
          "description": "This method is used to emit special soft error events. A soft error\nis one that does not throw, but does get logged .\nThe NGN.BUS can listen for all events using the NGN.ERROR global symbol.\n\n```js\nNGN.BUS.on(NGN.ERROR_EVENT, function () => {\nconsole.info(...arguments)\n})\n```\n\nSee NGN.EventEmitter#emit for detailed parameter usage.",
          "code": null,
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": null,
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "createException": {
          "type": "method",
          "label": "createException",
          "description": "Create a custom global exception .",
          "code": null,
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": null,
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        },
        "getType": {
          "type": "method",
          "label": "getType",
          "description": "Returns the primitive object/function of the specified type.\nFor example:\n\n```js\nlet type = NGN.getType // Returns Number\nlet type = NGN.getType('string') // Returns String\n```",
          "code": null,
          "tags": {},
          "exceptions": {},
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": null,
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        }
      },
      "namespaces": {
        "NET": {
          "type": "namespace",
          "label": "NET",
          "description": "A library to issue HTTP/S requests.\r\nThis acts as an AJAX library.",
          "code": null,
          "tags": {},
          "exceptions": {},
          "events": {},
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "sourcefile": "./\\net\\core.js",
          "properties": {},
          "methods": {},
          "namespaces": {},
          "classes": [
            "NGN.NET.Request",
            "NGN.NET.Resource"
          ]
        },
        "DATA": {
          "type": "namespace",
          "label": "DATA",
          "description": null,
          "code": null,
          "tags": {},
          "exceptions": {},
          "events": {},
          "start": {
            "line": 0,
            "column": 0
          },
          "end": {
            "line": 0,
            "column": 0
          },
          "flags": [],
          "authors": [],
          "sourcefile": null,
          "properties": {},
          "methods": {},
          "namespaces": {},
          "classes": [
            "NGN.DATA.BTree",
            "NGN.DATA.Field",
            "NGN.DATA.FieldMap",
            "NGN.DATA.Index",
            "NGN.DATA.JSONSchema",
            "NGN.DATA.Model",
            "NGN.DATA.RangeRule",
            "NGN.DATA.Relationship",
            "NGN.DATA.Representation",
            "NGN.DATA.Rule",
            "NGN.DATA.Store",
            "NGN.DATA.TransactionLog",
            "NGN.DATA.UTILITY",
            "NGN.DATA.VirtualField"
          ]
        }
      },
      "classes": [
        "NGN.EventEmitter"
      ]
    },
    "global": {
      "type": "namespace",
      "label": "global",
      "description": null,
      "code": null,
      "tags": {},
      "exceptions": {},
      "events": {},
      "start": {
        "line": 0,
        "column": 0
      },
      "end": {
        "line": 0,
        "column": 0
      },
      "flags": [],
      "authors": [],
      "sourcefile": null,
      "properties": {},
      "methods": {},
      "namespaces": {},
      "classes": [
        "CustomException",
        "EventEmitterBase",
        "NGNDateField",
        "Network",
        "TreeLeaf",
        "TreeNode"
      ]
    }
  }
}