{
  "type": "class",
  "label": "NGN.DATA.RangeRule",
  "description": "A special rule to validate values within one or more ranges.\nSupports numeric ranges, date ranges, and simple string-based\nranges .",
  "code": "class NGNDataRangeValidationRule extends Rule { // eslint-disable-line\r\n  /**\r\n   * Create a new range rule.\r\n   * @param {string} [name]\r\n   * An optional name for the rule. This can be useful when debugging data issues.\r\n   * @param {object} [scope=null]\r\n   * Apply a custom scope to the validation functions (applicable to custom methods only).\r\n   * @param {Array} [range]\r\n   * An enumeration of acceptable numeric ranges. For example, if\r\n   * the value must be between 5-10 or from 25-50, the configuration\r\n   * would look like:\r\n   *\r\n   * ```js\r\n   * range: [\r\n   *   [5, 10],\r\n   *   ['25-50']\r\n   * ]\r\n   * ```\r\n   *\r\n   * To accept anything below a certain number or anything over a certain\r\n   * number while also specifying one or more ranges, use a `null` value.\r\n   *\r\n   * For example:\r\n   *\r\n   * ```js\r\n   * range: [\r\n   *   [null, 0],\r\n   *   [5, 10],\r\n   *   ['25-50'],\r\n   *   [100, null]\r\n   * ]\r\n   * ```\r\n   *\r\n   * The aforementioned example would accept a value less than `zero`,\r\n   * between `5` and `10`, between `25` and `50`, or over `100`. Therefore,\r\n   * acceptable values could be `-7`, `7`, `25`, `42`,  `10000`, or anything\r\n   * else within the ranges. However, the values `3`, `19`, and `62` would\r\n   * all fail because they're outside the ranges.\r\n   */\r\n  constructor (name, scope, range = []) {\r\n    if (NGN.typeof(scope) === 'array') {\r\n      range = scope\r\n      scope = null\r\n    }\r\n\r\n    super(null, name, scope)\r\n\r\n    this.RULE.prepareRange = function (value) {\r\n      // If a simple range is specified (single array), format it for the rule processor.\r\n      value = NGN.forceArray(value)\r\n\r\n      if (NGN.typeof(value[0]) !== 'array') {\r\n        value = [value]\r\n      }\r\n\r\n      for (let i = 0; i < value.length; i++) {\r\n        if (value[i].length !== 2) {\r\n          if (NGN.typeof(value[i][0]) !== 'string') {\r\n            throw new Error(`Invalid range: \"${value[i].toString()}\"`)\r\n          }\r\n\r\n          value[i] = value[i][0].replace(/[^0-9->]/gi, '').split(/->{1,100}/)\r\n        }\r\n\r\n        if (NGN.typeof(value[i][0]) !== 'number') {\r\n          value[i][0] = NGN.coalesce(value[i][0], '').replace(/null|none|any/gi, '')\r\n        }\r\n\r\n        if (NGN.typeof(value[i][1]) !== 'number') {\r\n          value[i][1] = NGN.coalesce(value[i][1], '').replace(/null|none|any/gi, '')\r\n        }\r\n      }\r\n\r\n      return value\r\n    }\r\n\r\n    // Initialize the range\r\n    this.RULE.range = new Set()\r\n    this.range = range\r\n\r\n    // Create the validation function.\r\n    this.RULE.validator = (value) => {\r\n      let isString = NGN.typeof(value) === 'string'\r\n      let range = this.range\r\n\r\n      for (let i = 0; i < range.length; i++) {\r\n        let min = NGN.coalesceb(range[i][0], isString ? value.length : value)\r\n        let max = NGN.coalesceb(range[i][1], isString ? value.length : value)\r\n\r\n        if (\r\n          (isString && value.length >= min && value.length <= max) ||\r\n          (!isString && value >= min && value <= max)\r\n        ) {\r\n          return true\r\n        }\r\n      }\r\n\r\n      return false\r\n    }\r\n  }\r\n\r\n  get range () {\r\n    return Array.from(this.RULE.range.values())\r\n  }\r\n\r\n  set range (value) {\r\n    this.RULE.range = new Set()\r\n    this.addRange(value)\r\n  }\r\n\r\n  /**\r\n   * Add a range to the rule.\r\n   * @param {array} value\r\n   * A range can be a single array, such as `[min, max]`. An array of arrays is\r\n   * also acceptable, such as `[[min1, max1], [min2, max2]]`.\r\n   */\r\n  addRange (value) {\r\n    value = this.RULE.prepareRange(value)\r\n\r\n    for (let i = 0; i < value.length; i++) {\r\n      if (NGN.coalesceb(value[i][0]) !== null && NGN.coalesceb(value[i][1]) !== null && value[i][1] < value[i][0]) {\r\n        throw new Error(`Invalid value \"${value[i][0].toString()} -> ${value[i][1].toString()}\". Minimum value cannot exceed maximum.`)\r\n      }\r\n\r\n      this.RULE.range.add(value[i])\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove an existing range from the rule.\r\n   * @param {array} value\r\n   * A range can be a single array, such as `[min, max]`. An array of arrays is\r\n   * also acceptable, such as `[[min1, max1], [min2, max2]]`.\r\n   */\r\n  removeRange (value) {\r\n    let range = this.range\r\n    value = this.RULE.prepareRange(value)\r\n\r\n    for (let i = 0; i < value.length; i++) {\r\n      for (let x = 0; x < range.length; x++) {\r\n        if (value[i].toString() === range[x].toString()) {\r\n          this.RULE.range.delete(range[x])\r\n        }\r\n      }\r\n    }\r\n  }\r\n}",
  "tags": {},
  "exceptions": {},
  "events": {},
  "start": {
    "line": 9,
    "column": 15
  },
  "end": {
    "line": 155,
    "column": 1
  },
  "flags": [],
  "authors": [],
  "sourcefile": "data/rule/RangeRule.js",
  "extends": "Rule",
  "configuration": {},
  "properties": {
    "prepareRange": {
      "type": "property",
      "label": "prepareRange",
      "description": null,
      "code": "this.RULE.prepareRange = function (value) {\r\n      // If a simple range is specified (single array), format it for the rule processor.\r\n      value = NGN.forceArray(value)\r\n\r\n      if (NGN.typeof(value[0]) !== 'array') {\r\n        value = [value]\r\n      }\r\n\r\n      for (let i = 0; i < value.length; i++) {\r\n        if (value[i].length !== 2) {\r\n          if (NGN.typeof(value[i][0]) !== 'string') {\r\n            throw new Error(`Invalid range: \"${value[i].toString()}\"`)\r\n          }\r\n\r\n          value[i] = value[i][0].replace(/[^0-9->]/gi, '').split(/->{1,100}/)\r\n        }\r\n\r\n        if (NGN.typeof(value[i][0]) !== 'number') {\r\n          value[i][0] = NGN.coalesce(value[i][0], '').replace(/null|none|any/gi, '')\r\n        }\r\n\r\n        if (NGN.typeof(value[i][1]) !== 'number') {\r\n          value[i][1] = NGN.coalesce(value[i][1], '').replace(/null|none|any/gi, '')\r\n        }\r\n      }\r\n\r\n      return value\r\n    }",
      "start": {
        "line": 56,
        "column": 14
      },
      "end": {
        "line": 56,
        "column": 26
      },
      "flags": [],
      "authors": [],
      "datatype": "any",
      "readable": true,
      "writable": true,
      "configuration": false,
      "private": false
    },
    "range": {
      "type": "property",
      "label": "range",
      "description": null,
      "code": "set range (value) {\r\n    this.RULE.range = new Set()\r\n    this.addRange(value)\r\n  }",
      "start": {
        "line": 114,
        "column": 2
      },
      "end": {
        "line": 117,
        "column": 3
      },
      "flags": [],
      "authors": [],
      "datatype": "any",
      "readable": false,
      "writable": true,
      "configuration": false,
      "private": false
    },
    "validator": {
      "type": "property",
      "label": "validator",
      "description": null,
      "code": "this.RULE.validator = (value) => {\r\n      let isString = NGN.typeof(value) === 'string'\r\n      let range = this.range\r\n\r\n      for (let i = 0; i < range.length; i++) {\r\n        let min = NGN.coalesceb(range[i][0], isString ? value.length : value)\r\n        let max = NGN.coalesceb(range[i][1], isString ? value.length : value)\r\n\r\n        if (\r\n          (isString && value.length >= min && value.length <= max) ||\r\n          (!isString && value >= min && value <= max)\r\n        ) {\r\n          return true\r\n        }\r\n      }\r\n\r\n      return false\r\n    }",
      "start": {
        "line": 90,
        "column": 14
      },
      "end": {
        "line": 90,
        "column": 23
      },
      "flags": [],
      "authors": [],
      "datatype": "any",
      "readable": true,
      "writable": true,
      "configuration": false,
      "private": false
    }
  },
  "methods": {
    "constructor": {
      "type": "method",
      "label": "constructor",
      "description": "Create a new range rule.\r\n  \r\n  An optional name for the rule. This can be useful when debugging data issues.\r\n  \r\n  Apply a custom scope to the validation functions (applicable to custom methods only).\r\n  \r\n  An enumeration of acceptable numeric ranges. For example, if\r\n  the value must be between 5-10 or from 25-50, the configuration\r\n  would look like:\r\n  \n  ```js\r\n  range: [\r\n    [5, 10],\r\n    ['25-50']\r\n  ]\r\n  ```\r\n  \n  To accept anything below a certain number or anything over a certain\r\n  number while also specifying one or more ranges, use a `null` value.\r\n  \n  For example:\r\n  \n  ```js\r\n  range: [\r\n    [null, 0],\r\n    [5, 10],\r\n    ['25-50'],\r\n    [100, null]\r\n  ]\r\n  ```\r\n  \n  The aforementioned example would accept a value less than `zero`,\r\n  between `5` and `10`, between `25` and `50`, or over `100`. Therefore,\r\n  acceptable values could be `-7`, `7`, `25`, `42`,  `10000`, or anything\r\n  else within the ranges. However, the values `3`, `19`, and `62` would\r\n  all fail because they're outside the ranges.",
      "code": "constructor (name, scope, range = []) {\r\n    if (NGN.typeof(scope) === 'array') {\r\n      range = scope\r\n      scope = null\r\n    }\r\n\r\n    super(null, name, scope)\r\n\r\n    this.RULE.prepareRange = function (value) {\r\n      // If a simple range is specified (single array), format it for the rule processor.\r\n      value = NGN.forceArray(value)\r\n\r\n      if (NGN.typeof(value[0]) !== 'array') {\r\n        value = [value]\r\n      }\r\n\r\n      for (let i = 0; i < value.length; i++) {\r\n        if (value[i].length !== 2) {\r\n          if (NGN.typeof(value[i][0]) !== 'string') {\r\n            throw new Error(`Invalid range: \"${value[i].toString()}\"`)\r\n          }\r\n\r\n          value[i] = value[i][0].replace(/[^0-9->]/gi, '').split(/->{1,100}/)\r\n        }\r\n\r\n        if (NGN.typeof(value[i][0]) !== 'number') {\r\n          value[i][0] = NGN.coalesce(value[i][0], '').replace(/null|none|any/gi, '')\r\n        }\r\n\r\n        if (NGN.typeof(value[i][1]) !== 'number') {\r\n          value[i][1] = NGN.coalesce(value[i][1], '').replace(/null|none|any/gi, '')\r\n        }\r\n      }\r\n\r\n      return value\r\n    }\r\n\r\n    // Initialize the range\r\n    this.RULE.range = new Set()\r\n    this.range = range\r\n\r\n    // Create the validation function.\r\n    this.RULE.validator = (value) => {\r\n      let isString = NGN.typeof(value) === 'string'\r\n      let range = this.range\r\n\r\n      for (let i = 0; i < range.length; i++) {\r\n        let min = NGN.coalesceb(range[i][0], isString ? value.length : value)\r\n        let max = NGN.coalesceb(range[i][1], isString ? value.length : value)\r\n\r\n        if (\r\n          (isString && value.length >= min && value.length <= max) ||\r\n          (!isString && value >= min && value <= max)\r\n        ) {\r\n          return true\r\n        }\r\n      }\r\n\r\n      return false\r\n    }\r\n  }",
      "tags": {},
      "exceptions": {},
      "start": {
        "line": 48,
        "column": 2
      },
      "end": {
        "line": 108,
        "column": 3
      },
      "flags": [],
      "authors": [],
      "arguments": {
        "name": {
          "type": "argument",
          "label": "name",
          "description": "An optional name for the rule. This can be useful when debugging data issues.",
          "code": "name",
          "start": {
            "line": 48,
            "column": 15
          },
          "end": {
            "line": 48,
            "column": 19
          },
          "flags": [],
          "authors": [],
          "default": null,
          "datatype": "string",
          "required": false,
          "enum": null
        },
        "scope": {
          "type": "argument",
          "label": "scope",
          "description": "Apply a custom scope to the validation functions .",
          "code": "scope",
          "start": {
            "line": 48,
            "column": 21
          },
          "end": {
            "line": 48,
            "column": 26
          },
          "flags": [],
          "authors": [],
          "default": "null",
          "datatype": "object",
          "required": false,
          "enum": [
            "applicable to custom methods only"
          ]
        },
        "range": {
          "type": "argument",
          "label": "range",
          "description": "An enumeration of acceptable numeric ranges. For example, if\nthe value must be between 5-10 or from 25-50, the configuration\nwould look like:\n\n```js\nrange: [\n[5, 10],\n['25-50']\n]\n```\n\nTo accept anything below a certain number or anything over a certain\nnumber while also specifying one or more ranges, use a `null` value.\n\nFor example:\n\n```js\nrange: [\n[null, 0],\n[5, 10],\n['25-50'],\n[100, null]\n]\n```\n\nThe aforementioned example would accept a value less than `zero`,\nbetween `5` and `10`, between `25` and `50`, or over `100`. Therefore,\nacceptable values could be `-7`, `7`, `25`, `42`,  `10000`, or anything\nelse within the ranges. However, the values `3`, `19`, and `62` would\nall fail because they're outside the ranges.",
          "code": "range = []",
          "start": {
            "line": 48,
            "column": 28
          },
          "end": {
            "line": 48,
            "column": 38
          },
          "flags": [],
          "authors": [],
          "default": null,
          "datatype": "array",
          "required": false,
          "enum": null
        }
      },
      "returnType": "void",
      "returnDescription": "void",
      "kind": "constructor",
      "generator": false,
      "static": false,
      "computed": false,
      "async": false,
      "super": null,
      "override": false,
      "private": false
    },
    "addRange": {
      "type": "method",
      "label": "addRange",
      "description": "Add a range to the rule.\r\n  \r\n  A range can be a single array, such as `[min, max]`. An array of arrays is\r\n  also acceptable, such as `[[min1, max1], [min2, max2]]`.",
      "code": "addRange (value) {\r\n    value = this.RULE.prepareRange(value)\r\n\r\n    for (let i = 0; i < value.length; i++) {\r\n      if (NGN.coalesceb(value[i][0]) !== null && NGN.coalesceb(value[i][1]) !== null && value[i][1] < value[i][0]) {\r\n        throw new Error(`Invalid value \"${value[i][0].toString()} -> ${value[i][1].toString()}\". Minimum value cannot exceed maximum.`)\r\n      }\r\n\r\n      this.RULE.range.add(value[i])\r\n    }\r\n  }",
      "tags": {},
      "exceptions": {},
      "start": {
        "line": 125,
        "column": 2
      },
      "end": {
        "line": 135,
        "column": 3
      },
      "flags": [],
      "authors": [],
      "arguments": {
        "value": {
          "type": "argument",
          "label": "value",
          "description": "A range can be a single array, such as `[min, max]`. An array of arrays is\nalso acceptable, such as `[[min1, max1], [min2, max2]]`.",
          "code": "value",
          "start": {
            "line": 125,
            "column": 12
          },
          "end": {
            "line": 125,
            "column": 17
          },
          "flags": [],
          "authors": [],
          "default": null,
          "datatype": "array",
          "required": true,
          "enum": null
        }
      },
      "returnType": "void",
      "returnDescription": "void",
      "kind": "method",
      "generator": false,
      "static": false,
      "computed": false,
      "async": false,
      "super": null,
      "override": false,
      "private": false
    },
    "removeRange": {
      "type": "method",
      "label": "removeRange",
      "description": "Remove an existing range from the rule.\r\n  \r\n  A range can be a single array, such as `[min, max]`. An array of arrays is\r\n  also acceptable, such as `[[min1, max1], [min2, max2]]`.",
      "code": "removeRange (value) {\r\n    let range = this.range\r\n    value = this.RULE.prepareRange(value)\r\n\r\n    for (let i = 0; i < value.length; i++) {\r\n      for (let x = 0; x < range.length; x++) {\r\n        if (value[i].toString() === range[x].toString()) {\r\n          this.RULE.range.delete(range[x])\r\n        }\r\n      }\r\n    }\r\n  }",
      "tags": {},
      "exceptions": {},
      "start": {
        "line": 143,
        "column": 2
      },
      "end": {
        "line": 154,
        "column": 3
      },
      "flags": [],
      "authors": [],
      "arguments": {
        "value": {
          "type": "argument",
          "label": "value",
          "description": "A range can be a single array, such as `[min, max]`. An array of arrays is\nalso acceptable, such as `[[min1, max1], [min2, max2]]`.",
          "code": "value",
          "start": {
            "line": 143,
            "column": 15
          },
          "end": {
            "line": 143,
            "column": 20
          },
          "flags": [],
          "authors": [],
          "default": null,
          "datatype": "array",
          "required": true,
          "enum": null
        }
      },
      "returnType": "void",
      "returnDescription": "void",
      "kind": "method",
      "generator": false,
      "static": false,
      "computed": false,
      "async": false,
      "super": null,
      "override": false,
      "private": false
    }
  }
}