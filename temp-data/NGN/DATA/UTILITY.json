{
  "type": "class",
  "label": "NGN.DATA.UTILITY",
  "description": "A utility library of functions relevant to data management.",
  "code": "class Utility { // eslint-disable-line\r\n  static diff () {\r\n    return ObjectDiff.compare(...arguments) // eslint-disable-line no-undef\r\n  }\r\n\r\n  /**\r\n   * @method checksum\r\n   * Create the checksum of the specified string.\r\n   * @param  {string} content\r\n   * The content to generate a checksum for.\r\n   * @return {string}\r\n   * Generates a checksum value.\r\n   */\r\n  static checksum (str) {\r\n    if (typeof str === 'object') {\r\n      str = JSON.stringify(this.serialize(str))\r\n    }\r\n\r\n    if (!crcTable) {\r\n      crcTable = makeCRCTable()\r\n    }\r\n\r\n    let crc = 0 ^ (-1)\r\n\r\n    for (let i = 0; i < str.length; i++) {\r\n      crc = (crc >>> 8) ^ crcTable[(crc ^ str.charCodeAt(i)) & 0xFF]\r\n    }\r\n\r\n    return (crc ^ (-1)) >>> 0\r\n  }\r\n\r\n  /**\r\n   * @method UUID\r\n   * Generate a universally unique identifier (v4).\r\n   *\r\n   * This is a \"fast\" UUID generator, designed to work in the browser.\r\n   * This will generate a UUID in less than 20ms on Chrome, as of Nov 6, 2017.\r\n   * Code courtesy of @broofa on StackOverflow.\r\n   *\r\n   * While this method cannot absolutely guarantee there will be no collisions\r\n   * (duplicates), the chances are 1:5.3x10^^36 (1 in over 100 quadrillion).\r\n   * You are over 30 _octillion_ times more likely to win the Powerball than to\r\n   * generate two identical \"random\" UUIDs using the version 4 scheme.\r\n   * @return {string}\r\n   * Returns a [V4 GUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_.28random.29).\r\n   */\r\n  static UUID () {\r\n    /* node-only */\r\n    return this.GUID()\r\n    /* end-node-only */\r\n    /* browser-only */\r\n    return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c => // eslint-disable-line\r\n      (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16) // eslint-disable-line\r\n    )\r\n    /* end-browser-only */\r\n  }\r\n\r\n  /**\r\n   * @method GUID\r\n   * Generate a globally unique identifier. A GUID is the Microsoft\r\n   * implementation of a UUIDv4.\r\n   *\r\n   * The likelihood of an ID collision, according to the original author (Jeff\r\n   * Ward) is 1:3.26x10^15 (1 in 3.26 quadrillion). Results are generated between\r\n   * approximately 105ms (Desktop) and 726ms (Android) as of May 2016.\r\n   * @return {string} [description]\r\n   */\r\n  static GUID () {\r\n    let lut = []\r\n\r\n    for (let i = 0; i < 256; i++) {\r\n      lut[i] = (i < 16 ? '0' : '') + (i).toString(16)\r\n    }\r\n\r\n    const d0 = Math.random() * 0xffffffff | 0\r\n    const d1 = Math.random() * 0xffffffff | 0\r\n    const d2 = Math.random() * 0xffffffff | 0\r\n    const d3 = Math.random() * 0xffffffff | 0\r\n\r\n    return lut[d0 & 0xff] + lut[d0 >> 8 & 0xff] + lut[d0 >> 16 & 0xff] + lut[d0 >> 24 & 0xff] +\r\n      '-' + lut[d1 & 0xff] + lut[d1 >> 8 & 0xff] + '-' + lut[d1 >> 16 & 0x0f | 0x40] +\r\n      lut[d1 >> 24 & 0xff] + '-' + lut[d2 & 0x3f | 0x80] + lut[d2 >> 8 & 0xff] + '-' +\r\n      lut[d2 >> 16 & 0xff] + lut[d2 >> 24 & 0xff] + lut[d3 & 0xff] + lut[d3 >> 8 & 0xff] +\r\n      lut[d3 >> 16 & 0xff] + lut[d3 >> 24 & 0xff]\r\n  }\r\n\r\n  /**\r\n   * @method serialize\r\n   * Creates a JSON data object with no functions. Only uses enumerable\r\n   * attributes of the object.\r\n   *\r\n   * Functions & Setters are always ignored. Getters are evaluated recursively\r\n   * until a simple object type is found or there are no further nested\r\n   * attributes.\r\n   * @param {object|array} object\r\n   * Supports an object or array.\r\n   */\r\n  static serialize (data) {\r\n    if (typeof data !== 'object') {\r\n      throw new Error(`Cannot serialize ${NGN.typeof(data)} value. Must be an object.`)\r\n    }\r\n\r\n    // Force an object for parsing\r\n    let SERIALIZED_ARRAY_DATA = Symbol('array.data')\r\n\r\n    if (NGN.typeof(data) === 'array') {\r\n      data = {\r\n        [SERIALIZED_ARRAY_DATA]: data\r\n      }\r\n    }\r\n\r\n    let result = {}\r\n    let attribute = Object.keys(data)\r\n\r\n    for (let i = 0; i < attribute.length; i++) {\r\n      if (data[attribute[i]] !== undefined) {\r\n        switch (NGN.typeof(data[attribute[i]])) {\r\n          case 'object':\r\n            Object.defineProperty(\r\n              result,\r\n              attribute[i],\r\n              NGN.public(NGN.DATA.UTIL.serialize(data[attribute[i]]))\r\n            )\r\n\r\n            break\r\n\r\n          case 'array':\r\n            result[attribute[i]] = []\r\n\r\n            for (let a = 0; a < data[attribute[i]].length; a++) {\r\n              result[attribute[i]].push(NGN.DATA.UTIL.serialize(data[attribute[i]]))\r\n            }\r\n\r\n            break\r\n\r\n          case 'date':\r\n            Object.defineProperty(result, attribute[i], NGN.public(data[attribute[i]].toISOString()))\r\n\r\n            break\r\n\r\n          case 'symbol':\r\n            if (SERIALIZED_ARRAY_DATA !== attribute[i]) {\r\n              result[attribute[i]] = data[attribute[i]].toString()\r\n            }\r\n\r\n            break\r\n\r\n          case 'regexp':\r\n            Object.defineProperty(result, attribute[i], NGN.public(data[attribute[i]].toString()))\r\n\r\n            break\r\n\r\n          case 'weakmap':\r\n          case 'map':\r\n            let mapResult = {}\r\n\r\n            data[attribute[i]].forEach((value, key) => {\r\n              mapResult[key.toString()] = this.serialize(value)\r\n            })\r\n\r\n            result[attribute[i]] = mapResult\r\n\r\n            break\r\n\r\n          case 'weakset':\r\n          case 'set':\r\n            if (data[attribute[i]].size === 0) {\r\n              result[attribute[i]] = []\r\n              break\r\n            }\r\n\r\n            result[attribute[i]] = this.serialize(Array.from(data[attribute[i]].values()))\r\n\r\n            break\r\n\r\n          case 'function':\r\n            break\r\n\r\n          default:\r\n            result[attribute[i]] = data[attribute[i]]\r\n        }\r\n      }\r\n    }\r\n\r\n    return result[SERIALIZED_ARRAY_DATA] !== undefined ? result[SERIALIZED_ARRAY_DATA] : result\r\n  }\r\n\r\n  /**\r\n   * @method isModel\r\n   * Determines whether an object is an instance of NGN.DATA.Model.\r\n   * @param {function} PossibleModel\r\n   * The class or function to be checked.\r\n   * @returns {boolean}\r\n   */\r\n   static isDataModel (Model) {\r\n     if (Model instanceof NGN.DATA.Model || NGN.typeof(Model) === 'model') {\r\n       return true\r\n     }\r\n\r\n     if (Model.hasOwnProperty('prototype') && Model.prototype !== null) {\r\n       let currentElement = Model;\r\n       let count = 0;\r\n\r\n       while (currentElement.prototype !== null && count < 30) {\r\n         count++;\r\n\r\n         currentElement = currentElement.prototype;\r\n\r\n         if (currentElement instanceof NGN.DATA.Model || NGN.typeof(currentElement) === 'model') {\r\n           return true\r\n         }\r\n       }\r\n     }\r\n\r\n     return Model instanceof NGN.DATA.Entity\r\n   }\r\n\r\n  // /**\r\n  //  * @method objectByteSize\r\n  //  * Calculates the _estimated_ size (in bytes) of primitive key/value objects,\r\n  //  * meaning those that do not contain functions, accessors (getters/setters),\r\n  //  * or other attributes other than `String`, `Number`, or `Boolean` values.\r\n  //  * NGN treats dates as `String` values.\r\n  //  *\r\n  //  * JavaScript engines differ in how they manage memory, but most do not\r\n  //  * calculate the size of functions. If a value of type `function` is found in\r\n  //  * the object, NGN will calculate the size of it's `String` representation.\r\n  //  * This is a weak measure of function size since most JavaScript engines\r\n  //  * do not expose enough realtime heap data to know calculate with accuracy at\r\n  //  * any given point in time.\r\n  //  *\r\n  //  * This method attempts to implement similar principles to C's `sizeOf` method.\r\n  //  *\r\n  //  * Consider this method to provide a **best guess based on the available data**.\r\n  //  *\r\n  //  * @param {Object} object\r\n  //  * The primitive key/value object upon which the bytesize estimation will be made.\r\n  //  * @param {Boolean} [ignoreFunctionEstimate=false]\r\n  //  * By default, NGN will calculate the `String` representation of any functions\r\n  //  * it encounters in the key/value object. Setting this to `true` will prevent\r\n  //  * this behavior, effectively using a `0` to calculate function size.\r\n  //  */\r\n  // static objectByteSize (obj, ignore=false) {\r\n  //   switch (typeof obj) {\r\n  //     case null:\r\n  //       return 4\r\n  //\r\n  //     case 'string':\r\n  //       return obj.length * 2\r\n  //\r\n  //     case 'boolean':\r\n  //       return 4\r\n  //\r\n  //     case 'number':\r\n  //       return 8\r\n  //\r\n  //     case 'function':\r\n  //       if (!ignore) {\r\n  //         return obj.toString().length * 2\r\n  //       }\r\n  //\r\n  //       return 0\r\n  //   }\r\n  //\r\n  //   let list = []\r\n  //   let stack = [obj]\r\n  //   let bytes = 0\r\n  //\r\n  //   while (stack.length) {\r\n  //     let value = stack.pop()\r\n  //\r\n  //     if (typeof value === 'object') {\r\n  //       if (list.indexOf(value) < 0) {\r\n  //         list.push(value)\r\n  //\r\n  //         // If the object is not an array, add key sizes\r\n  //         const isArray = !Array.isArray(value)\r\n  //\r\n  //         for (let key in value) {\r\n  //           if (!isArray) {\r\n  //             bytes += (2 * key.length) + NGN.DATA.util(value[key])\r\n  //             stack.push(value[key])\r\n  //           } else {\r\n  //\r\n  //           }\r\n  //         }\r\n  //       }\r\n  //     } else {\r\n  //       bytes += NGN.DATA.UTILITY.objectByteSize(value)\r\n  //     }\r\n  //   }\r\n  //\r\n  //   return bytes\r\n  // }\r\n}",
  "tags": {},
  "exceptions": {},
  "events": {},
  "start": {
    "line": 33,
    "column": 15
  },
  "end": {
    "line": 327,
    "column": 1
  },
  "flags": [],
  "authors": [],
  "sourcefile": "data/Utility.js",
  "extends": null,
  "configuration": {},
  "properties": {},
  "methods": {
    "diff": {
      "type": "method",
      "label": "diff",
      "description": null,
      "code": "static diff () {\r\n    return ObjectDiff.compare(...arguments) // eslint-disable-line no-undef\r\n  }",
      "tags": {},
      "exceptions": {},
      "start": {
        "line": 34,
        "column": 2
      },
      "end": {
        "line": 36,
        "column": 3
      },
      "flags": [],
      "authors": [],
      "arguments": {},
      "returnType": "void",
      "returnDescription": "void",
      "kind": "method",
      "generator": false,
      "static": true,
      "computed": false,
      "async": false,
      "super": null,
      "override": false,
      "private": false
    },
    "checksum": {
      "type": "method",
      "label": "checksum",
      "description": "Create the checksum of the specified string.",
      "code": "static checksum (str) {\r\n    if (typeof str === 'object') {\r\n      str = JSON.stringify(this.serialize(str))\r\n    }\r\n\r\n    if (!crcTable) {\r\n      crcTable = makeCRCTable()\r\n    }\r\n\r\n    let crc = 0 ^ (-1)\r\n\r\n    for (let i = 0; i < str.length; i++) {\r\n      crc = (crc >>> 8) ^ crcTable[(crc ^ str.charCodeAt(i)) & 0xFF]\r\n    }\r\n\r\n    return (crc ^ (-1)) >>> 0\r\n  }",
      "tags": {},
      "exceptions": {},
      "start": {
        "line": 46,
        "column": 2
      },
      "end": {
        "line": 62,
        "column": 3
      },
      "flags": [],
      "authors": [],
      "arguments": {
        "str": {
          "type": "argument",
          "label": "content",
          "description": "The content to generate a checksum for.",
          "code": "str",
          "start": {
            "line": 46,
            "column": 19
          },
          "end": {
            "line": 46,
            "column": 22
          },
          "flags": [],
          "authors": [],
          "default": null,
          "datatype": "string",
          "required": true,
          "enum": null
        },
        "content": {
          "type": "argument",
          "label": "content",
          "description": "The content to generate a checksum for.",
          "code": "str",
          "start": {
            "line": 46,
            "column": 19
          },
          "end": {
            "line": 46,
            "column": 22
          },
          "flags": [],
          "authors": [],
          "default": null,
          "datatype": "string",
          "required": true,
          "enum": null
        }
      },
      "returnType": "string",
      "returnDescription": "null Generates a checksum value.",
      "kind": "method",
      "generator": false,
      "static": true,
      "computed": false,
      "async": false,
      "super": null,
      "override": false,
      "private": false
    },
    "UUID": {
      "type": "method",
      "label": "UUID",
      "description": "Generate a universally unique identifier .\n\nThis is a \"fast\" UUID generator, designed to work in the browser.\nThis will generate a UUID in less than 20ms on Chrome, as of Nov 6, 2017.\nCode courtesy of @broofa on StackOverflow.\n\nWhile this method cannot absolutely guarantee there will be no collisions\n(duplicates), the chances are 1:5.3x10^^36 (1 in over 100 quadrillion).\nYou are over 30 _octillion_ times more likely to win the Powerball than to\ngenerate two identical \"random\" UUIDs using the version 4 scheme.",
      "code": "static UUID () {\r\n    /* node-only */\r\n    return this.GUID()\r\n    /* end-node-only */\r\n    /* browser-only */\r\n    return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c => // eslint-disable-line\r\n      (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16) // eslint-disable-line\r\n    )\r\n    /* end-browser-only */\r\n  }",
      "tags": {},
      "exceptions": {},
      "start": {
        "line": 79,
        "column": 2
      },
      "end": {
        "line": 88,
        "column": 3
      },
      "flags": [],
      "authors": [],
      "arguments": {},
      "returnType": "string",
      "returnDescription": "null Returns a [V4 GUID].",
      "kind": "method",
      "generator": false,
      "static": true,
      "computed": false,
      "async": false,
      "super": null,
      "override": false,
      "private": false
    },
    "GUID": {
      "type": "method",
      "label": "GUID",
      "description": "Generate a globally unique identifier. A GUID is the Microsoft\nimplementation of a UUIDv4.\n\nThe likelihood of an ID collision, according to the original author (Jeff\nWard) is 1:3.26x10^15 . Results are generated between\napproximately 105ms (Desktop) and 726ms (Android) as of May 2016.",
      "code": "static GUID () {\r\n    let lut = []\r\n\r\n    for (let i = 0; i < 256; i++) {\r\n      lut[i] = (i < 16 ? '0' : '') + (i).toString(16)\r\n    }\r\n\r\n    const d0 = Math.random() * 0xffffffff | 0\r\n    const d1 = Math.random() * 0xffffffff | 0\r\n    const d2 = Math.random() * 0xffffffff | 0\r\n    const d3 = Math.random() * 0xffffffff | 0\r\n\r\n    return lut[d0 & 0xff] + lut[d0 >> 8 & 0xff] + lut[d0 >> 16 & 0xff] + lut[d0 >> 24 & 0xff] +\r\n      '-' + lut[d1 & 0xff] + lut[d1 >> 8 & 0xff] + '-' + lut[d1 >> 16 & 0x0f | 0x40] +\r\n      lut[d1 >> 24 & 0xff] + '-' + lut[d2 & 0x3f | 0x80] + lut[d2 >> 8 & 0xff] + '-' +\r\n      lut[d2 >> 16 & 0xff] + lut[d2 >> 24 & 0xff] + lut[d3 & 0xff] + lut[d3 >> 8 & 0xff] +\r\n      lut[d3 >> 16 & 0xff] + lut[d3 >> 24 & 0xff]\r\n  }",
      "tags": {},
      "exceptions": {},
      "start": {
        "line": 100,
        "column": 2
      },
      "end": {
        "line": 117,
        "column": 3
      },
      "flags": [],
      "authors": [],
      "arguments": {},
      "returnType": "string",
      "returnDescription": "description",
      "kind": "method",
      "generator": false,
      "static": true,
      "computed": false,
      "async": false,
      "super": null,
      "override": false,
      "private": false
    },
    "serialize": {
      "type": "method",
      "label": "serialize",
      "description": "Creates a JSON data object with no functions. Only uses enumerable\nattributes of the object.\n\nFunctions & Setters are always ignored. Getters are evaluated recursively\nuntil a simple object type is found or there are no further nested\nattributes.",
      "code": "static serialize (data) {\r\n    if (typeof data !== 'object') {\r\n      throw new Error(`Cannot serialize ${NGN.typeof(data)} value. Must be an object.`)\r\n    }\r\n\r\n    // Force an object for parsing\r\n    let SERIALIZED_ARRAY_DATA = Symbol('array.data')\r\n\r\n    if (NGN.typeof(data) === 'array') {\r\n      data = {\r\n        [SERIALIZED_ARRAY_DATA]: data\r\n      }\r\n    }\r\n\r\n    let result = {}\r\n    let attribute = Object.keys(data)\r\n\r\n    for (let i = 0; i < attribute.length; i++) {\r\n      if (data[attribute[i]] !== undefined) {\r\n        switch (NGN.typeof(data[attribute[i]])) {\r\n          case 'object':\r\n            Object.defineProperty(\r\n              result,\r\n              attribute[i],\r\n              NGN.public(NGN.DATA.UTIL.serialize(data[attribute[i]]))\r\n            )\r\n\r\n            break\r\n\r\n          case 'array':\r\n            result[attribute[i]] = []\r\n\r\n            for (let a = 0; a < data[attribute[i]].length; a++) {\r\n              result[attribute[i]].push(NGN.DATA.UTIL.serialize(data[attribute[i]]))\r\n            }\r\n\r\n            break\r\n\r\n          case 'date':\r\n            Object.defineProperty(result, attribute[i], NGN.public(data[attribute[i]].toISOString()))\r\n\r\n            break\r\n\r\n          case 'symbol':\r\n            if (SERIALIZED_ARRAY_DATA !== attribute[i]) {\r\n              result[attribute[i]] = data[attribute[i]].toString()\r\n            }\r\n\r\n            break\r\n\r\n          case 'regexp':\r\n            Object.defineProperty(result, attribute[i], NGN.public(data[attribute[i]].toString()))\r\n\r\n            break\r\n\r\n          case 'weakmap':\r\n          case 'map':\r\n            let mapResult = {}\r\n\r\n            data[attribute[i]].forEach((value, key) => {\r\n              mapResult[key.toString()] = this.serialize(value)\r\n            })\r\n\r\n            result[attribute[i]] = mapResult\r\n\r\n            break\r\n\r\n          case 'weakset':\r\n          case 'set':\r\n            if (data[attribute[i]].size === 0) {\r\n              result[attribute[i]] = []\r\n              break\r\n            }\r\n\r\n            result[attribute[i]] = this.serialize(Array.from(data[attribute[i]].values()))\r\n\r\n            break\r\n\r\n          case 'function':\r\n            break\r\n\r\n          default:\r\n            result[attribute[i]] = data[attribute[i]]\r\n        }\r\n      }\r\n    }\r\n\r\n    return result[SERIALIZED_ARRAY_DATA] !== undefined ? result[SERIALIZED_ARRAY_DATA] : result\r\n  }",
      "tags": {},
      "exceptions": {},
      "start": {
        "line": 130,
        "column": 2
      },
      "end": {
        "line": 218,
        "column": 3
      },
      "flags": [],
      "authors": [],
      "arguments": {
        "data": {
          "type": "argument",
          "label": "object",
          "description": "Supports an object or array.",
          "code": "data",
          "start": {
            "line": 130,
            "column": 20
          },
          "end": {
            "line": 130,
            "column": 24
          },
          "flags": [],
          "authors": [],
          "default": null,
          "datatype": "object|array",
          "required": true,
          "enum": null
        },
        "object": {
          "type": "argument",
          "label": "object",
          "description": "Supports an object or array.",
          "code": "data",
          "start": {
            "line": 130,
            "column": 20
          },
          "end": {
            "line": 130,
            "column": 24
          },
          "flags": [],
          "authors": [],
          "default": null,
          "datatype": "object|array",
          "required": true,
          "enum": null
        }
      },
      "returnType": "void",
      "returnDescription": "void",
      "kind": "method",
      "generator": false,
      "static": true,
      "computed": false,
      "async": false,
      "super": null,
      "override": false,
      "private": false
    },
    "isDataModel": {
      "type": "method",
      "label": "isDataModel",
      "description": "Determines whether an object is an instance of NGN.DATA.Model.",
      "code": "static isDataModel (Model) {\r\n     if (Model instanceof NGN.DATA.Model || NGN.typeof(Model) === 'model') {\r\n       return true\r\n     }\r\n\r\n     if (Model.hasOwnProperty('prototype') && Model.prototype !== null) {\r\n       let currentElement = Model;\r\n       let count = 0;\r\n\r\n       while (currentElement.prototype !== null && count < 30) {\r\n         count++;\r\n\r\n         currentElement = currentElement.prototype;\r\n\r\n         if (currentElement instanceof NGN.DATA.Model || NGN.typeof(currentElement) === 'model') {\r\n           return true\r\n         }\r\n       }\r\n     }\r\n\r\n     return Model instanceof NGN.DATA.Entity\r\n   }",
      "tags": {},
      "exceptions": {},
      "start": {
        "line": 227,
        "column": 3
      },
      "end": {
        "line": 248,
        "column": 4
      },
      "flags": [],
      "authors": [],
      "arguments": {
        "PossibleModel": {
          "type": "method",
          "label": "PossibleModel",
          "description": "The class or function to be checked.",
          "code": "@param {function} PossibleModel\nThe class or function to be checked.",
          "start": {
            "line": 227,
            "column": 3
          },
          "end": {
            "line": 248,
            "column": 4
          },
          "flags": [],
          "authors": [],
          "arguments": {},
          "returnType": "void",
          "returnDescription": "void",
          "kind": null,
          "generator": false,
          "static": false,
          "computed": false,
          "async": false,
          "super": null,
          "override": false,
          "private": false
        }
      },
      "returnType": "boolean",
      "returnDescription": "",
      "kind": "method",
      "generator": false,
      "static": true,
      "computed": false,
      "async": false,
      "super": null,
      "override": false,
      "private": false
    }
  }
}